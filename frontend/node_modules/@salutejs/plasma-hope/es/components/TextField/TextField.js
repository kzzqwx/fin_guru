var _excluded = ["onSearch", "onChange"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useCallback } from 'react';
import { TextFieldWeb } from './views/web/TextFieldWeb';
import { TextFieldB2C } from './views/b2c/TextFieldB2C';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('TextField/TextField');
var componentMap = {
  web: TextFieldWeb,
  b2c: TextFieldB2C
};
export var TextField = function TextField(_ref) {
  var design = _ref.design;
  var TextFieldView = componentMap[design];
  return /*#__PURE__*/forwardRef(function (_ref2, innerRef) {
    var onSearch = _ref2.onSearch,
      onChange = _ref2.onChange,
      rest = _objectWithoutProperties(_ref2, _excluded);
    var handleChange = useCallback(function (event) {
      var _event$target = event.target,
        maxLength = _event$target.maxLength,
        value = _event$target.value;
      if (!onChange || maxLength !== -1 && value.length > maxLength) {
        return;
      }
      onChange(event);
    }, [onChange]);
    var handleKeyUp = useCallback(function (event) {
      if (event.keyCode === 13 && onSearch) {
        onSearch(event.target.value, event);
      }
    }, [onSearch]);
    return /*#__PURE__*/React.createElement(TextFieldView, _extends({
      ref: innerRef,
      onChange: handleChange,
      onKeyUp: handleKeyUp
    }, rest));
  });
};
var _excluded = ["id", "size", "disabled", "status", "label", "animatedHint", "contentLeft", "contentRight", "helperText", "className", "style"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { Field } from './Field';
import { Input } from './Input';

// eslint-disable-next-line prefer-arrow-callback
export var TextFieldWeb = /*#__PURE__*/forwardRef(function TextField(_ref, ref) {
  var id = _ref.id,
    size = _ref.size,
    disabled = _ref.disabled,
    status = _ref.status,
    label = _ref.label,
    animatedHint = _ref.animatedHint,
    contentLeft = _ref.contentLeft,
    contentRight = _ref.contentRight,
    helperText = _ref.helperText,
    className = _ref.className,
    style = _ref.style,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Field, {
    id: id,
    disabled: disabled,
    label: animatedHint !== 'label' ? label : undefined,
    helperText: helperText,
    contentLeft: contentLeft,
    contentRight: contentRight,
    status: status,
    className: className,
    style: style
  }, /*#__PURE__*/React.createElement(Input, _extends({}, rest, {
    ref: ref,
    id: id,
    disabled: disabled,
    size: size,
    status: status,
    label: label,
    animatedHint: animatedHint,
    hasContentLeft: Boolean(contentLeft),
    hasContentRight: Boolean(contentRight),
    "aria-labelledby": id ? "".concat(id, "-label") : undefined,
    "aria-describedby": id ? "".concat(id, "-helpertext") : undefined
  })));
});
var _excluded = ["items", "index", "visibleItems", "onIndexChange"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import { usePaginationDots } from '@salutejs/plasma-core';
import { PaginationDots } from './PaginationDots';
import { PaginationDot } from './PaginationDot';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('PaginationDots/SmartPaginationDots');
/**
 * Компонент для отображения точек пагинации
 * с возможностью ограничения количества видимых элементов.
 */
export var SmartPaginationDots = function SmartPaginationDots(_ref) {
  var items = _ref.items,
    index = _ref.index,
    visibleItems = _ref.visibleItems,
    onIndexChange = _ref.onIndexChange,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _usePaginationDots = usePaginationDots({
      items: items,
      index: index,
      visibleItems: visibleItems
    }),
    sliced = _usePaginationDots.sliced,
    activeId = _usePaginationDots.activeId;
  return /*#__PURE__*/React.createElement(PaginationDots, rest, sliced.map(function (_ref2, i) {
    var id = _ref2.id;
    return /*#__PURE__*/React.createElement(PaginationDot, {
      key: "item:".concat(i),
      isActive: id === activeId,
      onClick: function onClick() {
        return onIndexChange === null || onIndexChange === void 0 ? void 0 : onIndexChange(i);
      }
    });
  }));
};
var _excluded = ["children", "minColWidth", "gapX", "gapY"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useLayoutEffect, useRef, useState } from 'react';
import styled from 'styled-components';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('ElasticGrid/ElasticGrid');
var StyledContainer = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web-core__sc-1pc48un-0"
})(["max-width:100%;display:flex;flex-wrap:wrap;"]);
var StyledItem = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web-core__sc-1pc48un-1"
})(["margin-bottom:", "px;"], function (_ref) {
  var $gapY = _ref.$gapY;
  return $gapY;
});
/**
 * Компонент с резиновой сеткой
 */
export var ElasticGrid = function ElasticGrid(_ref2) {
  var children = _ref2.children,
    minColWidth = _ref2.minColWidth,
    _ref2$gapX = _ref2.gapX,
    gapX = _ref2$gapX === void 0 ? 0 : _ref2$gapX,
    _ref2$gapY = _ref2.gapY,
    gapY = _ref2$gapY === void 0 ? 0 : _ref2$gapY,
    props = _objectWithoutProperties(_ref2, _excluded);
  var containerRef = useRef(null);
  var _useState = useState({
      width: "".concat(minColWidth, "px"),
      cols: 1
    }),
    _useState2 = _slicedToArray(_useState, 2),
    itemProps = _useState2[0],
    setItemProps = _useState2[1];
  var getItemStyle = function getItemStyle(column) {
    return {
      width: itemProps.width,
      marginRight: (column + 1) % itemProps.cols === 0 ? '0' : "".concat(gapX, "px")
    };
  };
  useLayoutEffect(function () {
    var currentRef = containerRef.current;

    /* istanbul ignore if: убираем проверку на рефы из покрытия */
    if (!currentRef) {
      return;
    }
    var resizeObserver = new window.ResizeObserver(function () {
      var _currentRef$getBoundi = currentRef.getBoundingClientRect(),
        width = _currentRef$getBoundi.width;
      var cols = Math.trunc(width / minColWidth);
      var scale = width / minColWidth / cols;
      var offsetSize = gapX * (cols - 1) / cols;
      setItemProps({
        width: "".concat(minColWidth * scale - offsetSize, "px"),
        cols: cols
      });
    });
    resizeObserver.observe(currentRef);
    return function () {
      resizeObserver.unobserve(currentRef);
    };
  }, [minColWidth, gapX]);
  return /*#__PURE__*/React.createElement(StyledContainer, _extends({}, props, {
    ref: containerRef
  }), React.Children.map(children, function (child, i) {
    return /*#__PURE__*/React.createElement(StyledItem, {
      $gapY: gapY,
      style: getItemStyle(i)
    }, child);
  }));
};
var _excluded = ["id", "placeholder", "value", "helperText", "disabled", "status", "className", "style", "items", "multiselect", "onItemSelect"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { TextFieldRoot, TextFieldHelper } from '@salutejs/plasma-core';
import { SelectButton as BaseButton } from '../../SelectButton';
import { SelectDropdown as BaseDropdown } from '../../SelectDropdown';
import { withAssistiveDropdown } from '../../../Dropdown';
import { SelectGroup } from '../../SelectGroup';
var SelectButton = /*#__PURE__*/styled(BaseButton).attrs({
  design: 'b2c'
}).withConfig({
  componentId: "plasma-web-core__sc-samcez-0"
})([""]);
var StyledRoot = /*#__PURE__*/styled(TextFieldRoot).withConfig({
  componentId: "plasma-web-core__sc-samcez-1"
})(["", " &:not(:last-child){margin-right:0.125rem;}", " &:not(:first-child) ", "{border-top-left-radius:0;border-bottom-left-radius:0;}", " &:not(:last-child) ", "{border-top-right-radius:0;border-bottom-right-radius:0;}"], SelectGroup, SelectGroup, SelectButton, SelectGroup, SelectButton);
var SelectDropdown = /*#__PURE__*/styled(BaseDropdown).attrs({
  design: 'b2c'
}).withConfig({
  componentId: "plasma-web-core__sc-samcez-2"
})([""]);
var DropdownButton = /*#__PURE__*/withAssistiveDropdown(SelectButton, SelectDropdown);

/**
 * Поле с выпадающим списком.
 */
export var SelectView = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var id = _ref.id,
    placeholder = _ref.placeholder,
    value = _ref.value,
    helperText = _ref.helperText,
    disabled = _ref.disabled,
    status = _ref.status,
    className = _ref.className,
    style = _ref.style,
    items = _ref.items,
    multiselect = _ref.multiselect,
    onItemSelect = _ref.onItemSelect,
    rest = _objectWithoutProperties(_ref, _excluded);
  var hasItems = Array.isArray(items) && items.length > 0;
  return /*#__PURE__*/React.createElement(StyledRoot, {
    $size: "m",
    $disabled: disabled,
    $isContentRight: hasItems,
    $isHelper: Boolean(helperText),
    status: status,
    className: className,
    style: style
  }, /*#__PURE__*/React.createElement(DropdownButton, _extends({}, rest, {
    ref: ref,
    id: id ? "".concat(id, "-dropdown") : id,
    role: "combobox",
    menuRole: "listbox",
    menuItemRole: "option",
    value: value,
    placeholder: placeholder,
    hasItems: hasItems,
    status: status,
    items: items,
    disabled: disabled,
    closeOnSelect: !multiselect,
    onItemSelect: onItemSelect
  })), helperText && /*#__PURE__*/React.createElement(TextFieldHelper, null, helperText));
});
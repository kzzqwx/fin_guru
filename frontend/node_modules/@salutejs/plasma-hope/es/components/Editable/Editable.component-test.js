var _IconEdit, _IconEdit2;
import React from 'react';
import { mount, CypressTestDecorator, getComponent } from '@salutejs/plasma-cy-utils';
import { Headline1 } from '@salutejs/plasma-core';
import { IconEdit } from '@salutejs/plasma-icons';
var paste = function paste(selector, text) {
  // https://github.com/cypress-io/cypress/issues/2386#issuecomment-613374266
  cy.get(selector).first().then(function ($destination) {
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event
    var pasteEvent = Object.assign(new Event('paste', {
      bubbles: true,
      cancelable: true
    }), {
      clipboardData: {
        getData: function getData() {
          return text;
        }
      }
    });
    $destination[0].dispatchEvent(pasteEvent);
  });
};
var noop = function noop() {};
describe('plasma-hope: Editable', function () {
  var _CypressTestDecorator, _CypressTestDecorator2, _CypressTestDecorator3, _CypressTestDecorator4, _CypressTestDecorator5;
  var Editable = getComponent('Editable');
  it('simple', function () {
    mount(_CypressTestDecorator || (_CypressTestDecorator = /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Editable, {
      value: "\u041F\u0440\u0438\u043C\u0435\u0440 \u0442\u0435\u043A\u0441\u0442\u0430",
      textComponent: Headline1
    }))));
    cy.matchImageSnapshot();
  });
  it('empty', function () {
    mount(_CypressTestDecorator2 || (_CypressTestDecorator2 = /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Editable, {
      textComponent: Headline1,
      icon: _IconEdit || (_IconEdit = /*#__PURE__*/React.createElement(IconEdit, {
        size: "s",
        color: "inherit"
      }))
    }))));
    cy.matchImageSnapshot();
  });
  it('onChange', function () {
    mount(_CypressTestDecorator3 || (_CypressTestDecorator3 = /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Editable, {
      value: "onChange",
      onChange: noop,
      maxLength: 5,
      textComponent: Headline1
    }))));
    cy.get('span > div').first().type('Hello');
    cy.get('span > div').first().type('Hello world');
    cy.matchImageSnapshot();
  });
  it('onBlur and onFocus', function () {
    mount(_CypressTestDecorator4 || (_CypressTestDecorator4 = /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Editable, {
      value: "onBlur and onFocus",
      onBlur: noop,
      icon: _IconEdit2 || (_IconEdit2 = /*#__PURE__*/React.createElement(IconEdit, {
        size: "s",
        color: "inherit"
      })),
      textComponent: Headline1
    }))));
    cy.get('span > span').click();
    cy.get('span > div').first().blur();

    // для случаев, если не поддерживаются современные интерфейсы window
    cy.window().then(function (win) {
      // NOTE: https://github.com/salute-developers/plasma/issues/384
      // callsFake не работает с данным методом
      // cy.stub(win, 'getSelection', undefined);

      // для браузеров IE < 9 при использовании компонента
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      win.document.selection = {
        empty: noop
      };
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      win.document.body.createTextRange = function () {
        return {
          moveToElementText: noop,
          select: noop
        };
      };
    });
    cy.get('span > div').first().focus();
    cy.get('span > div').first().trigger('keydown', {
      keyCode: 13
    });
    cy.matchImageSnapshot();
  });
  it('onPaste', function () {
    mount(_CypressTestDecorator5 || (_CypressTestDecorator5 = /*#__PURE__*/React.createElement(CypressTestDecorator, null, /*#__PURE__*/React.createElement(Editable, {
      value: "onPaste",
      onPaste: noop,
      textComponent: Headline1
    }))));
    paste('span > div', 'Hello from paste');

    // для случаев, если не поддерживаются современные интерфейсы window
    cy.window().then(function (win) {
      cy.stub(win.document, 'queryCommandSupported').callsFake(function () {
        return false;
      });
      cy.stub(navigator.clipboard, 'writeText').callsFake(undefined);
      paste('span > div', 'Hello from paste');
    });
    cy.matchImageSnapshot();
  });
});
var _excluded = ["id", "text", "isVisible", "arrow", "animated", "placement", "children", "onDismiss"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useState, useEffect, forwardRef, useRef } from 'react';
import styled, { css } from 'styled-components';
import { caption, dark02, shadows, useForkRef, white } from '@salutejs/plasma-core';
import { usePopper } from 'react-popper';

/** Направление раскрытия тултипа */
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Tooltip/Tooltip');
var ESCAPE_KEYCODE = 27;
var offset = [0, 6];
var StyledWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web-core__sc-je7ylk-0"
})(["position:relative;display:inline-flex;"]);
var StyledArrow = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web-core__sc-je7ylk-1"
})(["visibility:hidden;&,&::before{position:absolute;width:0.5rem;height:0.5rem;background:inherit;}&::before{visibility:visible;content:'';transform:rotate(45deg);}"]);
var StyledTooltip = /*#__PURE__*/styled.span.withConfig({
  componentId: "plasma-web-core__sc-je7ylk-2"
})(["", ";position:absolute;z-index:9200;padding:0.375rem 0.5rem;background-color:", ";border-radius:0.25rem;box-shadow:", ";color:", ";max-width:15rem;width:max-content;word-break:break-word;pointer-events:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;&[data-popper-placement^='top'] > ", "{bottom:-0.25rem;}&[data-popper-placement^='bottom'] > ", "{top:-0.25rem;}&[data-popper-placement^='left'] > ", "{right:-0.25rem;}&[data-popper-placement^='right'] > ", "{left:-0.25rem;}", " ", ""], caption, dark02, shadows.small, white, StyledArrow, StyledArrow, StyledArrow, StyledArrow, function (_ref) {
  var animated = _ref.animated;
  return animated && css(["transition:opacity 200ms ease-in-out;"]);
}, function (_ref2) {
  var isVisible = _ref2.isVisible;
  return css(["opacity:", ";"], Number(isVisible));
});

/**
 * Компонент для текстовых подсказок. Основное предназначение — подписи к блокам.
 */
export var Tooltip = /*#__PURE__*/forwardRef(function (_ref3, outerRef) {
  var id = _ref3.id,
    text = _ref3.text,
    isVisible = _ref3.isVisible,
    _ref3$arrow = _ref3.arrow,
    arrow = _ref3$arrow === void 0 ? true : _ref3$arrow,
    _ref3$animated = _ref3.animated,
    animated = _ref3$animated === void 0 ? true : _ref3$animated,
    _ref3$placement = _ref3.placement,
    placement = _ref3$placement === void 0 ? 'bottom' : _ref3$placement,
    children = _ref3.children,
    onDismiss = _ref3.onDismiss,
    rest = _objectWithoutProperties(_ref3, _excluded);
  var tooltipElement = useRef(null);
  var ref = useForkRef(outerRef, tooltipElement);
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    wrapperElement = _useState2[0],
    setWrapperElement = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    arrowElement = _useState4[0],
    setArrowElement = _useState4[1];
  var _usePopper = usePopper(wrapperElement, tooltipElement.current, {
      strategy: 'fixed',
      placement: placement,
      modifiers: [{
        name: 'offset',
        options: {
          offset: [offset[0], offset[1]]
        }
      }, {
        name: 'arrow',
        options: {
          element: arrowElement
        }
      }]
    }),
    styles = _usePopper.styles,
    attributes = _usePopper.attributes,
    forceUpdate = _usePopper.forceUpdate;
  useEffect(function () {
    var onKeyDown = function onKeyDown(event) {
      if (event.keyCode === ESCAPE_KEYCODE) {
        onDismiss === null || onDismiss === void 0 || onDismiss();
      }
    };
    window.addEventListener('keydown', onKeyDown);
    return function () {
      window.removeEventListener('keydown', onKeyDown);
    };
  }, []);
  useEffect(function () {
    if (!isVisible || !forceUpdate) {
      return;
    }

    /*
     * INFO: Метод forceUpdate содержит в себе flushSync и приводит
     * к повторному рендеру компонента, который уже находится в процессе рендера.
     * Данный хак, нужен для того, чтобы это поведение избежать и перенаправить
     * вызов метода в очередь микрозадач.
     */
    Promise.resolve().then(forceUpdate);
  }, [isVisible, forceUpdate, text]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledTooltip, _extends({}, attributes.popper, {
    ref: ref,
    id: id,
    isVisible: isVisible && Boolean(text === null || text === void 0 ? void 0 : text.length),
    animated: animated,
    style: styles.popper,
    role: "tooltip",
    "aria-live": "polite",
    "aria-hidden": !isVisible
  }), arrow && /*#__PURE__*/React.createElement(StyledArrow, _extends({
    ref: setArrowElement,
    style: styles.arrow
  }, attributes.arrow)), text), children && /*#__PURE__*/React.createElement(StyledWrapper, _extends({
    ref: setWrapperElement
  }, rest), children));
});
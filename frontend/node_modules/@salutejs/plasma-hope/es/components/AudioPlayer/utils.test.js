import { renderHook } from '@testing-library/react-hooks/dom';
import { formatSecondsToMintues, useAudioPlayer } from './utils';
describe('AudioPlayer utils', function () {
  describe('formatSecondsToMintues', function () {
    it('Should return empty array', function () {
      expect(formatSecondsToMintues(0)).toBe('00:00');
    });
    it('Should return new array without element by number id', function () {
      expect(formatSecondsToMintues(120)).toBe('02:00');
    });
    it('Should return new array without element by string id', function () {
      expect(formatSecondsToMintues(321)).toBe('05:21');
    });
  });

  // ToDo: improve test
  describe('useAudioPlayer', function () {
    it('Should call play', function () {
      var refAudio = {
        current: {
          play: jest.fn(),
          pause: jest.fn()
        }
      };
      var isPlaying = true;
      renderHook(function () {
        return useAudioPlayer('mock-url', isPlaying, refAudio);
      });
      expect(refAudio.current.pause).toBeCalledTimes(0);
      expect(refAudio.current.play).toBeCalledTimes(1);
    });
    it('Should call pause', function () {
      var refAudio = {
        current: {
          play: jest.fn(),
          pause: jest.fn()
        }
      };
      var isPlaying = false;
      renderHook(function () {
        return useAudioPlayer('mock-url', isPlaying, refAudio);
      });
      expect(refAudio.current.pause).toBeCalledTimes(1);
      expect(refAudio.current.play).toBeCalledTimes(0);
    });
    it('Should return false', function () {
      var refAudio = {
        current: undefined
      };
      var _renderHook = renderHook(function () {
          return useAudioPlayer('mock-url', false, refAudio);
        }),
        canPlaying = _renderHook.result;
      expect(canPlaying.current).toEqual([false]);
    });
  });
});
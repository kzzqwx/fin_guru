var _IconTrashFilled;
var _excluded = ["items", "maxHeight", "status", "message", "interactionType", "actionIcon", "itemSize", "maxCount", "disabled", "onItemsSortEnd", "onItemAction", "onItemClick", "onValidation"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useMemo } from 'react';
import styled from 'styled-components';
import { IconTrashFilled } from '@salutejs/plasma-icons';
import { Upload } from '../Upload';
import { PreviewGallery } from '../PreviewGallery';
import { StyledRoot as StyledPreviewGallery } from '../PreviewGallery/PreviewGalleryItems';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('UploadVisual/UploadVisual');
export var StyledRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web-core__sc-1lmzejj-0"
})(["", "{margin-top:0.5rem;}"], StyledPreviewGallery);

/**
 * Комплексный компонент для загрузки изображений/видео с превью галереей.
 */
export var UploadVisual = function UploadVisual(_ref) {
  var _ref$items = _ref.items,
    items = _ref$items === void 0 ? [] : _ref$items,
    maxHeight = _ref.maxHeight,
    status = _ref.status,
    message = _ref.message,
    interactionType = _ref.interactionType,
    actionIcon = _ref.actionIcon,
    itemSize = _ref.itemSize,
    maxCount = _ref.maxCount,
    disabled = _ref.disabled,
    onItemsSortEnd = _ref.onItemsSortEnd,
    onItemAction = _ref.onItemAction,
    onItemClick = _ref.onItemClick,
    onValidation = _ref.onValidation,
    rest = _objectWithoutProperties(_ref, _excluded);
  var acceptExtensions = '.avi,.mp4,.bmg,.png,.jpg,.jpeg';
  var content = 'Загрузите фото или видео';
  var isDisabled = useMemo(function () {
    return disabled !== undefined ? disabled : Boolean(maxCount !== undefined && maxCount <= items.length);
  }, [disabled, maxCount, items]);
  return /*#__PURE__*/React.createElement(StyledRoot, null, /*#__PURE__*/React.createElement(Upload, _extends({
    disabled: isDisabled,
    accept: acceptExtensions,
    content: content,
    message: message,
    status: status,
    onValidation: onValidation
  }, rest)), /*#__PURE__*/React.createElement(PreviewGallery, {
    items: items,
    itemSize: itemSize,
    actionIcon: actionIcon || _IconTrashFilled || (_IconTrashFilled = /*#__PURE__*/React.createElement(IconTrashFilled, {
      size: "xs",
      color: "inherit"
    })),
    interactionType: interactionType,
    onItemAction: onItemAction,
    onItemClick: onItemClick,
    onItemsSortEnd: onItemsSortEnd,
    maxHeight: maxHeight
  }));
};
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { useCallback, useEffect, useState } from 'react';
var SCROLL_SPEED = 2;
export var useDragScroll = function useDragScroll(scrollRef, isDragScrollDisabled) {
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isDragging = _useState2[0],
    setDragging = _useState2[1];
  var _useState3 = useState(0),
    _useState4 = _slicedToArray(_useState3, 2),
    startX = _useState4[0],
    setStartX = _useState4[1];
  var _useState5 = useState(0),
    _useState6 = _slicedToArray(_useState5, 2),
    scrollLeft = _useState6[0],
    setScrollLeft = _useState6[1];
  var handleMouseMove = useCallback(function (e) {
    if (isDragging && scrollRef && scrollRef.current) {
      var dx = (e.clientX - startX) * SCROLL_SPEED;
      scrollRef.current.scrollLeft = scrollLeft - dx;
    }
  }, [scrollRef, scrollLeft, isDragging, startX]);
  var handleMouseUp = useCallback(function () {
    setDragging(false);
    if (scrollRef && scrollRef.current) {
      scrollRef.current.style.cursor = 'grab';
    }
  }, [scrollRef, setDragging]);
  var handleMouseDown = useCallback(function (e) {
    setDragging(true);
    if (scrollRef && scrollRef.current) {
      setStartX(e.clientX);
      setScrollLeft(scrollRef.current.scrollLeft);
      scrollRef.current.style.cursor = 'grabbing';
    }
  }, [scrollRef, setDragging, setStartX, setScrollLeft, handleMouseUp, handleMouseMove]);
  useEffect(function () {
    if (scrollRef && scrollRef.current && !isDragScrollDisabled) {
      scrollRef.current.style.userSelect = 'none';
      scrollRef.current.addEventListener('mousedown', handleMouseDown);
      scrollRef.current.addEventListener('mouseup', handleMouseUp);
      scrollRef.current.addEventListener('mouseleave', handleMouseUp);
      scrollRef.current.addEventListener('mousemove', handleMouseMove);
    }
    return function () {
      if (scrollRef && scrollRef.current && !isDragScrollDisabled) {
        scrollRef.current.removeEventListener('mousedown', handleMouseDown);
        scrollRef.current.removeEventListener('mouseup', handleMouseUp);
        scrollRef.current.removeEventListener('mouseleave', handleMouseUp);
        scrollRef.current.removeEventListener('mousemove', handleMouseMove);
      }
    };
  }, [scrollRef, handleMouseDown, handleMouseUp, handleMouseMove, isDragScrollDisabled]);
};
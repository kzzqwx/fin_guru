var _StyledSelectButton, _StyledIconDrag;
import React, { memo } from 'react';
import styled, { css } from 'styled-components';
import { whiteSecondary, whiteTertiary, buttonAccent, critical, whitePrimary, Image } from '@salutejs/plasma-core';
import { IconDone, IconDrag } from '@salutejs/plasma-icons';
import { Footnote2 } from '../Typography';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('PreviewGallery/PreviewGalleryItemBase');
export var buttonMixin = function buttonMixin(vPosition, bgColor, color) {
  return css(["position:absolute;top:0.25rem;", ":0.25rem;display:flex;align-items:center;justify-content:center;width:1.25rem;height:1.25rem;padding:0;appearance:none;background-color:", ";border:0 none;border-radius:100%;color:", ";cursor:pointer;"], vPosition, bgColor, color);
};
export var StyledSelectButton = /*#__PURE__*/styled.button.withConfig({
  componentId: "plasma-web-core__sc-1hth9wg-0"
})(["", ";"], /*#__PURE__*/buttonMixin('left', buttonAccent, whitePrimary));
export var StyledTrashButton = /*#__PURE__*/styled.button.withConfig({
  componentId: "plasma-web-core__sc-1hth9wg-1"
})(["", ";&:hover{color:", ";}"], /*#__PURE__*/buttonMixin('right', critical, whiteSecondary), whitePrimary);
export var StyledIconDrag = /*#__PURE__*/styled(IconDrag).withConfig({
  componentId: "plasma-web-core__sc-1hth9wg-2"
})(["", ";svg{opacity:0.24;}"], /*#__PURE__*/buttonMixin('left', 'transparent', whitePrimary));

// NOTE: don't know how to fix ts error TS2742

export var StyledCaption = /*#__PURE__*/styled(Footnote2).withConfig({
  componentId: "plasma-web-core__sc-1hth9wg-3"
})(["position:absolute;left:0.625rem;bottom:0.5rem;color:", ";"], whiteTertiary);
export var StyledItem = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web-core__sc-1hth9wg-4"
})(["position:relative;border-radius:0.75rem;height:100%;", " ", "{display:none;}&:hover{transform:scale(1.04);", "{display:flex;}}"], function (_ref) {
  var width = _ref.width;
  return width && css(["width:", ";"], width);
}, StyledTrashButton, StyledTrashButton);
/**
 * Базовый компонент с превью.
 */
export var PreviewGalleryItemBase = /*#__PURE__*/memo(function (_ref2) {
  var id = _ref2.id,
    itemSize = _ref2.itemSize,
    _ref2$image = _ref2.image,
    image = _ref2$image === void 0 ? '' : _ref2$image,
    component = _ref2.component,
    customClickHandle = _ref2.customClickHandle,
    isSelected = _ref2.isSelected,
    caption = _ref2.caption,
    interactionType = _ref2.interactionType,
    actionIcon = _ref2.actionIcon,
    status = _ref2.status,
    onItemAction = _ref2.onItemAction,
    onItemClick = _ref2.onItemClick,
    actionDisabled = _ref2.actionDisabled;
  var itemActionHandle = function itemActionHandle(event) {
    event.stopPropagation();
    onItemAction === null || onItemAction === void 0 || onItemAction(id);
  };
  return !component ? /*#__PURE__*/React.createElement(StyledItem, {
    width: itemSize,
    key: id,
    onClick: customClickHandle ? function () {
      return customClickHandle(id);
    } : function () {
      return onItemClick === null || onItemClick === void 0 ? void 0 : onItemClick(id);
    }
  }, /*#__PURE__*/React.createElement(Image, {
    base: "div",
    src: image,
    ratio: "16 / 9"
  }), !actionDisabled && /*#__PURE__*/React.createElement(StyledTrashButton, {
    type: "button",
    onClick: itemActionHandle
  }, actionIcon), interactionType === 'selectable' && status !== 'error' ? isSelected && (_StyledSelectButton || (_StyledSelectButton = /*#__PURE__*/React.createElement(StyledSelectButton, {
    type: "button"
  }, /*#__PURE__*/React.createElement(IconDone, {
    size: "xs",
    color: "inherit"
  })))) : _StyledIconDrag || (_StyledIconDrag = /*#__PURE__*/React.createElement(StyledIconDrag, {
    size: "xs",
    color: "inherit"
  })), caption && /*#__PURE__*/React.createElement(StyledCaption, null, caption)) : /*#__PURE__*/React.createElement(StyledItem, {
    width: itemSize,
    key: id,
    onClick: customClickHandle ? function () {
      return customClickHandle(id);
    } : function () {
      return onItemClick === null || onItemClick === void 0 ? void 0 : onItemClick(id);
    }
  }, component);
});
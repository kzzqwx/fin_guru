var _excluded = ["status"],
  _excluded2 = ["items", "interactionType", "actionIcon", "itemSize", "isGrabbing", "maxHeight", "onItemAction", "onItemClick"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { memo, useMemo } from 'react';
import { SortableContainer, SortableElement } from 'react-sortable-hoc';
import styled, { css } from 'styled-components';
import { PreviewGalleryItemError } from './PreviewGalleryItemError';
import { PreviewGalleryItemBase } from './PreviewGalleryItemBase';
import { PreviewGalleryItemWithTooltip } from './PreviewGalleryItemWithTooltip';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('PreviewGallery/PreviewGalleryItems');
export var StyledRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-web-core__sc-av4s1g-0"
})(["display:grid;grid-template-columns:repeat(3,1fr);gap:0.5rem;cursor:pointer;", " ", ""], function (_ref) {
  var isGrabbing = _ref.isGrabbing;
  return isGrabbing && css(["cursor:grabbing;"]);
}, function (_ref2) {
  var maxHeight = _ref2.maxHeight;
  return maxHeight && css(["max-height:", "px;overflow:auto;"], maxHeight);
});
var PreviewGalleryItem = /*#__PURE__*/memo( /*#__PURE__*/SortableElement(function (_ref3) {
  var status = _ref3.status,
    itemRest = _objectWithoutProperties(_ref3, _excluded);
  return status === 'error' ? /*#__PURE__*/React.createElement(PreviewGalleryItemError, itemRest) : /*#__PURE__*/React.createElement(PreviewGalleryItemBase, itemRest);
}));

/**
 * Компонент со списком превью изображений.
 */
export var PreviewGalleryListItems = /*#__PURE__*/SortableContainer(function (_ref4) {
  var _ref4$items = _ref4.items,
    items = _ref4$items === void 0 ? [] : _ref4$items,
    interactionType = _ref4.interactionType,
    actionIcon = _ref4.actionIcon,
    itemSize = _ref4.itemSize,
    isGrabbing = _ref4.isGrabbing,
    maxHeight = _ref4.maxHeight,
    onItemAction = _ref4.onItemAction,
    onItemClick = _ref4.onItemClick,
    rest = _objectWithoutProperties(_ref4, _excluded2);
  var isDragDisabled = interactionType === 'selectable';

  // deleteIcon не указан в зависимости, т.к. предполагается,
  // что данный пропс не будет меняться динамически
  var iconMemo = useMemo(function () {
    return actionIcon;
  }, []);
  return /*#__PURE__*/React.createElement(StyledRoot, _extends({
    isGrabbing: isGrabbing,
    maxHeight: maxHeight
  }, rest), items.map(function (item, index) {
    return /*#__PURE__*/React.createElement(PreviewGalleryItemWithTooltip, {
      tooltip: item.tooltip
    }, /*#__PURE__*/React.createElement(PreviewGalleryItem, _extends({
      disabled: isDragDisabled,
      key: item.id,
      actionIcon: iconMemo,
      index: index,
      interactionType: interactionType,
      itemSize: itemSize,
      onItemAction: onItemAction,
      onItemClick: onItemClick
    }, item)));
  }));
});
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withAssistiveDropdown = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _DropdownUncontrolled = /*#__PURE__*/require("./DropdownUncontrolled");
var _keyboardNavigation = /*#__PURE__*/require("./keyboardNavigation");
var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");
var _excluded = ["id", "items", "placement", "trigger", "disabled", "menuRole", "menuItemRole", "closeOnSelect", "onToggle", "onItemSelect", "onIndexChange"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
(0, _collectPackageInfo.collectPackageInfo)('Dropdown/withAssistiveDropdown');
/**
 * Декорирует переданный компонент, выводя доступный dropdown.
 */
var withAssistiveDropdown = exports.withAssistiveDropdown = function withAssistiveDropdown(Component) {
  var Dropdown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _DropdownUncontrolled.DropdownUncontrolled;
  return /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
    var id = _ref.id,
      items = _ref.items,
      placement = _ref.placement,
      trigger = _ref.trigger,
      disabled = _ref.disabled,
      menuRole = _ref.menuRole,
      menuItemRole = _ref.menuItemRole,
      _ref$closeOnSelect = _ref.closeOnSelect,
      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,
      onToggleExternal = _ref.onToggle,
      onItemSelectExternal = _ref.onItemSelect,
      onIndexChangeExternal = _ref.onIndexChange,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];
    var _useState3 = (0, _react.useState)(_keyboardNavigation.INITIAL_INDEX),
      _useState4 = _slicedToArray(_useState3, 2),
      index = _useState4[0],
      setIndex = _useState4[1];
    var openingMethod = (0, _react.useRef)(null);
    var activeIndex = (0, _react.useMemo)(function () {
      return items.findIndex(function (item) {
        return item.isActive;
      });
    }, [items]);
    var onToggle = (0, _react.useCallback)(function (newIsOpen, event) {
      if (newIsOpen) {
        openingMethod.current = event.type;
      }
      setIsOpen(newIsOpen);
      onToggleExternal === null || onToggleExternal === void 0 || onToggleExternal(newIsOpen, event);
    }, [onToggleExternal]);
    var onItemSelect = (0, _react.useCallback)(function (item, event) {
      if (item.isDisabled) {
        return;
      }
      if (closeOnSelect) {
        onToggle === null || onToggle === void 0 || onToggle(false, event);
      }
      onItemSelectExternal === null || onItemSelectExternal === void 0 || onItemSelectExternal(item, event);
    }, [onToggle, onItemSelectExternal, closeOnSelect]);
    var onIndexChange = (0, _react.useCallback)(function (i) {
      setIndex(i);
      onIndexChangeExternal === null || onIndexChangeExternal === void 0 || onIndexChangeExternal(i);
    }, [onIndexChangeExternal]);
    var onBlur = (0, _react.useCallback)(function () {
      if (openingMethod.current === 'keydown') {
        setIsOpen(false);
        setIndex(_keyboardNavigation.INITIAL_INDEX);
      }
    }, []);
    var onHover = (0, _react.useCallback)(function (newIndex) {
      setIndex(newIndex);
    }, []);
    var onMouseLeave = (0, _react.useCallback)(function () {
      setIndex(-1);
    }, []);
    var _useKeyboardNavigatio = (0, _keyboardNavigation.useKeyboardNavigation)({
        items: items,
        isOpen: isOpen,
        index: index,
        onToggle: onToggle,
        onItemSelect: onItemSelect,
        onIndexChange: onIndexChange
      }),
      onKeyDown = _useKeyboardNavigatio.onKeyDown;
    (0, _react.useEffect)(function () {
      setIndex(activeIndex);
    }, [activeIndex]);
    (0, _react.useEffect)(function () {
      if (!isOpen) {
        onIndexChange === null || onIndexChange === void 0 || onIndexChange(activeIndex === -1 ? _keyboardNavigation.INITIAL_INDEX : activeIndex);
      }
    }, [isOpen, onIndexChange, activeIndex]);
    return /*#__PURE__*/_react["default"].createElement(Dropdown, {
      id: id,
      role: menuRole,
      itemRole: menuItemRole,
      "aria-labelledby": id ? "".concat(id, "-disclosure") : undefined,
      isOpen: isOpen,
      items: items,
      placement: placement,
      trigger: trigger,
      disabled: disabled,
      hoverIndex: index,
      onBlur: onBlur,
      onKeyDown: onKeyDown,
      onToggle: onToggle,
      onItemSelect: onItemSelect,
      onHover: onHover,
      onMouseLeave: onMouseLeave
    }, /*#__PURE__*/_react["default"].createElement(Component, _extends({}, rest, {
      ref: ref,
      id: id ? "".concat(id, "-disclosure") : undefined,
      isOpen: isOpen,
      disabled: disabled,
      "aria-activedescendant": id && index >= 0 ? "".concat(id, "-item-").concat(index) : undefined,
      "aria-controls": id,
      "aria-expanded": isOpen,
      "aria-haspopup": menuRole
    })));
  });
};
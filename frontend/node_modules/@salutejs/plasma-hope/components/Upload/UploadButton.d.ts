import React, { ChangeEvent } from 'react';
import type { FC } from 'react';
import { StatusType, ValidationResult } from './types';
declare module 'react-file-drop' {
    interface FileDropProps {
        children: React.ReactNode;
    }
}
declare const paints: {
    default: {
        backgroundColor: string;
        borderColor: string;
        color: string;
    };
    progress: {
        backgroundColor: string;
        borderColor: string;
        color: string;
    };
};
declare type Paint = keyof typeof paints;
export interface StyledButtonProps {
    paint: Paint;
    status?: StatusType;
    disabled?: boolean;
    isGrabbing: boolean;
}
export declare const StyledButton: import("styled-components").StyledComponent<"button", any, StyledButtonProps, never>;
export interface UploadButtonProps {
    /**
     * Статус компонента.
     */
    status?: StatusType;
    /**
     * Компонент неактивен.
     */
    disabled?: boolean;
    /**
     * Идёт ли процесс загрузки.
     */
    isProgress?: boolean;
    /**
     * Принимаемые расширения в формате ".*".
     *
     * @example
     * ".mp3"
     * @example
     * ".wav, .mkv"
     */
    accept?: string;
    /**
     * Контент для компонента в виде компонента или строки.
     */
    content?: JSX.Element | string;
    /**
     * Компонент загрузки.
     */
    loader?: JSX.Element;
    /**
     * Кастомный метод валидации. Должен вернуть data: File, для начала обработки метода загрузки.
     */
    validate?: (files: FileList | null, accept?: string) => ValidationResult;
    /**
     * Callback результата валидации.
     */
    onValidation?: (result: ValidationResult) => void;
    /**
     * Callback на выбор файла.
     */
    onChange?: (file: File, event?: ChangeEvent<HTMLInputElement>) => void;
}
/**
 * Базовый компонент для загрузки файлов.
 */
export declare const UploadButton: FC<UploadButtonProps>;
export {};
//# sourceMappingURL=UploadButton.d.ts.map
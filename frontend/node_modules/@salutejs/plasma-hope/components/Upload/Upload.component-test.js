"use strict";

var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _plasmaCyUtils = /*#__PURE__*/require("@salutejs/plasma-cy-utils");
var _plasmaIcons = /*#__PURE__*/require("@salutejs/plasma-icons");
var _utils = /*#__PURE__*/require("./utils");
var _IconPicture, _PadMe, _PadMe2, _PadMe3, _PadMe4, _PadMe5;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
describe('plasma-hope: Upload', function () {
  var _CypressTestDecorator, _CypressTestDecorator2, _Upload, _CypressTestDecorator3, _CypressTestDecorator4, _CypressTestDecorator5, _CypressTestDecorator6;
  var Upload = (0, _plasmaCyUtils.getComponent)('Upload');
  var baseContent = 'Загрузите файл любого формата';
  var baseMessage = 'Подсказывающее сообщение';
  it('simple', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator || (_CypressTestDecorator = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Upload, null))));
    cy.matchImageSnapshot({
      failureThreshold: 0.01,
      failureThresholdType: 'percent'
    });
  });
  function Demo() {
    var onChange = _react["default"].useCallback(function () {}, []);
    var onValidation = _react["default"].useCallback(function () {}, []);
    var validate = _react["default"].useCallback(function (files) {
      return {
        message: "\u0414\u043E\u0431\u0430\u0432\u043B\u0435\u043D \u0444\u0430\u0439\u043B \u0444\u043E\u0440\u043C\u0430\u0442\u0430 ".concat(files[0].type),
        status: 'success',
        data: files[0]
      };
    }, []);
    return /*#__PURE__*/_react["default"].createElement(Upload, {
      content: "Drag and Drop",
      onChange: onChange,
      validate: validate,
      onValidation: onValidation
    });
  }
  it('upload dnd from fixture', function () {
    var fileUrl = 'images/320_320_0.jpg';
    var type = 'image/jpg';
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator2 || (_CypressTestDecorator2 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Demo, null))));
    cy.fixture(fileUrl, 'base64').then(Cypress.Blob.base64StringToBlob).then(function (blob) {
      var nameSegments = fileUrl.split('/');
      var name = nameSegments[nameSegments.length - 1];
      var testFile = new File([blob], name, {
        type: type
      });
      var dataTransfer = new DataTransfer();
      dataTransfer.items.add(testFile);
      var event = {
        dataTransfer: dataTransfer
      };
      return cy.get('.file-drop').trigger('drop', event);
    });
    cy.matchImageSnapshot({
      failureThreshold: 0.01,
      failureThresholdType: 'percent'
    });
  });
  it('_content', function () {
    var ComponentContent = function ComponentContent() {
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          display: 'flex',
          alignItems: 'center'
        }
      }, _IconPicture || (_IconPicture = /*#__PURE__*/_react["default"].createElement(_plasmaIcons.IconPicture, {
        size: "s",
        color: "inherit"
      })), /*#__PURE__*/_react["default"].createElement("span", {
        style: {
          marginLeft: '16px'
        }
      }, "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0430\u0432\u0430\u0442\u0430\u0440\u043A\u0443 \u0432 \u0444\u043E\u0440\u043C\u0430\u0442\u0435 .jpg"));
    };
    (0, _plasmaCyUtils.mount)( /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, _Upload || (_Upload = /*#__PURE__*/_react["default"].createElement(Upload, {
      content: "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0444\u0430\u0439\u043B \u0444\u043E\u0440\u043C\u0430\u0442\u0430 .pdf",
      accept: ".pdf"
    })), _PadMe || (_PadMe = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.PadMe, null)), /*#__PURE__*/_react["default"].createElement(Upload, {
      content: /*#__PURE__*/_react["default"].createElement(ComponentContent, null),
      accept: ".jpg"
    })));
    cy.matchImageSnapshot({
      failureThreshold: 0.01,
      failureThresholdType: 'percent'
    });
  });
  it('_status', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator3 || (_CypressTestDecorator3 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Upload, {
      content: baseContent,
      status: "error",
      message: baseMessage
    }), _PadMe2 || (_PadMe2 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.PadMe, null)), /*#__PURE__*/_react["default"].createElement(Upload, {
      content: baseContent,
      status: "success",
      message: baseMessage
    }))));
    cy.matchImageSnapshot({
      failureThreshold: 0.01,
      failureThresholdType: 'percent'
    });
  });
  it('_progress', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator4 || (_CypressTestDecorator4 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Upload, {
      progress: 0
    }), _PadMe3 || (_PadMe3 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.PadMe, null)), /*#__PURE__*/_react["default"].createElement(Upload, {
      progress: 50
    }), _PadMe4 || (_PadMe4 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.PadMe, null)), /*#__PURE__*/_react["default"].createElement(Upload, {
      progress: 100
    }))));
    cy.matchImageSnapshot();
  });
  it('_loader', function () {
    var ComponentLoader = function ComponentLoader() {
      return /*#__PURE__*/_react["default"].createElement("div", {
        style: {
          color: 'green'
        }
      }, "\u041A\u0430\u0441\u0442\u043E\u043C\u043D\u0430\u044F \u0437\u0430\u0433\u0440\u0443\u0437\u043A\u0430 42%");
    };
    (0, _plasmaCyUtils.mount)( /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Upload, {
      progress: 0,
      loader: /*#__PURE__*/_react["default"].createElement(ComponentLoader, null)
    })));
    cy.matchImageSnapshot();
  });
  it('_message', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator5 || (_CypressTestDecorator5 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Upload, {
      content: baseContent,
      message: baseMessage
    }))));
    cy.matchImageSnapshot({
      failureThreshold: 0.01,
      failureThresholdType: 'percent'
    });
  });
  it('_disabled', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator6 || (_CypressTestDecorator6 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Upload, {
      disabled: false
    }), _PadMe5 || (_PadMe5 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.PadMe, null)), /*#__PURE__*/_react["default"].createElement(Upload, {
      disabled: true
    }))));
    cy.matchImageSnapshot({
      failureThreshold: 0.01,
      failureThresholdType: 'percent'
    });
  });
});
describe('plasma-hope: Upload utils', function () {
  var _CypressTestDecorator7;
  var Upload = (0, _plasmaCyUtils.getComponent)('Upload');
  var files = [{
    name: 'video.mkv'
  }];
  it('defaultValidate', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator7 || (_CypressTestDecorator7 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(Upload, null))));
    expect((0, _utils.defaultValidate)(null)).to.deep.eq({
      message: 'Загрузите файл',
      status: 'error',
      data: null
    });
    expect((0, _utils.defaultValidate)(files)).to.deep.eq({
      data: {
        name: 'video.mkv'
      }
    });
    expect((0, _utils.defaultValidate)(files, '.mkv')).to.deep.eq({
      data: {
        name: 'video.mkv'
      }
    });
    expect((0, _utils.defaultValidate)(files, '.avi, .mkv')).to.deep.eq({
      data: {
        name: 'video.mkv'
      }
    });
    expect((0, _utils.defaultValidate)(files, '.avi')).to.deep.eq({
      data: null,
      message: 'Неверный формат файла. Используйте avi-формат',
      status: 'error'
    });
  });
});
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Editable = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));
var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");
var _utils = /*#__PURE__*/require("../../utils");
var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");
var _excluded = ["textComponent", "value", "icon", "maxLength", "spellCheck", "onChange", "onBlur", "onPaste", "placeholder"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
(0, _collectPackageInfo.collectPackageInfo)('Editable/Editable');
var KeyCodes = /*#__PURE__*/function (KeyCodes) {
  KeyCodes[KeyCodes["ENTER"] = 13] = "ENTER";
  KeyCodes[KeyCodes["ESCAPE"] = 27] = "ESCAPE";
  return KeyCodes;
}(KeyCodes || {});
var EditButton = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma-web-core__sc-dgyiy9-0"
})(["position:relative;background:var( --plasma-editable-icon-background,linear-gradient(270deg,", " 70%,rgba(0,0,0,0) 120%) );padding-left:1rem;color:", ";align-self:stretch;", ""], _plasmaCore.background, _plasmaCore.tertiary, function (_ref) {
  var $isHidden = _ref.$isHidden;
  return $isHidden ? 'display: none;' : '';
});
var StyledContainer = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma-web-core__sc-dgyiy9-1"
})(["display:flex;align-items:center;max-width:100%;cursor:pointer;&:hover > ", "{color:", ";}"], EditButton, _plasmaCore.text);
var extraComponentStyles = {
  whiteSpace: 'nowrap',
  overflow: 'hidden',
  marginRight: '-1rem',
  paddingRight: '1rem',
  outline: 'none',
  caretColor: 'var(--plasma-colors-accent)'
};
/**
 * Компонент, добавляющий возможность редактирования к текстовому компоненту
 *
 * Для указания альтернативного фона у иконки справа от текста
 * можно указать css переменную --plasma-editable-icon-background в контейнере элемента
 *
 */
var Editable = exports.Editable = function Editable(_ref2) {
  var textComponent = _ref2.textComponent,
    value = _ref2.value,
    icon = _ref2.icon,
    maxLength = _ref2.maxLength,
    _ref2$spellCheck = _ref2.spellCheck,
    spellCheck = _ref2$spellCheck === void 0 ? 'false' : _ref2$spellCheck,
    onChange = _ref2.onChange,
    onBlur = _ref2.onBlur,
    onPaste = _ref2.onPaste,
    placeholder = _ref2.placeholder,
    props = _objectWithoutProperties(_ref2, _excluded);
  var Component = textComponent;
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    isEditing = _useState2[0],
    setIsEditing = _useState2[1];
  var inputRef = (0, _react.useRef)(null);
  var prevValueRef = (0, _react.useRef)(value || '');
  var handlePaste = (0, _react.useCallback)(function (e) {
    if (!inputRef.current) {
      return;
    }
    e.preventDefault();
    var text = e.clipboardData.getData('text/plain').replace(/[\n\r]/gi, '');
    if (document.queryCommandSupported('insertText')) {
      document.execCommand('insertText', false, text);
    } else {
      try {
        navigator.clipboard.writeText(text);
      } catch (_unused) {
        inputRef.current.textContent = text;
      }
    }
    if (onPaste) {
      onPaste(e);
    }
  }, [onPaste]);
  var handleBlur = (0, _react.useCallback)(function (e) {
    setIsEditing(false);
    (0, _utils.clearSelection)();
    if (onBlur) {
      onBlur(e);
    }
  }, [onBlur]);
  var handleFocus = (0, _react.useCallback)(function () {
    setIsEditing(true);
    inputRef.current && (0, _utils.selectText)(inputRef.current);
  }, []);
  var handleEditClick = (0, _react.useCallback)(function () {
    var _inputRef$current;
    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
  }, []);
  var handleKeyDown = (0, _react.useCallback)(function (e) {
    if ([KeyCodes.ENTER, KeyCodes.ESCAPE].includes(e.keyCode)) {
      var _inputRef$current2;
      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.blur();
    }
  }, []);
  var handleChange = (0, _react.useCallback)(function (e) {
    var _inputRef$current$tex;
    if (!inputRef.current) {
      return;
    }
    var contentLength = ((_inputRef$current$tex = inputRef.current.textContent) === null || _inputRef$current$tex === void 0 ? void 0 : _inputRef$current$tex.length) || 0;
    if (!maxLength || contentLength <= maxLength) {
      prevValueRef.current = inputRef.current.textContent || '';
      onChange && onChange(e);
    } else {
      inputRef.current.textContent = prevValueRef.current;
    }
  }, [maxLength, onChange]);
  (0, _react.useEffect)(function () {
    if (!inputRef.current) {
      return;
    }
    if (typeof value === 'undefined') {
      return;
    }
    if (value === inputRef.current.textContent) {
      return;
    }
    inputRef.current.textContent = value;
  }, [value, textComponent]);
  return /*#__PURE__*/_react["default"].createElement(StyledContainer, props, /*#__PURE__*/_react["default"].createElement(Component, {
    ref: inputRef,
    style: extraComponentStyles,
    role: "textbox",
    spellCheck: spellCheck,
    contentEditable: true,
    onPaste: handlePaste,
    onInput: handleChange,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown,
    "aria-label": placeholder
  }), /*#__PURE__*/_react["default"].createElement(EditButton, {
    onClick: handleEditClick,
    $isHidden: isEditing
  }, icon));
};
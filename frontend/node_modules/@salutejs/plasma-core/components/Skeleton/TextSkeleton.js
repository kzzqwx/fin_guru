"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextSkeleton = void 0;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));
var _Skeleton = /*#__PURE__*/require("./Skeleton");
var _LineSkeleton = /*#__PURE__*/require("./LineSkeleton");
var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");
var _excluded = ["lines", "width", "roundness", "size"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
(0, _collectPackageInfo.collectPackageInfo)('Skeleton/TextSkeleton');
var variousWidth = [7.58, 5.27, 13.54, 6.63, 0.28, 14.8, 0.33, 11.26, 14.1, 10.59, 3.38, 13.5, 7.71, 3.34, 7.96];
var StyledTextSkeleton = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-x4ekfh-0"
})(["display:flex;flex-direction:column;width:100%;"]);

// TODO: https://github.com/salute-developers/plasma/issues/230

/**
 * Компонент для создания плейсхолдера нескольких строк текста.
 * Размеры компонента задаются с помощью констант и соответствуют размерам [типографических элементов](/?path=/docs/).
 */
var TextSkeleton = exports.TextSkeleton = function TextSkeleton(_ref) {
  var lines = _ref.lines,
    width = _ref.width,
    roundness = _ref.roundness,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? _Skeleton.DEFAULT_TEXT_SIZE : _ref$size,
    props = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react["default"].createElement(StyledTextSkeleton, props, Array.from(Array(lines), function (_, i) {
    var w;
    if (width) {
      // TODO; https://github.com/salute-developers/plasma/issues/230
      w = width;
    } else {
      switch (true) {
        // Последняя строка
        case i === lines - 1 && lines !== 1:
          w = 45 - variousWidth[i % variousWidth.length];
          break;
        // Единственная или первая из двух
        case lines === 1 || lines === 2:
          w = 100;
          break;
        default:
          w = 100 - variousWidth[i % variousWidth.length];
      }
    }
    return /*#__PURE__*/_react["default"].createElement(_LineSkeleton.LineSkeleton, {
      key: "line:".concat(i),
      size: size,
      roundness: roundness,
      style: {
        width: "".concat(w, "%")
      }
    });
  }));
};
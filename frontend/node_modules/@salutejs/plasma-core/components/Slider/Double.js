"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _SliderBase = /*#__PURE__*/require("./SliderBase");
var _Handle = /*#__PURE__*/require("./Handle");
var _excluded = ["min", "max", "value", "disabled", "onChangeCommitted", "onChange", "ariaLabel", "multipleStepSize", "thumb"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function getXCenterHandle(handle) {
  var _handle$parentElement;
  var containerX = ((_handle$parentElement = handle.parentElement) === null || _handle$parentElement === void 0 || (_handle$parentElement = _handle$parentElement.getBoundingClientRect()) === null || _handle$parentElement === void 0 ? void 0 : _handle$parentElement.x) || 0;
  var handleRect = handle.getBoundingClientRect();
  var handlePosition = handleRect.x;
  return handlePosition - containerX;
}
var Slider = exports.Slider = function Slider(_ref) {
  var min = _ref.min,
    max = _ref.max,
    value = _ref.value,
    disabled = _ref.disabled,
    onChangeCommitted = _ref.onChangeCommitted,
    onChange = _ref.onChange,
    ariaLabel = _ref.ariaLabel,
    _ref$multipleStepSize = _ref.multipleStepSize,
    multipleStepSize = _ref$multipleStepSize === void 0 ? 10 : _ref$multipleStepSize,
    thumb = _ref.thumb,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _React$useState = _react["default"].useState({
      stepSize: 0,
      railFillWidth: 0,
      railFillXPosition: 0,
      xFirstHandle: 0,
      xSecondHandle: 0,
      firstHandleZIndex: 100,
      secondHandleZIndex: 101,
      firstValue: value[0],
      secondValue: value[1]
    }),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    state = _React$useState2[0],
    setState = _React$useState2[1];
  var firstHandleRef = _react["default"].useRef(null);
  var secondHandleRef = _react["default"].useRef(null);
  var stepSize = state.stepSize;
  _react["default"].useEffect(function () {
    var firstLocalValue = Math.min(Math.max(value[0], min), max) - min;
    var secondLocalValue = Math.min(Math.max(value[1], min), max) - min;
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        railFillXPosition: stepSize * firstLocalValue,
        railFillWidth: stepSize * secondLocalValue - stepSize * firstLocalValue,
        xFirstHandle: stepSize * firstLocalValue,
        xSecondHandle: stepSize * secondLocalValue
      });
    });
  }, [value, stepSize, min, max]);
  var setStepSize = _react["default"].useCallback(function (newStepSize) {
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        stepSize: newStepSize
      });
    });
  }, []);
  var onFirstHandleChange = _react["default"].useCallback(function (handleValue, data) {
    if (secondHandleRef !== null && secondHandleRef !== void 0 && secondHandleRef.current) {
      var newHandleXPosition = data.x;
      var secondHandleXPosition = getXCenterHandle(secondHandleRef.current);
      var fillWidth = secondHandleXPosition - newHandleXPosition;
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          firstHandleZIndex: 101,
          secondHandleZIndex: 100,
          railFillWidth: fillWidth < 0 ? 0 : fillWidth,
          railFillXPosition: newHandleXPosition
        });
      });
      if (onChange) {
        onChange([handleValue, value[1]]);
      }
    }
  }, [onChange, value]);
  var onFirstHandleChangeCommitted = _react["default"].useCallback(function (handleValue, data) {
    onChangeCommitted([handleValue, value[1]]);
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        firstValue: handleValue,
        xFirstHandle: data.lastX
      });
    });
  }, [onChangeCommitted, value]);
  var onSecondHandleChange = _react["default"].useCallback(function (handleValue, data) {
    if (firstHandleRef !== null && firstHandleRef !== void 0 && firstHandleRef.current) {
      var firstXHandleXPosition = getXCenterHandle(firstHandleRef.current);
      var newHandleXPosition = data.x;
      var fillWidth = newHandleXPosition - firstXHandleXPosition;
      setState(function (prevState) {
        return _objectSpread(_objectSpread({}, prevState), {}, {
          firstHandleZIndex: 100,
          secondHandleZIndex: 101,
          railFillWidth: fillWidth < 0 ? 0 : fillWidth,
          railFillXPosition: firstXHandleXPosition
        });
      });
      if (onChange) {
        onChange([value[0], handleValue]);
      }
    }
  }, [onChange, value]);
  var onSecondHandleChangeCommitted = _react["default"].useCallback(function (handleValue, data) {
    onChangeCommitted([value[0], handleValue]);
    setState(function (prevState) {
      return _objectSpread(_objectSpread({}, prevState), {}, {
        secondValue: handleValue,
        xSecondHandle: data.lastX
      });
    });
  }, [onChangeCommitted, value]);
  var _ref2 = ariaLabel || [],
    _ref3 = _slicedToArray(_ref2, 2),
    ariaLabelLeft = _ref3[0],
    ariaLabelRight = _ref3[1];
  var currentFirstSliderValue = Math.max(state.firstValue, min);
  return /*#__PURE__*/_react["default"].createElement(_SliderBase.SliderBase, _extends({
    min: min,
    max: max,
    disabled: disabled,
    setStepSize: setStepSize,
    railFillWidth: state.railFillWidth,
    railFillXPosition: state.railFillXPosition
  }, rest), /*#__PURE__*/_react["default"].createElement(_Handle.Handle, {
    ref: firstHandleRef,
    stepSize: state.stepSize,
    multipleStepSize: multipleStepSize,
    onChangeCommitted: onFirstHandleChangeCommitted,
    onChange: onFirstHandleChange,
    min: min,
    max: state.secondValue,
    disabled: disabled,
    bounds: [min, state.secondValue],
    side: "left",
    xPosition: state.xFirstHandle,
    zIndex: state.firstHandleZIndex,
    value: currentFirstSliderValue,
    ariaLabel: ariaLabelLeft,
    thumb: thumb
  }), /*#__PURE__*/_react["default"].createElement(_Handle.Handle, {
    ref: secondHandleRef,
    stepSize: state.stepSize,
    multipleStepSize: multipleStepSize,
    onChangeCommitted: onSecondHandleChangeCommitted,
    onChange: onSecondHandleChange,
    min: min,
    ariaValueMin: currentFirstSliderValue,
    max: max,
    disabled: disabled,
    bounds: [state.firstValue, max],
    side: "right",
    xPosition: state.xSecondHandle,
    zIndex: state.secondHandleZIndex,
    value: Math.max(state.secondValue, min),
    ariaLabel: ariaLabelRight,
    thumb: thumb
  }));
};
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledSpinner = exports.ButtonText = exports.ButtonRoot = exports.ButtonLoader = exports.ButtonContentWrapper = exports.Button = void 0;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));
var _mixins = /*#__PURE__*/require("../../mixins");
var _Spinner = /*#__PURE__*/require("../Spinner");
var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } /**
 * Корневой элемент для стилизации кнопки.
 * Должен быть передан в функцию `createButton`.
 */
(0, _collectPackageInfo.collectPackageInfo)('Button/Button');
var ButtonRoot = exports.ButtonRoot = /*#__PURE__*/_styledComponents["default"].button.withConfig({
  componentId: "plasma__sc-14cj1yw-0"
})(["position:relative;display:inline-flex;align-items:center;box-sizing:border-box;justify-content:center;appearance:none;border:none;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);a&{text-decoration:none;}&:focus{outline:none;}", " ", ""], function (_ref) {
  var isLoading = _ref.$isLoading;
  return !isLoading && _mixins.applyDisabled;
}, _mixins.applyBlur);

/**
 * Элемент лоадера для кнопки.
 */
var ButtonLoader = exports.ButtonLoader = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma__sc-14cj1yw-1"
})(["position:absolute;"]);

/**
 * Спиннер по умолчанию с фиксированной шириной.
 */
var StyledSpinner = exports.StyledSpinner = /*#__PURE__*/(0, _styledComponents["default"])(_Spinner.Spinner).withConfig({
  componentId: "plasma__sc-14cj1yw-2"
})(["width:1.375rem;"]);

/**
 * Обёртка для содержимого кнопки.
 */
var ButtonContentWrapper = exports.ButtonContentWrapper = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma__sc-14cj1yw-3"
})(["display:flex;align-items:inherit;justify-content:inherit;width:100%;", ""], function (_ref2) {
  var isLoading = _ref2.$isLoading;
  return isLoading && 'opacity: 0;';
});

/**
 * A text wrapping element, that used when `text` prop is passed.
 * @private
 */
var ButtonText = exports.ButtonText = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma__sc-14cj1yw-4"
})(["box-sizing:border-box;", " ", " ", ""], _mixins.applyEllipsis, function (_ref3) {
  var isContentLeft = _ref3.$isContentLeft;
  return isContentLeft && 'margin-left: 0.375rem;';
}, function (_ref4) {
  var isContentRight = _ref4.$isContentRight;
  return isContentRight && 'margin-right: 0.375rem;';
});

/**
 * Базовая кнопка.
 * @deprecated
 */
var Button = exports.Button = /*#__PURE__*/_react["default"].forwardRef(
// eslint-disable-next-line prefer-arrow-callback
function Button(props, ref) {
  return /*#__PURE__*/_react["default"].createElement(ButtonRoot, _extends({
    ref: ref
  }, props));
});
Button.defaultProps = {
  pin: 'square-square',
  outlined: false
};
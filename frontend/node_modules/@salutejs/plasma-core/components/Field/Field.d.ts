import { HTMLAttributes } from 'react';
import { fieldStatuses } from './Field.statuses';
export interface FieldProps {
    $isFocused?: boolean;
    /**
     * Размер контрола.
     */
    size?: 'm' | 'l';
    /**
     * Статус компонента: заполнен успешно / с ошибкой.
     */
    status?: keyof typeof fieldStatuses;
    /**
     * Надпись лейбла.
     */
    label?: string | number;
    /**
     * Подсказка для поля ввода.
     */
    helperText?: string;
    /**
     * Слот для контента слева.
     */
    contentLeft?: React.ReactElement;
    /**
     * Слот для контента справа.
     */
    contentRight?: React.ReactElement;
}
/**
 * Common dynamic placeholder.
 */
export declare const FieldPlaceholder: import("styled-components").StyledComponent<"label", any, {}, never>;
/**
 * Content wrapper for left and right slots of the field.
 */
export declare const FieldContent: import("styled-components").StyledComponent<"div", any, {
    pos: 'left' | 'right';
}, never>;
/**
 * An inline block to place a helper text under the form item.
 */
export declare const FieldHelper: import("styled-components").StyledComponent<"span", any, {}, never>;
export interface FieldRootProps extends Pick<FieldProps, 'status'>, HTMLAttributes<HTMLDivElement> {
    $size?: FieldProps['size'];
    $disabled?: boolean;
    $isContentLeft?: boolean;
    $isContentRight?: boolean;
    $isHelper?: boolean;
}
/**
 * Common container for singular form item.
 */
export declare const FieldRoot: import("styled-components").StyledComponent<"div", any, FieldRootProps, never>;

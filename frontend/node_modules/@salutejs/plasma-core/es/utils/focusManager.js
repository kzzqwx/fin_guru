function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { findTabbableDescendants } from './tabbable';

/**
 *  Менеджер фокуса при открытии и закрытии нод при использовании focus-trap.
 *  Также необходим, чтобы фокус всегда должен находиться внутри необходимой ноды.
 * */
export var FocusManager = /*#__PURE__*/_createClass(function FocusManager() {
  var _this = this;
  _classCallCheck(this, FocusManager);
  // массив с элементами, которые нужно зафокусить после анмаунта
  _defineProperty(this, "focusAfterElements", []);
  // массив с trap нодами
  _defineProperty(this, "focusNodes", []);
  _defineProperty(this, "handleFocus", function () {
    // Фокус всегда должен находиться внутри необходимой ноды
    var focusNode = _this.focusNodes[_this.focusNodes.length - 1];
    if (!focusNode || focusNode.contains(document.activeElement)) {
      return;
    }

    // Выделяем первый tabbable элемент
    var el = findTabbableDescendants(focusNode)[0] || focusNode;
    el.focus();
  });
  // добавление на фокус после анмаунта
  _defineProperty(this, "markForFocusAfter", function (focusAfterNode) {
    var node = focusAfterNode && focusAfterNode.current ? focusAfterNode.current : document.activeElement;
    _this.focusAfterElements.push(node);
  });
  // фокус на необходимый элемент
  _defineProperty(this, "returnFocus", function () {
    var _this$focusAfterEleme;
    var toFocus = (_this$focusAfterEleme = _this.focusAfterElements.pop()) !== null && _this$focusAfterEleme !== void 0 ? _this$focusAfterEleme : null;
    if (toFocus) {
      toFocus.focus();
    }
  });
  // при маунте ноды
  _defineProperty(this, "setupScopedFocus", function (element) {
    _this.focusNodes.push(element);
    document.addEventListener('focusin', _this.handleFocus, true);
  });
  // при анмаунте
  _defineProperty(this, "teardownScopedFocus", function () {
    _this.focusNodes.pop();
    document.removeEventListener('focusin', _this.handleFocus);
  });
});
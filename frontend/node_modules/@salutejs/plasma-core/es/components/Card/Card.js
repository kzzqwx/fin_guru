var _excluded = ["roundness", "children"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import styled, { css } from 'styled-components';
import { surfaceCard } from '../../tokens';
import { addFocus, applyDisabled, applyRoundness, radiuses, syntheticFocus } from '../../mixins';
import { Body1 } from '../Typography';

// В этих константах задаем размеры в em, чтобы не зависеть напрямую от пикселей
// В то же время в числителях - значения в пикселях, взятые из макета
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Card/Card');
var fontSize = 16;
var shadowOffset = 8 / fontSize;
var shadowSize = 24 / fontSize;
var outlineSize = 2 / fontSize;
var DEFAULT_ROUNDNESS = 20;
export var StyledCard = /*#__PURE__*/styled(Body1).withConfig({
  componentId: "plasma__sc-1bj6k4p-0"
})(["", " ", ";position:relative;display:flex;box-sizing:border-box;flex-direction:column;flex-shrink:0;background:", ";box-shadow:0 ", "em ", "em rgba(0,0,0,0.1);transition:", ";", ""], applyDisabled, applyRoundness, surfaceCard, shadowOffset, shadowSize, function (_ref) {
  var theme = _ref.theme;
  return theme.lowPerformance ? 'unset' : 'transform 0.4s ease-in-out';
}, function (_ref2) {
  var focused = _ref2.focused,
    outlined = _ref2.outlined,
    roundness = _ref2.roundness,
    scaleOnFocus = _ref2.scaleOnFocus,
    theme = _ref2.theme;
  return css(["", " ", " &:focus{outline:none;}"], addFocus({
    lowPerformance: theme.lowPerformance,
    focused: focused,
    outlined: outlined,
    outlineSize: "".concat(outlineSize, "rem"),
    outlineRadius: "".concat(radiuses[roundness] + outlineSize, "rem")
  }), scaleOnFocus && syntheticFocus(css(["&{transform:scale(1.04);}"]), focused));
});
/**
 * Контейнер со скругленными углами с возможностью фокусировки на нем.
 */
// eslint-disable-next-line prefer-arrow-callback
export var Card = /*#__PURE__*/React.forwardRef(function Card(_ref3, ref) {
  var _ref3$roundness = _ref3.roundness,
    roundness = _ref3$roundness === void 0 ? DEFAULT_ROUNDNESS : _ref3$roundness,
    children = _ref3.children,
    rest = _objectWithoutProperties(_ref3, _excluded);
  return /*#__PURE__*/React.createElement(StyledCard, _extends({
    ref: ref,
    roundness: roundness
  }, rest), children);
});
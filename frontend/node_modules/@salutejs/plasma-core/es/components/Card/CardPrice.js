var _excluded = ["count", "currency", "oldPrice", "price"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react'; // eslint-disable-line
import styled from 'styled-components';
import { buttonAccent, primary, tertiary } from '../../tokens';
import { Price } from '../Price';
import { Body2 } from '../Typography';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Card/CardPrice');
var StyledRoot = /*#__PURE__*/styled(Body2).withConfig({
  componentId: "plasma__sc-y386fs-0"
})(["display:flex;box-sizing:border-box;margin-top:0.75rem;"]);
var StyledPrice = /*#__PURE__*/styled(Price).withConfig({
  componentId: "plasma__sc-y386fs-1"
})(["height:2.5rem;color:", ";"], primary);
var StyledOldPrice = /*#__PURE__*/styled(Price).withConfig({
  componentId: "plasma__sc-y386fs-2"
})(["height:2.5rem;margin-left:0.5rem;color:", ";"], tertiary);
var StyledCount = /*#__PURE__*/styled(Body2).withConfig({
  componentId: "plasma__sc-y386fs-3"
})(["box-sizing:border-box;height:2.5rem;margin-left:0.5rem;color:", ";"], buttonAccent);
export var CardPrice = function CardPrice(_ref) {
  var count = _ref.count,
    currency = _ref.currency,
    oldPrice = _ref.oldPrice,
    price = _ref.price,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(StyledRoot, rest, /*#__PURE__*/React.createElement(StyledPrice, {
    currency: currency
  }, price), oldPrice && /*#__PURE__*/React.createElement(StyledOldPrice, {
    currency: currency,
    stroke: true
  }, oldPrice), count ? /*#__PURE__*/React.createElement(StyledCount, null, "\xD7", count) : '');
};
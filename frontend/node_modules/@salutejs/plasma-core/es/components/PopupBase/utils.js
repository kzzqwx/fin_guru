function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { css } from 'styled-components';
/*
 * Класс корневого компонента PopupBaseRoot: `popup-base-root`
 */
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('PopupBase/utils');
export var popupBaseRootClass = 'popup-base-root';
export var endAnimationClass = 'popup-base-end-animation';
export var endTransitionClass = 'popup-base-end-transition';
export var handlePosition = function handlePosition(placement, offset) {
  var x = '0rem';
  var y = '0rem';
  if (offset) {
    var _offset = _slicedToArray(offset, 2),
      _x = _offset[0],
      _y = _offset[1];
    x = typeof _x === 'number' ? "".concat(_x, "rem") : _x;
    y = typeof _y === 'number' ? "".concat(_y, "rem") : _y;
  }
  if (!placement || placement === 'center') {
    return css(["left:calc(50% + ", ");top:calc(50% - ", ");transform:translate(-50%,-50%);"], x, y);
  }
  var left;
  var right;
  var top;
  var bottom;
  var placements = placement.split('-');
  placements.forEach(function (placement) {
    switch (placement) {
      case 'left':
        left = x;
        break;
      case 'right':
        right = x;
        break;
      case 'top':
        top = y;
        break;
      case 'bottom':
        bottom = y;
        break;
      default:
        break;
    }
  });
  var isCenteredX = left === undefined && right === undefined;
  var isCenteredY = top === undefined && bottom === undefined;

  // информация для переезда в new-hope: не забыть, что styled-component выпилит undefined свойства, а линария нет
  return css(["left:", ";right:", ";top:", ";bottom:", ";", " ", ""], left, right, top, bottom, isCenteredX && css(["left:calc(50% + ", ");transform:translateX(-50%);"], x), isCenteredY && css(["top:calc(50% - ", ");transform:translateY(-50%);"], y));
};
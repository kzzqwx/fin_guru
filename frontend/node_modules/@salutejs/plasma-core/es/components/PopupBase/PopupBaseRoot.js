var _excluded = ["id", "placement", "offset", "frame", "setVisible", "children", "role", "zIndex", "animationInfo"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useCallback, useRef } from 'react';
import styled, { css } from 'styled-components';
import { useForkRef } from '../../hooks';
import { usePopupBaseContext } from './PopupBaseContext';
import { handlePosition, popupBaseRootClass } from './utils';
export var DEFAULT_Z_INDEX = 9000;
var PopupBaseView = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-14025jn-0"
})(["position:relative;max-width:100%;pointer-events:all;"]);
var PopupRootContainer = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-14025jn-1"
})(["", " ", " ", ";"], function (_ref) {
  var frame = _ref.frame;
  return css(["position:", ";"], frame === 'document' ? 'fixed' : 'absolute');
}, function (_ref2) {
  var zIndex = _ref2.zIndex;
  return css(["z-index:", ";"], zIndex || DEFAULT_Z_INDEX);
}, function (_ref3) {
  var placement = _ref3.placement,
    offset = _ref3.offset;
  return handlePosition(placement, offset);
});

/**
 * Корень PopupBase.
 * Управляет показом/скрытием и анимацией всплывающего окна.
 */
export var PopupBaseRoot = /*#__PURE__*/React.forwardRef(function (_ref4, ref) {
  var id = _ref4.id,
    placement = _ref4.placement,
    offset = _ref4.offset,
    frame = _ref4.frame,
    setVisible = _ref4.setVisible,
    children = _ref4.children,
    role = _ref4.role,
    zIndex = _ref4.zIndex,
    animationInfo = _ref4.animationInfo,
    rest = _objectWithoutProperties(_ref4, _excluded);
  var contentRef = useRef(null);
  var innerRef = useForkRef(contentRef, ref);
  var popupController = usePopupBaseContext();
  var handleAnimationEnd = useCallback(function (e) {
    if (!contentRef || e.target !== contentRef.current) {
      return;
    }
    e.stopPropagation();
    if (animationInfo !== null && animationInfo !== void 0 && animationInfo.endAnimation) {
      popupController.unregister(id);
      setVisible(false);
      animationInfo.setEndAnimation(false);
    }
  }, [popupController.unregister, animationInfo === null || animationInfo === void 0 ? void 0 : animationInfo.endAnimation, setVisible]);
  return /*#__PURE__*/React.createElement(PopupRootContainer, _extends({
    className: popupBaseRootClass,
    ref: innerRef,
    placement: placement,
    frame: frame,
    offset: offset,
    zIndex: zIndex,
    onAnimationEnd: handleAnimationEnd,
    onTransitionEnd: handleAnimationEnd
  }, rest), /*#__PURE__*/React.createElement(PopupBaseView, {
    role: role
  }, children));
});
var _excluded = ["id", "isOpen", "placement", "offset", "frame", "children", "overlay", "role", "zIndex", "popupInfo", "withAnimation", "className"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useRef, useState, forwardRef } from 'react';
import ReactDOM from 'react-dom';
import styled from 'styled-components';
import { useForkRef, useUniqId } from '../../hooks';
import { POPOVER_PORTAL_ID } from './PopupBaseContext';
import { PopupBaseRoot } from './PopupBaseRoot';
import { usePopup } from './hooks';
import { endAnimationClass, endTransitionClass } from './utils';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('PopupBase/PopupBase');
var StyledPortal = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-1md4coi-0"
})([""]);
export var getClassName = function getClassName(animationInfo, className) {
  var endAnimation = animationInfo !== null && animationInfo !== void 0 && animationInfo.endAnimation ? endAnimationClass : '';
  var endTransition = animationInfo !== null && animationInfo !== void 0 && animationInfo.endTransition ? endTransitionClass : '';
  return [className, endAnimation, endTransition].filter(Boolean).join(' ');
};

/**
 * Базовый копмонент PopupBase.
 */
export var PopupBase = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var id = _ref.id,
    isOpen = _ref.isOpen,
    _ref$placement = _ref.placement,
    placement = _ref$placement === void 0 ? 'center' : _ref$placement,
    _ref$offset = _ref.offset,
    offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
    _ref$frame = _ref.frame,
    frame = _ref$frame === void 0 ? 'document' : _ref$frame,
    children = _ref.children,
    overlay = _ref.overlay,
    role = _ref.role,
    zIndex = _ref.zIndex,
    popupInfo = _ref.popupInfo,
    _ref$withAnimation = _ref.withAnimation,
    withAnimation = _ref$withAnimation === void 0 ? false : _ref$withAnimation,
    className = _ref.className,
    rest = _objectWithoutProperties(_ref, _excluded);
  var uniqId = useUniqId();
  var innerId = id || uniqId;
  var _usePopup = usePopup({
      isOpen: isOpen,
      id: innerId,
      popupInfo: popupInfo,
      withAnimation: withAnimation
    }),
    isVisible = _usePopup.isVisible,
    animationInfo = _usePopup.animationInfo,
    setVisible = _usePopup.setVisible;
  var portalRef = useRef(null);
  var contentRef = useRef(null);
  var innerRef = useForkRef(contentRef, ref);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    forceRender = _useState2[1];
  useEffect(function () {
    var portal = document.getElementById(POPOVER_PORTAL_ID);
    if (typeof frame !== 'string' && frame && frame.current) {
      portal = frame.current;
    }
    if (!portal) {
      portal = document.createElement('div');
      portal.setAttribute('id', POPOVER_PORTAL_ID);
      if (typeof frame === 'string' && frame !== 'document') {
        var _document$getElementB;
        (_document$getElementB = document.getElementById(frame)) === null || _document$getElementB === void 0 || _document$getElementB.appendChild(portal);
      } else {
        document.body.appendChild(portal);
      }
    }
    portalRef.current = portal;

    /**
     * Изменение стейта нужно для того, чтобы Popup
     * отобразился после записи DOM элемента в portalRef.current
     */
    forceRender(true);
  }, []);
  if (!isVisible && !isOpen) {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, portalRef.current && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(StyledPortal, _extends({
    className: getClassName(animationInfo, className)
  }, rest), overlay, /*#__PURE__*/React.createElement(PopupBaseRoot, {
    id: innerId,
    ref: innerRef,
    placement: placement,
    frame: frame,
    offset: offset,
    zIndex: zIndex,
    animationInfo: animationInfo,
    setVisible: setVisible
  }, children)), portalRef.current));
});
var _excluded = ["children", "contentLeft", "isActive", "role"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useRef, useContext, useEffect } from 'react';
import styled, { css } from 'styled-components';
import { useForkRef } from '../../hooks';
import { applyEllipsis } from '../../mixins';
import { TabsContext } from './TabsContext';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Tabs/TabItem');
/**
 * Без этого спана баг - контент (например, иконка)
 * сжимался в угоду текстового контента,
 * при чем ширина иконки игнорируется.
 */
var StyledTabItemContentLeft = /*#__PURE__*/styled.span.withConfig({
  componentId: "plasma__sc-1am72fb-0"
})(["display:flex;pointer-events:none;"]);

/**
 * Этот спан нужен для сокращения
 * текстового контента и отступов.
 */
var StyledTabItemText = /*#__PURE__*/styled.span.withConfig({
  componentId: "plasma__sc-1am72fb-1"
})(["display:inline;pointer-events:none;", " ", " ~ &{margin-left:0.375rem;}&:focus,&.focus-visible{outline:0 none;}"], applyEllipsis, StyledTabItemContentLeft);
export var StyledTabItem = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-1am72fb-2"
})(["align-items:center;box-sizing:border-box;display:flex;justify-content:center;border:0 none;background:none;color:inherit;letter-spacing:inherit;text-align:center;cursor:pointer;&:focus{outline:0 none;}", " ", " ", ""], function (_ref) {
  var disabled = _ref.disabled;
  return disabled && css(["pointer-events:none;"]);
}, function (_ref2) {
  var isChildren = _ref2.isChildren;
  return !isChildren && css(["width:var(--tab-item-height);padding-left:0;padding-right:0;"]);
}, function (_ref3) {
  var isContentLeft = _ref3.isContentLeft;
  return isContentLeft && css(["padding-top:var(--tab-item-padding-y-reduced);padding-bottom:var(--tab-item-padding-y-reduced);"]);
});

/**
 * Элемент списка, недопустимо использовать вне компонента Tabs.
 */
// eslint-disable-next-line prefer-arrow-callback
export var TabItem = /*#__PURE__*/forwardRef(function TabItem(_ref4, outerRef) {
  var children = _ref4.children,
    contentLeft = _ref4.contentLeft,
    isActive = _ref4.isActive,
    _ref4$role = _ref4.role,
    role = _ref4$role === void 0 ? 'tab' : _ref4$role,
    rest = _objectWithoutProperties(_ref4, _excluded);
  var innerRef = useRef(null);
  var ref = useForkRef(outerRef, innerRef);
  var refs = useContext(TabsContext);
  useEffect(function () {
    if (!refs) {
      return;
    }
    refs.register(innerRef);
    return function () {
      return refs.unregister(innerRef);
    };
  }, [refs]);
  return /*#__PURE__*/React.createElement(StyledTabItem, _extends({
    ref: ref,
    isChildren: !!children,
    isContentLeft: !!contentLeft,
    isActive: isActive,
    "aria-selected": isActive,
    role: role
  }, rest), contentLeft && /*#__PURE__*/React.createElement(StyledTabItemContentLeft, {
    "aria-hidden": true
  }, contentLeft), children && /*#__PURE__*/React.createElement(StyledTabItemText, {
    tabIndex: -1
  }, children));
});
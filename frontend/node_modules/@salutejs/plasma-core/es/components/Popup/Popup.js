function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["disclosure", "children", "isOpen", "trigger", "placement", "onToggle"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { memo, useRef, useCallback, useEffect } from 'react';
import styled from 'styled-components';
import { usePopper } from 'react-popper';
import { useForkRef } from '../../hooks';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Popup/Popup');
var StyledRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-w3yec9-0"
})(["position:relative;box-sizing:border-box;display:inline-flex;"]);
var StyledPopup = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-w3yec9-1"
})(["position:absolute;z-index:1;padding:var(--plasma-popup-padding);margin:var(--plasma-popup-margin);width:var(--plasma-popup-width);"]);
export var getPlacement = function getPlacement(placement) {
  return "".concat(placement, "-start");
};
var getAutoPlacements = function getAutoPlacements(placements) {
  return (placements || []).map(function (placement) {
    return getPlacement(placement);
  });
};

/**
 * Всплывающее окно с возможностью позиционирования
 * и вызова по клику либо ховеру.
 * @deprecated Используйте Popover
 */
export var Popup = /*#__PURE__*/memo( /*#__PURE__*/React.forwardRef(function (_ref, outerRootRef) {
  var disclosure = _ref.disclosure,
    children = _ref.children,
    isOpen = _ref.isOpen,
    trigger = _ref.trigger,
    _ref$placement = _ref.placement,
    placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
    onToggle = _ref.onToggle,
    rest = _objectWithoutProperties(_ref, _excluded);
  var rootRef = useRef(null);
  var popupRef = useRef(null);
  var handleRef = useForkRef(rootRef, outerRootRef);
  var isAutoArray = Array.isArray(placement);
  var isAuto = isAutoArray || placement === 'auto';
  var _usePopper = usePopper(rootRef.current, popupRef.current, {
      placement: getPlacement(isAutoArray ? 'auto' : placement),
      modifiers: [{
        name: 'flip',
        enabled: isAuto,
        options: {
          allowedAutoPlacements: getAutoPlacements(isAutoArray ? placement : [])
        }
      }]
    }),
    styles = _usePopper.styles,
    attributes = _usePopper.attributes,
    forceUpdate = _usePopper.forceUpdate;
  var onDocumentClick = useCallback(function (event) {
    var _rootRef$current;
    var targetIsRoot = event.target === rootRef.current;
    var rootHasTarget = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.contains(event.target);
    if (!targetIsRoot && !rootHasTarget) {
      onToggle === null || onToggle === void 0 || onToggle(false, event);
    }
  }, [onToggle]);
  var onClick = useCallback(function (event) {
    if (trigger === 'click') {
      var _popupRef$current;
      var targetIsPopup = event.target === popupRef.current;
      var rootHasTarget = (_popupRef$current = popupRef.current) === null || _popupRef$current === void 0 ? void 0 : _popupRef$current.contains(event.target);
      if (!targetIsPopup && !rootHasTarget) {
        onToggle === null || onToggle === void 0 || onToggle(!isOpen, event);
      }
    }
  }, [trigger, isOpen, onToggle]);
  var onMouseEnter = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 || onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onMouseLeave = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 || onToggle(false, event);
    }
  }, [trigger, onToggle]);
  var onFocus = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 || onToggle(true, event);
    }
  }, [trigger, onToggle]);
  var onBlur = useCallback(function (event) {
    if (trigger === 'hover') {
      onToggle === null || onToggle === void 0 || onToggle(false, event);
    }
  }, [trigger, onToggle]);
  useEffect(function () {
    document.addEventListener('click', onDocumentClick);
    return function () {
      return document.removeEventListener('click', onDocumentClick);
    };
  }, []);
  useEffect(function () {
    if (!isOpen || !forceUpdate) {
      return;
    }

    /*
     * INFO: Метод forceUpdate содержит в себе flushSync и приводит
     * к повторному рендеру компонента, который уже находится в процессе рендера.
     * Данный хак, нужен для того, чтобы это поведение избежать и перенаправить
     * вызов метода в очередь микрозадач.
     */
    Promise.resolve().then(forceUpdate);
  }, [isOpen, forceUpdate]);
  return /*#__PURE__*/React.createElement(StyledRoot, _extends({
    ref: handleRef,
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseLeave: onMouseLeave,
    onFocus: onFocus,
    onBlur: onBlur
  }, rest), disclosure, children && /*#__PURE__*/React.createElement(StyledPopup, _extends({}, attributes.popper, {
    ref: popupRef,
    style: _objectSpread(_objectSpread({}, styles.popper), {
      display: isOpen ? 'block' : 'none'
    })
  }), children));
}));
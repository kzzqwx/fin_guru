function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import React, { useState, useCallback } from 'react';
import { ToastController } from './ToastController';
import { ToastContext } from './ToastContext';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Toast/ToastProvider');
var DEFAULT_POSITION = 'bottom';
var DEFAULT_TIMEOUT = 3000;
var DEFAULT_FADE = true;
var getShowToastCallSignature = function getShowToastCallSignature(args) {
  if (_typeof(args[0]) === 'object' && 'text' in args[0]) {
    return args[0];
  }

  // TODO: issue https://github.com/salute-developers/plasma/issues/333
  var _args = _slicedToArray(args, 6),
    text = _args[0],
    position = _args[1],
    timeout = _args[2],
    fade = _args[3],
    contentLeft = _args[4],
    role = _args[5];
  return {
    text: text,
    position: position,
    timeout: timeout,
    fade: fade,
    contentLeft: contentLeft,
    role: role
  };
};
export var ToastProvider = function ToastProvider(_ref) {
  var children = _ref.children;
  var _useState = useState({
      text: null,
      position: null,
      timeout: null
    }),
    _useState2 = _slicedToArray(_useState, 2),
    value = _useState2[0],
    setValue = _useState2[1];
  var showToastCallback = function showToastCallback() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var _getShowToastCallSign = getShowToastCallSignature(args),
      text = _getShowToastCallSign.text,
      _getShowToastCallSign2 = _getShowToastCallSign.position,
      position = _getShowToastCallSign2 === void 0 ? DEFAULT_POSITION : _getShowToastCallSign2,
      _getShowToastCallSign3 = _getShowToastCallSign.timeout,
      timeout = _getShowToastCallSign3 === void 0 ? DEFAULT_TIMEOUT : _getShowToastCallSign3,
      _getShowToastCallSign4 = _getShowToastCallSign.fade,
      fade = _getShowToastCallSign4 === void 0 ? DEFAULT_FADE : _getShowToastCallSign4,
      contentLeft = _getShowToastCallSign.contentLeft,
      role = _getShowToastCallSign.role,
      onHide = _getShowToastCallSign.onHide,
      onShow = _getShowToastCallSign.onShow,
      offset = _getShowToastCallSign.offset;
    setValue({
      text: text,
      position: position,
      timeout: timeout,
      fade: fade,
      contentLeft: contentLeft,
      role: role,
      onHide: onHide,
      onShow: onShow,
      offset: offset
    });
    if (onShow) {
      onShow();
    }
  };
  var showToast = useCallback(showToastCallback, []);
  var onHide = value.onHide;
  var hideToast = useCallback(function () {
    setValue({
      text: null,
      position: null,
      timeout: null
    });
    if (onHide) {
      onHide();
    }
  }, [onHide]);
  return /*#__PURE__*/React.createElement(ToastContext.Provider, {
    value: _objectSpread(_objectSpread({}, value), {}, {
      showToast: showToast,
      hideToast: hideToast
    })
  }, children, /*#__PURE__*/React.createElement(ToastController, value));
};
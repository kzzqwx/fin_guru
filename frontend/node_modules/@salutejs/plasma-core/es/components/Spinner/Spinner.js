var _excluded = ["id", "size", "color", "deviceScale"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import styled, { keyframes, css } from 'styled-components';
import { accent } from '../../tokens';
import { useUniqId } from '../../hooks';
import { SpinnerSvg } from './SpinnerSvg';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Spinner/Spinner');
var rotateAnimation = /*#__PURE__*/keyframes(["from{transform:rotate(0);}to{transform:rotate(360deg);}"]);
var StyledRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-3zbofp-0"
})(["display:flex;box-sizing:border-box;", " animation:", " 1s linear infinite;"], function (_ref) {
  var $size = _ref.$size;
  return css(["width:", ";height:", ";"], $size, $size);
}, rotateAnimation);
var scalingPixelBasis = 16;
var sizeFormatting = function sizeFormatting(size) {
  var deviceScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  if (typeof size === 'number' || !size.endsWith('rem') && !size.endsWith('px')) {
    return "".concat(Number(size) / (scalingPixelBasis * deviceScale), "rem");
  }
  return size;
};

/**
 * Компонент для отображения индикатора загрузки.
 */
export var Spinner = function Spinner(props) {
  var id = props.id,
    _props$size = props.size,
    size = _props$size === void 0 ? 56 : _props$size,
    _props$color = props.color,
    color = _props$color === void 0 ? accent : _props$color,
    deviceScale = props.deviceScale,
    rest = _objectWithoutProperties(props, _excluded);
  var uniqId = useUniqId();
  var innerId = id || uniqId;
  var currentSize = sizeFormatting(size, deviceScale);
  return /*#__PURE__*/React.createElement(StyledRoot, _extends({
    id: innerId,
    $size: currentSize
  }, rest), /*#__PURE__*/React.createElement(SpinnerSvg, {
    id: innerId,
    width: size,
    height: size,
    color: color
  }));
};
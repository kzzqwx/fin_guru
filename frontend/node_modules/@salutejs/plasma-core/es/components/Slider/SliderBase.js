import React, { useCallback, useRef } from 'react';
import styled, { css } from 'styled-components';
import { useIsomorphicLayoutEffect } from '../../hooks';
var Slider = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-drxvay-0"
})(["position:relative;height:1.625rem;user-select:none;", " ", ""], function (_ref) {
  var _ref$$settings = _ref.$settings,
    _ref$$settings$indent = _ref$$settings.indent,
    indent = _ref$$settings$indent === void 0 ? 0.75 : _ref$$settings$indent,
    backgroundColor = _ref$$settings.backgroundColor,
    fillColor = _ref$$settings.fillColor;
  return css(["--indent:", "rem;--background-color:", ";--fill-color:", ";"], indent, backgroundColor, fillColor);
}, function (_ref2) {
  var disabled = _ref2.disabled;
  return disabled && css(["opacity:0.4;"]);
});
var RailWrap = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-drxvay-1"
})(["height:100%;"]);
var Rail = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-drxvay-2"
})(["position:relative;top:50%;margin-left:var(--indent);margin-right:var(--indent);height:0.25rem;border-radius:0.125rem;background-color:var(--background-color);overflow:hidden;transform:translateY(-50%);"]);
var Fill = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-drxvay-3"
})(["position:absolute;height:100%;top:0;left:0;background-color:var(--fill-color);width:0;"]);
export var SliderBase = function SliderBase(_ref3) {
  var max = _ref3.max,
    min = _ref3.min,
    setStepSize = _ref3.setStepSize,
    railFillWidth = _ref3.railFillWidth,
    children = _ref3.children,
    _ref3$railFillXPositi = _ref3.railFillXPosition,
    railFillXPosition = _ref3$railFillXPositi === void 0 ? 0 : _ref3$railFillXPositi,
    disabled = _ref3.disabled,
    onChange = _ref3.onChange,
    _ref3$settings = _ref3.settings,
    settings = _ref3$settings === void 0 ? {} : _ref3$settings;
  var _settings$indent = settings.indent,
    indent = _settings$indent === void 0 ? 0.75 : _settings$indent,
    _settings$fontSizeMul = settings.fontSizeMultiplier,
    fontSizeMultiplier = _settings$fontSizeMul === void 0 ? 16 : _settings$fontSizeMul;
  var ref = useRef(null);
  var gap = indent * fontSizeMultiplier * 2;
  var onHandleChange = useCallback(function (e) {
    if (!onChange || disabled) {
      return;
    }
    var _e$currentTarget$getB = e.currentTarget.getBoundingClientRect(),
      x = _e$currentTarget$getB.x,
      width = _e$currentTarget$getB.width;
    var lastX = e.clientX - x;
    var position = min + lastX / (width - gap) * (max - min);
    var result = Math.max(min, Math.min(max, position));
    onChange(result, {
      lastX: lastX
    });
  }, [onChange, disabled, min, gap, max]);
  useIsomorphicLayoutEffect(function () {
    var resizeHandler = function resizeHandler() {
      if (ref.current) {
        var railSize = ref.current.offsetWidth - gap;
        var totalSteps = max - min;
        setStepSize(railSize / totalSteps);
      }
    };
    resizeHandler();
    window.addEventListener('resize', resizeHandler);
    return function () {
      return window.removeEventListener('resize', resizeHandler);
    };
  }, [min, max, setStepSize, ref.current]);
  var fillStyle = {
    left: "".concat(railFillXPosition, "px"),
    width: "".concat(railFillWidth, "px")
  };
  return /*#__PURE__*/React.createElement(Slider, {
    disabled: disabled,
    ref: ref,
    $settings: settings
  }, /*#__PURE__*/React.createElement(RailWrap, {
    "aria-hidden": "true",
    onMouseDown: onHandleChange
  }, /*#__PURE__*/React.createElement(Rail, null, /*#__PURE__*/React.createElement(Fill, {
    style: fillStyle
  }))), children);
};
var _excluded = ["onChangeCommitted", "stepSize", "xPosition", "min", "max", "value", "bounds", "ariaValueMin", "ariaLabel", "multipleStepSize", "thumb"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useCallback } from 'react';
import styled from 'styled-components';
import { getSliderThumbValue } from './utils';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Slider/ThumbBase');
var KeyboardSupport = {
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  ArrowLeft: 37,
  ArrowUp: 38,
  ArrowRight: 39,
  ArrowDown: 40
};
export var ThumbBase = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-1clcpkv-0"
})(["border-radius:50%;background-clip:content-box;box-sizing:content-box;transition:transform 0.1s ease-in-out;&:focus{outline:none;}&:not([disabled]){&.focus-visible,&[data-focus-visible-added]{border-color:currentColor;}}"]);
export var Thumb = function Thumb(_ref) {
  var onChangeCommitted = _ref.onChangeCommitted,
    stepSize = _ref.stepSize,
    _ref$xPosition = _ref.xPosition,
    xPosition = _ref$xPosition === void 0 ? 0 : _ref$xPosition,
    min = _ref.min,
    max = _ref.max,
    value = _ref.value,
    bounds = _ref.bounds,
    _ref$ariaValueMin = _ref.ariaValueMin,
    ariaValueMin = _ref$ariaValueMin === void 0 ? min : _ref$ariaValueMin,
    ariaLabel = _ref.ariaLabel,
    multipleStepSize = _ref.multipleStepSize,
    ThumbAbstract = _ref.thumb,
    rest = _objectWithoutProperties(_ref, _excluded);
  var onKeyPress = useCallback(function (event) {
    event.persist();
    var keyCode = event.keyCode,
      target = event.target;
    if (!Object.values(KeyboardSupport).includes(keyCode)) {
      return;
    }
    var ArrowUp = KeyboardSupport.ArrowUp,
      ArrowRight = KeyboardSupport.ArrowRight,
      ArrowDown = KeyboardSupport.ArrowDown,
      ArrowLeft = KeyboardSupport.ArrowLeft,
      Home = KeyboardSupport.Home,
      End = KeyboardSupport.End,
      PageDown = KeyboardSupport.PageDown,
      PageUp = KeyboardSupport.PageUp;
    var computedMultipleSteps = stepSize * (multipleStepSize / 100 * max);
    var data = {
      x: 0,
      deltaX: stepSize,
      lastX: xPosition,
      y: 0,
      deltaY: 0,
      lastY: 0,
      node: target
    };
    switch (keyCode) {
      case ArrowUp:
      case ArrowRight:
        data.x = xPosition + stepSize;
        break;
      case ArrowDown:
      case ArrowLeft:
        data.x = xPosition - stepSize;
        data.deltaX = -stepSize;
        break;
      case PageUp:
        data.x = xPosition + computedMultipleSteps;
        data.deltaX = computedMultipleSteps;
        break;
      case PageDown:
        data.x = xPosition - computedMultipleSteps;
        data.deltaX = -computedMultipleSteps;
        break;
      case End:
        data.x = max * stepSize;
        break;
      case Home:
        data.x = 0;
        break;
      default:
        data.x = 0;
    }
    var left = bounds.left,
      right = bounds.right;

    /*
     * INFO:Находим значение в диапазоне между указанными левой и правой границами.
     * Необходимо для правильного расчета положения SliderThumb.
     * см. функция clamp
     */
    var boundedValue = Math.max(Math.min(right, data.x), left);
    var computedValue = getSliderThumbValue(boundedValue, stepSize, min, max);
    onChangeCommitted(computedValue, data);
  }, [onChangeCommitted, bounds, stepSize, multipleStepSize, min, max, xPosition]);
  return /*#__PURE__*/React.createElement(ThumbAbstract, _extends({
    role: "slider",
    "aria-label": ariaLabel,
    "aria-valuemin": ariaValueMin,
    "aria-valuemax": max,
    "aria-valuenow": value,
    "aria-orientation": "horizontal",
    onKeyDown: onKeyPress
  }, rest));
};
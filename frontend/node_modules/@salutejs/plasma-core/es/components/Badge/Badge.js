var _excluded = ["size", "text", "contentLeft"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import styled, { css } from 'styled-components';
import { caption } from '../../tokens';

/**
 * Размеры в ремах.
 */
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Badge/Badge');
export var badgeSizes = {
  l: {
    textMarginX: '0.25rem',
    textMarginLeftAfterContent: '0.25rem'
  },
  s: {
    textMarginX: '0.125rem',
    textMarginLeftAfterContent: '0.125rem'
  }
};
export var badgeRootSizes = {
  l: {
    height: '1.5rem',
    padding: '0.25rem',
    minWidth: '1.5rem',
    borderRadius: '0.75rem',
    fontSize: '0.75rem'
  },
  s: {
    height: '1rem',
    padding: '0.125rem',
    minWidth: '1rem',
    borderRadius: '0.5rem',
    fontSize: '0.625rem'
  }
};
var StyledText = /*#__PURE__*/styled.span.withConfig({
  componentId: "plasma__sc-16llsfu-0"
})([""]);
var StyledContent = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-16llsfu-1"
})(["display:flex;"]);
var StyledBadge = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-16llsfu-2"
})(["", ";display:inline-flex;align-items:center;box-sizing:border-box;justify-content:center;width:max-content;", ";"], caption, function (_ref) {
  var size = _ref.size,
    circled = _ref.circled;
  return css(["", ";", " ", "{margin-left:", ";margin-right:", ";}", " ~ ", "{margin-left:", ";}"], badgeRootSizes[size], circled && css(["width:", ";padding-left:0;padding-right:0;"], badgeRootSizes[size].minWidth), StyledText, badgeSizes[size].textMarginX, badgeSizes[size].textMarginX, StyledContent, StyledText, badgeSizes[size].textMarginLeftAfterContent);
});
/**
 * Небольшая бирка для ячеек и карточек.
 * Компонент может отображаться в нескольких размерах и цветах, может содержать текст и/или иконку.
 */
export var Badge = function Badge(_ref2) {
  var _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 'l' : _ref2$size,
    text = _ref2.text,
    contentLeft = _ref2.contentLeft,
    rest = _objectWithoutProperties(_ref2, _excluded);
  return /*#__PURE__*/React.createElement(StyledBadge, _extends({
    size: size
  }, rest), contentLeft && /*#__PURE__*/React.createElement(StyledContent, null, contentLeft), text && /*#__PURE__*/React.createElement(StyledText, null, text));
};
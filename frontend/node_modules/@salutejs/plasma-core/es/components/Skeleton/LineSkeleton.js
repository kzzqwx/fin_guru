var _StyledVisibleLine;
var _excluded = ["size", "roundness"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import styled, { css } from 'styled-components';
import { applySkeletonGradient, applyRoundness } from '../../mixins';
import * as typography from '../../tokens/typography';
import { DEFAULT_TEXT_SIZE, DEFAULT_ROUNDNESS } from './Skeleton';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Skeleton/LineSkeleton');
var StyledVisibleLine = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-7e0z6x-0"
})(["position:relative;overflow:hidden;width:100%;"]);
var StyledLine = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-7e0z6x-1"
})(["display:flex;align-items:center;width:100%;", " & ", "{", " ", "}"], function (_ref) {
  var $size = _ref.$size;
  return css(["height:", ";& ", "{height:", ";}"], typography[$size].lineHeight, StyledVisibleLine, typography[$size].fontSize);
}, StyledVisibleLine, applyRoundness, applySkeletonGradient);
/**
 * Размеры компонента задаются с помощью констант и соответствуют размерам [типографических элементов](/?path=/docs/).
 */
export var LineSkeleton = function LineSkeleton(_ref2) {
  var _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? DEFAULT_TEXT_SIZE : _ref2$size,
    _ref2$roundness = _ref2.roundness,
    roundness = _ref2$roundness === void 0 ? DEFAULT_ROUNDNESS : _ref2$roundness,
    rest = _objectWithoutProperties(_ref2, _excluded);
  return /*#__PURE__*/React.createElement(StyledLine, _extends({
    $size: size,
    roundness: roundness
  }, rest), _StyledVisibleLine || (_StyledVisibleLine = /*#__PURE__*/React.createElement(StyledVisibleLine, null)));
};
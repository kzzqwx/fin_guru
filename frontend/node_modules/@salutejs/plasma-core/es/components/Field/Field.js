import styled, { css } from 'styled-components';
import { applyEllipsis, applyDisabled } from '../../mixins';
import { secondary, tertiary, body1, caption } from '../../tokens';
import { fieldStatuses } from './Field.statuses';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Field/Field');
/**
 * Common dynamic placeholder.
 */
export var FieldPlaceholder = /*#__PURE__*/styled.label.withConfig({
  componentId: "plasma__sc-2ygkie-0"
})(["position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;color:", ";pointer-events:none;transition:", ";transform-origin:top left;", ""], tertiary, function (_ref) {
  var theme = _ref.theme;
  return theme.lowPerformance ? 'unset' : 'all 0.1s ease-in';
}, applyEllipsis);

/**
 * Content wrapper for left and right slots of the field.
 */
export var FieldContent = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-2ygkie-1"
})(["position:absolute;top:0;", ";bottom:0;display:flex;align-items:center;height:3rem;"], function (_ref2) {
  var pos = _ref2.pos;
  return pos === 'left' ? 'left: 1rem' : 'right: 1rem';
});

/**
 * An inline block to place a helper text under the form item.
 */
export var FieldHelper = /*#__PURE__*/styled.span.withConfig({
  componentId: "plasma__sc-2ygkie-2"
})(["", ";display:block;margin-top:0.25rem;", ""], caption, applyEllipsis);
/**
 * Common container for singular form item.
 */
export var FieldRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-2ygkie-3"
})(["", ";position:relative;display:block;box-sizing:border-box;color:", ";", " ", " ", " ", ""], body1, secondary, applyDisabled, function (_ref3) {
  var _ref3$$size = _ref3.$size,
    $size = _ref3$$size === void 0 ? 'm' : _ref3$$size;
  return $size === 'l' ? css(["", "{top:1.125rem;left:1rem;right:1rem;}input:not(:placeholder-shown) ~ ", "{transform:scale(0.75);top:0.375rem;}", "{height:3.5rem;}"], FieldPlaceholder, FieldPlaceholder, FieldContent) : css(["", "{height:3rem;}"], FieldContent);
}, function (_ref4) {
  var $isContentLeft = _ref4.$isContentLeft,
    $isContentRight = _ref4.$isContentRight;
  return css(["input,textarea{", "  ", "}", "{", "  ", "}"], $isContentLeft && 'padding-left: 3.125rem;', $isContentRight && 'padding-right: 3.125rem;', FieldPlaceholder, $isContentLeft && 'left: 3.125rem;', $isContentRight && 'right: 3.125rem;');
}, function (_ref5) {
  var $isHelper = _ref5.$isHelper,
    status = _ref5.status;
  return status && ($isHelper ? css(["", "{color:", ";}"], FieldHelper, fieldStatuses[status]) : css(["", "{color:", ";}"], FieldPlaceholder, fieldStatuses[status]));
});
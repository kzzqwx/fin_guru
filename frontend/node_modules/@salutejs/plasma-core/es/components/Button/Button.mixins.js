function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { css } from 'styled-components';
import { addFocus } from '../../mixins';
import { convertRoundnessMatrix } from '../../utils';
/**
 * Создание специализированного миксина со своими размерами и типографикой.
 * @param {Record<string, object>} sizes
 * @param {Record<string, object>} typos
 */
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Button/Button.mixins');
export var getButtonSizesMixin = function getButtonSizesMixin(sizes, typos) {
  return function (_ref) {
    var size = _ref.size,
      pin = _ref.pin,
      outlined = _ref.outlined,
      focused = _ref.focused,
      isContentLeft = _ref.$isContentLeft,
      isContentRight = _ref.$isContentRight,
      shiftLeft = _ref.shiftLeft,
      shiftRight = _ref.shiftRight,
      square = _ref.square,
      stretch = _ref.stretch,
      theme = _ref.theme;
    var paddingX = sizes[size].paddingX;
    if (square) {
      paddingX = sizes[size].paddingY;
    } else if (stretch) {
      paddingX = sizes[size].paddingStretchX;
    } else if (isContentLeft || isContentRight) {
      paddingX = sizes[size].paddingContentX;
    }
    return css(["height:", ";padding:", " ", ";border-radius:", ";", " ", " ", " ", " ", " ", ""], sizes[size].height, sizes[size].paddingY, paddingX, convertRoundnessMatrix(pin, sizes[size].radius, sizes[size].radiusCircle), stretch && 'width: 100%;', square && " width: ".concat(sizes[size].height, ";"), shiftLeft && "margin-left: calc(-1 * ".concat(paddingX, ");"), shiftRight && "margin-right: calc(-1 * ".concat(paddingX, ");"), typos[size], addFocus(_objectSpread(_objectSpread({}, theme), {}, {
      focused: focused,
      outlined: outlined,
      outlineRadius: convertRoundnessMatrix(pin, "calc(".concat(sizes[size].radius, " + var(--plasma-outline-size))"), "calc(".concat(sizes[size].radiusCircle, " + var(--plasma-outline-size))"))
    })));
  };
};
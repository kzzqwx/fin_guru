var _excluded = ["id", "withBlur", "onOverlayClick", "onClose", "zIndex", "closeOnOverlayClick"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useCallback, useMemo } from 'react';
import styled, { css } from 'styled-components';
import { DEFAULT_Z_INDEX } from '../PopupBase/PopupBaseRoot';
import { usePopupBaseContext } from '../PopupBase';
import { getIdLastModal } from './ModalBaseContext';
/*
 * Класс компонента ModalBaseOverlay: `modal-base-overlay`
 */
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('ModalBase/ModalOverlay');
export var modalBaseOverlayClass = 'modal-base-overlay';

// TODO: новый отдельный оверлей #778
export var Overlay = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma__sc-1jo935d-0"
})(["position:fixed;width:100%;height:100%;top:0;left:0;", " ", ";background-color:", ";backdrop-filter:var(--backdrop-filter);cursor:", ";"], function (_ref) {
  var zIndex = _ref.zIndex;
  return css(["z-index:", ";"], zIndex || DEFAULT_Z_INDEX);
}, function (_ref2) {
  var $withBlur = _ref2.$withBlur;
  return css(["--background-color:", ";--backdrop-filter:", ";"], $withBlur ? 'var(--plasma-modal-blur-overlay-color)' : 'var(--plasma-modal-overlay-color)', $withBlur ? 'blur(1rem)' : 'none');
}, function (_ref3) {
  var transparent = _ref3.transparent;
  return transparent ? 'transparent' : 'var(--background-color)';
}, function (_ref4) {
  var clickable = _ref4.clickable;
  return clickable ? 'pointer' : 'default';
});

/**
 * ModalOverlay - подложка для ModalBase.
 */
export var ModalOverlay = function ModalOverlay(_ref5) {
  var id = _ref5.id,
    withBlur = _ref5.withBlur,
    onOverlayClick = _ref5.onOverlayClick,
    onClose = _ref5.onClose,
    zIndex = _ref5.zIndex,
    _ref5$closeOnOverlayC = _ref5.closeOnOverlayClick,
    closeOnOverlayClick = _ref5$closeOnOverlayC === void 0 ? true : _ref5$closeOnOverlayC,
    rest = _objectWithoutProperties(_ref5, _excluded);
  var popupController = usePopupBaseContext();
  var onModalOverlayKeyDown = useCallback(function (event) {
    if (!closeOnOverlayClick) {
      return;
    }
    if (onOverlayClick) {
      onOverlayClick(event);
      return;
    }
    if (onClose) {
      onClose();
    }
  }, [closeOnOverlayClick, onOverlayClick, onClose]);
  var transparent = useMemo(function () {
    return getIdLastModal(popupController.items) !== id;
  }, [id, popupController.items]);
  return /*#__PURE__*/React.createElement(Overlay, _extends({
    className: modalBaseOverlayClass,
    transparent: transparent,
    clickable: closeOnOverlayClick,
    onClick: onModalOverlayKeyDown,
    zIndex: zIndex,
    $withBlur: withBlur
  }, rest));
};
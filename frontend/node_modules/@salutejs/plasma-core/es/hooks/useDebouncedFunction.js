import React from 'react';

/**
 * @param {Function} func
 * @param {number} delay
 * @param {boolean} cleanUp
 * https://habr.com/ru/company/domclick/blog/510616/
 */
export function useDebouncedFunction(func, delay, cleanUp) {
  var timeoutRef = React.useRef();

  /**
   * Очистка таймера
   */
  function clearTimer() {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = undefined;
    }
  }

  /**
   * Очищаем таймер при анмаунте компонента, если cleanUp выставлен в true
   * и тем самым отменяем последний запланированный вызов
   */
  React.useEffect(function () {
    return cleanUp ? clearTimer : undefined;
  }, [cleanUp]);
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    clearTimer();
    timeoutRef.current = setTimeout(function () {
      return func.apply(void 0, args);
    }, delay);
  };
}
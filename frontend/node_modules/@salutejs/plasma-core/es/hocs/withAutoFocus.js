var _excluded = ["autoFocus", "tabIndex", "preventScroll"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useRef } from 'react';
export var withAutoFocus = function withAutoFocus(Component) {
  return function (_ref) {
    var autoFocus = _ref.autoFocus,
      _ref$tabIndex = _ref.tabIndex,
      tabIndex = _ref$tabIndex === void 0 ? -1 : _ref$tabIndex,
      _ref$preventScroll = _ref.preventScroll,
      preventScroll = _ref$preventScroll === void 0 ? true : _ref$preventScroll,
      props = _objectWithoutProperties(_ref, _excluded);
    var divRef = useRef(null);
    useEffect(function () {
      if (autoFocus && divRef.current) {
        divRef.current.focus({
          preventScroll: preventScroll
        });
      }
    });
    return /*#__PURE__*/React.createElement(Component, _extends({
      tabIndex: tabIndex,
      ref: divRef
    }, props));
  };
};
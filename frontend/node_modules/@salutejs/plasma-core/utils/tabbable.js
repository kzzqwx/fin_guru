"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isVisible = exports.isTabble = exports.isFocusable = exports.focusSelector = exports.findTabbableDescendants = void 0;
var tabbableNode = /input|select|textarea|button|object/;
var focusSelector = exports.focusSelector = /*#__PURE__*/['input', 'select', 'textarea', 'a', 'button', 'object', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
var isHidden = function isHidden(el) {
  return el.offsetWidth <= 0 && el.offsetHeight <= 0 || el.style.display === 'none' || el.style.visibility === 'hidden' || el.style.opacity === '0';
};
var isVisible = exports.isVisible = function isVisible(element, parentContainer) {
  var parentElement = element;
  while (parentElement) {
    if (parentElement === parentContainer || parentElement === document.body) {
      break;
    }
    if (isHidden(parentElement)) {
      return false;
    }
    parentElement = parentElement.parentNode;
  }
  return true;
};
var getElementTabIndex = function getElementTabIndex(element) {
  var tabIndex = element.getAttribute('tabindex');
  return tabIndex === null ? NaN : parseInt(tabIndex, 10);
};
var isFocusable = exports.isFocusable = function isFocusable(element, parentContainer) {
  var nodeName = element.nodeName.toLowerCase();
  var isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));
  var res = tabbableNode.test(nodeName) && !element.disabled || (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);
  return Boolean(res) && isVisible(element, parentContainer);
};
var isTabble = exports.isTabble = function isTabble(element, parentContainer) {
  var tabIndex = getElementTabIndex(element);
  var isTabIndexNaN = Number.isNaN(tabIndex);
  return (isTabIndexNaN || tabIndex >= 0) && isFocusable(element, parentContainer);
};

// Все элементы внутри данной ноды, до которых можно добраться табом
var findTabbableDescendants = exports.findTabbableDescendants = function findTabbableDescendants(element) {
  return Array.from(element.querySelectorAll(focusSelector)).filter(function (el) {
    return isTabble(el, element);
  });
};
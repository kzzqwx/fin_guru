import { SaluteHandler, SaluteRequest, ScenarioSchema, ScenarioSchemaItem } from './types/salute';
export declare type UserScenario<Rq extends SaluteRequest, Sh extends SaluteHandler<Rq>> = {
    getByPath: (path: string[]) => ScenarioSchemaItem<Rq, Sh> | undefined;
    resolve: (path: string[], req: Rq) => {
        path: string[];
        state: ScenarioSchemaItem<Rq, Sh>;
    } | null;
};
export declare const createUserScenario: <Rq extends SaluteRequest<Record<string, string | string[] | undefined>, import("..").AppState, unknown> = SaluteRequest<Record<string, string | string[] | undefined>, import("..").AppState, unknown>, Session extends Record<string, unknown> = Record<string, unknown>, Sh extends SaluteHandler<Rq, Session, import("./types/salute").SaluteResponse<import("..").NLPResponseATU>, Record<string, unknown>> = SaluteHandler<Rq, Session, import("./types/salute").SaluteResponse<import("..").NLPResponseATU>, Record<string, unknown>>>(scenarioSchema: Record<string, ScenarioSchemaItem<Rq, Sh>>) => UserScenario<Rq, Sh>;
//# sourceMappingURL=createUserScenario.d.ts.map
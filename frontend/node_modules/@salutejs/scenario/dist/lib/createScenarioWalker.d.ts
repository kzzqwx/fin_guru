import { UserScenario } from './createUserScenario';
import { SystemScenario } from './createSystemScenario';
import { IntentsDict, Recognizer, SaluteRequest, SaluteHandler, SaluteResponse, SaluteSession } from './types/salute';
import { AppState } from './types/systemMessage';
declare type CreateScenarioWalkerParams<Rq extends SaluteRequest, Sh extends SaluteHandler> = {
    intents?: IntentsDict;
    recognizer?: Recognizer;
    systemScenario: SystemScenario;
    userScenario?: UserScenario<Rq, Sh>;
    slotFillingConfidence?: number;
};
export declare const createScenarioWalker: <Rq extends SaluteRequest<Record<string, string | string[] | undefined>, AppState, unknown>, Session extends Record<string, unknown>, Sh extends SaluteHandler<Rq, Session, SaluteResponse<import("..").NLPResponseATU>, Record<string, unknown>>>({ intents, recognizer, systemScenario, userScenario, slotFillingConfidence, }: CreateScenarioWalkerParams<Rq, Sh>) => <R extends Rq = Rq>({ req, res, session, }: {
    req: R;
    res: SaluteResponse;
    session: SaluteSession<Session>;
}) => Promise<void>;
export {};
//# sourceMappingURL=createScenarioWalker.d.ts.map
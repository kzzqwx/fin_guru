"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NotificationsStore = void 0;
exports.addNotification = addNotification;
exports.closeNotification = void 0;
var _storeon = /*#__PURE__*/require("storeon");
var _excluded = ["id"];
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
/**
 * Создает хранилищие с ключем `notifications` к массиву с окнами.
 */
var NotificationsStore = exports.NotificationsStore = /*#__PURE__*/(0, _storeon.createStoreon)([function (store) {
  store.on('@init', function () {
    return {
      notifications: []
    };
  });
  store.on('add', function (_ref, notif) {
    var notifications = _ref.notifications;
    return {
      notifications: notifications.concat([notif])
    };
  });
  store.on('hide', function (_ref2, id) {
    var notifications = _ref2.notifications;
    return {
      notifications: notifications.map(function (notif) {
        return id === notif.id ? _objectSpread(_objectSpread({}, notif), {}, {
          isHidden: true
        }) : notif;
      })
    };
  });
  store.on('remove', function (_ref3, id) {
    var notifications = _ref3.notifications;
    return {
      notifications: notifications.filter(function (notif) {
        return id !== notif.id;
      })
    };
  });
}]);
var closeNotification = exports.closeNotification = function closeNotification(id) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 380;
  var dispatch = NotificationsStore.dispatch;
  dispatch('hide', id);
  setTimeout(function () {
    return dispatch('remove', id);
  }, delay);
};

/**
 * Открыть новое окно.
 * @param props Пропсы всплывающего окна
 * @return Идентификатор нового окна
 */
function addNotification(_ref4) {
  var externalId = _ref4.id,
    rest = _objectWithoutProperties(_ref4, _excluded);
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
  var id = externalId || "plasma-notification-".concat(Date.now());
  var dispatch = NotificationsStore.dispatch;
  dispatch('add', _objectSpread(_objectSpread({}, rest), {}, {
    id: id,
    isHidden: false
  }));
  setTimeout(function () {
    return closeNotification(id);
  }, timeout);
  return id;
}
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.baseContent = exports.base = exports.StyledSpinner = exports.StyledContentRight = exports.StyledContentLeft = exports.Loader = exports.LoadWrap = exports.ButtonValue = exports.ButtonText = void 0;
var _styledComponents = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("styled-components"));
var _mixins = /*#__PURE__*/require("../../mixins");
var _engines = /*#__PURE__*/require("../../engines");
var _Spinner = /*#__PURE__*/require("../Spinner");
var _Button = /*#__PURE__*/require("./Button.tokens");
var _templateObject;
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
// issue #823
var mergedConfig = /*#__PURE__*/(0, _engines.mergeConfig)(_Spinner.spinnerConfig);
var Spinner = /*#__PURE__*/(0, _engines.component)(mergedConfig);
var ButtonText = exports.ButtonText = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma-new-hope__sc-9d9bqj-0"
})(["min-width:4ch;flex-shrink:2;", " &.", "{text-align:start;flex-grow:2;}"], /*#__PURE__*/(0, _mixins.applyEllipsis)(), /*#__PURE__*/String(_Button.classes.contentRelaxed));
var ButtonValue = exports.ButtonValue = /*#__PURE__*/_styledComponents["default"].span.withConfig({
  componentId: "plasma-new-hope__sc-9d9bqj-1"
})(["color:var(", ");margin:var(", ");min-width:4ch;", ""], _Button.tokens.buttonValueColor, _Button.tokens.buttonValueMargin, /*#__PURE__*/(0, _mixins.applyEllipsis)());

// TODO: #720
var LoadWrap = exports.LoadWrap = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-new-hope__sc-9d9bqj-2"
})(["opacity:", ";display:flex;align-items:inherit;justify-content:", ";height:100%;width:100%;"], function (_ref) {
  var isLoading = _ref.isLoading;
  return isLoading ? '0' : '1';
}, function (_ref2) {
  var contentPlacing = _ref2.contentPlacing;
  return contentPlacing;
});
var Loader = exports.Loader = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-new-hope__sc-9d9bqj-3"
})(["position:absolute;"]);
var StyledSpinner = exports.StyledSpinner = /*#__PURE__*/(0, _styledComponents["default"])(Spinner).withConfig({
  componentId: "plasma-new-hope__sc-9d9bqj-4"
})(["", ":var(", ");", ":var(", ");"], _Spinner.spinnerTokens.size, _Button.tokens.buttonSpinnerSize, _Spinner.spinnerTokens.color, _Button.tokens.buttonSpinnerColor);
var StyledContentLeft = exports.StyledContentLeft = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-new-hope__sc-9d9bqj-5"
})(["display:flex;margin:var(", ");"], _Button.tokens.buttonLeftContentMargin);
var StyledContentRight = exports.StyledContentRight = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-new-hope__sc-9d9bqj-6"
})(["display:flex;margin:var(", ");"], _Button.tokens.buttonRightContentMargin);
var base = exports.base = /*#__PURE__*/(0, _styledComponents.css)(_templateObject || (_templateObject = /*#__PURE__*/_taggedTemplateLiteral(["\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    box-sizing: border-box;\n    justify-content: center;\n\n    appearance: none;\n    border: none;\n    cursor: pointer;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    a& {\n        text-decoration: none;\n    }\n\n    /* NOTE: \n        --plasma_computed-btn-br-radius is defined in Button.tsx\n    */\n    --plasma_private-btn-br: var(--plasma_computed-btn-br);\n    border-radius: var(--plasma_private-btn-br);\n\n    &&.", " {\n        width: var(", ");\n        padding: 0;\n    }\n"])), /*#__PURE__*/String(_Button.classes.buttonSquare), _Button.tokens.buttonHeight);

// INFO: Для возможности переиспользования стилей в других компонентах
var baseContent = exports.baseContent = /*#__PURE__*/"\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    box-sizing: border-box;\n    justify-content: center;\n\n    appearance: none;\n    border: none;\n    cursor: pointer;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    a& {\n        text-decoration: none;\n    }\n\n    /* NOTE: \n        --plasma_computed-btn-br-radius is defined in Button.tsx\n    */\n    --plasma_private-btn-br: var(--plasma_computed-btn-br);\n    border-radius: var(--plasma_private-btn-br);\n\n    &&.".concat(String(_Button.classes.buttonSquare), " {\n        width: var(").concat(_Button.tokens.buttonHeight, ");\n        padding: 0;\n    }\n\n    color: var(").concat(_Button.tokens.buttonColor, ");\n    background-color: var(").concat(_Button.tokens.buttonBackgroundColor, ");\n\n    :hover {\n        color: var(").concat(_Button.tokens.buttonColorHover, ", var(").concat(_Button.tokens.buttonColor, "));\n        background-color: var(").concat(_Button.tokens.buttonBackgroundColorHover, ", var(").concat(_Button.tokens.buttonBackgroundColor, "));\n\n        scale: var(").concat(_Button.tokens.buttonScaleHover, ");\n    }\n\n    :active {\n        color: var(").concat(_Button.tokens.buttonColorActive, ", var(").concat(_Button.tokens.buttonColor, "));\n        background-color: var(").concat(_Button.tokens.buttonBackgroundColorActive, ", var(").concat(_Button.tokens.buttonBackgroundColor, "));\n\n        scale: var(").concat(_Button.tokens.buttonScaleActive, ");\n    }\n\n    height: var(").concat(_Button.tokens.buttonHeight, ");\n    width: var(").concat(_Button.tokens.buttonWidth, ");\n\n    /* TODO: #714 move these calc's to plasma-mapping | ds-generator and add Math.round() */\n    padding: 0 var(").concat(_Button.tokens.buttonPadding, ", calc(var(").concat(_Button.tokens.buttonHeight, ") * 1.618 / 4));\n\n    font-family: var(").concat(_Button.tokens.buttonFontFamily, ");\n    font-size: var(").concat(_Button.tokens.buttonFontSize, ");\n    font-style: var(").concat(_Button.tokens.buttonFontStyle, ");\n    font-weight: var(").concat(_Button.tokens.buttonFontWeight, ");\n    letter-spacing: var(").concat(_Button.tokens.buttonLetterSpacing, ");\n    line-height: var(").concat(_Button.tokens.buttonLineHeight, ");\n\n    /* TODO: #710 make it token API ? */\n    --plasma_private-btn-outline-size: var(--plasma-button-outline-size, 0.0625rem);\n\n    :focus {\n        outline: none;\n    }\n\n    ").concat((0, _mixins.addFocus)({
  outlineOffset: '-0.125rem',
  outlineSize: 'var(--plasma_private-btn-outline-size)',
  outlineRadius: 'calc(0.125rem + var(--plasma_private-btn-br))',
  outlineColor: "var(".concat(_Button.tokens.buttonFocusColor, ")")
}), "\n\n    &[disabled] {\n        opacity: var(").concat(_Button.tokens.buttonDisabledOpacity, ");\n        cursor: not-allowed;\n\n        :hover,\n        :active {\n            scale: none;\n\n            color: var(").concat(_Button.tokens.buttonColor, ");\n            background-color: var(").concat(_Button.tokens.buttonBackgroundColor, ");\n        }\n    }\n\n    &.").concat(_Button.classes.fixedStretching, " {\n        width: var(").concat(_Button.tokens.buttonWidth, ");\n    }\n    &.").concat(_Button.classes.filledStretching, " {\n        width: 100%;\n    }\n    &.").concat(_Button.classes.autoStretching, " {\n        width: fit-content;\n    }\n");
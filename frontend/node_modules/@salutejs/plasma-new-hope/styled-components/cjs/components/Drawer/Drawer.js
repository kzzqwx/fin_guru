"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drawerRoot = exports.drawerConfig = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");
var _engines = /*#__PURE__*/require("../../engines");
var _Popup = /*#__PURE__*/require("../Popup");
var _Overlay = /*#__PURE__*/require("../Overlay");
var _utils = /*#__PURE__*/require("../Popup/utils");
var _Panel = /*#__PURE__*/require("../Panel");
var _utils2 = /*#__PURE__*/require("../../utils");
var _Drawer = /*#__PURE__*/require("./Drawer.tokens");
var _base = /*#__PURE__*/require("./variations/_view/base");
var _base2 = /*#__PURE__*/require("./variations/_size/base");
var _base3 = /*#__PURE__*/require("./variations/_borderRadius/base");
var _Drawer2 = /*#__PURE__*/require("./Drawer.styles");
var _DrawerContext = /*#__PURE__*/require("./DrawerContext");
var _hooks = /*#__PURE__*/require("./hooks");
var _excluded = ["id", "zIndex", "popupInfo", "withBlur", "children", "view", "size", "width", "height", "isOpen", "initialFocusRef", "focusAfterRef", "className", "onClose", "onOverlayClick", "onEscKeyDown", "offset", "frame", "borderRadius", "placement", "closeOnEsc", "closeOnOverlayClick", "asModal"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
// issue #823
var mergedPanelConfig = /*#__PURE__*/(0, _engines.mergeConfig)(_Panel.panelConfig);
var Panel = /*#__PURE__*/(0, _engines.component)(mergedPanelConfig);
var drawerRoot = exports.drawerRoot = function drawerRoot(Root) {
  return /*#__PURE__*/(0, _react.forwardRef)(function (_ref, outerRef) {
    var id = _ref.id,
      zIndex = _ref.zIndex,
      popupInfo = _ref.popupInfo,
      withBlur = _ref.withBlur,
      children = _ref.children,
      view = _ref.view,
      size = _ref.size,
      width = _ref.width,
      height = _ref.height,
      isOpen = _ref.isOpen,
      initialFocusRef = _ref.initialFocusRef,
      focusAfterRef = _ref.focusAfterRef,
      className = _ref.className,
      onClose = _ref.onClose,
      onOverlayClick = _ref.onOverlayClick,
      onEscKeyDown = _ref.onEscKeyDown,
      offset = _ref.offset,
      frame = _ref.frame,
      _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? 'none' : _ref$borderRadius,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'right' : _ref$placement,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      _ref$asModal = _ref.asModal,
      asModal = _ref$asModal === void 0 ? true : _ref$asModal,
      rest = _objectWithoutProperties(_ref, _excluded);
    var trapRef = (0, _plasmaCore.useFocusTrap)(true, initialFocusRef, focusAfterRef);
    var popupController = (0, _Popup.usePopupContext)();
    var innerRef = (0, _plasmaCore.useForkRef)(trapRef, outerRef);
    var uniqId = (0, _plasmaCore.safeUseId)();
    var innerId = id || uniqId;
    var overlayBackgroundToken = withBlur ? "var(".concat(_Drawer.tokens.drawerOverlayWithBlurColor, ")") : "var(".concat(_Drawer.tokens.drawerOverlayColor, ")");
    var innerWidth = width ? (0, _utils2.getSizeValueFromProp)(width) : '100%';
    var innerHeight = height ? (0, _utils2.getSizeValueFromProp)(height) : '100%';
    var _useDrawer = (0, _hooks.useDrawer)({
        id: innerId,
        isOpen: isOpen,
        closeOnEsc: closeOnEsc,
        onEscKeyDown: onEscKeyDown,
        onClose: onClose,
        popupInfo: popupInfo,
        disableScroll: asModal
      }),
      drawerInfo = _useDrawer.drawerInfo;
    var transparent = (0, _react.useMemo)(function () {
      return (0, _DrawerContext.getIdLastDrawer)(popupController.items) !== innerId;
    }, [innerId, popupController.items]);
    var onDrawerOverlayKeyDown = function onDrawerOverlayKeyDown(event) {
      if (onOverlayClick) {
        onOverlayClick(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    };
    return /*#__PURE__*/_react["default"].createElement(_Drawer2.StyledPopup, _extends({
      id: innerId,
      ref: asModal ? innerRef : outerRef,
      isOpen: isOpen,
      zIndex: zIndex,
      placement: placement,
      popupInfo: drawerInfo,
      frame: frame,
      width: innerWidth,
      height: innerHeight,
      offset: offset,
      withAnimation: true,
      overlay: asModal && /*#__PURE__*/_react["default"].createElement(Root, {
        view: view
      }, /*#__PURE__*/_react["default"].createElement(_Overlay.Overlay, {
        className: _Drawer.classes.overlay,
        zIndex: zIndex || _utils.DEFAULT_Z_INDEX,
        backgroundColorProperty: overlayBackgroundToken,
        withBlur: withBlur,
        transparent: transparent,
        isClickable: closeOnOverlayClick,
        onOverlayClick: onDrawerOverlayKeyDown
      }))
    }, rest), /*#__PURE__*/_react["default"].createElement(Root, {
      view: view,
      size: size,
      style: {
        width: innerWidth,
        height: innerHeight
      },
      borderRadius: borderRadius
    }, /*#__PURE__*/_react["default"].createElement(Panel, {
      width: innerWidth,
      height: innerHeight,
      className: className
    }, children)));
  });
};
var drawerConfig = exports.drawerConfig = {
  name: 'Drawer',
  tag: 'div',
  layout: drawerRoot,
  base: '',
  variations: {
    view: {
      css: _base.base
    },
    size: {
      css: _base2.base
    },
    borderRadius: {
      css: _base3.base
    }
  },
  defaults: {
    view: 'default',
    size: 'm',
    borderRadius: 'none'
  }
};
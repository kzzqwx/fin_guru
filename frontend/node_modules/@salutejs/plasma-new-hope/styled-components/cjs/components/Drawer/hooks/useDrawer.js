"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDrawer = void 0;
var _react = /*#__PURE__*/require("react");
var _DrawerContext = /*#__PURE__*/require("../DrawerContext");
var _Popup = /*#__PURE__*/require("../../Popup");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var ESCAPE_KEYCODE = 27;
var useDrawer = exports.useDrawer = function useDrawer(_ref) {
  var id = _ref.id,
    isOpen = _ref.isOpen,
    popupInfo = _ref.popupInfo,
    onEscKeyDown = _ref.onEscKeyDown,
    onClose = _ref.onClose,
    _ref$closeOnEsc = _ref.closeOnEsc,
    closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
    _ref$disableScroll = _ref.disableScroll,
    disableScroll = _ref$disableScroll === void 0 ? true : _ref$disableScroll;
  var popupController = (0, _Popup.usePopupContext)();
  var overflow = (0, _react.useRef)(document.body.style.overflowY);

  // При ESC закрывает текущее окно, если это возможно
  var onKeyDown = (0, _react.useCallback)(function (event) {
    if (!closeOnEsc) {
      return;
    }
    if (event.keyCode === ESCAPE_KEYCODE && (0, _DrawerContext.getIdLastDrawer)(popupController.items) === id) {
      if (onEscKeyDown) {
        onEscKeyDown(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    }
  }, [onClose, onEscKeyDown, popupController.items, closeOnEsc]);
  (0, _react.useEffect)(function () {
    window.addEventListener('keydown', onKeyDown);
    return function () {
      window.removeEventListener('keydown', onKeyDown);
    };
  }, [onKeyDown]);

  // linaria не поддерживает динамический global
  (0, _react.useEffect)(function () {
    if (isOpen && disableScroll) {
      overflow.current = document.body.style.overflowY;
      document.body.style.overflowY = 'hidden';
    }
  }, [isOpen, disableScroll]);
  (0, _react.useEffect)(function () {
    if (!isOpen && !(0, _DrawerContext.hasDrawers)(popupController.items)) {
      document.body.style.overflowY = overflow.current;
    }
  }, [isOpen, popupController.items]);
  var drawerInfo = _objectSpread({
    id: id,
    info: {
      isDrawer: true
    }
  }, popupInfo);
  return {
    drawerInfo: drawerInfo
  };
};
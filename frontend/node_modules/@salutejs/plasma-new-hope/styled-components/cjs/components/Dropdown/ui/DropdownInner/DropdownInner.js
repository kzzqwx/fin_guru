"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownInner = void 0;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _ = /*#__PURE__*/require("..");
var _Dropdown = /*#__PURE__*/require("../../Dropdown.styles");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
var DropdownInner = exports.DropdownInner = function DropdownInner(_ref) {
  var item = _ref.item,
    currentLevel = _ref.currentLevel,
    focusedPath = _ref.focusedPath,
    path = _ref.path,
    dispatchPath = _ref.dispatchPath,
    index = _ref.index,
    trigger = _ref.trigger,
    itemRole = _ref.itemRole,
    listHeight = _ref.listHeight,
    listOverflow = _ref.listOverflow,
    handleGlobalToggle = _ref.handleGlobalToggle,
    closeOnSelect = _ref.closeOnSelect,
    onHover = _ref.onHover,
    onItemSelect = _ref.onItemSelect,
    onItemClick = _ref.onItemClick,
    listWidth = _ref.listWidth,
    variant = _ref.variant,
    hasArrow = _ref.hasArrow;
  var handleToggle = function handleToggle(opened) {
    if (opened) {
      dispatchPath({
        type: 'changed_on_level',
        value: item.value.toString(),
        level: currentLevel + 1
      });
    } else {
      dispatchPath({
        type: 'cut_by_level',
        level: currentLevel + 1
      });
    }
  };
  var isCurrentListOpen = path[currentLevel + 1] === item.value.toString();
  var listId = "tree_level_".concat(currentLevel + 2);
  var nextLevel = currentLevel + 1;
  if (item !== null && item !== void 0 && item.items) {
    return /*#__PURE__*/_react["default"].createElement(_Dropdown.StyledPopover, {
      isOpen: isCurrentListOpen,
      usePortal: false,
      placement: "right-start",
      trigger: trigger,
      target: /*#__PURE__*/_react["default"].createElement(_.DropdownItem, {
        item: item,
        index: index,
        path: path,
        focusedPath: focusedPath,
        currentLevel: currentLevel,
        itemRole: itemRole,
        onHover: onHover,
        onItemSelect: onItemSelect,
        onItemClick: onItemClick,
        variant: variant,
        hasArrow: hasArrow,
        ariaControls: listId,
        ariaExpanded: isCurrentListOpen,
        ariaLevel: nextLevel,
        ariaLabel: item.label
      }),
      onToggle: handleToggle,
      isFocusTrapped: false,
      preventOverflow: false
    }, /*#__PURE__*/_react["default"].createElement(_Dropdown.Ul, {
      listHeight: listHeight,
      listOverflow: listOverflow,
      role: "group",
      id: listId,
      listWidth: listWidth,
      isInnerUl: true
    }, item.items.map(function (innerItem, innerIndex) {
      return /*#__PURE__*/_react["default"].createElement(DropdownInner, {
        key: "".concat(innerIndex, "/").concat(currentLevel),
        item: innerItem,
        currentLevel: nextLevel,
        focusedPath: focusedPath,
        path: path,
        dispatchPath: dispatchPath,
        index: innerIndex,
        trigger: trigger,
        itemRole: itemRole,
        listHeight: listHeight,
        listOverflow: listOverflow,
        handleGlobalToggle: handleGlobalToggle,
        closeOnSelect: closeOnSelect,
        onHover: onHover,
        onItemSelect: onItemSelect,
        onItemClick: onItemClick,
        listWidth: listWidth,
        variant: variant,
        hasArrow: hasArrow
      });
    })));
  }
  return /*#__PURE__*/_react["default"].createElement(_.DropdownItem, {
    item: item,
    index: index,
    focusedPath: focusedPath,
    currentLevel: currentLevel,
    itemRole: itemRole,
    handleGlobalToggle: handleGlobalToggle,
    closeOnSelect: closeOnSelect,
    onHover: onHover,
    onItemSelect: onItemSelect,
    onItemClick: onItemClick,
    variant: variant
  });
};
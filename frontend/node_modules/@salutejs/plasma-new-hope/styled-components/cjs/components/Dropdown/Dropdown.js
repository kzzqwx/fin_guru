"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropdownRoot = exports.dropdownConfig = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _utils = /*#__PURE__*/require("../../utils");
var _pathReducer = /*#__PURE__*/require("./reducers/pathReducer");
var _focusedPathReducer = /*#__PURE__*/require("./reducers/focusedPathReducer");
var _ui = /*#__PURE__*/require("./ui");
var _base = /*#__PURE__*/require("./variations/_view/base");
var _base2 = /*#__PURE__*/require("./variations/_size/base");
var _Dropdown = /*#__PURE__*/require("./Dropdown.styles");
var _utils2 = /*#__PURE__*/require("./utils");
var _Dropdown2 = /*#__PURE__*/require("./Dropdown.tokens");
var _useKeyboardNavigation = /*#__PURE__*/require("./hooks/useKeyboardNavigation");
var _useHashMaps3 = /*#__PURE__*/require("./hooks/useHashMaps");
var _excluded = ["items", "children", "placement", "offset", "closeOnOverlayClick", "onToggle", "size", "view", "itemRole", "className", "listWidth", "listHeight", "listOverflow", "closeOnSelect", "onHover", "onItemSelect", "onItemClick", "trigger", "variant", "hasArrow"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
/**
 * Выпадающий список.
 */
var dropdownRoot = exports.dropdownRoot = function dropdownRoot(Root) {
  return /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
    var items = _ref.items,
      children = _ref.children,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      onToggle = _ref.onToggle,
      size = _ref.size,
      view = _ref.view,
      _ref$itemRole = _ref.itemRole,
      itemRole = _ref$itemRole === void 0 ? 'treeitem' : _ref$itemRole,
      className = _ref.className,
      listWidth = _ref.listWidth,
      listHeight = _ref.listHeight,
      listOverflow = _ref.listOverflow,
      _ref$closeOnSelect = _ref.closeOnSelect,
      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,
      onHover = _ref.onHover,
      onItemSelect = _ref.onItemSelect,
      onItemClick = _ref.onItemClick,
      _ref$trigger = _ref.trigger,
      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'normal' : _ref$variant,
      _ref$hasArrow = _ref.hasArrow,
      hasArrow = _ref$hasArrow === void 0 ? true : _ref$hasArrow,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useReducer = (0, _react.useReducer)(_pathReducer.pathReducer, []),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      path = _useReducer2[0],
      dispatchPath = _useReducer2[1];
    var _useReducer3 = (0, _react.useReducer)(_focusedPathReducer.focusedPathReducer, []),
      _useReducer4 = _slicedToArray(_useReducer3, 2),
      focusedPath = _useReducer4[0],
      dispatchFocusedPath = _useReducer4[1];
    var _useHashMaps = (0, _useHashMaps3.useHashMaps)(items),
      _useHashMaps2 = _slicedToArray(_useHashMaps, 2),
      pathMap = _useHashMaps2[0],
      focusedToValueMap = _useHashMaps2[1];
    var handleGlobalToggle = function handleGlobalToggle(opened, event) {
      if (opened) {
        dispatchPath({
          type: 'opened_first_level'
        });
      } else {
        dispatchFocusedPath({
          type: 'reset'
        });
        dispatchPath({
          type: 'reset'
        });
      }
      if (onToggle) {
        onToggle(opened, event);
      }
    };
    var _useKeyNavigation = (0, _useKeyboardNavigation.useKeyNavigation)({
        focusedPath: focusedPath,
        dispatchFocusedPath: dispatchFocusedPath,
        path: path,
        dispatchPath: dispatchPath,
        pathMap: pathMap,
        focusedToValueMap: focusedToValueMap,
        handleGlobalToggle: handleGlobalToggle,
        closeOnSelect: closeOnSelect,
        onItemSelect: onItemSelect,
        onItemClick: onItemClick
      }),
      onKeyDown = _useKeyNavigation.onKeyDown;
    var isCurrentListOpen = Boolean(path[0]);
    var getActiveDescendant = function getActiveDescendant() {
      var _focusedToValueMap$ge;
      var focusedPathAsString = focusedPath.reduce(function (acc, n) {
        return "".concat(acc, "/").concat(n);
      }, '').replace(/^(\/)/, '');
      return focusedToValueMap === null || focusedToValueMap === void 0 || (_focusedToValueMap$ge = focusedToValueMap.get(focusedPathAsString)) === null || _focusedToValueMap$ge === void 0 ? void 0 : _focusedToValueMap$ge.value.toString();
    };
    return /*#__PURE__*/_react["default"].createElement(Root, _extends({
      className: (0, _utils.cx)(className, _Dropdown2.classes.dropdownRoot),
      ref: ref,
      view: view,
      size: size,
      items: items
    }, rest), /*#__PURE__*/_react["default"].createElement(_Dropdown.StyledPopover, {
      isOpen: isCurrentListOpen,
      usePortal: false,
      onToggle: handleGlobalToggle,
      offset: offset,
      placement: (0, _utils2.getPlacements)(placement),
      trigger: trigger,
      closeOnOverlayClick: closeOnOverlayClick,
      isFocusTrapped: false,
      target: (0, _utils2.childrenWithProps)(children, {
        role: 'combobox',
        'aria-controls': 'tree_level_1',
        'aria-expanded': isCurrentListOpen,
        'aria-activedescendant': getActiveDescendant(),
        onKeyDown: onKeyDown
      }),
      preventOverflow: false
    }, /*#__PURE__*/_react["default"].createElement(_Dropdown.Ul, {
      listHeight: listHeight,
      listOverflow: listOverflow,
      role: "tree",
      id: "tree_level_1",
      listWidth: listWidth
    }, items.map(function (item, index) {
      return /*#__PURE__*/_react["default"].createElement(_ui.DropdownInner, {
        key: "".concat(index, "/0"),
        item: item,
        currentLevel: 0,
        focusedPath: focusedPath,
        trigger: trigger,
        path: path,
        dispatchPath: dispatchPath,
        index: index,
        itemRole: itemRole,
        listHeight: listHeight,
        listOverflow: listOverflow,
        handleGlobalToggle: handleGlobalToggle,
        closeOnSelect: closeOnSelect,
        onHover: onHover,
        onItemSelect: onItemSelect,
        onItemClick: onItemClick,
        listWidth: listWidth,
        variant: variant,
        hasArrow: hasArrow
      });
    }))));
  });
};
var dropdownConfig = exports.dropdownConfig = {
  name: 'Dropdown',
  tag: 'div',
  layout: dropdownRoot,
  base: _Dropdown.base,
  variations: {
    view: {
      css: _base.base
    },
    size: {
      css: _base2.base
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};
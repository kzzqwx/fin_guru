"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendarBaseRoot = exports.calendarBaseConfig = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _reducer = /*#__PURE__*/require("../store/reducer");
var _types = /*#__PURE__*/require("../store/types");
var _utils = /*#__PURE__*/require("../utils");
var _hooks = /*#__PURE__*/require("../hooks");
var _ui = /*#__PURE__*/require("../ui");
var _base = /*#__PURE__*/require("./variations/_view/base");
var _base2 = /*#__PURE__*/require("./variations/_size/base");
var _CalendarBase = /*#__PURE__*/require("./CalendarBase.styles");
var _excluded = ["value", "min", "max", "includeEdgeDates", "type", "eventList", "disabledList", "onChangeValue"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
/**
 * Компонент календаря.
 */
var calendarBaseRoot = exports.calendarBaseRoot = function calendarBaseRoot(Root) {
  return /*#__PURE__*/(0, _react.forwardRef)(function (_ref, outerRootRef) {
    var externalValue = _ref.value,
      min = _ref.min,
      max = _ref.max,
      includeEdgeDates = _ref.includeEdgeDates,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'Days' : _ref$type,
      eventList = _ref.eventList,
      disabledList = _ref.disabledList,
      onChangeValue = _ref.onChangeValue,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useMemo = (0, _react.useMemo)(function () {
        return Array.isArray(externalValue) ? externalValue : [externalValue];
      }, [externalValue]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      firstValue = _useMemo2[0],
      secondValue = _useMemo2[1];
    var value = secondValue || firstValue;
    var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      hoveredDay = _useState2[0],
      setHoveredDay = _useState2[1];
    var _useState3 = (0, _react.useState)(type),
      _useState4 = _slicedToArray(_useState3, 2),
      prevType = _useState4[0],
      setPrevType = _useState4[1];
    var _useState5 = (0, _react.useState)(value),
      _useState6 = _slicedToArray(_useState5, 2),
      prevValue = _useState6[0],
      setPrevValue = _useState6[1];
    var _useState7 = (0, _react.useState)(0),
      _useState8 = _slicedToArray(_useState7, 2),
      outOfRangeKey = _useState8[0],
      setOutOfRangeKey = _useState8[1];
    var _useReducer = (0, _react.useReducer)(_reducer.reducer, (0, _reducer.getInitialState)(value, [5, 6], type)),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];
    var date = state.date,
      calendarState = state.calendarState,
      startYear = state.startYear,
      size = state.size;
    var handlePrev = (0, _react.useCallback)(function () {
      var withShift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (calendarState === _types.CalendarState.Days) {
        if (withShift) {
          dispatch({
            type: _types.ActionType.PREVIOUS_YEAR,
            payload: {
              step: 1
            }
          });
          return;
        }
        dispatch({
          type: _types.ActionType.PREVIOUS_MONTH,
          payload: {
            monthIndex: date.monthIndex,
            year: date.year
          }
        });
        return;
      }
      if (calendarState === _types.CalendarState.Months) {
        dispatch({
          type: _types.ActionType.PREVIOUS_YEAR,
          payload: {
            step: 1
          }
        });
        return;
      }
      if (calendarState === _types.CalendarState.Years) {
        dispatch({
          type: _types.ActionType.PREVIOUS_START_YEAR,
          payload: {
            yearsCount: _utils.YEAR_RENDER_COUNT
          }
        });
      }
    }, [date, calendarState]);
    var handleNext = (0, _react.useCallback)(function () {
      var withShift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (calendarState === _types.CalendarState.Days) {
        if (withShift) {
          dispatch({
            type: _types.ActionType.NEXT_YEAR,
            payload: {
              step: 1
            }
          });
          return;
        }
        dispatch({
          type: _types.ActionType.NEXT_MONTH,
          payload: {
            monthIndex: date.monthIndex,
            year: date.year
          }
        });
        return;
      }
      if (calendarState === _types.CalendarState.Months) {
        dispatch({
          type: _types.ActionType.NEXT_YEAR,
          payload: {
            step: 1
          }
        });
        return;
      }
      if (calendarState === _types.CalendarState.Years) {
        dispatch({
          type: _types.ActionType.NEXT_START_YEAR,
          payload: {
            yearsCount: _utils.YEAR_RENDER_COUNT
          }
        });
      }
    }, [date, calendarState]);
    var _useKeyNavigation = (0, _hooks.useKeyNavigation)({
        size: size,
        onNext: handleNext,
        onPrev: handlePrev
      }),
      _useKeyNavigation2 = _slicedToArray(_useKeyNavigation, 5),
      selectIndexes = _useKeyNavigation2[0],
      onKeyDown = _useKeyNavigation2[1],
      onSelectIndexes = _useKeyNavigation2[2],
      outerRefs = _useKeyNavigation2[3],
      isOutOfRange = _useKeyNavigation2[4];
    var handleOnChangeDay = (0, _react.useCallback)(function (newDate, coord) {
      var newDay = new Date(newDate.year, newDate.monthIndex, newDate.day);
      onChangeValue === null || onChangeValue === void 0 || onChangeValue(newDay);
      onSelectIndexes(coord);
    }, [onChangeValue, onSelectIndexes]);
    var handleOnChangeMonth = (0, _react.useCallback)(function (monthIndex) {
      dispatch({
        type: _types.ActionType.UPDATE_MONTH,
        payload: {
          calendarState: _types.CalendarState.Days,
          monthIndex: monthIndex,
          size: [5, 6]
        }
      });
    }, []);
    var handleOnChangeYear = (0, _react.useCallback)(function (year) {
      dispatch({
        type: _types.ActionType.UPDATE_YEAR,
        payload: {
          calendarState: _types.CalendarState.Months,
          year: year
        }
      });
    }, []);
    var handleUpdateCalendarState = (0, _react.useCallback)(function (newCalendarState, newSize) {
      dispatch({
        type: _types.ActionType.UPDATE_CALENDAR_STATE,
        payload: {
          calendarState: newCalendarState,
          size: newSize
        }
      });
    }, []);
    if (value && prevValue && (0, _utils.isValueUpdate)(value, prevValue)) {
      dispatch({
        type: _types.ActionType.UPDATE_DATE,
        payload: {
          value: value
        }
      });
      setPrevValue(value);
    }
    if (prevType !== type) {
      dispatch({
        type: _types.ActionType.UPDATE_CALENDAR_STATE,
        payload: {
          calendarState: type
        }
      });
      setPrevType(type);
    }

    // Изменяем ключ каждый раз как пытаемся перейти на даты которые находятся за пределами min/max ограничений.
    // Это необходимо для того чтобы screen-reader корректно озвучивал уведомление aria-live="assertive"
    // о том что нет доступных дат
    var handleKeyDown = (0, _react.useCallback)(function (event) {
      setOutOfRangeKey(function (previousState) {
        return Number(!previousState);
      });
      onKeyDown(event);
    }, [onKeyDown]);
    return /*#__PURE__*/_react["default"].createElement(Root, _extends({
      ref: outerRootRef,
      "aria-label": "\u0412\u044B\u0431\u043E\u0440 \u0434\u0430\u0442\u044B"
    }, rest), isOutOfRange && /*#__PURE__*/_react["default"].createElement(_CalendarBase.IsOutOfRange, {
      key: outOfRangeKey,
      "aria-atomic": "true",
      role: "alert",
      "aria-live": "assertive",
      "aria-relevant": "additions"
    }, "\u0414\u0430\u043B\u0435\u0435 \u043D\u0435\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0434\u0430\u0442."), /*#__PURE__*/_react["default"].createElement(_ui.CalendarHeader, {
      firstDate: date,
      startYear: startYear,
      type: calendarState,
      onPrev: handlePrev,
      onNext: handleNext,
      onUpdateCalendarState: handleUpdateCalendarState
    }), calendarState === _types.CalendarState.Days && /*#__PURE__*/_react["default"].createElement(_ui.CalendarDays, {
      eventList: eventList,
      disabledList: disabledList,
      min: min,
      max: max,
      includeEdgeDates: includeEdgeDates,
      value: externalValue,
      date: date,
      hoveredDay: hoveredDay,
      selectIndexes: selectIndexes,
      onChangeDay: handleOnChangeDay,
      onHoverDay: setHoveredDay,
      onSetSelected: onSelectIndexes,
      onKeyDown: handleKeyDown,
      outerRefs: outerRefs
    }), calendarState === _types.CalendarState.Months && /*#__PURE__*/_react["default"].createElement(_ui.CalendarMonths, {
      date: date,
      selectIndexes: selectIndexes,
      onChangeMonth: handleOnChangeMonth,
      onSetSelected: onSelectIndexes,
      onKeyDown: onKeyDown,
      outerRefs: outerRefs
    }), calendarState === _types.CalendarState.Years && /*#__PURE__*/_react["default"].createElement(_ui.CalendarYears, {
      date: date,
      startYear: startYear,
      selectIndexes: selectIndexes,
      onChangeYear: handleOnChangeYear,
      onSetSelected: onSelectIndexes,
      onKeyDown: onKeyDown,
      outerRefs: outerRefs
    }));
  });
};
var calendarBaseConfig = exports.calendarBaseConfig = {
  name: 'CalendarBase',
  tag: 'div',
  layout: calendarBaseRoot,
  base: _CalendarBase.StyledCalendar,
  variations: {
    view: {
      css: _base.base
    },
    size: {
      css: _base2.base
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};
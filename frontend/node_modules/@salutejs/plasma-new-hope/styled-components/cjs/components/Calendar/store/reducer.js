"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reducer = exports.getInitialState = void 0;
var _utils = /*#__PURE__*/require("../utils");
var _types = /*#__PURE__*/require("./types");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
var getInitialState = exports.getInitialState = function getInitialState(value, size, calendarState) {
  var initDate = value || new Date();
  var date = (0, _utils.getDateFromValue)(initDate);
  return {
    date: _objectSpread(_objectSpread({}, date), {}, {
      day: value !== undefined ? date.day : 0
    }),
    startYear: (0, _utils.getStartYear)(date.year),
    calendarState: calendarState,
    size: size
  };
};
var reducer = exports.reducer = function reducer(state, action) {
  switch (action.type) {
    case _types.ActionType.PREVIOUS_MONTH:
      {
        var _action$payload = action.payload,
          year = _action$payload.year,
          monthIndex = _action$payload.monthIndex;
        var _getPrevDate = (0, _utils.getPrevDate)(year, monthIndex),
          _getPrevDate2 = _slicedToArray(_getPrevDate, 2),
          prevYear = _getPrevDate2[0],
          prevMonthIndex = _getPrevDate2[1];
        return _objectSpread(_objectSpread({}, state), {}, {
          date: {
            day: state.date.day,
            monthIndex: prevMonthIndex,
            year: prevYear
          }
        });
      }
    case _types.ActionType.NEXT_MONTH:
      {
        var _action$payload2 = action.payload,
          _monthIndex = _action$payload2.monthIndex,
          _year = _action$payload2.year;
        var _getNextDate = (0, _utils.getNextDate)(_year, _monthIndex),
          _getNextDate2 = _slicedToArray(_getNextDate, 2),
          nextYear = _getNextDate2[0],
          nextMonthIndex = _getNextDate2[1];
        return _objectSpread(_objectSpread({}, state), {}, {
          date: {
            day: state.date.day,
            monthIndex: nextMonthIndex,
            year: nextYear
          }
        });
      }
    case _types.ActionType.PREVIOUS_YEAR:
      {
        var step = action.payload.step;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear - step,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: state.date.year - step
          }
        });
      }
    case _types.ActionType.NEXT_YEAR:
      {
        var _step = action.payload.step;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear + _step,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: state.date.year + _step
          }
        });
      }
    case _types.ActionType.PREVIOUS_START_YEAR:
      {
        var yearsCount = action.payload.yearsCount;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear - yearsCount
        });
      }
    case _types.ActionType.NEXT_START_YEAR:
      {
        var _yearsCount = action.payload.yearsCount;
        return _objectSpread(_objectSpread({}, state), {}, {
          startYear: state.startYear + _yearsCount
        });
      }
    case _types.ActionType.UPDATE_DATE:
      {
        var value = action.payload.value;
        var date = (0, _utils.getDateFromValue)(value);
        var startYear = (0, _utils.getStartYear)(value.getFullYear());
        return _objectSpread(_objectSpread({}, state), {}, {
          date: date,
          startYear: startYear
        });
      }
    case _types.ActionType.UPDATE_MONTH:
      {
        var _action$payload3 = action.payload,
          calendarState = _action$payload3.calendarState,
          _monthIndex2 = _action$payload3.monthIndex,
          size = _action$payload3.size;
        return _objectSpread(_objectSpread({}, state), {}, {
          size: size,
          calendarState: calendarState,
          date: {
            day: state.date.day,
            monthIndex: _monthIndex2,
            year: state.date.year
          }
        });
      }
    case _types.ActionType.UPDATE_YEAR:
      {
        var _action$payload4 = action.payload,
          _calendarState = _action$payload4.calendarState,
          _year2 = _action$payload4.year;
        return _objectSpread(_objectSpread({}, state), {}, {
          calendarState: _calendarState,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: _year2
          }
        });
      }
    case _types.ActionType.UPDATE_CALENDAR_STATE:
      {
        var _action$payload5 = action.payload,
          _calendarState2 = _action$payload5.calendarState,
          _size = _action$payload5.size;
        return _objectSpread(_objectSpread({}, state), {}, {
          calendarState: _calendarState2,
          size: _size || state.size
        });
      }
    default:
      return state;
  }
};
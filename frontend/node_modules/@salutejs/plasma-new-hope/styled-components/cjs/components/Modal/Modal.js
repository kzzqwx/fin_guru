"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.modalRoot = exports.modalConfig = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");
var _engines = /*#__PURE__*/require("../../engines");
var _Popup = /*#__PURE__*/require("../Popup");
var _Overlay = /*#__PURE__*/require("../Overlay");
var _utils = /*#__PURE__*/require("../Popup/utils");
var _Modal = /*#__PURE__*/require("./Modal.tokens");
var _hooks = /*#__PURE__*/require("./hooks");
var _base = /*#__PURE__*/require("./variations/_view/base");
var _ModalContext = /*#__PURE__*/require("./ModalContext");
var _excluded = ["id", "withAnimation", "onClose", "onOverlayClick", "onEscKeyDown", "closeOnEsc", "closeOnOverlayClick", "withBlur", "initialFocusRef", "focusAfterRef", "zIndex", "popupInfo", "children", "view", "isOpen"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
// issue #823
var Popup = /*#__PURE__*/(0, _engines.component)(_Popup.popupConfig);

/**
 * Modal.
 * Управляет показом/скрытием, подложкой и анимацией визуальной части модального окна.
 */
var modalRoot = exports.modalRoot = function modalRoot(Root) {
  return /*#__PURE__*/(0, _react.forwardRef)(function (_ref, outerRootRef) {
    var id = _ref.id,
      withAnimation = _ref.withAnimation,
      onClose = _ref.onClose,
      onOverlayClick = _ref.onOverlayClick,
      onEscKeyDown = _ref.onEscKeyDown,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      withBlur = _ref.withBlur,
      initialFocusRef = _ref.initialFocusRef,
      focusAfterRef = _ref.focusAfterRef,
      zIndex = _ref.zIndex,
      popupInfo = _ref.popupInfo,
      children = _ref.children,
      view = _ref.view,
      isOpen = _ref.isOpen,
      rest = _objectWithoutProperties(_ref, _excluded);
    var trapRef = (0, _plasmaCore.useFocusTrap)(true, initialFocusRef, focusAfterRef);
    var popupController = (0, _Popup.usePopupContext)();
    var innerRef = (0, _plasmaCore.useForkRef)(trapRef, outerRootRef);
    var uniqId = (0, _plasmaCore.safeUseId)();
    var innerId = id || uniqId;
    var overlayBackgroundToken = withBlur ? "var(".concat(_Modal.tokens.modalOverlayWithBlurColor, ")") : "var(".concat(_Modal.tokens.modalOverlayColor, ")");
    var _useModal = (0, _hooks.useModal)({
        id: innerId,
        isOpen: isOpen,
        closeOnEsc: closeOnEsc,
        onEscKeyDown: onEscKeyDown,
        onClose: onClose,
        popupInfo: popupInfo
      }),
      modalInfo = _useModal.modalInfo;
    var transparent = (0, _react.useMemo)(function () {
      return (0, _ModalContext.getIdLastModal)(popupController.items) !== innerId;
    }, [innerId, popupController.items]);
    var onModalOverlayKeyDown = (0, _react.useCallback)(function (event) {
      if (onOverlayClick) {
        onOverlayClick(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    }, [closeOnOverlayClick, onOverlayClick, onClose]);
    return /*#__PURE__*/_react["default"].createElement(Popup, _extends({
      id: innerId,
      isOpen: isOpen,
      ref: innerRef,
      popupInfo: modalInfo,
      withAnimation: withAnimation,
      zIndex: zIndex,
      overlay: /*#__PURE__*/_react["default"].createElement(Root, {
        view: view
      }, /*#__PURE__*/_react["default"].createElement(_Overlay.Overlay, {
        className: _Modal.classes.overlay,
        zIndex: zIndex || _utils.DEFAULT_Z_INDEX,
        backgroundColorProperty: overlayBackgroundToken,
        withBlur: withBlur,
        transparent: transparent,
        isClickable: closeOnOverlayClick,
        onOverlayClick: onModalOverlayKeyDown
      }))
    }, rest), children);
  });
};
var modalConfig = exports.modalConfig = {
  name: 'Modal',
  tag: 'div',
  layout: modalRoot,
  base: '',
  variations: {
    view: {
      css: _base.base
    }
  },
  defaults: {
    view: 'default'
  }
};
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectTarget = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _Select = /*#__PURE__*/require("../../Select.tokens");
var _utils = /*#__PURE__*/require("../../../../utils");
var _SelectChip = /*#__PURE__*/require("../SelectChip/SelectChip");
var _useKeyNavigation = /*#__PURE__*/require("../../hooks/useKeyNavigation");
var _SelectTarget = /*#__PURE__*/require("./SelectTarget.styles");
var _excluded = ["values", "target", "label", "opened", "readOnly", "disabled", "enumerationType", "size", "id", "chipsRefs", "onChange", "onKeyDown"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var hasNoFocus = _Select.classes.hasNoFocus,
  hasChips = _Select.classes.hasChips,
  innerLabelUp = _Select.classes.innerLabelUp,
  arrowInverse = _Select.classes.arrowInverse,
  selectTarget = _Select.classes.selectTarget,
  selectTargetArrow = _Select.classes.selectTargetArrow,
  selectTargeText = _Select.classes.selectTargeText,
  selectTargetLabel = _Select.classes.selectTargetLabel;

/**
 * Элемент для выпадающего списка
 */
var SelectTarget = exports.SelectTarget = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var values = _ref.values,
    _ref$target = _ref.target,
    target = _ref$target === void 0 ? 'textField-like' : _ref$target,
    label = _ref.label,
    opened = _ref.opened,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    enumerationType = _ref.enumerationType,
    size = _ref.size,
    id = _ref.id,
    chipsRefs = _ref.chipsRefs,
    onChange = _ref.onChange,
    onKeyDown = _ref.onKeyDown,
    rest = _objectWithoutProperties(_ref, _excluded);
  var hasText = Boolean(values === null || values === void 0 ? void 0 : values.some(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 1),
      value = _ref3[0];
    return value;
  }));
  var hasLabel = label && size !== 'xs' && target === 'textField-like';
  var textContent = values === null || values === void 0 ? void 0 : values.map(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2),
      text = _ref5[1];
    return text;
  }).join(', ');
  var contentRef = (0, _react.useRef)(null);
  var withArrowInverse = opened ? arrowInverse : undefined;
  var withInnerLabelUp = hasLabel && hasText ? innerLabelUp : undefined;
  var withHasChips = hasText && enumerationType === 'chip' && target === 'textField-like' ? hasChips : undefined;
  var withNoFocus = target === 'textField-like' ? hasNoFocus : undefined;
  var isLabelVisible = !hasText || hasLabel && enumerationType === 'comma';
  var onChipClick = (0, _react.useCallback)(function (event) {
    event.stopPropagation();
  }, []);
  var onChipClear = (0, _react.useCallback)(function (value, text, index) {
    var newValue = values === null || values === void 0 ? void 0 : values.filter(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
        itemValue = _ref7[0],
        itemText = _ref7[1];
      return !(itemValue === value && itemText === text);
    }).map(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 1),
        itemValue = _ref9[0];
      return itemValue;
    });
    chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.splice(index, 1);
    onChange === null || onChange === void 0 || onChange(newValue);
  }, [values, onChange]);
  var onChipKeyDown = (0, _react.useCallback)(function (value, text, index, event) {
    var code = event.code,
      shiftKey = event.shiftKey;
    if (code === _useKeyNavigation.Keys.Tab || code === _useKeyNavigation.Keys.Tab && shiftKey) {
      event.preventDefault();
    }
    if (code === _useKeyNavigation.Keys.Backspace) {
      onChipClear(value, text, index);
    }
  }, [onChipClear]);
  var onWheel = (0, _react.useCallback)(function (event) {
    var deltaY = event.deltaY;
    if (contentRef.current) {
      contentRef.current.scrollLeft += Math.round(deltaY);
    }
  }, []);
  var getRef = (0, _react.useCallback)(function (element, index) {
    if (element && chipsRefs && chipsRefs.current) {
      chipsRefs.current[index] = element;
    }
  }, []);

  // INFO: Нужно очищать на каждый ререндер компонента для актуализации состояния рефов
  if (chipsRefs) {
    chipsRefs.current = [];
  }
  return /*#__PURE__*/_react["default"].createElement(_SelectTarget.StyledSelectTarget, _extends({}, rest, {
    ref: ref,
    opened: opened,
    target: target,
    readOnly: readOnly,
    disabled: disabled,
    title: textContent,
    "aria-label": label,
    className: (0, _utils.cx)(withInnerLabelUp, withHasChips, withNoFocus, selectTarget),
    onWheel: onWheel,
    onKeyDown: onKeyDown,
    stretching: "filled"
  }), hasText && (enumerationType === 'comma' || target === 'button-like' ? /*#__PURE__*/_react["default"].createElement(_SelectTarget.StyledText, {
    className: selectTargeText
  }, textContent) : /*#__PURE__*/_react["default"].createElement(_SelectTarget.StyledChipsWrapper, {
    ref: contentRef
  }, /*#__PURE__*/_react["default"].createElement(_SelectTarget.StyledChips, null, values === null || values === void 0 ? void 0 : values.map(function (_ref10, index) {
    var _ref11 = _slicedToArray(_ref10, 2),
      value = _ref11[0],
      text = _ref11[1];
    return /*#__PURE__*/_react["default"].createElement(_SelectChip.SelectChip, {
      index: index,
      ref: function ref(element) {
        return getRef(element, index);
      },
      key: "".concat(value, "_").concat(text),
      disabled: disabled,
      readOnly: readOnly,
      value: value,
      text: text,
      onClear: function onClear(v, t) {
        return onChipClear(v, t, index);
      },
      onClick: onChipClick,
      onKeyDown: onChipKeyDown
    });
  })))), isLabelVisible && /*#__PURE__*/_react["default"].createElement(_SelectTarget.StyledLabel, {
    className: selectTargetLabel,
    htmlFor: id
  }, label), /*#__PURE__*/_react["default"].createElement(_SelectTarget.StyledArrow, {
    size: "s",
    color: "inherit",
    className: (0, _utils.cx)(selectTargetArrow, withArrowInverse)
  }));
});
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.radioboxRoot = exports.radioboxConfig = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");
var _Checkbox = /*#__PURE__*/require("../Checkbox/Checkbox.styles");
var _utils = /*#__PURE__*/require("../../utils");
var _base = /*#__PURE__*/require("./variations/_view/base");
var _base2 = /*#__PURE__*/require("./variations/_size/base");
var _base3 = /*#__PURE__*/require("./variations/_disabled/base");
var _base4 = /*#__PURE__*/require("./variations/_focused/base");
var _Radiobox = /*#__PURE__*/require("./Radiobox.styles");
var _Radiobox2 = /*#__PURE__*/require("./Radiobox.tokens");
var _StyledEllipse;
var _excluded = ["size", "view", "focused", "disabled", "id", "label", "description", "style", "className", "singleLine", "aria-label"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var radioboxRoot = exports.radioboxRoot = function radioboxRoot(Root) {
  return /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
    var size = props.size,
      view = props.view,
      focused = props.focused,
      disabled = props.disabled,
      id = props.id,
      label = props.label,
      description = props.description,
      style = props.style,
      className = props.className,
      _props$singleLine = props.singleLine,
      singleLine = _props$singleLine === void 0 ? false : _props$singleLine,
      ariaLabelExternal = props['aria-label'],
      rest = _objectWithoutProperties(props, _excluded);
    var uniqId = (0, _plasmaCore.safeUseId)();
    var uniqLabelId = "label-".concat(uniqId);
    var uniqDescriptionId = "description-".concat(uniqId);
    var radioboxId = id || "input-".concat(uniqId);
    var ariaLabel = (0, _react.useMemo)(function () {
      return ariaLabelExternal || (0, _plasmaCore.extractTextFrom)(label);
    }, [ariaLabelExternal, label]);
    var isLabelAriaHidden = typeof label === 'string';
    var canFocused = focused ? 0 : -1;
    var hasContent = label || description;
    var singleLineClass = singleLine ? _Radiobox2.classes.singleLine : undefined;
    var onlyDescriptionClass = !label && description ? _Radiobox2.classes.onlyDescription : undefined;
    return /*#__PURE__*/_react["default"].createElement(Root, {
      view: view,
      size: size,
      disabled: disabled,
      focused: focused,
      style: style,
      className: className,
      tabIndex: -1
    }, /*#__PURE__*/_react["default"].createElement(_Checkbox.StyledInput, _extends({}, rest, {
      id: radioboxId,
      ref: ref,
      type: "radio",
      disabled: disabled,
      "aria-label": ariaLabel,
      "aria-describedby": uniqDescriptionId,
      tabIndex: canFocused
    })), /*#__PURE__*/_react["default"].createElement(_Checkbox.StyledContentWrapper, {
      htmlFor: radioboxId
    }, /*#__PURE__*/_react["default"].createElement(_Checkbox.StyledTrigger, {
      className: _Radiobox2.classes.radioboxTrigger
    }, _StyledEllipse || (_StyledEllipse = /*#__PURE__*/_react["default"].createElement(_Radiobox.StyledEllipse, null))), hasContent && /*#__PURE__*/_react["default"].createElement(_Checkbox.StyledContent, {
      className: singleLineClass
    }, label && /*#__PURE__*/_react["default"].createElement(_Checkbox.StyledLabel, {
      className: (0, _utils.cx)(singleLineClass, onlyDescriptionClass),
      id: uniqLabelId,
      "aria-hidden": isLabelAriaHidden
    }, label), description && /*#__PURE__*/_react["default"].createElement(_Checkbox.StyledDescription, {
      className: singleLineClass,
      id: uniqDescriptionId
    }, description))));
  });
};
var radioboxConfig = exports.radioboxConfig = {
  name: 'Radiobox',
  tag: 'div',
  layout: radioboxRoot,
  base: _Radiobox.base,
  variations: {
    size: {
      css: _base2.base
    },
    view: {
      css: _base.base
    },
    disabled: {
      css: _base3.base
    },
    focused: {
      css: _base4.base
    }
  },
  defaults: {
    size: 'm',
    view: 'accent'
  }
};
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useKeyNavigation = exports.Keys = void 0;
var _react = /*#__PURE__*/require("react");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var Keys = exports.Keys = {
  Enter: 'Enter',
  Tab: 'Tab',
  Escape: 'Escape',
  ArrowLeft: 'ArrowLeft',
  ArrowRight: 'ArrowRight',
  Backspace: 'Backspace'
};
var useKeyNavigation = exports.useKeyNavigation = function useKeyNavigation(_ref) {
  var _ref$controlledRefs = _ref.controlledRefs,
    chipsRefs = _ref$controlledRefs.chipsRefs,
    contentRef = _ref$controlledRefs.contentRef,
    inputRef = _ref$controlledRefs.inputRef,
    disabled = _ref.disabled,
    readOnly = _ref.readOnly,
    chips = _ref.chips,
    enumerationType = _ref.enumerationType,
    updateChips = _ref.updateChips,
    onChange = _ref.onChange,
    onSearch = _ref.onSearch;
  var _useState = (0, _react.useState)(-1),
    _useState2 = _slicedToArray(_useState, 2),
    activeChipIndex = _useState2[0],
    setActiveChipIndex = _useState2[1];
  var handleInputKeydown = function handleInputKeydown(event) {
    var _inputRef$current;
    var _ref2 = event.target,
      value = _ref2.value;
    if (disabled || readOnly) {
      return;
    }
    if (event.key === Keys.Enter && enumerationType === 'chip' && value) {
      var nextIndex = (chips === null || chips === void 0 ? void 0 : chips.length) || 0;
      var newChips = [].concat(_toConsumableArray(chips), [{
        id: "".concat(nextIndex, "_").concat(value),
        text: value
      }]);
      var newValues = newChips.map(function (_ref3) {
        var text = _ref3.text;
        return text;
      });
      updateChips(newChips, newValues);
      event.target.value = '';
      onChange === null || onChange === void 0 || onChange(event);
    }
    if (event.key === Keys.Enter && onSearch) {
      onSearch(value, event);
    }
    if (event.key === Keys.Backspace && chips.length && (inputRef === null || inputRef === void 0 || (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.selectionStart) === 0) {
      var _newChips = _toConsumableArray(chips);
      _newChips === null || _newChips === void 0 || _newChips.pop();
      chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.pop();
      var _newValues = _newChips.map(function (_ref4) {
        var text = _ref4.text;
        return text;
      });
      updateChips(_newChips, _newValues);
    }
  };
  var onChipClear = function onChipClear(clearId, index) {
    if (!chips.length) {
      return;
    }
    var newChips = (chips === null || chips === void 0 ? void 0 : chips.filter(function (_ref5) {
      var chipId = _ref5.id;
      return chipId !== clearId;
    })) || [];
    var newValues = newChips.map(function (_ref6) {
      var text = _ref6.text;
      return text;
    });
    chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.splice(index, 1);
    updateChips(newChips, newValues);
  };
  var handleChipKeyDown = function handleChipKeyDown(event, chipId, chipIndex) {
    if (event.key === Keys.Tab) {
      event.preventDefault();
    }
    if (event.key === Keys.Backspace) {
      onChipClear(chipId, chipIndex);
    }
  };
  var handleContentKeyDown = function handleContentKeyDown(event) {
    var _inputRef$current2, _focusedItem, _focusedItem2;
    var chipsRefsCount = chipsRefs.current.length;
    var currentCaretPosition = (inputRef === null || inputRef === void 0 || (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.selectionStart) || 0;
    var newActiveChipIndex = activeChipIndex;
    var focusedItem = null;
    if (event.key === Keys.ArrowLeft && enumerationType === 'chip' && currentCaretPosition <= 0) {
      var _chipsRefs$current;
      var index = activeChipIndex - 1 <= 0 ? 0 : activeChipIndex - 1;
      newActiveChipIndex = document.activeElement === (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) ? chipsRefsCount - 1 : index;
      focusedItem = (_chipsRefs$current = chipsRefs.current) === null || _chipsRefs$current === void 0 ? void 0 : _chipsRefs$current[newActiveChipIndex];
    }
    if (event.key === Keys.ArrowRight && enumerationType === 'chip' && document.activeElement !== (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current)) {
      var _chipsRefs$current2;
      var _index = activeChipIndex + 1 >= chipsRefsCount ? activeChipIndex : activeChipIndex + 1;
      newActiveChipIndex = document.activeElement === (contentRef === null || contentRef === void 0 ? void 0 : contentRef.current) ? 0 : _index;
      focusedItem = _index === activeChipIndex ? inputRef === null || inputRef === void 0 ? void 0 : inputRef.current : (_chipsRefs$current2 = chipsRefs.current) === null || _chipsRefs$current2 === void 0 ? void 0 : _chipsRefs$current2[newActiveChipIndex];
    }
    if (event.key === Keys.Backspace && document.activeElement !== (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current)) {
      var _chipsRefs$current3;
      var _index2 = activeChipIndex - 1 <= 0 ? 0 : activeChipIndex - 1;
      newActiveChipIndex = chipsRefsCount === 0 ? -1 : _index2;
      focusedItem = chipsRefsCount === 0 ? inputRef === null || inputRef === void 0 ? void 0 : inputRef.current : chipsRefs === null || chipsRefs === void 0 || (_chipsRefs$current3 = chipsRefs.current) === null || _chipsRefs$current3 === void 0 ? void 0 : _chipsRefs$current3[newActiveChipIndex];
    }
    (_focusedItem = focusedItem) === null || _focusedItem === void 0 || _focusedItem.focus();
    (_focusedItem2 = focusedItem) === null || _focusedItem2 === void 0 || _focusedItem2.scrollIntoView({
      behavior: 'smooth',
      block: 'center',
      inline: 'center'
    });
    setActiveChipIndex(newActiveChipIndex);
  };
  return {
    handleInputKeydown: handleInputKeydown,
    handleChipKeyDown: handleChipKeyDown,
    onChipClear: onChipClear,
    handleContentKeyDown: handleContentKeyDown
  };
};
"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxTarget = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _Combobox = /*#__PURE__*/require("../../Combobox.tokens");
var _utils = /*#__PURE__*/require("../../../../utils");
var _ComboboxChip = /*#__PURE__*/require("../ComboboxChip/ComboboxChip");
var _hooks = /*#__PURE__*/require("../../hooks");
var _useKeyNavigation = /*#__PURE__*/require("../../../Select/hooks/useKeyNavigation");
var _ComboboxTarget = /*#__PURE__*/require("./ComboboxTarget.styles");
var _excluded = ["values", "search", "label", "placeholder", "opened", "readOnly", "disabled", "enumerationType", "valueType", "size", "closedWithoutChanges", "id", "chipsRefs", "inputRef", "onChange", "onSearch", "onKeyDown"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var hasChips = _Combobox.classes.hasChips,
  innerLabelUp = _Combobox.classes.innerLabelUp,
  arrowInverse = _Combobox.classes.arrowInverse,
  comboboxTargetArrow = _Combobox.classes.comboboxTargetArrow,
  comboboxTargeText = _Combobox.classes.comboboxTargeText,
  comboboxTargetInput = _Combobox.classes.comboboxTargetInput,
  comboboxTargetLabel = _Combobox.classes.comboboxTargetLabel;

/**
 * Элемент для выпадающего списка
 */
var ComboboxTarget = exports.ComboboxTarget = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var values = _ref.values,
    search = _ref.search,
    label = _ref.label,
    placeholder = _ref.placeholder,
    opened = _ref.opened,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    enumerationType = _ref.enumerationType,
    valueType = _ref.valueType,
    size = _ref.size,
    closedWithoutChanges = _ref.closedWithoutChanges,
    id = _ref.id,
    chipsRefs = _ref.chipsRefs,
    inputRef = _ref.inputRef,
    onChange = _ref.onChange,
    onSearch = _ref.onSearch,
    onKeyDown = _ref.onKeyDown,
    rest = _objectWithoutProperties(_ref, _excluded);
  var contentRef = (0, _react.useRef)(null);
  var inputHelperRef = (0, _react.useRef)(null);
  var _useState = (0, _react.useState)(false),
    _useState2 = _slicedToArray(_useState, 2),
    focused = _useState2[0],
    setFocused = _useState2[1];
  var controlledRefs = {
    contentRef: contentRef,
    inputHelperRef: inputHelperRef,
    inputRef: inputRef
  };
  var textContent = values === null || values === void 0 ? void 0 : values.map(function (_ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      text = _ref3[1];
    return text;
  }).join(', ');
  var hasValue = values === null || values === void 0 ? void 0 : values.some(function (_ref4) {
    var _ref5 = _slicedToArray(_ref4, 1),
      value = _ref5[0];
    return value;
  });
  var isEnumerationComma = enumerationType === 'comma';
  var isExtraSmall = size === 'xs';
  var isInputNotEmpty = hasValue || search;
  var isInputActive = !hasValue && (opened || focused && !readOnly);
  var hasLabel = label && !isExtraSmall && isEnumerationComma;
  var hasOnlyLabel = !placeholder || label;
  var hasNoAnyTip = !placeholder && !label;
  var placeholderValue = !label && !hasValue || isExtraSmall ? placeholder : undefined;
  var withInnerLabelUp = !isExtraSmall && !hasNoAnyTip && hasOnlyLabel && (isInputActive || hasLabel && isInputNotEmpty) ? innerLabelUp : undefined;
  var withArrowInverse = opened ? arrowInverse : undefined;
  var withHasChips = hasValue && enumerationType === 'chip' ? hasChips : undefined;
  var isLabelVisible = !hasValue && !isExtraSmall || hasLabel;
  var isEnumerationVisible = hasValue && valueType !== 'single';
  var onChipClick = function onChipClick(event) {
    return event.stopPropagation();
  };
  var _useFocusController = (0, _hooks.useFocusController)({
      controlledRefs: controlledRefs,
      opened: opened,
      hasValue: hasValue,
      textContent: textContent,
      search: search,
      values: values,
      valueType: valueType,
      readOnly: readOnly,
      closedWithoutChanges: closedWithoutChanges,
      updateFocused: setFocused,
      updateSearch: onSearch,
      onChipClick: onChipClick
    }),
    onClickText = _useFocusController.onClickText,
    onFocusInput = _useFocusController.onFocusInput,
    onBlurInput = _useFocusController.onBlurInput;
  var onChipClear = function onChipClear(value, text, index) {
    var newValue = values === null || values === void 0 ? void 0 : values.filter(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
        itemValue = _ref7[0],
        itemText = _ref7[1];
      return !(itemValue === value && itemText === text);
    }).map(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 1),
        itemValue = _ref9[0];
      return itemValue;
    });
    chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.splice(index, 1);
    onChange === null || onChange === void 0 || onChange(newValue);
  };
  var onChipKeyDown = function onChipKeyDown(value, text, index, event) {
    var code = event.code;
    if (code === _useKeyNavigation.Keys.Tab) {
      event.preventDefault();
    }
    if (code === _useKeyNavigation.Keys.Backspace) {
      onChipClear(value, text, index);
    }
  };
  var onKeyDownInput = function onKeyDownInput(event) {
    var _event$currentTarget;
    var code = event.code;
    if (opened && code === _useKeyNavigation.Keys.Tab) {
      event.preventDefault();
    }
    if (code === _useKeyNavigation.Keys.Backspace && !((_event$currentTarget = event.currentTarget) !== null && _event$currentTarget !== void 0 && _event$currentTarget.value.length)) {
      var newValue = values === null || values === void 0 ? void 0 : values.map(function (_ref10) {
        var _ref11 = _slicedToArray(_ref10, 1),
          itemValue = _ref11[0];
        return itemValue;
      });
      newValue === null || newValue === void 0 || newValue.pop();
      chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.pop();
      onChange === null || onChange === void 0 || onChange(newValue);
    }
  };
  var onChangeInput = function onChangeInput(event) {
    onSearch === null || onSearch === void 0 || onSearch(event.currentTarget.value);
  };
  var onWheel = function onWheel(event) {
    var deltaY = event.deltaY;
    if (contentRef.current) {
      contentRef.current.scrollLeft += Math.round(deltaY);
    }
  };
  var getRef = function getRef(element, index) {
    if (element && chipsRefs && chipsRefs.current) {
      chipsRefs.current[index] = element;
    }
  };

  // INFO: Нужно очищать на каждый ререндер компонента для актуализации состояния рефов
  if (chipsRefs) {
    chipsRefs.current = [];
  }
  return /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledComboboxTarget, _extends({
    ref: ref,
    opened: opened,
    readOnly: readOnly,
    disabled: disabled,
    title: textContent,
    "aria-label": label,
    className: (0, _utils.cx)(withInnerLabelUp, withHasChips),
    onWheel: onWheel,
    onKeyDown: onKeyDown
  }, rest), /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledContent, {
    tabIndex: -1,
    ref: contentRef,
    className: withHasChips
  }, isEnumerationVisible && (isEnumerationComma ? /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledText, {
    className: comboboxTargeText,
    onClick: onClickText
  }, textContent) : /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledChips, null, values === null || values === void 0 ? void 0 : values.map(function (_ref12, index) {
    var _ref13 = _slicedToArray(_ref12, 2),
      value = _ref13[0],
      text = _ref13[1];
    return /*#__PURE__*/_react["default"].createElement(_ComboboxChip.ComboboxChip, {
      index: index,
      ref: function ref(element) {
        return getRef(element, index);
      },
      key: "".concat(value, "_").concat(text),
      disabled: disabled,
      readOnly: readOnly,
      value: value,
      text: text,
      onClear: function onClear(v, t) {
        return onChipClear(v, t, index);
      },
      onClick: onChipClick,
      onKeyDown: onChipKeyDown
    });
  }))), /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledComboboxInput, {
    ref: inputRef,
    role: "textbox",
    className: comboboxTargetInput,
    value: search,
    placeholder: placeholderValue,
    disabled: disabled,
    readOnly: readOnly,
    onFocus: onFocusInput,
    onBlur: onBlurInput,
    onChange: onChangeInput,
    onKeyDown: onKeyDownInput
  }), valueType === 'multiple' && /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledComboboxInputHelper, {
    ref: inputHelperRef
  }, search)), isLabelVisible && /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledLabel, {
    className: comboboxTargetLabel,
    htmlFor: id
  }, label), /*#__PURE__*/_react["default"].createElement(_ComboboxTarget.StyledArrow, {
    size: "s",
    className: (0, _utils.cx)(comboboxTargetArrow, withArrowInverse)
  }));
});
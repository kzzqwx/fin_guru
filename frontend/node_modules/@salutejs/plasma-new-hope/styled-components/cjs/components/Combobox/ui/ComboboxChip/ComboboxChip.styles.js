"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyledChip = void 0;
var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));
var _Chip = /*#__PURE__*/require("../../../Chip");
var _engines = /*#__PURE__*/require("../../../../engines");
var _Combobox = /*#__PURE__*/require("../../Combobox.tokens");
var _mixins = /*#__PURE__*/require("../../../../mixins");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
// issue #823
var mergedConfig = /*#__PURE__*/(0, _engines.mergeConfig)(_Chip.chipConfig);
var Chip = /*#__PURE__*/(0, _engines.component)(mergedConfig);

// NOTE: Необходимое переопределение токенов из компонента Chip т.к. используются его части
var StyledChip = exports.StyledChip = /*#__PURE__*/(0, _styledComponents["default"])(Chip).withConfig({
  componentId: "plasma-new-hope__sc-194p1l0-0"
})(["", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", ":var(", ");", " &[readonly]{opacity:var(", ");}"], _Chip.chipTokens.color, _Combobox.tokens.chipColor, _Chip.chipTokens.background, _Combobox.tokens.chipBackground, _Chip.chipTokens.colorHover, _Combobox.tokens.chipColorHover, _Chip.chipTokens.backgroundHover, _Combobox.tokens.chipBackgroundHover, _Chip.chipTokens.colorActive, _Combobox.tokens.chipColorActive, _Chip.chipTokens.backgroundActive, _Combobox.tokens.chipBackgroundActive, _Chip.chipTokens.backgroundReadOnly, _Combobox.tokens.chipBackgroundReadOnly, _Chip.chipTokens.colorReadOnly, _Combobox.tokens.chipColorReadOnly, _Chip.chipTokens.backgroundReadOnlyHover, _Combobox.tokens.chipBackgroundReadOnlyHover, _Chip.chipTokens.colorReadOnlyHover, _Combobox.tokens.chipColorReadOnlyHover, _Chip.chipTokens.borderRadius, _Combobox.tokens.chipBorderRadius, _Chip.chipTokens.width, _Combobox.tokens.chipWidth, _Chip.chipTokens.height, _Combobox.tokens.chipHeight, _Chip.chipTokens.paddingRight, _Combobox.tokens.chipPaddingRight, _Chip.chipTokens.paddingLeft, _Combobox.tokens.chipPaddingLeft, _Chip.chipTokens.fontFamily, _Combobox.tokens.chipFontFamily, _Chip.chipTokens.fontSize, _Combobox.tokens.chipFontSize, _Chip.chipTokens.fontStyle, _Combobox.tokens.chipFontStyle, _Chip.chipTokens.fontWeight, _Combobox.tokens.chipFontWeight, _Chip.chipTokens.letterSpacing, _Combobox.tokens.chipLetterSpacing, _Chip.chipTokens.lineHeight, _Combobox.tokens.chipLineHeight, _Chip.chipTokens.clearContentMarginLeft, _Combobox.tokens.chipClearContentMarginLeft, _Chip.chipTokens.clearContentMarginRight, _Combobox.tokens.chipClearContentMarginRight, _Chip.chipTokens.scaleHover, _Combobox.tokens.chipScaleHover, _Chip.chipTokens.scaleActive, _Combobox.tokens.chipScaleActive, _Chip.chipTokens.closeIconSize, _Combobox.tokens.chipCloseIconSize, _Chip.chipTokens.closeIconColor, _Combobox.tokens.chipCloseIconColor, _Chip.chipTokens.focusColor, _Combobox.tokens.focusColor, /*#__PURE__*/(0, _mixins.addFocus)({
  outlineOffset: '0.125rem',
  outlineSize: '0.0625rem',
  outlineRadius: /*#__PURE__*/"calc(var(".concat(_Combobox.tokens.chipBorderRadius, ") - 0.1rem)"),
  outlineColor: /*#__PURE__*/"var(".concat(_Combobox.tokens.focusColor, ")")
}), _Combobox.tokens.chipOpacityReadonly);
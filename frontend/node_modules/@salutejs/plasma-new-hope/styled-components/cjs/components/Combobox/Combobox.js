"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.comboboxRoot = exports.comboboxConfig = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");
var _utils = /*#__PURE__*/require("../../utils");
var _utils2 = /*#__PURE__*/require("../Dropdown/utils");
var _utils3 = /*#__PURE__*/require("../Select/utils");
var _hooks = /*#__PURE__*/require("../Select/hooks");
var _hooks2 = /*#__PURE__*/require("../../hooks");
var _base = /*#__PURE__*/require("./variations/_view/base");
var _base2 = /*#__PURE__*/require("./variations/_size/base");
var _ui = /*#__PURE__*/require("./ui");
var _Combobox = /*#__PURE__*/require("./Combobox.styles");
var _excluded = ["name", "form", "readOnly", "disabled", "label", "placeholder", "id", "children", "role", "view", "size", "frame", "usePortal", "negativeResultContent", "enumerationType", "opened", "placement", "onToggle", "onKeyDown", "filterFunction"];
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
/**
 * Выпадающий список без внешнего контроля видимости.
 */
var comboboxRoot = exports.comboboxRoot = function comboboxRoot(Root) {
  return /*#__PURE__*/(0, _react.forwardRef)(function (_ref, outerRootRef) {
    var _targetRef$current;
    var name = _ref.name,
      form = _ref.form,
      readOnly = _ref.readOnly,
      disabled = _ref.disabled,
      label = _ref.label,
      placeholder = _ref.placeholder,
      id = _ref.id,
      children = _ref.children,
      role = _ref.role,
      view = _ref.view,
      size = _ref.size,
      frame = _ref.frame,
      usePortal = _ref.usePortal,
      _ref$negativeResultCo = _ref.negativeResultContent,
      negativeResultContent = _ref$negativeResultCo === void 0 ? 'Элементы не найдены' : _ref$negativeResultCo,
      _ref$enumerationType = _ref.enumerationType,
      enumerationType = _ref$enumerationType === void 0 ? 'comma' : _ref$enumerationType,
      _ref$opened = _ref.opened,
      opened = _ref$opened === void 0 ? false : _ref$opened,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      onToggle = _ref.onToggle,
      onKeyDown = _ref.onKeyDown,
      filterFunction = _ref.filterFunction,
      rest = _objectWithoutProperties(_ref, _excluded);
    var forceUpdate = (0, _hooks2.useForceUpdate)();
    var uniqId = (0, _plasmaCore.safeUseId)();
    var innerId = id || uniqId;
    var _rest$valueType = rest.valueType,
      valueType = _rest$valueType === void 0 ? 'single' : _rest$valueType,
      value = rest.value;
    var offset = [0, 4];
    var _useState = (0, _react.useState)(null),
      _useState2 = _slicedToArray(_useState, 2),
      ref = _useState2[0],
      setRef = _useState2[1];
    var targetRef = (0, _react.useRef)(null);
    var chipsRefs = (0, _react.useRef)([]);
    var comboboxRef = (0, _react.useRef)(null);
    var itemsRefs = (0, _react.useRef)([]);
    var inputRef = (0, _react.useRef)(null);
    var handleRef = (0, _plasmaCore.useForkRef)(targetRef, outerRootRef);
    var controlledRefs = {
      targetRef: targetRef,
      chipsRefs: chipsRefs,
      selectRef: comboboxRef,
      itemsRefs: itemsRefs,
      inputRef: inputRef
    };
    var _useState3 = (0, _react.useState)(opened),
      _useState4 = _slicedToArray(_useState3, 2),
      innerOpened = _useState4[0],
      setInnerOpened = _useState4[1];
    var _useState5 = (0, _react.useState)(''),
      _useState6 = _slicedToArray(_useState5, 2),
      search = _useState6[0],
      setSearch = _useState6[1];
    var _useState7 = (0, _react.useState)(search),
      _useState8 = _slicedToArray(_useState7, 2),
      filterValue = _useState8[0],
      setFilterValue = _useState8[1];

    // INFO: нужно высчитывать для корректной работы портала
    var dynamicTargetWidth = (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.offsetWidth;

    // INFO: Из-за того, что классы передаются через ref,
    // состояние пропсов после изменения view, size
    // всегда предыдущее, поэтому нужно делать форс-ререндер
    (0, _hooks2.useDidMountEffect)(function () {
      forceUpdate();
    }, [view, size]);
    (0, _react.useEffect)(function () {
      if (disabled || readOnly) {
        return;
      }
      setInnerOpened(opened);
    }, [opened, disabled, readOnly]);
    (0, _react.useEffect)(function () {
      // INFO: Для кейсов, когда значение выбрано и нужно вывести весь список
      if (opened) {
        setFilterValue('');
      }
    }, []);
    var onInnerToggle = function onInnerToggle(openValue, event) {
      if (disabled || readOnly) {
        return;
      }

      // INFO: Для кейсов, когда значение выбрано и нужно вывести весь список
      if (!innerOpened) {
        setFilterValue('');
      }
      if (onToggle) {
        onToggle(openValue, event);
        return;
      }
      setInnerOpened(openValue);
    };
    var closedWithoutChanges = (0, _react.useRef)(true);
    var updateValue = function updateValue(item, event) {
      var _rest$onChangeValue2;
      var newValue = item.dataset.value;
      if (rest.valueType === 'multiple') {
        var _rest$onChangeValue;
        var _newSelected = (0, _utils3.getNewSelected)(rest.value, newValue, rest.valueType);
        (_rest$onChangeValue = rest.onChangeValue) === null || _rest$onChangeValue === void 0 || _rest$onChangeValue.call(rest, _newSelected);
        return;
      }
      var newSelected = (0, _utils3.getNewSelected)(rest.value, newValue, 'single');
      (_rest$onChangeValue2 = rest.onChangeValue) === null || _rest$onChangeValue2 === void 0 || _rest$onChangeValue2.call(rest, newSelected);
      onInnerToggle === null || onInnerToggle === void 0 || onInnerToggle(false, event);
      closedWithoutChanges.current = false;
    };
    var onClickChildrenItem = function onClickChildrenItem(event) {
      // INFO: Для корректной работы компонента Popper
      event.stopPropagation();
      var item = event.currentTarget;
      updateValue(item, event);
    };
    var onChangeChipValue = function onChangeChipValue(newValue) {
      var _rest$onChangeValue3;
      if (rest.valueType !== 'multiple') {
        return;
      }
      (_rest$onChangeValue3 = rest.onChangeValue) === null || _rest$onChangeValue3 === void 0 || _rest$onChangeValue3.call(rest, newValue);
    };
    var _useKeyNavigation = (0, _hooks.useKeyNavigation)({
        controlledRefs: controlledRefs,
        opened: innerOpened,
        enumerationType: enumerationType,
        valueType: valueType,
        componentType: 'combobox',
        value: value,
        search: filterValue,
        updateOpened: onInnerToggle,
        updateValue: updateValue
      }),
      onKeyDownTarget = _useKeyNavigation.onKeyDownTarget,
      onKeyDownSelect = _useKeyNavigation.onKeyDownSelect;
    var childrenArray = _react.Children.toArray(children);
    var childrenMemo = (0, _utils3.getChildren)(childrenArray, {
      onClick: onClickChildrenItem,
      childrenRefs: itemsRefs
    }, value, filterValue, filterFunction).filter(Boolean);
    var values = (0, _utils3.getValues)(childrenArray, value);
    var onSearch = function onSearch(newSearch, newOpened) {
      setSearch(newSearch);
      setFilterValue(newSearch);
      setInnerOpened(newOpened !== null && newOpened !== void 0 ? newOpened : true);
    };
    var onKeyDownHandle = function onKeyDownHandle(event) {
      onKeyDown === null || onKeyDown === void 0 || onKeyDown(event);
      onKeyDownTarget(event);
    };
    return /*#__PURE__*/_react["default"].createElement(_Combobox.StyledRoot, {
      ref: comboboxRef
    }, /*#__PURE__*/_react["default"].createElement(_Combobox.StyledNativeSelect, {
      "aria-invalid": "false",
      "aria-hidden": "true",
      "aria-readonly": readOnly,
      tabIndex: -1,
      form: form,
      name: name,
      value: "".concat(value),
      disabled: disabled || readOnly
    }), /*#__PURE__*/_react["default"].createElement(_Combobox.StyledPopover, {
      role: role,
      isOpen: innerOpened,
      onToggle: onInnerToggle,
      target: /*#__PURE__*/_react["default"].createElement(_ui.ComboboxTarget, _extends({
        opened: innerOpened,
        values: values,
        label: label,
        placeholder: placeholder,
        search: search,
        enumerationType: enumerationType,
        valueType: valueType,
        readOnly: readOnly,
        disabled: disabled,
        size: size,
        closedWithoutChanges: closedWithoutChanges,
        ref: handleRef,
        chipsRefs: chipsRefs,
        inputRef: inputRef,
        id: innerId,
        onChange: onChangeChipValue,
        onSearch: onSearch,
        onKeyDown: onKeyDownHandle
      }, rest)),
      className: (0, _utils.cx)(ref === null || ref === void 0 ? void 0 : ref.classList.toString()) // INFO: Прокидываем стили для Popover
      ,
      id: innerId,
      offset: offset,
      placement: (0, _utils2.getPlacements)(placement),
      usePortal: usePortal,
      selectWidth: dynamicTargetWidth,
      frame: frame,
      trigger: "click",
      isFocusTrapped: false,
      preventOverflow: false,
      closeOnEsc: false,
      closeOnOverlayClick: true
    }, /*#__PURE__*/_react["default"].createElement(Root, {
      ref: setRef,
      view: view,
      size: size
    }, /*#__PURE__*/_react["default"].createElement(_Combobox.StyledCombobox, {
      onKeyDown: onKeyDownSelect
    }, childrenMemo.length ? childrenMemo : /*#__PURE__*/_react["default"].createElement(_Combobox.ComboboxItemNotFound, null, negativeResultContent)))));
  });
};
var comboboxConfig = exports.comboboxConfig = {
  name: 'Combobox',
  tag: 'div',
  layout: comboboxRoot,
  base: '',
  variations: {
    view: {
      css: _base.base
    },
    size: {
      css: _base2.base
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};
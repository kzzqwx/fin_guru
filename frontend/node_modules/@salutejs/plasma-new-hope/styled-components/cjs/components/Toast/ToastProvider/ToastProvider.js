"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useToastInner = exports.useToast = exports.ToastProviderHoc = exports.ToastContext = void 0;
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _utils = /*#__PURE__*/require("../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var ToastContext = exports.ToastContext = /*#__PURE__*/(0, _react.createContext)(null);
var useToastInner = exports.useToastInner = function useToastInner() {
  var context = (0, _react.useContext)(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
};
var useToast = exports.useToast = function useToast() {
  var _useToastInner = useToastInner(),
    showToast = _useToastInner.showToast,
    hideToast = _useToastInner.hideToast;
  return {
    showToast: showToast,
    hideToast: hideToast
  };
};
var initialToastData = {
  text: undefined,
  offset: undefined,
  position: _utils.DEFAULT_POSITION,
  fade: _utils.DEFAULT_FADE,
  timeout: undefined,
  contentLeft: undefined,
  role: undefined,
  pilled: undefined,
  hasClose: undefined,
  width: undefined,
  size: 'm',
  view: 'primary'
};
var getShowToastCallSignature = function getShowToastCallSignature(args) {
  if (_typeof(args[0]) === 'object' && 'text' in args[0]) {
    return args[0];
  }

  // TODO: issue https://github.com/salute-developers/plasma/issues/333
  var _args = _slicedToArray(args, 12),
    text = _args[0],
    position = _args[1],
    timeout = _args[2],
    fade = _args[3],
    contentLeft = _args[4],
    role = _args[5],
    offset = _args[6],
    pilled = _args[7],
    width = _args[8],
    hasClose = _args[9],
    size = _args[10],
    view = _args[11];
  return {
    text: text,
    position: position,
    timeout: timeout,
    fade: fade,
    contentLeft: contentLeft,
    role: role,
    offset: offset,
    pilled: pilled,
    width: width,
    hasClose: hasClose,
    size: size,
    view: view
  };
};
var ToastProviderHoc = exports.ToastProviderHoc = function ToastProviderHoc(ToastComponent) {
  return function ToastProvider(_ref) {
    var children = _ref.children;
    var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];
    var _useState3 = (0, _react.useState)(true),
      _useState4 = _slicedToArray(_useState3, 2),
      isHidden = _useState4[0],
      setIsHidden = _useState4[1];
    var hideTimeout = (0, _react.useRef)(null);
    var animationRunTimeout = (0, _react.useRef)(null);
    var _useState5 = (0, _react.useState)(initialToastData),
      _useState6 = _slicedToArray(_useState5, 2),
      toastProps = _useState6[0],
      setToastProps = _useState6[1];
    var _useState7 = (0, _react.useState)({
        timeout: undefined,
        onHide: undefined
      }),
      _useState8 = _slicedToArray(_useState7, 2),
      toastInfo = _useState8[0],
      setToastInfo = _useState8[1];
    var showToastCallback = function showToastCallback() {
      if (isVisible) {
        return;
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var _getShowToastCallSign = getShowToastCallSignature(args),
        text = _getShowToastCallSign.text,
        offset = _getShowToastCallSign.offset,
        _getShowToastCallSign2 = _getShowToastCallSign.position,
        position = _getShowToastCallSign2 === void 0 ? _utils.DEFAULT_POSITION : _getShowToastCallSign2,
        _getShowToastCallSign3 = _getShowToastCallSign.fade,
        fade = _getShowToastCallSign3 === void 0 ? _utils.DEFAULT_FADE : _getShowToastCallSign3,
        timeout = _getShowToastCallSign.timeout,
        contentLeft = _getShowToastCallSign.contentLeft,
        role = _getShowToastCallSign.role,
        pilled = _getShowToastCallSign.pilled,
        hasClose = _getShowToastCallSign.hasClose,
        size = _getShowToastCallSign.size,
        view = _getShowToastCallSign.view,
        width = _getShowToastCallSign.width,
        onHide = _getShowToastCallSign.onHide,
        onShow = _getShowToastCallSign.onShow;
      setToastProps({
        text: text,
        width: width,
        position: position,
        offset: offset,
        fade: fade,
        contentLeft: contentLeft,
        role: role,
        pilled: pilled,
        hasClose: hasClose,
        size: size,
        view: view
      });
      setToastInfo({
        timeout: timeout,
        onHide: onHide
      });
      setIsHidden(false);
      setIsVisible(true);
      onShow === null || onShow === void 0 || onShow();
    };
    var showToast = (0, _react.useCallback)(showToastCallback, []);
    var onHide = toastInfo.onHide,
      timeout = toastInfo.timeout;
    var hideToast = (0, _react.useCallback)(function () {
      if (!isVisible) {
        return;
      }
      if (hideTimeout !== null && hideTimeout !== void 0 && hideTimeout.current) {
        clearTimeout(hideTimeout.current);
        hideTimeout.current = null;
      }
      onHide === null || onHide === void 0 || onHide();
      setIsVisible(false);
      animationRunTimeout.current = setTimeout(function () {
        setIsHidden(true);
        setToastProps(initialToastData);
      }, _utils.TIMER_DELAY);
    }, [onHide, isVisible, isHidden]);
    (0, _react.useEffect)(function () {
      if (timeout === null && animationRunTimeout.current !== null) {
        clearTimeout(animationRunTimeout.current);
        animationRunTimeout.current = null;
      }
    }, [timeout]);
    (0, _react.useEffect)(function () {
      if (timeout && isVisible) {
        hideTimeout.current = setTimeout(function () {
          hideToast();
        }, timeout);
      }
    }, [isVisible, timeout]);
    return /*#__PURE__*/_react["default"].createElement(ToastContext.Provider, {
      value: {
        showToast: showToast,
        hideToast: hideToast,
        isVisible: isVisible,
        hideTimeout: hideTimeout,
        animationRunTimeout: animationRunTimeout
      }
    }, children, !isHidden && /*#__PURE__*/_react["default"].createElement(ToastComponent, toastProps));
  };
};
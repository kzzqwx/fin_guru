function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import { css } from 'styled-components';
import { getBaseGridView, gridTokens } from '../../../../components/Grid';
export var config = {
  defaults: {
    view: 'default'
  },
  variations: {
    view: {
      "default": /*#__PURE__*/css(["", ";", ":6;", ":0.5rem;", ":1rem;", ":0;", ":12;", ":0.5rem;", ":1.25rem;", ":35rem;", ":18;", ":0.5rem;", ":1.75rem;", ":49.125rem;", ":24;", ":0.5rem;", ":2.5rem;", ":60rem;", ":30;", ":0.5rem;", ":4rem;", ":75rem;"], /*#__PURE__*/getBaseGridView( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty({}, gridTokens.smallMMinWidth, 0), gridTokens.mediumSMinWidth, '35rem'), gridTokens.mediumMMinWidth, '49.125rem'), gridTokens.largeSMinWidth, '60rem'), gridTokens.largeMMinWidth, '75rem'), 'default'), gridTokens.smallMColsCount, gridTokens.smallMGap, gridTokens.smallMMargin, gridTokens.smallMMinWidth, gridTokens.mediumSColsCount, gridTokens.mediumSGap, gridTokens.mediumSMargin, gridTokens.mediumSMinWidth, gridTokens.mediumMColsCount, gridTokens.mediumMGap, gridTokens.mediumMMargin, gridTokens.mediumMMinWidth, gridTokens.largeSColsCount, gridTokens.largeSGap, gridTokens.largeSMargin, gridTokens.largeSMinWidth, gridTokens.largeMColsCount, gridTokens.largeMGap, gridTokens.largeMMargin, gridTokens.largeMMinWidth)
    }
  }
};
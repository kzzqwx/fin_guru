function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import { isValidElement, Children } from 'react';
export var extractTextFrom = function extractTextFrom(textSource) {
  switch (_typeof(textSource)) {
    case 'string':
      return textSource;
    case 'number':
      return textSource.toString();
    case 'object':
      {
        if (! /*#__PURE__*/isValidElement(textSource) || !textSource.props || !textSource.props.children) {
          return '';
        }
        return Children.map(textSource.props.children, function (child) {
          return extractTextFrom(child);
        }).join('');
      }
    default:
      return '';
  }
};
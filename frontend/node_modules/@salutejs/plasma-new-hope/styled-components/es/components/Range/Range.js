var _StyledDivider;
var _excluded = ["label", "leftHelper", "contentLeft", "contentRight", "view", "size", "readOnly", "disabled", "dividerVariant", "dividerIcon", "firstValue", "secondValue", "firstValueError", "secondValueError", "firstValueSuccess", "secondValueSuccess", "firstPlaceholder", "secondPlaceholder", "firstTextfieldContentLeft", "firstTextfieldContentRight", "secondTextfieldContentLeft", "secondTextfieldContentRight", "firstTextfieldTextBefore", "secondTextfieldTextBefore", "firstTextfieldTextAfter", "secondTextfieldTextAfter", "onChangeFirstValue", "onChangeSecondValue", "onSearchFirstValue", "onSearchSecondValue", "onFocusFirstTextfield", "onFocusSecondTextfield", "onBlurFirstTextfield", "onBlurSecondTextfield"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useMemo } from 'react';
import { cx } from '../../utils';
import { base as sizeCSS } from './variations/_size/base';
import { base as viewCSS } from './variations/_view/base';
import { base as disabledCSS } from './variations/_disabled/base';
import { base as readOnlyCSS } from './variations/_readonly/base';
import { getChangeHandler, getSearchHandler } from './utils';
import { ContentWrapper, LeftHelper, StyledContentLeft, StyledContentRight, StyledDivider, StyledInput, StyledLabel, base } from './Range.styles';
import { classes } from './Range.tokens';
export var rangeRoot = function rangeRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, ref) {
    var _StyledDivider2;
    var label = _ref.label,
      leftHelper = _ref.leftHelper,
      contentLeft = _ref.contentLeft,
      contentRight = _ref.contentRight,
      view = _ref.view,
      size = _ref.size,
      _ref$readOnly = _ref.readOnly,
      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
      _ref$disabled = _ref.disabled,
      disabled = _ref$disabled === void 0 ? false : _ref$disabled,
      _ref$dividerVariant = _ref.dividerVariant,
      dividerVariant = _ref$dividerVariant === void 0 ? 'dash' : _ref$dividerVariant,
      dividerIcon = _ref.dividerIcon,
      firstValue = _ref.firstValue,
      secondValue = _ref.secondValue,
      firstValueError = _ref.firstValueError,
      secondValueError = _ref.secondValueError,
      firstValueSuccess = _ref.firstValueSuccess,
      secondValueSuccess = _ref.secondValueSuccess,
      firstPlaceholder = _ref.firstPlaceholder,
      secondPlaceholder = _ref.secondPlaceholder,
      firstTextfieldContentLeft = _ref.firstTextfieldContentLeft,
      firstTextfieldContentRight = _ref.firstTextfieldContentRight,
      secondTextfieldContentLeft = _ref.secondTextfieldContentLeft,
      secondTextfieldContentRight = _ref.secondTextfieldContentRight,
      firstTextfieldTextBefore = _ref.firstTextfieldTextBefore,
      secondTextfieldTextBefore = _ref.secondTextfieldTextBefore,
      firstTextfieldTextAfter = _ref.firstTextfieldTextAfter,
      secondTextfieldTextAfter = _ref.secondTextfieldTextAfter,
      onChangeFirstValue = _ref.onChangeFirstValue,
      onChangeSecondValue = _ref.onChangeSecondValue,
      onSearchFirstValue = _ref.onSearchFirstValue,
      onSearchSecondValue = _ref.onSearchSecondValue,
      onFocusFirstTextfield = _ref.onFocusFirstTextfield,
      onFocusSecondTextfield = _ref.onFocusSecondTextfield,
      onBlurFirstTextfield = _ref.onBlurFirstTextfield,
      onBlurSecondTextfield = _ref.onBlurSecondTextfield,
      rest = _objectWithoutProperties(_ref, _excluded);
    var rangeErrorClass = firstValueError && secondValueError ? classes.rangeError : undefined;
    var firstValueErrorClass = !rangeErrorClass && firstValueError ? classes.rangeValueError : undefined;
    var secondValueErrorClass = !rangeErrorClass && secondValueError ? classes.rangeValueError : undefined;
    var rangeSuccessClass = firstValueSuccess && secondValueSuccess ? classes.rangeSuccess : undefined;
    var firstValueSuccessClass = !rangeSuccessClass && firstValueSuccess ? classes.rangeValueSuccess : undefined;
    var secondValueSuccessClass = !rangeSuccessClass && secondValueSuccess ? classes.rangeValueSuccess : undefined;
    var handleChangeFirstValue = getChangeHandler(onChangeFirstValue, disabled, readOnly);
    var handleChangeSecondValue = getChangeHandler(onChangeSecondValue, disabled, readOnly);
    var handleSearchFirstValue = getSearchHandler(onSearchFirstValue, disabled, readOnly);
    var handleSearchSecondValue = getSearchHandler(onSearchSecondValue, disabled, readOnly);
    var Divider = useMemo(function () {
      if (dividerVariant === 'none') {
        return null;
      }
      if (dividerVariant === 'dash') {
        return _StyledDivider || (_StyledDivider = /*#__PURE__*/React.createElement(StyledDivider, null, "\u2013"));
      }
      return _StyledDivider2 || (_StyledDivider2 = /*#__PURE__*/React.createElement(StyledDivider, null, dividerIcon));
    }, [dividerVariant, dividerIcon]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      view: view,
      size: size,
      disabled: disabled,
      readOnly: !disabled && readOnly,
      ref: ref
    }, rest), label && /*#__PURE__*/React.createElement(StyledLabel, null, label), /*#__PURE__*/React.createElement(ContentWrapper, {
      className: cx(rangeErrorClass, rangeSuccessClass)
    }, contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), /*#__PURE__*/React.createElement(StyledInput, {
      className: cx(firstValueErrorClass, firstValueSuccessClass),
      value: firstValue,
      readOnly: readOnly,
      disabled: disabled,
      placeholder: firstPlaceholder,
      contentLeft: firstTextfieldContentLeft,
      contentRight: firstTextfieldContentRight,
      textBefore: firstTextfieldTextBefore,
      textAfter: firstTextfieldTextAfter,
      onChange: handleChangeFirstValue,
      onSearch: handleSearchFirstValue,
      onFocus: onFocusFirstTextfield,
      onBlur: onBlurFirstTextfield
    }), Divider, /*#__PURE__*/React.createElement(StyledInput, {
      className: cx(secondValueErrorClass, secondValueSuccessClass),
      value: secondValue,
      readOnly: readOnly,
      disabled: disabled,
      placeholder: secondPlaceholder,
      contentLeft: secondTextfieldContentLeft,
      contentRight: secondTextfieldContentRight,
      textBefore: secondTextfieldTextBefore,
      textAfter: secondTextfieldTextAfter,
      onChange: handleChangeSecondValue,
      onSearch: handleSearchSecondValue,
      onFocus: onFocusSecondTextfield,
      onBlur: onBlurSecondTextfield
    }), contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight)), leftHelper && /*#__PURE__*/React.createElement(LeftHelper, null, leftHelper));
  });
};
export var rangeConfig = {
  name: 'Range',
  tag: 'div',
  layout: rangeRoot,
  base: base,
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    },
    disabled: {
      css: disabledCSS,
      attrs: true
    },
    readOnly: {
      css: readOnlyCSS,
      attrs: true
    }
  },
  defaults: {
    size: 'm',
    view: 'default'
  }
};
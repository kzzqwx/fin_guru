var _StyledTrigger;
var _excluded = ["size", "view", "focused", "disabled", "labelPosition", "label", "id", "style", "className", "checked", "defaultChecked"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { css } from 'styled-components';
import { base as sizeCSS } from '../Switch/_size/base';
import { base as viewCSS } from '../Switch/_view/base';
import { base as focusedCSS } from '../Switch/_focused/base';
import { base as disabledCSS } from '../Switch/_disabled/base';
import { base as labelPositionCSS } from '../Switch/_label-position/base';
import { StyledInput, StyledLabel, StyledTrigger } from './Switch.styles';
var base = /*#__PURE__*/css(["position:relative;display:flex;align-items:center;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);&:focus{outline:0 none;}"]);
export var switchRoot = function switchRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var size = props.size,
      view = props.view,
      focused = props.focused,
      disabled = props.disabled,
      labelPosition = props.labelPosition,
      label = props.label,
      id = props.id,
      style = props.style,
      className = props.className,
      checked = props.checked,
      defaultChecked = props.defaultChecked,
      rest = _objectWithoutProperties(props, _excluded);
    var exactChecked = Boolean(checked !== undefined ? checked : defaultChecked);
    // const singleLineClass = singleLine ? 'single-line' : '';

    return /*#__PURE__*/React.createElement(Root, {
      view: view,
      size: size,
      disabled: disabled,
      focused: focused,
      labelPosition: labelPosition,
      id: id,
      style: style,
      className: className
    }, /*#__PURE__*/React.createElement(StyledInput, _extends({}, rest, {
      ref: ref,
      role: "switch",
      "aria-checked": exactChecked,
      type: "checkbox",
      checked: checked,
      defaultChecked: defaultChecked,
      disabled: disabled
    })), /*#__PURE__*/React.createElement(StyledLabel, {
      tabIndex: -1
    }, label), _StyledTrigger || (_StyledTrigger = /*#__PURE__*/React.createElement(StyledTrigger, {
      "aria-hidden": true
    })));
  });
};
export var switchConfig = {
  name: 'Switch',
  tag: 'label',
  base: base,
  layout: switchRoot,
  variations: {
    size: {
      css: sizeCSS
    },
    view: {
      css: viewCSS
    },
    disabled: {
      css: disabledCSS,
      attrs: true
    },
    focused: {
      css: focusedCSS
    },
    labelPosition: {
      css: labelPositionCSS
    }
  },
  defaults: {
    size: 's',
    view: 'default'
  }
};
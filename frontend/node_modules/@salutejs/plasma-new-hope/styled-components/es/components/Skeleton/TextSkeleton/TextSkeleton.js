function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["lines", "width", "roundness", "customGradientColor", "lighter", "size"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useState } from 'react';
import { StyledTextSkeleton } from './TextSkeleton.styles';
var variousWidth = [7.58, 5.27, 13.54, 6.63, 0.28, 14.8, 0.33, 11.26, 14.1, 10.59, 3.38, 13.5, 7.71, 3.34, 7.96];

/**
 * Хок для создания компонента плейсхолдера нескольких строк текста.
 * Размеры компонента задаются с помощью констант и соответствуют размерам [типографических элементов](/?path=/docs/).
 */
export var textSkeleton = function textSkeleton(Component) {
  return function (_ref) {
    var lines = _ref.lines,
      width = _ref.width,
      roundness = _ref.roundness,
      customGradientColor = _ref.customGradientColor,
      lighter = _ref.lighter,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'body1' : _ref$size,
      props = _objectWithoutProperties(_ref, _excluded);
    var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      fixedWidth = _useState2[0],
      setFixedWidth = _useState2[1];
    var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      linesWidth = _useState4[0],
      setLinesWidth = _useState4[1];
    useEffect(function () {
      if (!width) {
        setFixedWidth(null);
        var computedLengths = Array(lines).fill(0).reduce(function (acc, _, i) {
          var w;
          // Последняя строка
          if (i === lines - 1 && lines !== 1) {
            w = 45 - variousWidth[i % variousWidth.length];
          } else if (lines === 1 || lines === 2) {
            // Единственная или первая из двух
            w = 100;
          } else {
            w = 100 - variousWidth[i % variousWidth.length];
          }
          return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, i, w));
        }, {});
        setLinesWidth(Object.values(computedLengths));
        return;
      }
      if (!Number.isNaN(Number(width))) {
        setFixedWidth("".concat(width, "%"));
      } else {
        setFixedWidth(String(width));
      }
    }, [width, lines]);
    return /*#__PURE__*/React.createElement(StyledTextSkeleton, props, Array.from(Array(lines), function (_, i) {
      return /*#__PURE__*/React.createElement(Component, {
        key: "line:".concat(i),
        size: size,
        roundness: roundness,
        customGradientColor: customGradientColor,
        lighter: lighter,
        style: {
          width: fixedWidth || "".concat(linesWidth[i], "%")
        }
      });
    }));
  };
};
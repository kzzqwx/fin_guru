var _excluded = ["children", "size", "view", "gradientColor"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { classes } from '../Header.tokens';
import { cx } from '../../../utils';
import { base as sizeCSS } from './variations/_size/base';
import { StyledHeaderRoot, StyledInner } from './HeaderRoot.styles';

/**
 * Корневой узел для шапки.
 */
export var headerRoot = function headerRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, outerRootRef) {
    var children = props.children,
      size = props.size,
      view = props.view,
      gradientColor = props.gradientColor,
      rest = _objectWithoutProperties(props, _excluded);
    var gradientColorClass = gradientColor ? classes.headerWithGradient : undefined;
    return /*#__PURE__*/React.createElement(Root, {
      ref: outerRootRef,
      size: size,
      view: view
    }, /*#__PURE__*/React.createElement(StyledHeaderRoot, _extends({
      className: cx(classes.headerRoot, gradientColorClass)
    }, rest, {
      $gradientColor: gradientColor
    }), /*#__PURE__*/React.createElement(StyledInner, null, children)));
  });
};
export var headerRootConfig = {
  name: 'HeaderRoot',
  tag: 'div',
  layout: headerRoot,
  base: '',
  variations: {
    size: {
      css: sizeCSS
    }
  },
  defaults: {
    size: 'm'
  }
};
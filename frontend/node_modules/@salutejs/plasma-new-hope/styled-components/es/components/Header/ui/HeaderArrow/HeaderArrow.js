var _excluded = ["arrow", "iconSize", "value"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { component, mergeConfig } from '../../../../engines';
import { buttonConfig } from '../../../Button';
import { classes, tokens } from '../../Header.tokens';
import { IconChevronLeft } from '../../../_Icon';
import { cx } from '../../../../utils';
import { base } from './HeaderArrow.styles';
import { base as sizeCSS } from './variations/_size/base';
import { base as viewCSS } from './variations/_view/base';
var mergedButtonConfig = /*#__PURE__*/mergeConfig(buttonConfig);
var Button = /*#__PURE__*/component(mergedButtonConfig);

/**
 * Кнопка-стрелка с возможностью отображения в двух типах - "назад" или "свернуть".
 */
export var headerArrowRoot = function headerArrowRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, outerRootRef) {
    var arrow = props.arrow,
      _props$iconSize = props.iconSize,
      iconSize = _props$iconSize === void 0 ? 's' : _props$iconSize,
      value = props.value,
      rest = _objectWithoutProperties(props, _excluded);
    var minimizeClass = arrow === 'minimize' ? classes.headerArrowIconMinimize : undefined;
    return /*#__PURE__*/React.createElement(Root, {
      ref: outerRootRef
    }, /*#__PURE__*/React.createElement(Button, _extends({
      view: "clear",
      size: "s",
      tabIndex: -1,
      className: classes.headerArrow,
      value: String(value)
    }, rest), /*#__PURE__*/React.createElement(IconChevronLeft, _extends({
      size: iconSize,
      sizeCustomProperty: tokens.headerArrowIconSize,
      className: cx(classes.headerArrowIcon, minimizeClass),
      color: "inherit"
    }, props))));
  });
};
export var headerArrowConfig = {
  name: 'HeaderArrow',
  tag: 'div',
  layout: headerArrowRoot,
  base: base,
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};
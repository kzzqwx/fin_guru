var _excluded = ["label", "title", "subTitle", "caption", "withBigTitle", "children"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { base as sizeCSS } from './variations/_size/base';
import { base as viewCSS } from './variations/_view/base';
import { BigTitle, Caption, Label, SubTitle, TextBoxRoot, Title } from './HeaderTitleWrapper.styles';

/**
 * Компонент для отображения текста в скомпанованном блоке.
 */
export var headerTitleWrapperRoot = function headerTitleWrapperRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, outerRootRef) {
    var label = props.label,
      title = props.title,
      subTitle = props.subTitle,
      caption = props.caption,
      withBigTitle = props.withBigTitle,
      children = props.children,
      rest = _objectWithoutProperties(props, _excluded);
    if (children) {
      return /*#__PURE__*/React.createElement(Root, {
        ref: outerRootRef
      }, /*#__PURE__*/React.createElement(TextBoxRoot, rest, children));
    }
    var T = withBigTitle ? BigTitle : Title;
    return /*#__PURE__*/React.createElement(Root, {
      ref: outerRootRef
    }, /*#__PURE__*/React.createElement(TextBoxRoot, rest, label && /*#__PURE__*/React.createElement(Label, null, label), title && /*#__PURE__*/React.createElement(T, null, title), subTitle && /*#__PURE__*/React.createElement(SubTitle, null, subTitle), caption && /*#__PURE__*/React.createElement(Caption, null, caption)));
  });
};
export var headerTitleWrapperConfig = {
  name: 'HeaderTitleWrapper',
  tag: 'div',
  layout: headerTitleWrapperRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};
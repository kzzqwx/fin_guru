var _excluded = ["id", "isHidden"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useMemo } from 'react';
import { useStoreon } from 'storeon/react';
import { PopupProvider, popupConfig } from '../Popup';
import { component } from '../../engines';
import { cx } from '../../utils';
import { closeNotification } from './NotificationsStore';
import { StyledItemWrapper, StyledRoot } from './Notification.styles';
import { classes } from './Notification.tokens';

// issue #823
var Popup = /*#__PURE__*/component(popupConfig);

/**
 * Обертка для визуального представления уведомлений.
 */
export var NotificationsPortal = function NotificationsPortal(_ref) {
  var config = _ref.config,
    frame = _ref.frame;
  var _useStoreon = useStoreon('notifications'),
    notifications = _useStoreon.notifications;
  var Notification = useMemo(function () {
    return component(config);
  }, []);
  return /*#__PURE__*/React.createElement(PopupProvider, null, notifications.length > 0 && /*#__PURE__*/React.createElement(Popup, {
    isOpen: true,
    frame: frame,
    placement: "bottom-right",
    zIndex: "9100"
  }, /*#__PURE__*/React.createElement(StyledRoot, null, notifications.map(function (_ref2) {
    var id = _ref2.id,
      isHidden = _ref2.isHidden,
      rest = _objectWithoutProperties(_ref2, _excluded);
    return /*#__PURE__*/React.createElement(StyledItemWrapper, {
      key: id,
      className: cx(isHidden ? classes.notificationItemHidden : classes.notificationItemOpened),
      isHidden: isHidden || false
    }, /*#__PURE__*/React.createElement(Notification, _extends({
      key: id,
      id: id,
      onCloseButtonClick: function onCloseButtonClick() {
        return closeNotification(id);
      }
    }, rest)));
  }))));
};
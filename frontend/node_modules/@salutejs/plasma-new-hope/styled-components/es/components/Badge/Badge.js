var _excluded = ["children", "className", "text", "contentLeft", "contentRight", "size", "view", "pilled", "transparent"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { cx } from '../../utils';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { base as pilledCSS } from './variations/_pilled/base';
import { base as transparentCSS } from './variations/_transparent/base';
import { StyledContentLeft, StyledContentMain, StyledContentRight, base } from './Badge.styles';
import { classes } from './Badge.tokens';
export var badgeRoot = function badgeRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var children = props.children,
      className = props.className,
      text = props.text,
      contentLeft = props.contentLeft,
      contentRight = props.contentRight,
      size = props.size,
      view = props.view,
      _props$pilled = props.pilled,
      pilled = _props$pilled === void 0 ? false : _props$pilled,
      _props$transparent = props.transparent,
      transparent = _props$transparent === void 0 ? false : _props$transparent,
      rest = _objectWithoutProperties(props, _excluded);
    var pilledClass = pilled ? classes.badgePilled : undefined;
    var transparentClass = transparent ? classes.badgeTransparent : undefined;
    var txt = !text && typeof children === 'string' ? children : text;
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      className: cx(pilledClass, transparentClass, className),
      view: view,
      size: size,
      pilled: pilled,
      transparent: transparent
    }, rest), contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), txt ? /*#__PURE__*/React.createElement(StyledContentMain, null, txt) : children, contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight));
  });
};
export var badgeConfig = {
  name: 'Badge',
  tag: 'div',
  layout: badgeRoot,
  base: base,
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    },
    pilled: {
      css: pilledCSS,
      attrs: true
    },
    transparent: {
      css: transparentCSS,
      attrs: true
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};
var _Indeterminate, _Done;
var _excluded = ["size", "view", "focused", "disabled", "id", "label", "description", "indeterminate", "style", "className", "singleLine", "aria-label"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useEffect, useMemo, useRef } from 'react';
import { safeUseId, useForkRef, extractTextFrom } from '@salutejs/plasma-core';
import { cx } from '../../utils';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { base as disabledCSS } from './variations/_disabled/base';
import { base as focusedCSS } from './variations/_focused/base';
import { Done, Indeterminate } from './IconsSvg';
import { StyledContent, StyledContentWrapper, StyledDescription, StyledInput, StyledLabel, StyledTrigger, base } from './Checkbox.styles';
import { classes } from './Checkbox.tokens';
export var checkboxRoot = function checkboxRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var size = props.size,
      view = props.view,
      focused = props.focused,
      disabled = props.disabled,
      id = props.id,
      label = props.label,
      description = props.description,
      indeterminate = props.indeterminate,
      style = props.style,
      className = props.className,
      _props$singleLine = props.singleLine,
      singleLine = _props$singleLine === void 0 ? false : _props$singleLine,
      ariaLabelExternal = props['aria-label'],
      rest = _objectWithoutProperties(props, _excluded);
    var inputRef = useRef(null);
    var forkRef = useForkRef(inputRef, ref);
    useEffect(function () {
      if (inputRef.current) {
        inputRef.current.indeterminate = Boolean(indeterminate);
      }
    }, [inputRef, indeterminate]);
    var uniqId = safeUseId();
    var uniqLabelId = "label-".concat(uniqId);
    var uniqDescriptionId = "description-".concat(uniqId);
    var checkboxId = id || "input-".concat(uniqId);
    var ariaLabel = useMemo(function () {
      return ariaLabelExternal || extractTextFrom(label);
    }, [ariaLabelExternal, label]);
    var isLabelAriaHidden = typeof label === 'string';
    var canFocused = focused ? 0 : -1;
    var hasContent = label || description;
    var singleLineClass = singleLine ? classes.singleLine : undefined;
    var onlyDescriptionClass = !label && description ? classes.onlyDescription : undefined;
    return /*#__PURE__*/React.createElement(Root, {
      view: view,
      size: size,
      disabled: disabled,
      focused: focused,
      style: style,
      className: className,
      tabIndex: -1
    }, /*#__PURE__*/React.createElement(StyledInput, _extends({}, rest, {
      id: checkboxId,
      ref: forkRef,
      type: "checkbox",
      disabled: disabled,
      "aria-label": ariaLabel,
      "aria-describedby": uniqDescriptionId,
      tabIndex: canFocused
    })), /*#__PURE__*/React.createElement(StyledContentWrapper, {
      htmlFor: checkboxId
    }, /*#__PURE__*/React.createElement(StyledTrigger, {
      className: classes.checkboxTrigger
    }, indeterminate ? _Indeterminate || (_Indeterminate = /*#__PURE__*/React.createElement(Indeterminate, null)) : _Done || (_Done = /*#__PURE__*/React.createElement(Done, null))), hasContent && /*#__PURE__*/React.createElement(StyledContent, {
      className: singleLineClass
    }, label && /*#__PURE__*/React.createElement(StyledLabel, {
      className: singleLineClass,
      id: uniqLabelId,
      "aria-hidden": isLabelAriaHidden
    }, label), description && /*#__PURE__*/React.createElement(StyledDescription, {
      className: cx(singleLineClass, onlyDescriptionClass),
      id: uniqDescriptionId
    }, description))));
  });
};
export var checkboxConfig = {
  name: 'Checkbox',
  tag: 'div',
  layout: checkboxRoot,
  base: base,
  variations: {
    size: {
      css: sizeCSS
    },
    view: {
      css: viewCSS
    },
    disabled: {
      css: disabledCSS
    },
    focused: {
      css: focusedCSS
    }
  },
  defaults: {
    size: 'm',
    view: 'accent'
  }
};
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
import React, { cloneElement, isValidElement } from 'react';
var isReactObject = function isReactObject(element) {
  return _typeof(element) === 'object' || typeof element === 'function';
};
export var getValidComponent = function getValidComponent(element, props) {
  if ( /*#__PURE__*/isValidElement(element)) {
    return /*#__PURE__*/cloneElement(element, props);
  }
  if (isReactObject(element)) {
    var Component = element;
    return /*#__PURE__*/React.createElement(Component, props);
  }
  return element;
};
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["id", "className", "children", "text", "isSelected", "name", "checked", "value", "view", "size", "disabled", "role", "contentLeft", "contentRight", "onSelect", "onClick", "onChange"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useCallback, useMemo } from 'react';
import { safeUseId } from '@salutejs/plasma-core';
import { classes } from '../../Combobox.tokens';
import { getValidComponent } from '../../utils';
import { cx } from '../../../../utils';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { StyledContentLeft, StyledContentRight, StyledText, base } from './ComboboxItem.styles';
export var comboboxItemRoot = function comboboxItemRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var id = _ref.id,
      className = _ref.className,
      children = _ref.children,
      text = _ref.text,
      isSelected = _ref.isSelected,
      name = _ref.name,
      checked = _ref.checked,
      value = _ref.value,
      view = _ref.view,
      size = _ref.size,
      disabled = _ref.disabled,
      _ref$role = _ref.role,
      role = _ref$role === void 0 ? 'option' : _ref$role,
      ContentLeftComponent = _ref.contentLeft,
      ContentRightComponent = _ref.contentRight,
      onSelect = _ref.onSelect,
      onClick = _ref.onClick,
      onChange = _ref.onChange,
      rest = _objectWithoutProperties(_ref, _excluded);
    var uniqId = safeUseId();
    var innerId = id || uniqId;
    var withComboboxItemIsSelected = checked || isSelected ? classes.comboboxItemIsDisabled : undefined;
    var withComboboxItemIsDisabled = disabled ? classes.comboboxItemIsDisabled : undefined;
    var handleOnClick = useCallback(function (event) {
      if (disabled) {
        return;
      }
      onClick === null || onClick === void 0 || onClick(event);
      if (onSelect && !ContentLeftComponent) {
        onSelect(value, text);
      }
    }, [onSelect, disabled]);
    var handleOnChange = useCallback(function (event) {
      if (disabled) {
        return;
      }
      onChange === null || onChange === void 0 || onChange(event);
      if (onSelect && ContentLeftComponent) {
        onSelect(value, text);
      }
    }, [onSelect, disabled]);
    var contentProps = _objectSpread({
      name: name,
      value: value,
      checked: checked || isSelected,
      disabled: disabled,
      tabIndex: -1
    }, !disabled && {
      onChange: handleOnChange
    });
    var ContentLeft = useMemo(function () {
      return getValidComponent(ContentLeftComponent, contentProps);
    }, [ContentRightComponent, contentProps]);
    var ContentRight = useMemo(function () {
      return getValidComponent(ContentRightComponent, contentProps);
    }, [ContentRightComponent, contentProps]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      className: cx(withComboboxItemIsSelected, withComboboxItemIsDisabled, className),
      view: view,
      size: size,
      id: innerId,
      isSelected: isSelected,
      role: role,
      ref: outerRootRef,
      tabIndex: 0,
      "aria-disabled": disabled,
      "aria-selected": isSelected,
      onClick: handleOnClick,
      "data-value": value
    }, rest), text ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledContentLeft, null, ContentLeftComponent && ContentLeft), /*#__PURE__*/React.createElement(StyledText, null, text), /*#__PURE__*/React.createElement(StyledContentRight, null, ContentRightComponent && ContentRight)) : children);
  });
};
export var comboboxItemConfig = {
  name: 'ComboboxItem',
  tag: 'div',
  layout: comboboxItemRoot,
  base: base,
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};
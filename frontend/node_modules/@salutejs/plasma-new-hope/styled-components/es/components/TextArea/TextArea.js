var _excluded = ["helperText", "status", "resize", "rightHelper", "leftHelper", "contentRight", "autoResize", "minAuto", "maxAuto", "label", "labelPlacement", "placeholder", "defaultValue", "height", "width", "value", "disabled", "size", "view", "id", "style", "className", "readOnly", "rows", "cols", "onChange"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useState, createRef, useCallback } from 'react';
import { css } from 'styled-components';
import { useResizeObserver } from '@salutejs/plasma-core';
import { cx } from '../../utils';
import { applyDynamicLabel } from './mixins';
import { useAutoResize, ROOT_FONT_SIZE } from './hooks';
import { StyledContent, StyledHelpers, StyledLeftHelper, StyledRightHelper, StyledLabel, StyledPlaceholder, StyledTextArea, StyledTextAreaWrapper, StyledContainer } from './TextArea.styles';
import { classes } from './TextArea.tokens';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { base as disabledCSS } from './variations/_disabled/base';
var innerPlaceholderUp = classes.innerPlaceholderUp,
  focusedOuterPlaceholderColor = classes.focusedOuterPlaceholderColor,
  hidePlaceHolder = classes.hidePlaceHolder,
  styledContainer = classes.styledContainer,
  styledTextArea = classes.styledTextArea,
  styledTextAreaWrapper = classes.styledTextAreaWrapper,
  styledPlaceholder = classes.styledPlaceholder,
  styledHelpers = classes.styledHelpers;
var base = /*#__PURE__*/css(["", ";position:relative;box-sizing:border-box;"], applyDynamicLabel);

// TODO: Удалить после отказа от старых библиотек plasma-web / plasma-b2c
var fallbackStatusMap = {
  '': 'primary',
  success: 'positive',
  warning: 'warning',
  error: 'negative'
};

// TODO: Перенести этот метод в файл applyDynamicLabel.ts
export var getDynamicLabelClasses = function getDynamicLabelClasses(props, focused) {
  var readOnly = props.readOnly,
    label = props.label,
    labelPlacement = props.labelPlacement,
    autoResize = props.autoResize,
    rows = props.rows,
    value = props.value,
    size = props.size;

  // Добавить класс отвечающий за изменение цвета плейсхолдера при фокусе
  var withFocusedOuterUpPlaceholder = !readOnly && focused && (!label || labelPlacement === 'outer') ? focusedOuterPlaceholderColor : undefined;

  // Добавить класс отвечающий за поднятие и уменьшение плейсхолдера
  var withInnerPlaceholderUp = labelPlacement === 'inner' && label && !autoResize && !rows && size !== 'xs' && (!readOnly && (value || focused) || readOnly && value) ? innerPlaceholderUp : undefined;

  // Добавить класс отвечающий за скрытие плейсхолдера
  var withHidePlaceholder = value && !label || labelPlacement === 'inner' && (focused && !readOnly || value) && label && (rows || autoResize) || labelPlacement === 'outer' && value || labelPlacement === 'inner' && size === 'xs' && value ? hidePlaceHolder : undefined;
  return [withFocusedOuterUpPlaceholder, withInnerPlaceholderUp, withHidePlaceholder];
};
export var textAreaRoot = function textAreaRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, innerRef) {
    var helperText = props.helperText,
      status = props.status,
      resize = props.resize,
      rightHelper = props.rightHelper,
      leftHelper = props.leftHelper,
      contentRight = props.contentRight,
      _props$autoResize = props.autoResize,
      autoResize = _props$autoResize === void 0 ? false : _props$autoResize,
      _props$minAuto = props.minAuto,
      minAuto = _props$minAuto === void 0 ? 0 : _props$minAuto,
      maxAuto = props.maxAuto,
      label = props.label,
      _props$labelPlacement = props.labelPlacement,
      labelPlacement = _props$labelPlacement === void 0 ? 'inner' : _props$labelPlacement,
      placeholder = props.placeholder,
      defaultValue = props.defaultValue,
      height = props.height,
      width = props.width,
      value = props.value,
      disabled = props.disabled,
      size = props.size,
      view = props.view,
      id = props.id,
      style = props.style,
      className = props.className,
      readOnly = props.readOnly,
      rows = props.rows,
      cols = props.cols,
      onChange = props.onChange,
      rest = _objectWithoutProperties(props, _excluded);
    var _useState = useState(width ? "".concat(width, "rem") : '100%'),
      _useState2 = _slicedToArray(_useState, 2),
      helperWidth = _useState2[0],
      setHelperWidth = _useState2[1];
    var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      focused = _useState4[0],
      setFocused = _useState4[1];
    var _useState5 = useState(),
      _useState6 = _slicedToArray(_useState5, 2),
      uncontrolledValue = _useState6[0],
      setUncontrolledValue = _useState6[1];
    var outerRef = innerRef && 'current' in innerRef ? innerRef : /*#__PURE__*/createRef();
    var hasHelper = Boolean(leftHelper || rightHelper || helperText);
    var overriddenView = status !== undefined ? fallbackStatusMap[status] : view;
    var textareaHelperId = id ? "".concat(id, "-helper") : undefined;
    var applyCustomWidth = resize !== 'horizontal' && resize !== 'both' && !cols;
    var placeLabel = labelPlacement === 'inner' && label && size !== 'xs' ? label : placeholder;
    useResizeObserver(outerRef, function (currentElement) {
      var _currentElement$style = currentElement.style,
        inlineWidth = _currentElement$style.width,
        inlineHeight = _currentElement$style.height;
      if (inlineWidth || inlineHeight || cols) {
        var _currentElement$getBo = currentElement.getBoundingClientRect(),
          elementWidth = _currentElement$getBo.width;
        setHelperWidth("".concat(elementWidth / ROOT_FONT_SIZE, "rem"));
      }
    });
    useAutoResize(autoResize, outerRef, value, minAuto, maxAuto);
    var onFocusHandler = useCallback(function () {
      setFocused(true);
    }, []);
    var onBlurHandler = useCallback(function () {
      setFocused(false);
    }, []);
    var onChangeHandler = useCallback(function (event) {
      // INFO: Для крайне редких кейсов, когда value снаружи не контролируется
      if (value === undefined) {
        setUncontrolledValue(event === null || event === void 0 ? void 0 : event.target.value);
      }
      onChange === null || onChange === void 0 || onChange(event);
    }, [value, onChange]);
    var dynamicLabelClasses = getDynamicLabelClasses({
      size: size,
      readOnly: readOnly,
      label: label,
      labelPlacement: labelPlacement,
      autoResize: autoResize,
      rows: rows,
      value: value || uncontrolledValue || defaultValue
    }, focused);
    return /*#__PURE__*/React.createElement(Root, {
      view: overriddenView,
      size: size,
      disabled: disabled,
      readOnly: readOnly,
      style: style,
      className: className
    }, label && labelPlacement === 'outer' && /*#__PURE__*/React.createElement(StyledLabel, null, label), /*#__PURE__*/React.createElement(StyledContainer, {
      className: cx.apply(void 0, [styledContainer].concat(_toConsumableArray(dynamicLabelClasses))),
      width: helperWidth,
      onFocus: onFocusHandler,
      onBlur: onBlurHandler
    }, contentRight && /*#__PURE__*/React.createElement(StyledContent, null, contentRight), /*#__PURE__*/React.createElement(StyledTextAreaWrapper, {
      className: styledTextAreaWrapper,
      hasHelper: hasHelper
    }, /*#__PURE__*/React.createElement(StyledTextArea, _extends({
      className: styledTextArea,
      id: id,
      hasContentRight: Boolean(contentRight),
      hasHelper: hasHelper,
      applyCustomWidth: applyCustomWidth,
      ref: outerRef,
      disabled: disabled,
      height: autoResize ? minAuto : height,
      width: width,
      placeholder: placeLabel,
      "aria-describedby": textareaHelperId,
      value: value,
      readOnly: readOnly,
      rows: rows,
      cols: cols,
      resize: resize,
      defaultValue: defaultValue,
      onChange: onChangeHandler
    }, rest))), hasHelper && /*#__PURE__*/React.createElement(StyledHelpers, {
      className: styledHelpers,
      id: textareaHelperId
    }, (leftHelper || helperText) && /*#__PURE__*/React.createElement(StyledLeftHelper, null, leftHelper || helperText), rightHelper && /*#__PURE__*/React.createElement(StyledRightHelper, null, rightHelper)), placeLabel && /*#__PURE__*/React.createElement(StyledPlaceholder, {
      hasContentRight: Boolean(contentRight),
      className: styledPlaceholder,
      htmlFor: id
    }, placeLabel)));
  });
};
export var textAreaConfig = {
  name: 'TextArea',
  tag: 'div',
  layout: textAreaRoot,
  base: base,
  variations: {
    size: {
      css: sizeCSS
    },
    view: {
      css: viewCSS
    },
    disabled: {
      css: disabledCSS,
      attrs: true
    },
    readOnly: {
      attrs: true
    }
  },
  defaults: {
    size: 'm',
    view: 'primary'
  }
};
var _excluded = ["children", "orientation", "hasShadow", "className"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { cx } from '../../utils';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { classes } from './Toolbar.tokens';
import { base } from './Toolbar.styles';
export var toolbarRoot = function toolbarRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var children = props.children,
      _props$orientation = props.orientation,
      orientation = _props$orientation === void 0 ? 'vertical' : _props$orientation,
      _props$hasShadow = props.hasShadow,
      hasShadow = _props$hasShadow === void 0 ? true : _props$hasShadow,
      className = props.className,
      rest = _objectWithoutProperties(props, _excluded);
    var orientationClassName = orientation === 'horizontal' ? classes.horizontal : classes.vertical;
    var shadowClassName = hasShadow ? classes.shadow : undefined;
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      orientation: orientation,
      hasShadow: hasShadow,
      className: cx(className, orientationClassName, shadowClassName)
    }, rest), children);
  });
};
export var toolbarConfig = {
  name: 'Toolbar',
  tag: 'div',
  layout: toolbarRoot,
  base: base,
  variations: {
    size: {
      css: sizeCSS
    },
    view: {
      css: viewCSS
    }
  },
  defaults: {
    view: 'default'
  }
};
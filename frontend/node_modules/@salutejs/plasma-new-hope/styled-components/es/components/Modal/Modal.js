var _excluded = ["id", "withAnimation", "onClose", "onOverlayClick", "onEscKeyDown", "closeOnEsc", "closeOnOverlayClick", "withBlur", "initialFocusRef", "focusAfterRef", "zIndex", "popupInfo", "children", "view", "isOpen"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useCallback, useMemo } from 'react';
import { useFocusTrap, useForkRef, safeUseId } from '@salutejs/plasma-core';
import { component } from '../../engines';
import { popupConfig, usePopupContext } from '../Popup';
import { Overlay } from '../Overlay';
import { DEFAULT_Z_INDEX } from '../Popup/utils';
import { classes, tokens } from './Modal.tokens';
import { useModal } from './hooks';
import { base as viewCSS } from './variations/_view/base';
import { getIdLastModal } from './ModalContext';

// issue #823
var Popup = /*#__PURE__*/component(popupConfig);

/**
 * Modal.
 * Управляет показом/скрытием, подложкой и анимацией визуальной части модального окна.
 */
export var modalRoot = function modalRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var id = _ref.id,
      withAnimation = _ref.withAnimation,
      onClose = _ref.onClose,
      onOverlayClick = _ref.onOverlayClick,
      onEscKeyDown = _ref.onEscKeyDown,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      withBlur = _ref.withBlur,
      initialFocusRef = _ref.initialFocusRef,
      focusAfterRef = _ref.focusAfterRef,
      zIndex = _ref.zIndex,
      popupInfo = _ref.popupInfo,
      children = _ref.children,
      view = _ref.view,
      isOpen = _ref.isOpen,
      rest = _objectWithoutProperties(_ref, _excluded);
    var trapRef = useFocusTrap(true, initialFocusRef, focusAfterRef);
    var popupController = usePopupContext();
    var innerRef = useForkRef(trapRef, outerRootRef);
    var uniqId = safeUseId();
    var innerId = id || uniqId;
    var overlayBackgroundToken = withBlur ? "var(".concat(tokens.modalOverlayWithBlurColor, ")") : "var(".concat(tokens.modalOverlayColor, ")");
    var _useModal = useModal({
        id: innerId,
        isOpen: isOpen,
        closeOnEsc: closeOnEsc,
        onEscKeyDown: onEscKeyDown,
        onClose: onClose,
        popupInfo: popupInfo
      }),
      modalInfo = _useModal.modalInfo;
    var transparent = useMemo(function () {
      return getIdLastModal(popupController.items) !== innerId;
    }, [innerId, popupController.items]);
    var onModalOverlayKeyDown = useCallback(function (event) {
      if (onOverlayClick) {
        onOverlayClick(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    }, [closeOnOverlayClick, onOverlayClick, onClose]);
    return /*#__PURE__*/React.createElement(Popup, _extends({
      id: innerId,
      isOpen: isOpen,
      ref: innerRef,
      popupInfo: modalInfo,
      withAnimation: withAnimation,
      zIndex: zIndex,
      overlay: /*#__PURE__*/React.createElement(Root, {
        view: view
      }, /*#__PURE__*/React.createElement(Overlay, {
        className: classes.overlay,
        zIndex: zIndex || DEFAULT_Z_INDEX,
        backgroundColorProperty: overlayBackgroundToken,
        withBlur: withBlur,
        transparent: transparent,
        isClickable: closeOnOverlayClick,
        onOverlayClick: onModalOverlayKeyDown
      }))
    }, rest), children);
  });
};
export var modalConfig = {
  name: 'Modal',
  tag: 'div',
  layout: modalRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    }
  },
  defaults: {
    view: 'default'
  }
};
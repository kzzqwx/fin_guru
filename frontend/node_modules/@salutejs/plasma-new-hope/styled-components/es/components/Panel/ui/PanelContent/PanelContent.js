var _excluded = ["children", "view"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { base as viewCSS } from './variations/_view/base';
export var panelContentRoot = function panelContentRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRef) {
    var children = _ref.children,
      view = _ref.view,
      rest = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: outerRef,
      view: view
    }, rest), children);
  });
};
export var panelContentConfig = {
  name: 'PanelContent',
  tag: 'div',
  layout: panelContentRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    }
  },
  defaults: {
    view: 'default'
  }
};
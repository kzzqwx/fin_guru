var _IconClose;
var _excluded = ["children", "actions", "view", "className", "onClose", "hasClose", "closePlacement"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { cx } from '../../../../utils';
import { IconClose } from '../../../_Icon';
import { classes } from '../../Panel.tokens';
import { placements } from './PanelHeader.types';
import { StyledHeader, ButtonWrapper, CloseIconWrapper } from './PanelHeader.styles';
import { base as viewCSS } from './variations/_view/base';
export var panelHeaderRoot = function panelHeaderRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRef) {
    var children = _ref.children,
      actions = _ref.actions,
      view = _ref.view,
      className = _ref.className,
      onClose = _ref.onClose,
      _ref$hasClose = _ref.hasClose,
      hasClose = _ref$hasClose === void 0 ? 'true' : _ref$hasClose,
      _ref$closePlacement = _ref.closePlacement,
      closePlacement = _ref$closePlacement === void 0 ? 'right' : _ref$closePlacement,
      rest = _objectWithoutProperties(_ref, _excluded);
    var hasHeaderClass = children ? undefined : classes.hasHeader;
    var isRightCloseClass = closePlacement === placements.right ? classes.isRightClose : undefined;
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: outerRef,
      view: view,
      className: cx(className, hasHeaderClass, isRightCloseClass)
    }, rest), children && /*#__PURE__*/React.createElement(StyledHeader, null, children), actions && /*#__PURE__*/React.createElement(ButtonWrapper, null, actions), hasClose && /*#__PURE__*/React.createElement(ButtonWrapper, {
      placement: closePlacement
    }, /*#__PURE__*/React.createElement(CloseIconWrapper, {
      view: "clear",
      size: "s",
      onClick: onClose
    }, _IconClose || (_IconClose = /*#__PURE__*/React.createElement(IconClose, {
      size: "s",
      color: "inherit"
    })))));
  });
};
export var panelHeaderConfig = {
  name: 'PanelHeader',
  tag: 'div',
  layout: panelHeaderRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    }
  },
  defaults: {
    view: 'default'
  }
};
var _excluded = ["view", "status", "value", "displayValue"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { StyledProgress, StyledTrack, StyledValue, base } from './Progress.styles';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
export var progressRoot = function progressRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, ref) {
    var view = _ref.view,
      status = _ref.status,
      value = _ref.value,
      _ref$displayValue = _ref.displayValue,
      displayValue = _ref$displayValue === void 0 ? true : _ref$displayValue,
      rest = _objectWithoutProperties(_ref, _excluded);
    var min = 0;
    var max = 100;
    var normalizedValue = Math.max(Math.min(value, max), min);
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      view: status || view,
      value: normalizedValue
    }, rest), /*#__PURE__*/React.createElement(StyledTrack, null, /*#__PURE__*/React.createElement(StyledProgress, {
      value: normalizedValue
    })), displayValue && /*#__PURE__*/React.createElement(StyledValue, null, normalizedValue, "%"));
  });
};
export var progressConfig = {
  name: 'Progress',
  tag: 'div',
  layout: progressRoot,
  base: base,
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};
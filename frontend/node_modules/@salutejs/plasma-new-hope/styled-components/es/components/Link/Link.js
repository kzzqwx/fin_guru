var _excluded = ["children", "disabled", "target", "href", "rel"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { css } from 'styled-components';
import { base as viewCSS } from './_view/base';
import { base as disabledCSS } from './_disabled/base';
import { base as focusedCSS } from './_focused/base';
var base = /*#__PURE__*/css(["position:relative;text-decoration:none;transition:color 0.15s ease-in;::before{content:'';position:absolute;inset:0;opacity:0.4;}"]);
export var linkRoot = function linkRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var children = props.children,
      disabled = props.disabled,
      target = props.target,
      href = props.href,
      rel = props.rel,
      rest = _objectWithoutProperties(props, _excluded);
    var forwardProps = {
      disabled: disabled,
      target: target,
      href: disabled ? undefined : href,
      // NOTE: https://developer.chrome.com/docs/lighthouse/best-practices/external-anchors-use-rel-noopener/
      rel: target === '_blank' ? 'noopener noreferrer' : rel
    };
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref
    }, forwardProps, rest), children);
  });
};
export var linkConfig = {
  name: 'Link',
  tag: 'a',
  layout: linkRoot,
  base: base,
  variations: {
    view: {
      css: viewCSS
    },
    disabled: {
      css: disabledCSS,
      attrs: true
    },
    focused: {
      css: focusedCSS
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};
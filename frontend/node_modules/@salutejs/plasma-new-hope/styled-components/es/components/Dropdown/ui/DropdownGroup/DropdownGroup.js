var _excluded = ["id", "labelClassName", "groupClassName", "label", "children", "role", "view", "size"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { useUniqId } from '@salutejs/plasma-core';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { StyledDropdownGroup, StyledDropdownLabel } from './DropdownGroup.styles';
/**
 * Элемент группы выпадающего списка
 */
export var dropdownGroupRoot = function dropdownGroupRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var id = _ref.id,
      labelClassName = _ref.labelClassName,
      groupClassName = _ref.groupClassName,
      label = _ref.label,
      children = _ref.children,
      role = _ref.role,
      view = _ref.view,
      size = _ref.size,
      rest = _objectWithoutProperties(_ref, _excluded);
    var uniqId = useUniqId();
    var innerId = id || uniqId;
    return /*#__PURE__*/React.createElement(Root, {
      id: innerId,
      ref: outerRootRef,
      view: view,
      size: size,
      role: role
    }, /*#__PURE__*/React.createElement(StyledDropdownLabel, {
      className: labelClassName
    }, label), /*#__PURE__*/React.createElement(StyledDropdownGroup, _extends({
      className: groupClassName
    }, rest), children));
  });
};
export var dropdownGroupConfig = {
  name: 'DropdownGroup',
  tag: 'div',
  layout: dropdownGroupRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};
var JUMP_SIZE = 10;
export var keys = {
  Enter: 'Enter',
  Space: 'Space',
  Tab: 'Tab',
  Escape: 'Escape',
  ArrowLeft: 'ArrowLeft',
  ArrowRight: 'ArrowRight',
  ArrowUp: 'ArrowUp',
  ArrowDown: 'ArrowDown',
  Home: 'Home',
  End: 'End',
  PageUp: 'PageUp',
  PageDown: 'PageDown'
};
var getFurtherPath = function getFurtherPath(focusedPath, focusedToValueMap) {
  var focusedPathAsString = focusedPath.reduce(function (acc, n) {
    return "".concat(acc, "/").concat(n);
  }, '').replace(/^(\/)/, '');
  return focusedToValueMap.get(focusedPathAsString);
};
export var useKeyNavigation = function useKeyNavigation(_ref) {
  var focusedPath = _ref.focusedPath,
    dispatchFocusedPath = _ref.dispatchFocusedPath,
    path = _ref.path,
    dispatchPath = _ref.dispatchPath,
    pathMap = _ref.pathMap,
    focusedToValueMap = _ref.focusedToValueMap,
    handleGlobalToggle = _ref.handleGlobalToggle,
    closeOnSelect = _ref.closeOnSelect,
    onItemSelect = _ref.onItemSelect,
    onItemClick = _ref.onItemClick;
  var currentLength = pathMap.get(path === null || path === void 0 ? void 0 : path[path.length - 1]) || 0;
  var currentIndex = (focusedPath === null || focusedPath === void 0 ? void 0 : focusedPath[focusedPath.length - 1]) || 0;
  var onKeyDown = function onKeyDown(event) {
    switch (event.code) {
      case keys.ArrowUp:
        {
          if (focusedPath.length) {
            if (currentIndex > 0) {
              dispatchFocusedPath({
                type: 'change_last_focus',
                value: currentIndex - 1
              });
            }
          } else {
            dispatchPath({
              type: 'opened_first_level'
            });
            dispatchFocusedPath({
              type: 'set_initial_focus'
            });
            handleGlobalToggle(true, event);
          }
          break;
        }
      case keys.ArrowDown:
        {
          if (focusedPath.length) {
            if (currentIndex + 1 < currentLength) {
              dispatchFocusedPath({
                type: 'change_last_focus',
                value: currentIndex + 1
              });
            }
          } else {
            dispatchPath({
              type: 'opened_first_level'
            });
            dispatchFocusedPath({
              type: 'set_initial_focus'
            });
            handleGlobalToggle(true, event);
          }
          break;
        }
      case keys.ArrowLeft:
        {
          if (focusedPath.length) {
            dispatchPath({
              type: 'removed_last_level'
            });
            dispatchFocusedPath({
              type: 'return_prev_focus'
            });
          }
          if (focusedPath.length === 1) {
            handleGlobalToggle(false, event);
          }
          break;
        }
      case keys.ArrowRight:
        {
          if (!focusedPath.length) {
            break;
          }
          var currentItem = getFurtherPath(focusedPath, focusedToValueMap);
          if (currentItem !== null && currentItem !== void 0 && currentItem.items) {
            dispatchPath({
              type: 'added_next_level',
              value: currentItem.value.toString()
            });
            dispatchFocusedPath({
              type: 'add_focus',
              value: 0
            });
          }
          break;
        }
      case keys.Enter:
      case keys.Space:
        {
          event.preventDefault();
          if (!path[0]) {
            dispatchPath({
              type: 'opened_first_level'
            });
            dispatchFocusedPath({
              type: 'set_initial_focus'
            });
            break;
          }
          var _currentItem = getFurtherPath(focusedPath, focusedToValueMap);
          if (_currentItem !== null && _currentItem !== void 0 && _currentItem.disabled || _currentItem !== null && _currentItem !== void 0 && _currentItem.isDisabled) {
            break;
          }
          if (_currentItem !== null && _currentItem !== void 0 && _currentItem.items) {
            dispatchPath({
              type: 'added_next_level',
              value: _currentItem.value.toString()
            });
            dispatchFocusedPath({
              type: 'add_focus',
              value: 0
            });
          } else {
            if (closeOnSelect) {
              handleGlobalToggle(false, event);
            }
            if (onItemSelect && _currentItem) {
              onItemSelect(_currentItem, event);
            }
            if (onItemClick && _currentItem) {
              onItemClick(_currentItem, event);
            }
          }
          break;
        }
      case keys.Tab:
      case keys.Escape:
        {
          dispatchFocusedPath({
            type: 'reset'
          });
          dispatchPath({
            type: 'reset'
          });
          handleGlobalToggle(false, event);
          break;
        }
      case keys.Home:
        {
          if (path[0]) {
            dispatchFocusedPath({
              type: 'change_last_focus',
              value: 0
            });
          } else {
            dispatchPath({
              type: 'opened_first_level'
            });
            dispatchFocusedPath({
              type: 'set_initial_focus'
            });
            handleGlobalToggle(true, event);
          }
          break;
        }
      case keys.End:
        {
          if (path[0]) {
            dispatchFocusedPath({
              type: 'change_last_focus',
              value: currentLength - 1
            });
          } else {
            dispatchPath({
              type: 'opened_first_level'
            });
            dispatchFocusedPath({
              type: 'change_last_focus',
              value: (pathMap.get('root') || 0) - 1
            });
            handleGlobalToggle(true, event);
          }
          break;
        }
      case keys.PageUp:
        {
          if (!path[0]) {
            break;
          }
          if (currentIndex <= JUMP_SIZE) {
            dispatchFocusedPath({
              type: 'change_last_focus',
              value: 0
            });
          } else {
            dispatchFocusedPath({
              type: 'change_last_focus',
              value: currentIndex - JUMP_SIZE
            });
          }
          break;
        }
      case keys.PageDown:
        {
          if (!path[0]) {
            break;
          }
          if (currentLength - currentIndex <= JUMP_SIZE) {
            dispatchFocusedPath({
              type: 'change_last_focus',
              value: currentLength - 1
            });
          } else {
            dispatchFocusedPath({
              type: 'change_last_focus',
              value: currentIndex + JUMP_SIZE
            });
          }
          break;
        }
      default:
        {
          break;
        }
    }
  };
  return {
    onKeyDown: onKeyDown
  };
};
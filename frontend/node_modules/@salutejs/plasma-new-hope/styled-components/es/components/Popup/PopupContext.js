function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { createContext, useEffect, useState, useContext } from 'react';
export var POPUP_PORTAL_ID = 'plasma-popup-root';
var items = [];
var PopupContext = /*#__PURE__*/createContext({
  items: items,
  register: function register(_info) {
    throw new Error('Function not implemented. Add PopupProvider');
  },
  unregister: function unregister(_id) {
    throw new Error('Function not implemented. Add PopupProvider');
  }
});
export var usePopupContext = function usePopupContext() {
  return useContext(PopupContext);
};
export var PopupProvider = function PopupProvider(_ref) {
  var children = _ref.children;
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    items = _useState2[0],
    setItems = _useState2[1];
  var register = function register(info) {
    setItems([].concat(_toConsumableArray(items), [info]));
  };
  var unregister = function unregister(id) {
    var index = items.findIndex(function (item) {
      return id === item.id;
    });
    if (index === -1) {
      return;
    }
    items.splice(index, 1);
    setItems(_toConsumableArray(items));
  };
  var context = {
    items: items,
    register: register,
    unregister: unregister
  };
  useEffect(function () {
    return function () {
      var portal = document.createElement('div');
      if (portal && document.body.contains(portal)) {
        document.body.removeChild(portal);
      }
    };
  }, []);
  return /*#__PURE__*/React.createElement(PopupContext.Provider, {
    value: context
  }, children);
};
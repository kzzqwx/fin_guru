var _excluded = ["id", "isOpen", "placement", "offset", "frame", "children", "overlay", "role", "zIndex", "popupInfo", "withAnimation", "className"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { forwardRef, useEffect, useRef, useState } from 'react';
import ReactDOM from 'react-dom';
import { useForkRef, safeUseId } from '@salutejs/plasma-core';
import { cx } from '../../utils';
import { POPUP_PORTAL_ID } from './PopupContext';
import { PopupRoot } from './PopupRoot';
import { usePopup } from './hooks';
import { classes } from './Popup.tokens';
export var handlePosition = function handlePosition(placement, offset) {
  var x = '0rem';
  var y = '0rem';
  if (offset) {
    var _offset = _slicedToArray(offset, 2),
      _x = _offset[0],
      _y = _offset[1];
    x = typeof _x === 'number' ? "".concat(_x, "rem") : _x;
    y = typeof _y === 'number' ? "".concat(_y, "rem") : _y;
  }
  if (!placement || placement === 'center') {
    return {
      left: "calc(50% + ".concat(x, ")"),
      top: "calc(50% - ".concat(y, ")"),
      transform: 'translate(-50%, -50%)'
    };
  }
  var left;
  var right;
  var top;
  var bottom;
  var transform;
  var placements = placement.split('-');
  placements.forEach(function (placement) {
    switch (placement) {
      case 'left':
        left = x;
        break;
      case 'right':
        right = x;
        break;
      case 'top':
        top = y;
        break;
      case 'bottom':
        bottom = y;
        break;
      default:
        break;
    }
  });
  var isCenteredX = left === undefined && right === undefined;
  var isCenteredY = top === undefined && bottom === undefined;
  if (isCenteredX) {
    transform = 'translateX(-50%)';
  }
  if (isCenteredY) {
    transform = 'translateY(-50%)';
  }
  return {
    left: isCenteredX ? "calc(50% + ".concat(x, ")") : left,
    right: right,
    top: isCenteredY ? "calc(50% - ".concat(y, ")") : top,
    bottom: bottom,
    transform: transform
  };
};

/**
 * Базовый копмонент Popup.
 */
export var popupRoot = function popupRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var id = _ref.id,
      _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'center' : _ref$placement,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
      _ref$frame = _ref.frame,
      frame = _ref$frame === void 0 ? 'document' : _ref$frame,
      children = _ref.children,
      overlay = _ref.overlay,
      role = _ref.role,
      zIndex = _ref.zIndex,
      popupInfo = _ref.popupInfo,
      _ref$withAnimation = _ref.withAnimation,
      withAnimation = _ref$withAnimation === void 0 ? false : _ref$withAnimation,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, _excluded);
    var uniqId = safeUseId();
    var innerId = id || uniqId;
    var _usePopup = usePopup({
        isOpen: isOpen,
        id: innerId,
        popupInfo: popupInfo,
        withAnimation: withAnimation
      }),
      isVisible = _usePopup.isVisible,
      animationInfo = _usePopup.animationInfo,
      setVisible = _usePopup.setVisible;
    var portalRef = useRef(null);
    var contentRef = useRef(null);
    var innerRef = useForkRef(contentRef, outerRootRef);
    var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      forceRender = _useState2[1];
    useEffect(function () {
      var portal = document.getElementById(POPUP_PORTAL_ID);
      if (typeof frame !== 'string' && frame && frame.current) {
        portal = frame.current;
      }
      if (!portal) {
        portal = document.createElement('div');
        portal.setAttribute('id', POPUP_PORTAL_ID);
        /**
         * Нужно для того, чтобы во фрейме не происходило скачков контента
         * при анимации через transform, если есть элемент с шириной/высотой в 100% (Overlay)
         */
        portal.style.width = '0';
        if (typeof frame === 'string' && frame !== 'document') {
          var _document$getElementB;
          (_document$getElementB = document.getElementById(frame)) === null || _document$getElementB === void 0 || _document$getElementB.appendChild(portal);
        } else {
          document.body.appendChild(portal);
        }
      }
      portalRef.current = portal;

      /**
       * Изменение стейта нужно для того, чтобы Popup
       * отобразился после записи DOM элемента в portalRef.current
       */
      forceRender(true);
    }, []);
    if (!isVisible && !isOpen) {
      return null;
    }
    var cls = cx(className, animationInfo !== null && animationInfo !== void 0 && animationInfo.endAnimation ? classes.endAnimation : '', animationInfo !== null && animationInfo !== void 0 && animationInfo.endTransition ? classes.endTransition : '');
    return /*#__PURE__*/React.createElement(React.Fragment, null, portalRef.current && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(Root, _extends({
      className: cls
    }, rest), overlay, /*#__PURE__*/React.createElement(PopupRoot, {
      id: innerId,
      ref: innerRef,
      position: handlePosition(placement, offset),
      frame: frame,
      zIndex: zIndex,
      animationInfo: animationInfo,
      setVisible: setVisible
    }, children)), portalRef.current));
  });
};
export var popupConfig = {
  name: 'Popup',
  tag: 'div',
  layout: popupRoot,
  base: '',
  variations: {},
  defaults: {}
};
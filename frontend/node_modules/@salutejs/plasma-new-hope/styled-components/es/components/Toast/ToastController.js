function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["position", "offset", "fade", "text"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect } from 'react';
import { classes } from './Toast.tokens';
import { StyledOverlay, StyledRoot } from './Toast.styles';
import { useToastInner } from './ToastProvider';
import { FADE_Z_INDEX, gradients } from './utils';
export var ToastControllerHoc = function ToastControllerHoc(ToastComponent) {
  return function ToastController(props) {
    var _props$position = props.position,
      position = _props$position === void 0 ? 'bottom' : _props$position,
      offset = props.offset,
      fade = props.fade,
      text = props.text,
      rest = _objectWithoutProperties(props, _excluded);
    var _useToastInner = useToastInner(),
      hideToast = _useToastInner.hideToast,
      isVisible = _useToastInner.isVisible,
      hideTimeout = _useToastInner.hideTimeout,
      animationRunTimeout = _useToastInner.animationRunTimeout;
    var toastKey = "".concat(text).concat(position);
    var showedClass = isVisible ? classes.toastShowed : classes.toastHidden;
    var showedFadeClass = isVisible ? classes.toastFadeShowed : classes.toastFadeHidden;
    var toastProps = _objectSpread({
      text: text,
      onCloseButtonClick: hideToast
    }, rest);
    useEffect(function () {
      return function () {
        if (hideTimeout !== null && hideTimeout !== void 0 && hideTimeout.current) {
          clearTimeout(hideTimeout.current);
        }
        if (animationRunTimeout !== null && animationRunTimeout !== void 0 && animationRunTimeout.current) {
          clearTimeout(animationRunTimeout.current);
        }
      };
    }, []);
    if (!text) {
      return null;
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, fade && /*#__PURE__*/React.createElement(StyledOverlay, {
      className: showedFadeClass,
      zIndex: FADE_Z_INDEX,
      backgroundColorProperty: gradients[position],
      isClickable: false
    }), /*#__PURE__*/React.createElement(StyledRoot, {
      key: toastKey,
      position: position,
      offset: offset,
      isVisible: isVisible,
      className: showedClass
    }, /*#__PURE__*/React.createElement(ToastComponent, toastProps)));
  };
};
var _excluded = ["children", "view", "size", "className", "stretching", "gap", "orientation", "shape", "isCommonButtonStyles"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { cx } from '../../utils';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { base as gapCSS } from './variations/_gap/base';
import { base as shapeCSS } from './variations/_shape/base';
import { base as orientationCSS } from './variations/_orientation/base';
import { base as stretchingCSS } from './variations/_stretching/base';
import { base } from './ButtonGroup.styles';
import { classes } from './ButtonGroup.tokens';
export var buttonGroupRoot = function buttonGroupRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var children = props.children,
      view = props.view,
      size = props.size,
      className = props.className,
      _props$stretching = props.stretching,
      stretching = _props$stretching === void 0 ? 'auto' : _props$stretching,
      _props$gap = props.gap,
      gap = _props$gap === void 0 ? 'dense' : _props$gap,
      _props$orientation = props.orientation,
      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'default' : _props$shape,
      _props$isCommonButton = props.isCommonButtonStyles,
      isCommonButtonStyles = _props$isCommonButton === void 0 ? true : _props$isCommonButton,
      rest = _objectWithoutProperties(props, _excluded);
    var orientationClass = classes[orientation];
    var gapClass = classes[gap];
    var shapeClass = classes[shape];
    var stretchingClass = classes["".concat(stretching, "Stretching")];
    var overrideStylesClass = isCommonButtonStyles ? classes.buttonGroupOverrideStyles : undefined;
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      view: view,
      size: size,
      gap: gap,
      orientation: orientation,
      shape: shape,
      className: cx(overrideStylesClass, orientationClass, gapClass, shapeClass, stretchingClass, className)
    }, rest), children);
  });
};
export var buttonGroupConfig = {
  name: 'ButtonGroup',
  tag: 'div',
  layout: buttonGroupRoot,
  base: base,
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    },
    gap: {
      css: gapCSS
    },
    orientation: {
      css: orientationCSS
    },
    shape: {
      css: shapeCSS
    },
    stretching: {
      css: stretchingCSS
    }
  },
  defaults: {
    view: 'primary',
    size: 'm',
    gap: 'dense',
    orientation: 'horizontal',
    shape: 'default',
    stretching: 'auto'
  }
};
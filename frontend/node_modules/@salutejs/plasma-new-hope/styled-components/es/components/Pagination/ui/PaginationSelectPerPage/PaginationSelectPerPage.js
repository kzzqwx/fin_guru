var _IconDone;
var _excluded = ["value", "valuesList", "textPerPage", "onChangeValue"];
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useState } from 'react';
import { IconDone } from '../../../../components/_Icon';
import { defaultValues } from '../../utils';
import { classes } from '../../Pagination.tokens';
import { SelectPerPageRoot, SelectPerPageTypography, SelectPerPageSelect, SelectPerPageSelectItem } from './PaginationSelectPerPage.styles';
export var PaginationSelectPerPage = function PaginationSelectPerPage(_ref) {
  var _ref$value = _ref.value,
    value = _ref$value === void 0 ? defaultValues.perPage : _ref$value,
    _ref$valuesList = _ref.valuesList,
    valuesList = _ref$valuesList === void 0 ? defaultValues.perPageList : _ref$valuesList,
    _ref$textPerPage = _ref.textPerPage,
    textPerPage = _ref$textPerPage === void 0 ? defaultValues.textPerPage : _ref$textPerPage,
    onChangeValue = _ref.onChangeValue,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(value),
    _useState2 = _slicedToArray(_useState, 2),
    selectedValue = _useState2[0],
    setSelectedValue = _useState2[1];
  var handleSelectChange = function handleSelectChange(newValue) {
    if (newValue) {
      setSelectedValue(Number(newValue));
      onChangeValue === null || onChangeValue === void 0 || onChangeValue(Number(newValue));
    }
  };
  return /*#__PURE__*/React.createElement(SelectPerPageRoot, rest, /*#__PURE__*/React.createElement(SelectPerPageTypography, null, textPerPage), /*#__PURE__*/React.createElement(SelectPerPageSelect, {
    className: classes.selectWrapper,
    value: selectedValue,
    onChangeValue: handleSelectChange
  }, valuesList === null || valuesList === void 0 ? void 0 : valuesList.map(function (item) {
    return /*#__PURE__*/React.createElement(SelectPerPageSelectItem, {
      contentLeft: item === selectedValue ? _IconDone || (_IconDone = /*#__PURE__*/React.createElement(IconDone, {
        size: "xs",
        color: "inherit"
      })) : undefined,
      key: item,
      value: item,
      text: String(item)
    });
  })));
};
var _excluded = ["withBlur", "className", "backgroundColorProperty", "onOverlayClick", "zIndex", "transparent", "isClickable"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useCallback } from 'react';
import { StyledOverlay } from './Overlay.styles';

/**
 * Overlay - подложка для всплывающих компонент (Modal, Toast и т.д.).
 */
export var Overlay = function Overlay(_ref) {
  var withBlur = _ref.withBlur,
    className = _ref.className,
    backgroundColorProperty = _ref.backgroundColorProperty,
    onOverlayClick = _ref.onOverlayClick,
    zIndex = _ref.zIndex,
    transparent = _ref.transparent,
    _ref$isClickable = _ref.isClickable,
    isClickable = _ref$isClickable === void 0 ? true : _ref$isClickable,
    rest = _objectWithoutProperties(_ref, _excluded);
  var handleOverlayClick = useCallback(function (event) {
    if (!isClickable) {
      return;
    }
    onOverlayClick === null || onOverlayClick === void 0 || onOverlayClick(event);
  }, [isClickable, onOverlayClick]);
  return /*#__PURE__*/React.createElement(StyledOverlay, _extends({
    className: className,
    backgroundColorToken: backgroundColorProperty,
    transparent: transparent,
    clickable: isClickable,
    onClick: handleOverlayClick,
    zIndex: zIndex,
    withBlur: withBlur
  }, rest));
};
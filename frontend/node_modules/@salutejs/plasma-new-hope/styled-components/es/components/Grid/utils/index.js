function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import { classes, tokens } from '../Grid.tokens';
export var gridSizes = ['smallXXS', 'smallXS', 'smallS', 'smallM', 'smallL', 'smallXL', 'smallXXL', 'mediumXXS', 'mediumXS', 'mediumS', 'mediumM', 'mediumL', 'mediumXL', 'mediumXXL', 'largeXXS', 'largeXS', 'largeS', 'largeM', 'largeL', 'largeXL', 'largeXXL'];

// TODO удалить после отказа от старой сетки
var legacyGridSizesMap = {
  S: 'smallM',
  M: 'mediumS',
  L: 'mediumM',
  XL: 'largeS',
  XXL: 'largeM'
};
var tokenPrefix = '--plasma-grid-';
var initialGridViewStyle = "\n    max-width: var(--plasma_private-grid-max-width, unset);\n";
export var getGridViewClass = function getGridViewClass(view) {
  return "plasma-grid-".concat(view, "-view");
};

/**
 * Генерирует набор медиа-запросов под различную ширину вьюпорта
 *
 * @param {GridToken} cssTokens - объект view с набором токенов ширины вьюпорта
 * @return {string} сгенерированный набор медиа-запросов
 */
var gridMediaQueryTemplate = function gridMediaQueryTemplate(breakpoints) {
  return gridSizes.map(function (size) {
    if (!String(breakpoints["".concat(tokenPrefix).concat(size, "-min-width")])) {
      return;
    }
    var minWidth = breakpoints["".concat(tokenPrefix).concat(size, "-min-width")];
    var gap = tokens["".concat(size, "Gap")];
    var colsCount = tokens["".concat(size, "ColsCount")];
    var margin = tokens["".concat(size, "Margin")];
    return "\n                @media (min-width: ".concat(minWidth, ") {\n                    --plasma_private-grid-cols-count: var(").concat(colsCount, ");\n                    --plasma_private-grid-gap: calc(var(").concat(gap, ") / 2);\n                    --plasma_private-grid-margin: var(").concat(margin, ");\n                    \n                    padding: 0 var(--plasma_private-grid-margin);\n\n                    .").concat(classes.col, " {\n                        --plasma_private-col-width: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-").concat(size, "-size, var(--plasma_private-grid-col-default-size)));\n                        --plasma_private-col-offset: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-").concat(size, "-offset, var(--plasma_private-grid-col-default-offset)));\n\n                        width: var(--plasma_private-col-width, auto);\n                        margin-left: var(--plasma_private-col-offset, initial);\n                    }\n                }\n            ");
  }).filter(function (style) {
    return style;
  }).join('\n');
};

/**
 * Генерирует строку со стилями для обертки Grid и набором медиа-запросов
 *
 * @param {BreakpointToken} breakponts - объект view с набором токенов ширины вьюпорта
 * @param {string} viewName - название view из конфига
 * @return {string} стили для обертки Grid
 */
export var getBaseGridView = function getBaseGridView(breakponts, viewName) {
  return "\n        ".concat(initialGridViewStyle, "\n\n        &.").concat(getGridViewClass(viewName), " {\n            ").concat(gridMediaQueryTemplate(breakponts), "\n        }\n    ");
};

/**
 * Используется для получения токенов для view="legacy"
 */
// TODO удалить после отказа от старой сетки
var getColLegacyTokens = function getColLegacyTokens(props) {
  return Object.entries(legacyGridSizesMap).reduce(function (acc, _ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      legacyGridSize = _ref2[0],
      gridSize = _ref2[1];
    var offset = props["offset".concat(legacyGridSize)];
    var size = props["size".concat(legacyGridSize)];
    if (!offset && !size) {
      return acc;
    }
    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty(_defineProperty({}, "--plasma_private-grid-col-".concat(gridSize, "-size"), size), "--plasma_private-grid-col-".concat(gridSize, "-offset"), offset));
  }, {});
};

/**
 * Используется в Col.tsx для получения токенов для view="default"
 */
export var getColTokens = function getColTokens(props) {
  // TODO удалить после отказа от старой сетки
  var legacyTokens = getColLegacyTokens(props);
  if (Object.keys(legacyTokens).length) {
    return legacyTokens;
  }
  return gridSizes.reduce(function (acc, size) {
    var _props$size, _props$size2;
    if (!props[size]) {
      return acc;
    }
    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty(_defineProperty({}, "--plasma_private-grid-col-".concat(size, "-size"), (_props$size = props[size]) === null || _props$size === void 0 ? void 0 : _props$size.size), "--plasma_private-grid-col-".concat(size, "-offset"), (_props$size2 = props[size]) === null || _props$size2 === void 0 ? void 0 : _props$size2.offset));
  }, {});
};
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["size", "name", "url", "customText", "status", "className", "focused", "isScalable", "statusLabels"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useMemo } from 'react';
import styled from 'styled-components';
import { component, mergeConfig } from '../../engines';
import { cx } from '../../utils';
import { indicatorConfig, indicatorTokens } from '../Indicator';
import { classes, tokens } from './Avatar.tokens';
import { base, Wrapper, Image, StatusIcon, Text } from './Avatar.styles';
import { base as viewCSS } from './variations/_size/base';
import { base as focusedCSS } from './variations/_focused/base';
import { getInitialsForName } from './utils';
var StatusLabelsDefault = {
  active: 'Активен',
  inactive: 'Неактивен'
};
var getAvatarContent = function getAvatarContent(_ref) {
  var customText = _ref.customText,
    url = _ref.url,
    initials = _ref.initials,
    name = _ref.name;
  if (customText) {
    return /*#__PURE__*/React.createElement(Text, null, customText);
  }
  if (url) {
    return /*#__PURE__*/React.createElement(Image, {
      src: url,
      alt: name
    });
  }
  return /*#__PURE__*/React.createElement(Text, null, initials);
};
var getAriaLabel = function getAriaLabel(_ref2) {
  var url = _ref2.url,
    name = _ref2.name,
    status = _ref2.status,
    ariaLabelProp = _ref2['aria-label'],
    statusLabels = _ref2.statusLabels;
  if (!url) {
    return;
  }

  // INFO: включаем aria-label чтобы озвучить что на изображении
  var ariaLabel = !ariaLabelProp || ariaLabelProp.trim() === '' ? name : ariaLabelProp;
  return status ? "".concat(ariaLabel, ". ").concat(statusLabels[status]) : ariaLabel;
};
var mergedConfig = /*#__PURE__*/mergeConfig(indicatorConfig);
var Indicator = /*#__PURE__*/component(mergedConfig);
var StyledIndicator = /*#__PURE__*/styled(Indicator).withConfig({
  componentId: "plasma-new-hope__sc-p4w0wq-0"
})(["", ":var(", ");", ":", ""], indicatorTokens.size, tokens.statusIconSize, indicatorTokens.color, function (_ref3) {
  var status = _ref3.status;
  return status === 'active' ? "var(".concat(tokens.statusOnlineColor, ")") : "var(".concat(tokens.statusOfflineColor, ")");
});
export var avatarRoot = function avatarRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var avatarSize = props.size,
      name = props.name,
      url = props.url,
      customText = props.customText,
      status = props.status,
      className = props.className,
      _props$focused = props.focused,
      focused = _props$focused === void 0 ? true : _props$focused,
      isScalable = props.isScalable,
      _props$statusLabels = props.statusLabels,
      statusLabels = _props$statusLabels === void 0 ? StatusLabelsDefault : _props$statusLabels,
      rest = _objectWithoutProperties(props, _excluded);
    var initials = useMemo(function () {
      return getInitialsForName(name);
    }, [name]);
    var ariaLabel = getAriaLabel(_objectSpread(_objectSpread({}, props), {}, {
      statusLabels: statusLabels
    }));
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      size: avatarSize,
      className: cx(classes.avatarItem, className),
      "aria-label": ariaLabel,
      focused: focused
    }, rest), /*#__PURE__*/React.createElement(Wrapper, {
      isScalable: isScalable
    }, getAvatarContent({
      customText: customText,
      url: url,
      initials: initials,
      name: name
    })), status && /*#__PURE__*/React.createElement(StatusIcon, null, /*#__PURE__*/React.createElement(StyledIndicator, {
      "aria-label": statusLabels[status],
      status: status
    })));
  });
};
export var avatarConfig = {
  name: 'Avatar',
  tag: 'div',
  layout: avatarRoot,
  base: base,
  variations: {
    size: {
      css: viewCSS
    },
    focused: {
      css: focusedCSS
    }
  },
  defaults: {
    size: 'm'
  }
};
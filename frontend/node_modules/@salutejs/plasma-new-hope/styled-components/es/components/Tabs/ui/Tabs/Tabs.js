var _excluded = ["id", "stretch", "disabled", "size", "view", "children", "pilled", "index", "className"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useCallback, useMemo, useState, useEffect, useRef } from 'react';
import { animatedScrollToX, safeUseId } from '@salutejs/plasma-core';
import { IconDisclosureLeft, IconDisclosureRight } from '../../../_Icon';
import { classes, tokens } from '../../tokens';
import { cx } from '../../../../utils';
import { TabItemRefs, TabsContext } from '../../TabsContext';
import { base as sizeCSS } from './variations/_size/base';
import { base as viewCSS } from './variations/_view/base';
import { base as disabledCSS } from './variations/_disabled/base';
import { base as pilledCSS } from './variations/_pilled/base';
import { base as stretchCSS } from './variations/_stretch/base';
import { StyledArrow, StyledContent, StyledContentWrapper, base } from './Tabs.styles';
var Keys = /*#__PURE__*/function (Keys) {
  Keys[Keys["end"] = 35] = "end";
  Keys[Keys["home"] = 36] = "home";
  Keys[Keys["left"] = 37] = "left";
  Keys[Keys["right"] = 39] = "right";
  return Keys;
}(Keys || {});
export var tabsRoot = function tabsRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, outerRef) {
    var id = props.id,
      _props$stretch = props.stretch,
      stretch = _props$stretch === void 0 ? false : _props$stretch,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      size = props.size,
      view = props.view,
      children = props.children,
      pilled = props.pilled,
      index = props.index,
      className = props.className,
      rest = _objectWithoutProperties(props, _excluded);
    var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      firstItemVisible = _useState2[0],
      setFirstItemVisible = _useState2[1];
    var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      lastItemVisible = _useState4[0],
      setLastItemVisible = _useState4[1];
    var refs = useMemo(function () {
      return new TabItemRefs(index);
    }, []);
    var uniqId = safeUseId();
    var tabsId = id || uniqId;
    var isFilled = view === 'filled'; // outer padding is only for filled view
    var pilledAttr = view !== 'clear' && pilled;
    var pilledClass = pilledAttr ? classes.tabsPilled : undefined;
    var stretchClass = firstItemVisible && lastItemVisible && stretch ? classes.tabsStretch : undefined;
    var hasLeftArrowClass = !firstItemVisible ? classes.tabsHasLeftArrow : undefined;
    var hasRightArrowClass = !lastItemVisible ? classes.tabsHasRightArrow : undefined;
    var scrollRef = useRef(null);
    var trackRef = useRef(null);
    var onPrev = useCallback(function () {
      !disabled && scrollRef.current && animatedScrollToX(scrollRef.current, scrollRef.current.scrollLeft - scrollRef.current.offsetWidth / 2);
    }, [disabled, scrollRef]);
    var onNext = useCallback(function () {
      !disabled && scrollRef.current && animatedScrollToX(scrollRef.current, scrollRef.current.scrollLeft + scrollRef.current.offsetWidth / 2);
    }, [disabled, scrollRef]);
    var PreviousButton = useMemo(function () {
      return /*#__PURE__*/React.createElement(StyledArrow, {
        type: "button",
        "aria-label": "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u0442\u0430\u0431",
        onClick: onPrev,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled,
        isFilled: isFilled,
        isLeftArrow: true
      }, /*#__PURE__*/React.createElement(IconDisclosureLeft, {
        color: "var(".concat(tokens.arrowColor, ")")
      }));
    }, [onPrev, disabled, isFilled]);
    var NextButton = useMemo(function () {
      return /*#__PURE__*/React.createElement(StyledArrow, {
        type: "button",
        "aria-label": "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u0442\u0430\u0431",
        onClick: onNext,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled,
        isFilled: isFilled
      }, /*#__PURE__*/React.createElement(IconDisclosureRight, {
        color: "var(".concat(tokens.arrowColor, ")")
      }));
    }, [onNext, disabled, isFilled]);
    var handleScroll = useCallback(function (event) {
      event.stopPropagation();
      var maxScrollLeft = event.currentTarget.scrollWidth - event.currentTarget.clientWidth;
      setFirstItemVisible(event.currentTarget.scrollLeft <= 0);
      setLastItemVisible(event.currentTarget.scrollLeft >= maxScrollLeft);
    }, [setFirstItemVisible, setLastItemVisible]);
    var onKeyDown = useCallback(function (event) {
      if (index === undefined) {
        return;
      }
      var minIndex = 0;
      var maxIndex = refs.items.length - 1;
      var nextIndex;
      switch (event.keyCode) {
        case Keys.end:
          nextIndex = maxIndex;
          break;
        case Keys.left:
          nextIndex = index > minIndex ? index - 1 : index;
          break;
        case Keys.right:
          nextIndex = index < maxIndex ? index + 1 : index;
          break;
        case Keys.home:
          nextIndex = minIndex;
          break;
        default:
          return;
      }
      if (nextIndex !== index) {
        var _refs$items$nextIndex, _refs$items$nextIndex2;
        event.preventDefault();
        (_refs$items$nextIndex = refs.items[nextIndex].current) === null || _refs$items$nextIndex === void 0 || _refs$items$nextIndex.focus();
        (_refs$items$nextIndex2 = refs.items[nextIndex].current) === null || _refs$items$nextIndex2 === void 0 || _refs$items$nextIndex2.scrollIntoView({
          block: 'center',
          inline: 'center',
          behavior: 'smooth'
        });
      }
    }, [index]);
    useEffect(function () {
      var _scrollRef$current, _scrollRef$current2;
      setLastItemVisible(((_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollWidth) === ((_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 ? void 0 : _scrollRef$current2.clientWidth));
    }, []);
    return /*#__PURE__*/React.createElement(TabsContext.Provider, {
      value: refs
    }, /*#__PURE__*/React.createElement(Root, _extends({
      view: view,
      role: "tablist",
      size: size,
      pilled: pilled,
      id: tabsId,
      ref: outerRef,
      disabled: disabled,
      className: cx(pilledClass, stretchClass, hasLeftArrowClass, hasRightArrowClass, className),
      onKeyDown: onKeyDown
    }, rest), !firstItemVisible && PreviousButton, /*#__PURE__*/React.createElement(StyledContentWrapper, {
      ref: scrollRef,
      onScroll: handleScroll
    }, /*#__PURE__*/React.createElement(StyledContent, {
      ref: trackRef
    }, children)), !lastItemVisible && NextButton));
  });
};
export var tabsConfig = {
  name: 'Tabs',
  tag: 'div',
  layout: tabsRoot,
  base: base,
  variations: {
    size: {
      css: sizeCSS
    },
    view: {
      css: viewCSS
    },
    disabled: {
      css: disabledCSS,
      attrs: true
    },
    stretch: {
      css: stretchCSS,
      attrs: true
    },
    pilled: {
      css: pilledCSS
    }
  },
  defaults: {
    view: 'clear',
    size: 'xs'
  }
};
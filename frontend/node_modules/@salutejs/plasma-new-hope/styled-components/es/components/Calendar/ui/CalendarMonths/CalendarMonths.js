function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { useCallback, useEffect, useRef } from 'react';
import { cx } from '../../../../utils';
import { useMonths } from '../../hooks';
import { classes } from '../../Calendar.tokens';
import { StyledCalendarMonths, StyledFlex, StyledMonth, StyledMonthRoot } from './CalendarMonths.styles';

/**
 * Компонент месяцев в календаре.
 */
export var CalendarMonths = function CalendarMonths(_ref) {
  var currentDate = _ref.date,
    selectIndexes = _ref.selectIndexes,
    outerRefs = _ref.outerRefs,
    onChangeMonth = _ref.onChangeMonth,
    onSetSelected = _ref.onSetSelected,
    onKeyDown = _ref.onKeyDown;
  var _useMonths = useMonths(currentDate),
    _useMonths2 = _slicedToArray(_useMonths, 2),
    months = _useMonths2[0],
    selected = _useMonths2[1];
  var selectedRef = useRef(selected);
  var onSetSelectedRef = useRef(onSetSelected);
  var handleOnChangeMonth = useCallback(function (event) {
    /**
     * нужно вызвать stopImmediatePropagation для случаев, когда
     * обработчик события onClick навешивается снаружи.
     * Как, например, в компоненте Popup
     */
    event.nativeEvent.stopImmediatePropagation();
    var monthIndex = event.currentTarget.dataset.monthIndex;
    onChangeMonth(Number(monthIndex));
  }, [onChangeMonth]);
  var getRefs = useCallback(function (element, i, j) {
    outerRefs.current[i][j] = element;
  }, [outerRefs]);
  useEffect(function () {
    if (selectedRef.current) {
      var _onSetSelectedRef$cur;
      (_onSetSelectedRef$cur = onSetSelectedRef.current) === null || _onSetSelectedRef$cur === void 0 || _onSetSelectedRef$cur.call(onSetSelectedRef, selectedRef.current);
    }
  }, []);
  return /*#__PURE__*/React.createElement(StyledCalendarMonths, {
    role: "grid",
    "aria-labelledby": "id-grid-label",
    onKeyDown: onKeyDown
  }, months.map(function (month, i) {
    return /*#__PURE__*/React.createElement(StyledFlex, {
      role: "row",
      key: i
    }, month.map(function (_ref2, j) {
      var monthName = _ref2.monthName,
        monthIndex = _ref2.monthIndex,
        isSelected = _ref2.isSelected,
        isCurrent = _ref2.isCurrent,
        monthFullName = _ref2.monthFullName;
      var selectedClass = isSelected ? classes.selectedItem : undefined;
      var currentClass = !isSelected && isCurrent ? classes.currentItem : undefined;
      return /*#__PURE__*/React.createElement(StyledMonthRoot, {
        id: "month-test-".concat(i, "-").concat(j),
        className: cx(selectedClass, currentClass, classes.selectableItem),
        ref: function ref(element) {
          return getRefs(element, i, j);
        },
        tabIndex: i === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[0]) && j === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[1]) ? 0 : -1,
        onClick: handleOnChangeMonth,
        "data-month-index": monthIndex,
        "aria-selected": isSelected,
        role: "gridcell",
        key: "StyledMonth-".concat(i, "-").concat(j),
        "aria-label": monthFullName
      }, /*#__PURE__*/React.createElement(StyledMonth, null, monthName));
    }));
  }));
};
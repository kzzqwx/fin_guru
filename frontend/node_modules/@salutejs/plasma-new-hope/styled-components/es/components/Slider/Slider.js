function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef } from 'react';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { base as disabledCSS } from './variations/_disabled/base';
import { SingleSlider, DoubleSlider } from './components';
var isSingleValueProps = function isSingleValueProps(props) {
  return typeof props.value === 'number';
};
export var sliderRoot = function sliderRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref
    }, props), isSingleValueProps(props) && /*#__PURE__*/React.createElement(SingleSlider, props), !isSingleValueProps(props) && /*#__PURE__*/React.createElement(DoubleSlider, props));
  });
};
export var sliderConfig = {
  name: 'Slider',
  tag: 'div',
  layout: sliderRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    },
    disabled: {
      css: disabledCSS,
      attrs: true
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};
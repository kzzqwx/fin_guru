var _excluded = ["stepSize", "onChangeCommitted", "onChange", "xPosition", "min", "max", "bounds", "zIndex", "disabled", "side", "showCurrentValue", "startOffset", "endOffset", "value"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useRef, forwardRef } from 'react';
import Draggable from 'react-draggable';
import { getSliderThumbValue, getOffsets } from '../../utils';
import { Thumb } from '../Thumb/Thumb';
import { HandlerStyled, StyledValue } from './Handler.styles';

// TODO: PLASMA-1707

var KeyboardSupport = {
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  ArrowLeft: 37,
  ArrowUp: 38,
  ArrowRight: 39,
  ArrowDown: 40
};
export var Handler = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var stepSize = _ref.stepSize,
    onChangeCommitted = _ref.onChangeCommitted,
    onChange = _ref.onChange,
    _ref$xPosition = _ref.xPosition,
    xPosition = _ref$xPosition === void 0 ? 0 : _ref$xPosition,
    min = _ref.min,
    max = _ref.max,
    _ref$bounds = _ref.bounds,
    bounds = _ref$bounds === void 0 ? [] : _ref$bounds,
    zIndex = _ref.zIndex,
    disabled = _ref.disabled,
    side = _ref.side,
    _ref$showCurrentValue = _ref.showCurrentValue,
    showCurrentValue = _ref$showCurrentValue === void 0 ? false : _ref$showCurrentValue,
    _ref$startOffset = _ref.startOffset,
    startOffset = _ref$startOffset === void 0 ? 0 : _ref$startOffset,
    _ref$endOffset = _ref.endOffset,
    endOffset = _ref$endOffset === void 0 ? 0 : _ref$endOffset,
    value = _ref.value,
    rest = _objectWithoutProperties(_ref, _excluded);
  var lastOnChangeValue = useRef();
  var _getOffsets = getOffsets(ref, side),
    _getOffsets2 = _slicedToArray(_getOffsets, 2),
    offsetLeft = _getOffsets2[0],
    offsetRight = _getOffsets2[1];
  var _bounds = _slicedToArray(bounds, 2),
    leftValueBound = _bounds[0],
    rightValueBound = _bounds[1];
  var leftPositionBound = leftValueBound ? (leftValueBound - min) * stepSize : null;
  var rightPositionBound = rightValueBound ? (rightValueBound - min) * stepSize : null;
  var position = typeof xPosition === 'number' ? {
    x: xPosition,
    y: 0
  } : undefined;
  var tabIndex = disabled ? -1 : 0;
  var computedBounds = {
    left: (leftPositionBound !== null && leftPositionBound !== void 0 ? leftPositionBound : 0) - (offsetLeft ? stepSize : 0),
    right: (rightPositionBound !== null && rightPositionBound !== void 0 ? rightPositionBound : stepSize * (max - min)) - (offsetRight ? stepSize : 0)
  };
  console.log(computedBounds);
  var showCurrentValueCondition = showCurrentValue && (xPosition >= startOffset && xPosition <= max * stepSize - endOffset || xPosition === 0 && value !== 0);
  var onDrag = function onDrag(_, data) {
    var newValue = getSliderThumbValue(data.x, stepSize, min, max);
    if (lastOnChangeValue.current !== newValue) {
      onChange === null || onChange === void 0 || onChange(newValue, data);
      lastOnChangeValue.current = newValue;
    }
  };
  var onStop = function onStop(_, data) {
    var newValue = getSliderThumbValue(data.x, stepSize, min, max);
    onChangeCommitted && onChangeCommitted(newValue, data);
  };
  var onKeyPress = function onKeyPress(event) {
    event.persist();
    var keyCode = event.keyCode,
      target = event.target;
    if (!Object.values(KeyboardSupport).includes(keyCode)) {
      return;
    }
    var ArrowUp = KeyboardSupport.ArrowUp,
      ArrowRight = KeyboardSupport.ArrowRight,
      ArrowDown = KeyboardSupport.ArrowDown,
      ArrowLeft = KeyboardSupport.ArrowLeft,
      Home = KeyboardSupport.Home,
      End = KeyboardSupport.End,
      PageDown = KeyboardSupport.PageDown,
      PageUp = KeyboardSupport.PageUp;
    var computedMultipleSteps = stepSize * (rest.multipleStepSize / 100 * max);
    var data = {
      x: 0,
      deltaX: stepSize,
      lastX: xPosition,
      y: 0,
      deltaY: 0,
      lastY: 0,
      node: target
    };
    switch (keyCode) {
      case ArrowUp:
      case ArrowRight:
        data.x = xPosition + stepSize;
        break;
      case ArrowDown:
      case ArrowLeft:
        data.x = xPosition - stepSize;
        data.deltaX = -stepSize;
        break;
      case PageUp:
        data.x = xPosition + computedMultipleSteps;
        data.deltaX = computedMultipleSteps;
        break;
      case PageDown:
        data.x = xPosition - computedMultipleSteps;
        data.deltaX = -computedMultipleSteps;
        break;
      case End:
        data.x = max * stepSize;
        break;
      case Home:
        data.x = 0;
        break;
      default:
        data.x = 0;
    }
    var left = computedBounds.left,
      right = computedBounds.right;

    /*
     * INFO: Находим значение в диапазоне между указанными левой и правой границами.
     * Необходимо для правильного расчета положения SliderThumb.
     * см. функция clamp
     */
    var boundedValue = Math.max(Math.min(right, data.x), left);
    var computedValue = getSliderThumbValue(boundedValue, stepSize, min, max);
    lastOnChangeValue.current = computedValue;
    onChangeCommitted && onChangeCommitted(computedValue, data);
  };
  return /*#__PURE__*/React.createElement(Draggable, {
    axis: "x",
    bounds: computedBounds,
    grid: [stepSize, 1],
    onStop: onStop,
    onDrag: onDrag,
    position: position,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(HandlerStyled, {
    ref: ref,
    style: {
      zIndex: zIndex
    },
    onKeyDown: onKeyPress
  }, /*#__PURE__*/React.createElement(Thumb, _extends({
    tabIndex: tabIndex,
    min: min,
    max: max,
    value: value,
    disabled: disabled
  }, rest)), showCurrentValueCondition && /*#__PURE__*/React.createElement(StyledValue, null, value)));
});
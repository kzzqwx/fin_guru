function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { createContext, useCallback, useContext, useEffect, useState } from 'react';
export var SegmentContext = /*#__PURE__*/createContext(undefined);
export var useSegmentInner = function useSegmentInner() {
  var context = useContext(SegmentContext);
  if (!context) {
    throw new Error('useSegment must be used within a SegmentProvider');
  }
  return context;
};
export var useSegment = function useSegment() {
  var _useSegmentInner = useSegmentInner(),
    selectedSegmentItems = _useSegmentInner.selectedSegmentItems;
  return {
    selectedSegmentItems: selectedSegmentItems
  };
};
export var SegmentProvider = function SegmentProvider(_ref) {
  var children = _ref.children;
  var _useState = useState([]),
    _useState2 = _slicedToArray(_useState, 2),
    selectedSegmentItems = _useState2[0],
    setSelectedSegmentItems = _useState2[1];
  var _useState3 = useState('single'),
    _useState4 = _slicedToArray(_useState3, 2),
    selectionMode = _useState4[0],
    setSelectionMode = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    disabledGroup = _useState6[0],
    setDisabledGroup = _useState6[1];
  var handleSelect = useCallback(function (label) {
    if (selectionMode !== 'multiple') {
      setSelectedSegmentItems(function (prevSelected) {
        return prevSelected.includes(label) ? [] : [label];
      });
      return;
    }
    setSelectedSegmentItems(function (prevSelected) {
      return prevSelected.includes(label) ? prevSelected.filter(function (item) {
        return item !== label;
      }) : [].concat(_toConsumableArray(prevSelected), [label]);
    });
  }, [selectionMode, setSelectedSegmentItems]);
  var contextValue = {
    selectedSegmentItems: selectedSegmentItems,
    handleSelect: handleSelect,
    selectionMode: selectionMode,
    setSelectionMode: setSelectionMode,
    disabledGroup: disabledGroup,
    setDisabledGroup: setDisabledGroup
  };
  useEffect(function () {
    setSelectedSegmentItems([]);
  }, [selectionMode]);
  return /*#__PURE__*/React.createElement(SegmentContext.Provider, {
    value: contextValue
  }, children);
};
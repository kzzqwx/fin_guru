function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _excluded = ["target", "children", "isOpen", "trigger", "hasArrow", "frame", "className", "placement", "offset", "zIndex", "isFocusTrapped", "closeOnEsc", "preventOverflow", "usePortal", "view", "onToggle", "closeOnOverlayClick"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useRef, useCallback, useEffect, useState, forwardRef } from 'react';
import ReactDOM from 'react-dom';
import { usePopper } from 'react-popper';
import { useFocusTrap, useForkRef } from '@salutejs/plasma-core';
import { cx } from '../../utils';
import { base as viewCSS } from './variations/_view/base';
import { StyledArrow, StyledPopover, StyledRoot, StyledWrapper } from './Popover.styles';
import { classes } from './Popover.tokens';
export var ESCAPE_KEYCODE = 27;
export var POPOVER_PORTAL_ID = 'plasma-popover-root';

/**
 * Всплывающее окно с возможностью позиционирования
 * и вызова по клику либо ховеру.
 */
export var popoverRoot = function popoverRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var _placement$;
    var target = _ref.target,
      children = _ref.children,
      isOpen = _ref.isOpen,
      _ref$trigger = _ref.trigger,
      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,
      hasArrow = _ref.hasArrow,
      _ref$frame = _ref.frame,
      frame = _ref$frame === void 0 ? 'document' : _ref$frame,
      className = _ref.className,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
      zIndex = _ref.zIndex,
      _ref$isFocusTrapped = _ref.isFocusTrapped,
      isFocusTrapped = _ref$isFocusTrapped === void 0 ? true : _ref$isFocusTrapped,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$preventOverflow = _ref.preventOverflow,
      preventOverflow = _ref$preventOverflow === void 0 ? true : _ref$preventOverflow,
      _ref$usePortal = _ref.usePortal,
      usePortal = _ref$usePortal === void 0 ? false : _ref$usePortal,
      view = _ref.view,
      onToggle = _ref.onToggle,
      closeOnOverlayClick = _ref.closeOnOverlayClick,
      rest = _objectWithoutProperties(_ref, _excluded);
    var rootRef = useRef(null);
    var popoverRef = useRef(null);
    var handleRef = useForkRef(rootRef, outerRootRef);
    var portalRef = useRef(null);
    var trapRef = useFocusTrap(isOpen && isFocusTrapped);
    var popoverForkRef = useForkRef(popoverRef, trapRef);
    var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      arrowElement = _useState2[0],
      setArrowElement = _useState2[1];
    var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      forceRender = _useState4[1];
    var isAutoArray = Array.isArray(placement);
    var isAuto = isAutoArray || placement.startsWith('auto');
    var initialStyles = {
      visibility: isOpen ? 'visible' : 'hidden',
      opacity: isOpen ? 1 : 0
    };
    var _usePopper = usePopper(rootRef.current, popoverRef.current, {
        // TODO: #1121
        // eslint-disable-next-line no-nested-ternary
        placement: isAutoArray ? (_placement$ = placement[0]) !== null && _placement$ !== void 0 && _placement$.endsWith('start') ? 'auto-start' : 'auto' : placement,
        modifiers: [{
          name: 'preventOverflow',
          options: {
            mainAxis: preventOverflow
          }
        }, {
          name: 'offset',
          options: {
            offset: [offset[0], offset[1]]
          }
        }, {
          name: 'flip',
          enabled: isAuto,
          options: {
            allowedAutoPlacements: isAutoArray ? placement : []
          }
        }, {
          name: 'arrow',
          options: {
            element: arrowElement
          }
        }]
      }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      forceUpdate = _usePopper.forceUpdate;
    var onEscape = useCallback(function (event) {
      if (isOpen && closeOnEsc && event.keyCode === ESCAPE_KEYCODE) {
        onToggle === null || onToggle === void 0 || onToggle(false, event);
      }
    }, [closeOnEsc, isOpen, onToggle]);
    var onDocumentClick = useCallback(function (event) {
      if (isOpen && closeOnOverlayClick && onToggle) {
        var _rootRef$current;
        var targetIsRoot = event.target === rootRef.current;
        var rootHasTarget = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.contains(event.target);
        if (!targetIsRoot && !rootHasTarget) {
          onToggle(false, event);
        }
      }
    }, [closeOnOverlayClick, isOpen, onToggle]);
    var onClick = useCallback(function (event) {
      if (trigger === 'click') {
        var _popoverRef$current;
        var targetIsPopover = event.target === popoverRef.current;
        var rootHasTarget = (_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.contains(event.target);
        if (!targetIsPopover && !rootHasTarget) {
          onToggle === null || onToggle === void 0 || onToggle(!isOpen, event);
        }
      }
    }, [trigger, isOpen, onToggle]);
    var onMouseEnter = useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(true, event);
      }
    }, [trigger, onToggle]);
    var onMouseLeave = useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(false, event);
      }
    }, [trigger, onToggle]);
    var onFocus = useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(true, event);
      }
    }, [trigger, onToggle]);
    var onBlur = useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(false, event);
      }
    }, [trigger, onToggle]);
    useEffect(function () {
      document.addEventListener('click', onDocumentClick);
      return function () {
        return document.removeEventListener('click', onDocumentClick);
      };
    }, [isOpen, onToggle]);
    useEffect(function () {
      window.addEventListener('keydown', onEscape);
      return function () {
        return window.removeEventListener('keydown', onEscape);
      };
    }, [closeOnEsc, isOpen, onToggle]);
    useEffect(function () {
      var portal = document.getElementById(POPOVER_PORTAL_ID);
      if (typeof frame !== 'string' && frame && frame.current) {
        portal = frame.current;
      }
      if (!usePortal) {
        portal = rootRef.current;
      }
      if (!portal) {
        portal = document.createElement('div');
        portal.setAttribute('id', POPOVER_PORTAL_ID);
        if (typeof frame === 'string' && frame !== 'document') {
          var _document$getElementB;
          (_document$getElementB = document.getElementById(frame)) === null || _document$getElementB === void 0 || _document$getElementB.appendChild(portal);
        } else {
          document.body.appendChild(portal);
        }
      }
      portalRef.current = portal;

      /**
       * Изменение стейта нужно для того, чтобы Popup
       * отобразился после записи DOM элемента в portalRef.current
       */
      forceRender(true);
    }, []);
    useEffect(function () {
      if (!isOpen || !forceUpdate) {
        return;
      }

      /*
       * INFO: Метод forceUpdate содержит в себе flushSync и приводит
       * к повторному рендеру компонента, который уже находится в процессе рендера.
       * Данный хак, нужен для того, чтобы это поведение избежать и перенаправить
       * вызов метода в очередь микрозадач.
       */
      Promise.resolve().then(forceUpdate);
    }, [isOpen, children, forceUpdate]);
    return /*#__PURE__*/React.createElement(StyledWrapper, {
      className: classes.wrapper,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, /*#__PURE__*/React.createElement(StyledRoot, {
      ref: handleRef,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      className: cx(className, classes.target)
    }, target), children && portalRef.current && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(Root, _extends({
      view: view,
      className: className
    }, rest), /*#__PURE__*/React.createElement(StyledPopover, _extends({}, attributes.popper, {
      className: classes.root,
      ref: popoverForkRef,
      style: _objectSpread(_objectSpread(_objectSpread({}, styles.popper), {
        display: isOpen ? 'block' : 'none'
      }), initialStyles),
      zIndex: zIndex
    }), hasArrow && /*#__PURE__*/React.createElement(StyledArrow, _extends({
      className: classes.arrow,
      ref: setArrowElement,
      style: styles.arrow
    }, attributes.arrow)), children)), portalRef.current));
  });
};
export var popoverConfig = {
  name: 'Popover',
  tag: 'div',
  layout: popoverRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    }
  },
  defaults: {
    view: 'default'
  }
};
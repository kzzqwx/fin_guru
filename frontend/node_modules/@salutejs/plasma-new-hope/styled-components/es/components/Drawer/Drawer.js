var _excluded = ["id", "zIndex", "popupInfo", "withBlur", "children", "view", "size", "width", "height", "isOpen", "initialFocusRef", "focusAfterRef", "className", "onClose", "onOverlayClick", "onEscKeyDown", "offset", "frame", "borderRadius", "placement", "closeOnEsc", "closeOnOverlayClick", "asModal"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useMemo } from 'react';
import { useFocusTrap, useForkRef, safeUseId } from '@salutejs/plasma-core';
import { component, mergeConfig } from '../../engines';
import { usePopupContext } from '../Popup';
import { Overlay } from '../Overlay';
import { DEFAULT_Z_INDEX } from '../Popup/utils';
import { panelConfig } from '../Panel';
import { getSizeValueFromProp } from '../../utils';
import { classes, tokens } from './Drawer.tokens';
import { base as viewCSS } from './variations/_view/base';
import { base as sizeCSS } from './variations/_size/base';
import { base as borderRadiusCSS } from './variations/_borderRadius/base';
import { StyledPopup } from './Drawer.styles';
import { getIdLastDrawer } from './DrawerContext';
import { useDrawer } from './hooks';

// issue #823
var mergedPanelConfig = /*#__PURE__*/mergeConfig(panelConfig);
var Panel = /*#__PURE__*/component(mergedPanelConfig);
export var drawerRoot = function drawerRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRef) {
    var id = _ref.id,
      zIndex = _ref.zIndex,
      popupInfo = _ref.popupInfo,
      withBlur = _ref.withBlur,
      children = _ref.children,
      view = _ref.view,
      size = _ref.size,
      width = _ref.width,
      height = _ref.height,
      isOpen = _ref.isOpen,
      initialFocusRef = _ref.initialFocusRef,
      focusAfterRef = _ref.focusAfterRef,
      className = _ref.className,
      onClose = _ref.onClose,
      onOverlayClick = _ref.onOverlayClick,
      onEscKeyDown = _ref.onEscKeyDown,
      offset = _ref.offset,
      frame = _ref.frame,
      _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? 'none' : _ref$borderRadius,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'right' : _ref$placement,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      _ref$asModal = _ref.asModal,
      asModal = _ref$asModal === void 0 ? true : _ref$asModal,
      rest = _objectWithoutProperties(_ref, _excluded);
    var trapRef = useFocusTrap(true, initialFocusRef, focusAfterRef);
    var popupController = usePopupContext();
    var innerRef = useForkRef(trapRef, outerRef);
    var uniqId = safeUseId();
    var innerId = id || uniqId;
    var overlayBackgroundToken = withBlur ? "var(".concat(tokens.drawerOverlayWithBlurColor, ")") : "var(".concat(tokens.drawerOverlayColor, ")");
    var innerWidth = width ? getSizeValueFromProp(width) : '100%';
    var innerHeight = height ? getSizeValueFromProp(height) : '100%';
    var _useDrawer = useDrawer({
        id: innerId,
        isOpen: isOpen,
        closeOnEsc: closeOnEsc,
        onEscKeyDown: onEscKeyDown,
        onClose: onClose,
        popupInfo: popupInfo,
        disableScroll: asModal
      }),
      drawerInfo = _useDrawer.drawerInfo;
    var transparent = useMemo(function () {
      return getIdLastDrawer(popupController.items) !== innerId;
    }, [innerId, popupController.items]);
    var onDrawerOverlayKeyDown = function onDrawerOverlayKeyDown(event) {
      if (onOverlayClick) {
        onOverlayClick(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    };
    return /*#__PURE__*/React.createElement(StyledPopup, _extends({
      id: innerId,
      ref: asModal ? innerRef : outerRef,
      isOpen: isOpen,
      zIndex: zIndex,
      placement: placement,
      popupInfo: drawerInfo,
      frame: frame,
      width: innerWidth,
      height: innerHeight,
      offset: offset,
      withAnimation: true,
      overlay: asModal && /*#__PURE__*/React.createElement(Root, {
        view: view
      }, /*#__PURE__*/React.createElement(Overlay, {
        className: classes.overlay,
        zIndex: zIndex || DEFAULT_Z_INDEX,
        backgroundColorProperty: overlayBackgroundToken,
        withBlur: withBlur,
        transparent: transparent,
        isClickable: closeOnOverlayClick,
        onOverlayClick: onDrawerOverlayKeyDown
      }))
    }, rest), /*#__PURE__*/React.createElement(Root, {
      view: view,
      size: size,
      style: {
        width: innerWidth,
        height: innerHeight
      },
      borderRadius: borderRadius
    }, /*#__PURE__*/React.createElement(Panel, {
      width: innerWidth,
      height: innerHeight,
      className: className
    }, children)));
  });
};
export var drawerConfig = {
  name: 'Drawer',
  tag: 'div',
  layout: drawerRoot,
  base: '',
  variations: {
    view: {
      css: viewCSS
    },
    size: {
      css: sizeCSS
    },
    borderRadius: {
      css: borderRadiusCSS
    }
  },
  defaults: {
    view: 'default',
    size: 'm',
    borderRadius: 'none'
  }
};
/// <reference types="react" />
export declare const TextField: import("react").FunctionComponent<import("../../../../engines/types").PropsType<{
    view: {
        default: import("@linaria/core").LinariaClassName;
        positive: import("@linaria/core").LinariaClassName;
        warning: import("@linaria/core").LinariaClassName;
        negative: import("@linaria/core").LinariaClassName;
    };
    size: {
        l: import("@linaria/core").LinariaClassName;
        m: import("@linaria/core").LinariaClassName;
        s: import("@linaria/core").LinariaClassName;
        xs: import("@linaria/core").LinariaClassName;
    };
    labelPlacement: {
        inner: import("@linaria/core").LinariaClassName[];
        outer: import("@linaria/core").LinariaClassName[];
    };
    disabled: {
        true: import("@linaria/core").LinariaClassName;
    };
    readOnly: {
        true: import("@linaria/core").LinariaClassName;
    };
}> & (({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    contentRight?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: import("react").KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    chips?: undefined;
    onChangeChips?: undefined;
    enumerationType?: "plain" | undefined;
    onSearch?: ((value: string, event?: import("react").KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & Omit<import("react").InputHTMLAttributes<HTMLInputElement>, "size"> & import("react").RefAttributes<HTMLInputElement>) | ({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    contentRight?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: import("react").KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    enumerationType: "chip";
    onSearch?: undefined;
    chips?: import("../../../../components/TextField/TextField.types").TextFieldPrimitiveValue[] | undefined;
    onChangeChips?: ((value: import("../../../../components/TextField/TextField.types").TextFieldPrimitiveValue[]) => void) | undefined;
} & Omit<import("react").InputHTMLAttributes<HTMLInputElement>, "size"> & import("react").RefAttributes<HTMLInputElement>))>;
//# sourceMappingURL=TextField.d.ts.map
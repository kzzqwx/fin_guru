/// <reference types="react" />
export declare const Drawer: import("react").FunctionComponent<import("../../../../engines/types").PropsType<{
    view: {
        default: import("@linaria/core").LinariaClassName;
    };
    size: {
        m: import("@linaria/core").LinariaClassName;
    };
    borderRadius: {
        none: import("@linaria/core").LinariaClassName;
        default: import("@linaria/core").LinariaClassName;
    };
}> & import("../../../..").PopupProps & import("../../../../components/Panel").PanelProps & {
    placement?: "left" | "right" | "top" | "bottom" | undefined;
    asModal?: boolean | undefined;
    withBlur?: boolean | undefined;
    closeOnEsc?: boolean | undefined;
    closeOnOverlayClick?: boolean | undefined;
    onEscKeyDown?: ((event: KeyboardEvent) => void) | undefined;
    onOverlayClick?: ((event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    initialFocusRef?: import("react").RefObject<HTMLElement> | undefined;
    focusAfterRef?: import("react").RefObject<HTMLElement> | undefined;
    onClose?: (() => void) | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const DrawerContent: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & {
    view?: string | undefined;
} & import("react").HTMLAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>>;
export declare const DrawerHeader: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & {
    hasClose?: boolean | undefined;
    closePlacement?: "left" | "right" | undefined;
    actions?: import("react").ReactNode;
    onClose?: (() => void) | undefined;
    view?: string | undefined;
} & import("react").HTMLAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>>;
export declare const DrawerFooter: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & {
    view?: string | undefined;
} & import("react").HTMLAttributes<HTMLDivElement> & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=Drawer.d.ts.map
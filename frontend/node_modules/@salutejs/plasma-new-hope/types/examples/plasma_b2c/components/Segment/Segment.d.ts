/// <reference types="react" />
export declare const SegmentGroup: import("react").FunctionComponent<import("../../../../engines/types").PropsType<{
    view: {
        clear: import("@linaria/core").LinariaClassName;
        filled: import("@linaria/core").LinariaClassName;
    };
    size: {
        xs: import("@linaria/core").LinariaClassName;
        s: import("@linaria/core").LinariaClassName;
        m: import("@linaria/core").LinariaClassName;
        l: import("@linaria/core").LinariaClassName;
    };
    disabled: {
        true: import("@linaria/core").LinariaClassName;
    };
    pilled: {
        true: import("@linaria/core").LinariaClassName;
    };
    stretch: {
        true: import("@linaria/core").LinariaClassName;
    };
    filledBackground: {
        true: import("@linaria/core").LinariaClassName;
    };
}> & import("react").HTMLAttributes<HTMLDivElement> & {
    selectionMode?: "multiple" | "single" | undefined;
    disabled?: boolean | undefined;
    stretch?: boolean | undefined;
    pilled?: boolean | undefined;
    filledBackground?: boolean | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const SegmentItem: import("react").FunctionComponent<import("../../../../engines/types").PropsType<{
    view: {
        clear: import("@linaria/core").LinariaClassName;
        secondary: import("@linaria/core").LinariaClassName;
        default: import("@linaria/core").LinariaClassName;
    };
    size: {
        xs: import("@linaria/core").LinariaClassName;
        s: import("@linaria/core").LinariaClassName;
        m: import("@linaria/core").LinariaClassName;
        l: import("@linaria/core").LinariaClassName;
    };
    disabled: {
        true: import("@linaria/core").LinariaClassName;
    };
    pilled: {
        true: import("@linaria/core").LinariaClassName;
    };
}> & import("react").ButtonHTMLAttributes<HTMLButtonElement> & {
    value: string;
    id?: string | undefined;
    label?: import("react").ReactNode;
    pilled?: boolean | undefined;
    customHandleSelect?: ((e: import("react").MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLLabelElement>>;
//# sourceMappingURL=Segment.d.ts.map
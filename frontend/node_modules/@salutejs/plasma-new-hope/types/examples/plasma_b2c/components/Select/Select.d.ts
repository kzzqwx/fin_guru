/// <reference types="react" />
export declare const Select: import("react").FunctionComponent<import("../../../../engines/types").PropsType<{
    target: {
        'textField-like': import("@linaria/core").LinariaClassName;
        'button-like': import("@linaria/core").LinariaClassName;
    };
    size: {
        xs: import("@linaria/core").LinariaClassName;
        s: import("@linaria/core").LinariaClassName;
        m: import("@linaria/core").LinariaClassName;
        l: import("@linaria/core").LinariaClassName;
    };
    view: {
        default: import("@linaria/core").LinariaClassName;
    };
}> & ((Omit<import("@salutejs/plasma-core").InputHTMLAttributes<HTMLSelectElement>, "onChange" | "value" | "size"> & import("../../../../components/Select/Select.types").CustomSelectProps & {
    valueType?: "single" | "native" | undefined;
    value?: import("../../../../components/Select").SelectPrimitiveValue | undefined;
    onChangeValue?: ((value?: import("../../../../components/Select").SelectPrimitiveValue | undefined) => void) | undefined;
} & import("react").RefAttributes<HTMLSelectElement>) | (Omit<import("@salutejs/plasma-core").InputHTMLAttributes<HTMLSelectElement>, "onChange" | "value" | "size"> & import("../../../../components/Select/Select.types").CustomSelectProps & {
    valueType: "multiple";
    value?: import("../../../../components/Select").SelectPrimitiveValue[] | undefined;
    onChangeValue?: ((value?: import("../../../../components/Select").SelectPrimitiveValue[] | undefined) => void) | undefined;
} & import("react").RefAttributes<HTMLSelectElement>))>;
export declare const SelectItem: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & Omit<import("react").HTMLAttributes<HTMLDivElement>, "onSelect"> & {
    id?: string | undefined;
    disabled?: boolean | undefined;
    label?: import("react").ReactNode;
    role?: string | undefined;
    contentLeft?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    contentRight?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    name?: string | undefined;
    checked?: boolean | undefined;
    text?: string | undefined;
    value?: string | number | boolean | undefined;
    isSelected?: boolean | undefined;
    onClick?: ((event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((value?: any, text?: any) => void) | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const SelectDivider: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & import("react").HTMLAttributes<HTMLDivElement> & {
    id?: string | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const SelectFooter: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & import("react").HTMLAttributes<HTMLDivElement> & {
    id?: string | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const SelectGroup: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & import("react").HTMLAttributes<HTMLDivElement> & {
    id?: string | undefined;
    labelClassName?: string | undefined;
    groupClassName?: string | undefined;
    label?: import("react").ReactNode;
    role?: string | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const SelectHeader: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & import("react").HTMLAttributes<HTMLDivElement> & {
    id?: string | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
//# sourceMappingURL=Select.d.ts.map
import type { CalendarStateType } from '../store/types';
import type { CalendarValueType, DateObject, DisabledDay, ItemProps } from '../Calendar.types';
export declare const ROW_STEP = 6;
export declare const YEAR_RENDER_COUNT = 12;
export declare const SHORT_DAY_NAMES: readonly ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"];
export declare const FULL_DAY_NAMES: Record<typeof SHORT_DAY_NAMES[number], string>;
export declare const SHORT_MONTH_NAME: string[];
export declare const MONTH_NAMES: string[];
export declare const getDaysInMonth: (monthIndex: number, year: number) => number;
export declare const getOffsetDayInWeek: (monthIndex: number, year: number) => number;
export declare const getStartYear: (year: number) => number;
export declare const getNextDate: (currentYear: number, currentMonth: number) => number[];
export declare const getPrevDate: (currentYear: number, currentMonth: number) => number[];
export declare const getDateFromValue: (date: Date | undefined) => DateObject;
export declare const getDateFromNow: () => DateObject;
export declare const IsCurrentDay: (date: DateObject, currentDay: number) => boolean;
export declare const isSelectedDay: (date: DateObject, currentDay: number, value?: Date | undefined) => boolean;
export declare const isCurrentMonth: (date: DateObject, monthIndex: number) => boolean;
export declare const isSelectedMonth: (date: DateObject, monthIndex: number) => boolean;
export declare const isCurrentYear: (year: number) => boolean;
export declare const isSelectedYear: (date: DateObject, year: number) => boolean;
export declare const getSortedValues: (values: [Date | undefined, (Date | undefined)?]) => [Date | undefined, (Date | undefined)?];
export declare const isDayInRange: (year: number, monthIndex: number, currentDay: number, values: [Date | undefined, Date?]) => boolean;
export declare const isSameDay: (firstDate: DateObject, secondDate?: DateObject | undefined) => boolean | undefined;
export declare const isValueUpdate: (value: Date | [Date, Date?], prevValue: Date | [Date, Date?]) => boolean;
/**
 * Метод проверяет, находится ли календарь в режиме выбора второго значения.
 */
export declare const isSelectProcess: (array: unknown | unknown[]) => array is [Date, (Date | undefined)?];
/**
 * Метод возвращает сторону, когда выбор второго значения диапазона завершён.
 */
export declare const getSideForSelected: (date: DateObject, startValue: Date, endValue: Date) => "left" | "right" | undefined;
/**
 * Метод возвращает сторону, во время выбора второго значения диапазона.
 */
export declare const getSideForHovered: (date: DateObject, hoveredDay: DateObject, startValue: Date, isSelected?: boolean | undefined) => "left" | "right" | undefined;
/**
 * Метод возвращает сторону, с которой нужно отрисовать направление полоски диапазона.
 */
export declare const getSideInRange: (value: CalendarValueType, date: DateObject, hoveredDay?: DateObject | undefined, isSelected?: boolean | undefined) => "left" | "right" | undefined;
/**
 * Метод проверяет, находится ли выбранный день в диапазоне.
 */
export declare const getInRange: (value: CalendarValueType, date: DateObject, hoveredDay?: DateObject | undefined, inRange?: boolean | undefined) => boolean | undefined;
/**
 * Метод проверяет, можно ли выбрать день.
 */
export declare const canSelectDate: ({ year, monthIndex, day }: DateObject, value: CalendarValueType, disabledList?: DisabledDay[] | undefined) => boolean;
/**
 * Метод для получения двумерного массива и возвращения выбранного элемента.
 */
export declare const getMatrix: <T extends ItemProps>(items: T[], rowSize?: number) => readonly [T[][], number[] | undefined];
export declare const getCalendarType: (type: CalendarStateType) => "год" | "период" | "месяц";
//# sourceMappingURL=index.d.ts.map
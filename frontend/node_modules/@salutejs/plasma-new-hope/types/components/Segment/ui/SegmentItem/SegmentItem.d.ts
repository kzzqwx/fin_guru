import React from 'react';
import type { RootProps } from '../../../../engines/types';
import type { SegmentItemProps } from './SegmentItem.types';
export declare const segmentItemRoot: (Root: RootProps<HTMLLabelElement, SegmentItemProps>) => React.ForwardRefExoticComponent<React.ButtonHTMLAttributes<HTMLButtonElement> & {
    value: string;
    id?: string | undefined;
    label?: React.ReactNode;
    pilled?: boolean | undefined;
    customHandleSelect?: ((e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void) | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & React.RefAttributes<HTMLLabelElement>>;
export declare const segmentItemConfig: {
    name: string;
    tag: string;
    layout: (Root: RootProps<HTMLLabelElement, SegmentItemProps>) => React.ForwardRefExoticComponent<React.ButtonHTMLAttributes<HTMLButtonElement> & {
        value: string;
        id?: string | undefined;
        label?: React.ReactNode;
        pilled?: boolean | undefined;
        customHandleSelect?: ((e: React.MouseEvent<HTMLButtonElement, globalThis.MouseEvent>) => void) | undefined;
        size?: string | undefined;
        view?: string | undefined;
    } & React.RefAttributes<HTMLLabelElement>>;
    base: import("@linaria/core").LinariaClassName;
    variations: {
        size: {
            css: import("@linaria/core").LinariaClassName;
        };
        view: {
            css: import("@linaria/core").LinariaClassName;
        };
        disabled: {
            css: import("@linaria/core").LinariaClassName;
            attrs: boolean;
        };
        pilled: {
            css: import("@linaria/core").LinariaClassName;
            attrs: boolean;
        };
    };
    defaults: {
        view: string;
        size: string;
    };
};
//# sourceMappingURL=SegmentItem.d.ts.map
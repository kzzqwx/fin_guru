/// <reference types="react" />
export declare const LabelWrapper: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
export declare const LabelContentLeft: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
export declare const Label: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLLabelElement> & import("react").LabelHTMLAttributes<HTMLLabelElement> & Record<never, unknown>>;
export declare const InputsWrapper: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
export declare const StyledInput: import("@linaria/react").StyledMeta & import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & (({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    contentRight?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: import("react").KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    chips?: undefined;
    onChangeChips?: undefined;
    enumerationType?: "plain" | undefined;
    onSearch?: ((value: string, event?: import("react").KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & Omit<import("react").InputHTMLAttributes<HTMLInputElement>, "size"> & import("react").RefAttributes<HTMLInputElement>) | ({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    contentRight?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: import("react").KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    enumerationType: "chip";
    onSearch?: undefined;
    chips?: import("../../../TextField/TextField.types").TextFieldPrimitiveValue[] | undefined;
    onChangeChips?: ((value: import("../../../TextField/TextField.types").TextFieldPrimitiveValue[]) => void) | undefined;
} & Omit<import("react").InputHTMLAttributes<HTMLInputElement>, "size"> & import("react").RefAttributes<HTMLInputElement>))>;
export declare const DoubleWrapper: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
export declare const SliderWrapper: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
//# sourceMappingURL=Double.styles.d.ts.map
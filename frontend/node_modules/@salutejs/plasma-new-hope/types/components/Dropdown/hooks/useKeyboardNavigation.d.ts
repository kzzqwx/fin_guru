import type { Dispatch } from 'react';
import { PathAction, PathState } from '../reducers/pathReducer';
import { FocusedPathAction, FocusedPathState } from '../reducers/focusedPathReducer';
import { HandleGlobalToggleType, DropdownProps } from '../Dropdown.types';
import { PathMapType, FocusedToValueMapType } from './useHashMaps';
export declare const keys: {
    Enter: string;
    Space: string;
    Tab: string;
    Escape: string;
    ArrowLeft: string;
    ArrowRight: string;
    ArrowUp: string;
    ArrowDown: string;
    Home: string;
    End: string;
    PageUp: string;
    PageDown: string;
};
interface Props {
    focusedPath: FocusedPathState;
    dispatchFocusedPath: Dispatch<FocusedPathAction>;
    path: PathState;
    dispatchPath: Dispatch<PathAction>;
    pathMap: PathMapType;
    focusedToValueMap: FocusedToValueMapType;
    handleGlobalToggle: HandleGlobalToggleType;
    closeOnSelect: DropdownProps['closeOnSelect'];
    onItemSelect: DropdownProps['onItemSelect'];
    onItemClick: DropdownProps['onItemClick'];
}
interface ReturnedProps {
    onKeyDown: (event: React.KeyboardEvent<HTMLElement>) => void;
}
export declare const useKeyNavigation: ({ focusedPath, dispatchFocusedPath, path, dispatchPath, pathMap, focusedToValueMap, handleGlobalToggle, closeOnSelect, onItemSelect, onItemClick, }: Props) => ReturnedProps;
export {};
//# sourceMappingURL=useKeyboardNavigation.d.ts.map
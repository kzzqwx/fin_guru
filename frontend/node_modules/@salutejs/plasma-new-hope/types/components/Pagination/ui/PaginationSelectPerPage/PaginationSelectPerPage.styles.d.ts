/// <reference types="react" />
export declare const SelectItem: import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & Omit<import("react").HTMLAttributes<HTMLDivElement>, "onSelect"> & {
    id?: string | undefined;
    disabled?: boolean | undefined;
    label?: import("react").ReactNode;
    role?: string | undefined;
    contentLeft?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    contentRight?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    name?: string | undefined;
    checked?: boolean | undefined;
    text?: string | undefined;
    value?: string | number | boolean | undefined;
    isSelected?: boolean | undefined;
    onClick?: ((event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((value?: any, text?: any) => void) | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const SelectPerPageRoot: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
export declare const SelectPerPageSelect: import("@linaria/react").StyledMeta & import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & ((Omit<import("@salutejs/plasma-core").InputHTMLAttributes<HTMLSelectElement>, "onChange" | "value" | "size"> & import("../../../Select/Select.types").CustomSelectProps & {
    valueType?: "single" | "native" | undefined;
    value?: import("../../../Select").SelectPrimitiveValue | undefined;
    onChangeValue?: ((value?: import("../../../Select").SelectPrimitiveValue | undefined) => void) | undefined;
} & import("react").RefAttributes<HTMLSelectElement>) | (Omit<import("@salutejs/plasma-core").InputHTMLAttributes<HTMLSelectElement>, "onChange" | "value" | "size"> & import("../../../Select/Select.types").CustomSelectProps & {
    valueType: "multiple";
    value?: import("../../../Select").SelectPrimitiveValue[] | undefined;
    onChangeValue?: ((value?: import("../../../Select").SelectPrimitiveValue[] | undefined) => void) | undefined;
} & import("react").RefAttributes<HTMLSelectElement>))>;
export declare const SelectPerPageSelectItem: import("@linaria/react").StyledMeta & import("react").FunctionComponent<import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & Omit<import("react").HTMLAttributes<HTMLDivElement>, "onSelect"> & {
    id?: string | undefined;
    disabled?: boolean | undefined;
    label?: import("react").ReactNode;
    role?: string | undefined;
    contentLeft?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    contentRight?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    name?: string | undefined;
    checked?: boolean | undefined;
    text?: string | undefined;
    value?: string | number | boolean | undefined;
    isSelected?: boolean | undefined;
    onClick?: ((event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((value?: any, text?: any) => void) | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const SelectPerPageTypography: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
//# sourceMappingURL=PaginationSelectPerPage.styles.d.ts.map
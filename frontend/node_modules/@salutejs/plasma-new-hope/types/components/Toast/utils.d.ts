/// <reference types="react" />
export declare const DEFAULT_FADE = true;
export declare const DEFAULT_POSITION = "bottom";
export declare const TIMER_DELAY = 300;
export declare const FADE_Z_INDEX = "9900";
export declare const TOAST_Z_INDEX = "9901";
export declare const gradients: {
    top: string;
    bottom: string;
};
export declare const Button: import("react").FunctionComponent<import("../../engines/types").PropsType<import("../../engines/types").Variants> & ((Omit<import("react").ButtonHTMLAttributes<HTMLElement>, "value"> & Omit<import("react").AnchorHTMLAttributes<HTMLElement>, "type"> & import("../../types").AsProps<any> & {
    text?: string | undefined;
    contentLeft?: import("react").ReactNode;
    contentPlacing?: ("default" | "relaxed") | undefined;
    isLoading?: boolean | undefined;
    loader?: import("react").ReactNode;
    stretch?: boolean | undefined;
    stretching?: ("auto" | "fixed" | "filled") | undefined;
    square?: boolean | undefined;
    focused?: boolean | undefined;
    disabled?: boolean | undefined;
    pin?: "square-square" | "square-clear" | "clear-square" | "clear-clear" | "clear-circle" | "circle-clear" | "circle-circle" | undefined;
    view?: string | undefined;
    size?: string | undefined;
    outlined?: boolean | undefined;
    shiftLeft?: boolean | undefined;
    shiftRight?: boolean | undefined;
    blur?: "small" | "medium" | "large" | undefined;
} & {
    value?: string | number | undefined;
    contentRight?: undefined;
} & import("react").RefAttributes<HTMLButtonElement>) | (Omit<import("react").ButtonHTMLAttributes<HTMLElement>, "value"> & Omit<import("react").AnchorHTMLAttributes<HTMLElement>, "type"> & import("../../types").AsProps<any> & {
    text?: string | undefined;
    contentLeft?: import("react").ReactNode;
    contentPlacing?: ("default" | "relaxed") | undefined;
    isLoading?: boolean | undefined;
    loader?: import("react").ReactNode;
    stretch?: boolean | undefined;
    stretching?: ("auto" | "fixed" | "filled") | undefined;
    square?: boolean | undefined;
    focused?: boolean | undefined;
    disabled?: boolean | undefined;
    pin?: "square-square" | "square-clear" | "clear-square" | "clear-clear" | "clear-circle" | "circle-clear" | "circle-circle" | undefined;
    view?: string | undefined;
    size?: string | undefined;
    outlined?: boolean | undefined;
    shiftLeft?: boolean | undefined;
    shiftRight?: boolean | undefined;
    blur?: "small" | "medium" | "large" | undefined;
} & {
    value?: undefined;
    contentRight?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLButtonElement>))>;
//# sourceMappingURL=utils.d.ts.map
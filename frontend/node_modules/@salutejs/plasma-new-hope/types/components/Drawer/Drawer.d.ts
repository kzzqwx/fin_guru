import React from 'react';
import type { RootProps } from '../../engines';
import type { DrawerProps } from './Drawer.types';
export declare const drawerRoot: (Root: RootProps<HTMLDivElement, DrawerProps>) => React.ForwardRefExoticComponent<import("../Popup").PopupProps & import("../Panel").PanelProps & {
    placement?: "left" | "right" | "top" | "bottom" | undefined;
    asModal?: boolean | undefined;
    withBlur?: boolean | undefined;
    closeOnEsc?: boolean | undefined;
    closeOnOverlayClick?: boolean | undefined;
    onEscKeyDown?: ((event: KeyboardEvent) => void) | undefined;
    onOverlayClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    initialFocusRef?: React.RefObject<HTMLElement> | undefined;
    focusAfterRef?: React.RefObject<HTMLElement> | undefined;
    onClose?: (() => void) | undefined;
} & React.RefAttributes<HTMLDivElement>>;
export declare const drawerConfig: {
    name: string;
    tag: string;
    layout: (Root: RootProps<HTMLDivElement, DrawerProps>) => React.ForwardRefExoticComponent<import("../Popup").PopupProps & import("../Panel").PanelProps & {
        placement?: "left" | "right" | "top" | "bottom" | undefined;
        asModal?: boolean | undefined;
        withBlur?: boolean | undefined;
        closeOnEsc?: boolean | undefined;
        closeOnOverlayClick?: boolean | undefined;
        onEscKeyDown?: ((event: KeyboardEvent) => void) | undefined;
        onOverlayClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
        initialFocusRef?: React.RefObject<HTMLElement> | undefined;
        focusAfterRef?: React.RefObject<HTMLElement> | undefined;
        onClose?: (() => void) | undefined;
    } & React.RefAttributes<HTMLDivElement>>;
    base: string;
    variations: {
        view: {
            css: import("@linaria/core").LinariaClassName;
        };
        size: {
            css: import("@linaria/core").LinariaClassName;
        };
        borderRadius: {
            css: import("@linaria/core").LinariaClassName;
        };
    };
    defaults: {
        view: string;
        size: string;
        borderRadius: string;
    };
};
//# sourceMappingURL=Drawer.d.ts.map
import React from 'react';
import type { RootProps } from '../../../../engines';
import { ComboboxItemProps } from './ComboboxItem.type';
export declare const comboboxItemRoot: (Root: RootProps<HTMLDivElement, ComboboxItemProps>) => React.ForwardRefExoticComponent<Omit<React.HTMLAttributes<HTMLDivElement>, "onSelect"> & {
    id?: string | undefined;
    disabled?: boolean | undefined;
    label?: React.ReactNode;
    role?: string | undefined;
    contentLeft?: string | number | boolean | React.ComponentClass<any, any> | React.FunctionComponent<any> | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined;
    contentRight?: string | number | boolean | React.ComponentClass<any, any> | React.FunctionComponent<any> | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined;
    name?: string | undefined;
    checked?: boolean | undefined;
    text?: string | undefined;
    value?: string | number | boolean | undefined;
    isSelected?: boolean | undefined;
    onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((value?: any, text?: any) => void) | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & React.RefAttributes<HTMLDivElement>>;
export declare const comboboxItemConfig: {
    name: string;
    tag: string;
    layout: (Root: RootProps<HTMLDivElement, ComboboxItemProps>) => React.ForwardRefExoticComponent<Omit<React.HTMLAttributes<HTMLDivElement>, "onSelect"> & {
        id?: string | undefined;
        disabled?: boolean | undefined;
        label?: React.ReactNode;
        role?: string | undefined;
        contentLeft?: string | number | boolean | React.ComponentClass<any, any> | React.FunctionComponent<any> | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined;
        contentRight?: string | number | boolean | React.ComponentClass<any, any> | React.FunctionComponent<any> | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined;
        name?: string | undefined;
        checked?: boolean | undefined;
        text?: string | undefined;
        value?: string | number | boolean | undefined;
        isSelected?: boolean | undefined;
        onClick?: ((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
        onSelect?: ((value?: any, text?: any) => void) | undefined;
        size?: string | undefined;
        view?: string | undefined;
    } & React.RefAttributes<HTMLDivElement>>;
    base: import("@linaria/core").LinariaClassName;
    variations: {
        view: {
            css: import("@linaria/core").LinariaClassName;
        };
        size: {
            css: import("@linaria/core").LinariaClassName;
        };
    };
    defaults: {
        view: string;
        size: string;
    };
};
//# sourceMappingURL=ComboboxItem.d.ts.map
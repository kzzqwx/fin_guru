/// <reference types="react" />
export declare const selectItemRoot: (Root: import("../../../..").RootProps<HTMLDivElement, import("../../../Dropdown/ui/DropdownItemOld/DropdownItem.type").DropdownItemProps>) => import("react").ForwardRefExoticComponent<Omit<import("react").HTMLAttributes<HTMLDivElement>, "onSelect"> & {
    id?: string | undefined;
    disabled?: boolean | undefined;
    label?: import("react").ReactNode;
    role?: string | undefined;
    contentLeft?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    contentRight?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
    name?: string | undefined;
    checked?: boolean | undefined;
    text?: string | undefined;
    value?: string | number | boolean | undefined;
    isSelected?: boolean | undefined;
    onClick?: ((event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
    onSelect?: ((value?: any, text?: any) => void) | undefined;
    size?: string | undefined;
    view?: string | undefined;
} & import("react").RefAttributes<HTMLDivElement>>;
export declare const selectItemConfig: {
    name: string;
    tag: string;
    layout: (Root: import("../../../..").RootProps<HTMLDivElement, import("../../../Dropdown/ui/DropdownItemOld/DropdownItem.type").DropdownItemProps>) => import("react").ForwardRefExoticComponent<Omit<import("react").HTMLAttributes<HTMLDivElement>, "onSelect"> & {
        id?: string | undefined;
        disabled?: boolean | undefined;
        label?: import("react").ReactNode;
        role?: string | undefined;
        contentLeft?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
        contentRight?: string | number | boolean | import("react").ComponentClass<any, any> | import("react").FunctionComponent<any> | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | import("react").ReactFragment | import("react").ReactPortal | null | undefined;
        name?: string | undefined;
        checked?: boolean | undefined;
        text?: string | undefined;
        value?: string | number | boolean | undefined;
        isSelected?: boolean | undefined;
        onClick?: ((event: import("react").MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
        onSelect?: ((value?: any, text?: any) => void) | undefined;
        size?: string | undefined;
        view?: string | undefined;
    } & import("react").RefAttributes<HTMLDivElement>>;
    base: import("@linaria/core").LinariaClassName;
    variations: {
        view: {
            css: import("@linaria/core").LinariaClassName;
        };
        size: {
            css: import("@linaria/core").LinariaClassName;
        };
    };
    defaults: {
        view: string;
        size: string;
    };
};
//# sourceMappingURL=SelectItem.d.ts.map
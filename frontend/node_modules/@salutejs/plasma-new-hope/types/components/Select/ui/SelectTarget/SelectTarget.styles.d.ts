/// <reference types="react" />
import type { TargetType } from '../../Select.types';
export declare const StyledSelectTarget: import("@linaria/react").StyledComponent<{
    target?: TargetType | undefined;
    opened?: boolean | undefined;
} & (import("../../../../engines/types").PropsType<import("../../../../engines/types").Variants> & ((Omit<import("react").ButtonHTMLAttributes<HTMLElement>, "value"> & Omit<import("react").AnchorHTMLAttributes<HTMLElement>, "type"> & import("../../../../types").AsProps<any> & {
    text?: string | undefined;
    contentLeft?: import("react").ReactNode;
    contentPlacing?: ("default" | "relaxed") | undefined;
    isLoading?: boolean | undefined;
    loader?: import("react").ReactNode;
    stretch?: boolean | undefined;
    stretching?: ("auto" | "fixed" | "filled") | undefined;
    square?: boolean | undefined;
    focused?: boolean | undefined;
    disabled?: boolean | undefined;
    pin?: "square-square" | "square-clear" | "clear-square" | "clear-clear" | "clear-circle" | "circle-clear" | "circle-circle" | undefined;
    view?: string | undefined;
    size?: string | undefined;
    outlined?: boolean | undefined;
    shiftLeft?: boolean | undefined;
    shiftRight?: boolean | undefined;
    blur?: "small" | "medium" | "large" | undefined;
} & {
    value?: string | number | undefined;
    contentRight?: undefined;
} & import("react").RefAttributes<HTMLButtonElement>) | (Omit<import("react").ButtonHTMLAttributes<HTMLElement>, "value"> & Omit<import("react").AnchorHTMLAttributes<HTMLElement>, "type"> & import("../../../../types").AsProps<any> & {
    text?: string | undefined;
    contentLeft?: import("react").ReactNode;
    contentPlacing?: ("default" | "relaxed") | undefined;
    isLoading?: boolean | undefined;
    loader?: import("react").ReactNode;
    stretch?: boolean | undefined;
    stretching?: ("auto" | "fixed" | "filled") | undefined;
    square?: boolean | undefined;
    focused?: boolean | undefined;
    disabled?: boolean | undefined;
    pin?: "square-square" | "square-clear" | "clear-square" | "clear-clear" | "clear-circle" | "circle-clear" | "circle-circle" | undefined;
    view?: string | undefined;
    size?: string | undefined;
    outlined?: boolean | undefined;
    shiftLeft?: boolean | undefined;
    shiftRight?: boolean | undefined;
    blur?: "small" | "medium" | "large" | undefined;
} & {
    value?: undefined;
    contentRight?: import("react").ReactNode;
} & import("react").RefAttributes<HTMLButtonElement>)))>;
export declare const StyledArrow: import("@linaria/react").StyledMeta & import("react").FC<import("../../../_Icon/IconRoot").IconProps>;
export declare const StyledText: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLSpanElement> & import("react").HTMLAttributes<HTMLSpanElement> & Record<never, unknown>>;
export declare const StyledChipsWrapper: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
export declare const StyledChips: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & Record<never, unknown>>;
export declare const StyledLabel: import("@linaria/react").StyledComponent<import("react").ClassAttributes<HTMLLabelElement> & import("react").LabelHTMLAttributes<HTMLLabelElement> & Record<never, unknown>>;
//# sourceMappingURL=SelectTarget.styles.d.ts.map
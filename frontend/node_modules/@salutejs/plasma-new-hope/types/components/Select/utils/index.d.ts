import { ReactElement, ReactNode } from 'react';
import { SelectPrimitiveValue, ValueType, SelectValue } from '../Select.types';
import { SelectItemProps } from '../ui/SelectItem/SelectItem.type';
declare type NewSelectedFunc = {
    (selected?: undefined | null, newValue?: undefined | null, type?: undefined | null): undefined;
    (selected?: SelectPrimitiveValue, newValue?: SelectPrimitiveValue, type?: ValueType): SelectPrimitiveValue;
    (selected?: Array<SelectPrimitiveValue>, newValue?: SelectPrimitiveValue, type?: ValueType): Array<SelectPrimitiveValue>;
};
export declare const getNewSelected: NewSelectedFunc;
export declare const getValues: (items: ReactElement[], value?: SelectValue | undefined, result?: Array<Array<string>>) => string[][];
export declare const updatePropsRecursively: (children?: ReactElement<import("../../Combobox/ui/ComboboxItem/ComboboxItem.type").ComboboxItemProps, string | import("react").JSXElementConstructor<any>>[] | undefined, externalProps?: Record<string, any> | undefined, value?: SelectValue | undefined, search?: string | undefined, filterFunction?: ((childText: string, filterValue?: string | undefined) => boolean) | undefined) => ReactNode[];
export declare const getChildren: (children: ReactElement<SelectItemProps>[], externalProps: Record<string, any>, value?: SelectValue | undefined, search?: string | undefined, filterFunction?: (text: string, filterValue?: string) => boolean) => ReactNode[];
export {};
//# sourceMappingURL=index.d.ts.map
/// <reference types="react" />
export declare type PolymorphicClassName = string;
export declare type CSSProperties = {
    [key: string]: string | number | CSSProperties;
};
export declare type CSS = (strings: TemplateStringsArray, ...exprs: Array<string | number | CSSProperties>) => PolymorphicClassName;
export declare type RootProps<RefElement extends HTMLElement, Element extends React.HTMLAttributes<HTMLElement>> = React.FunctionComponent<{
    children?: React.ReactNode;
} & Element & React.RefAttributes<RefElement>>;
export declare type HTMLAttributesOmitOnChange = Omit<React.HTMLAttributes<HTMLElement>, 'onChange'>;
export declare type RootPropsOmitOnChange<RefElement extends HTMLElement, Element extends HTMLAttributesOmitOnChange> = React.FunctionComponent<{
    children?: React.ReactNode;
} & React.RefAttributes<RefElement> & Element>;
export declare type Variant = {
    css?: PolymorphicClassName;
    attrs?: boolean;
    true?: PolymorphicClassName;
} & Record<any, any>;
export declare type HTMLAnyAttributes = Record<string, any>;
export declare type HTMLTagList = string | React.ElementType;
export declare type Variants = Record<string, Variant>;
export declare type PropsType<J extends Variants = Variants> = {
    [L in keyof J]?: keyof J[L] extends 'true' ? boolean : keyof J[L];
};
export declare type Filter<T extends {} = {}, U extends string = string> = {
    [k in keyof T]: k extends U ? unknown : T[k];
};
export interface ComponentConfig<Tag extends HTMLTagList = React.ElementType, VariantList extends Variants = Variants, VariantsProps extends PropsType<VariantList> = {}, LayoutProps extends React.HTMLAttributes<HTMLElement> | undefined = React.HTMLAttributes<HTMLElement>> {
    name: string;
    layout: (Root: React.FunctionComponent) => (props: LayoutProps | VariantsProps) => React.ReactElement | null;
    tag: Tag;
    base: PolymorphicClassName;
    variations: VariantList;
    defaults: Partial<Record<string, string>>;
}
//# sourceMappingURL=types.d.ts.map
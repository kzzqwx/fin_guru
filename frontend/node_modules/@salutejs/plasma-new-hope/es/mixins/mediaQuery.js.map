{"version":3,"file":"mediaQuery.js","sources":["../../src/mixins/mediaQuery.ts"],"sourcesContent":["export const breakpoints = {\n    XL: 960, // TV\n    L: 769, // Portal 8 cols\n    M: 560, // Portal 6 cols\n    S: 0, // Mobile\n};\n\nexport const columns = {\n    XL: 12,\n    L: 8,\n    M: 6,\n    S: 4,\n};\n\nexport const margins = {\n    XL: 4,\n    L: 3.5,\n    M: 3.5,\n    S: 1,\n};\n\nexport const gutters = {\n    XL: 1,\n    L: 1,\n    M: 1,\n    S: 0.5,\n};\n\nexport type MediaQueryFunction = (content: string) => string;\nexport type Breakpoint = keyof typeof breakpoints;\n\nexport const sizes = Object.keys(breakpoints) as Breakpoint[];\n\n/**\n * Обертка над css-медиазапросами с заранее определенными брейкпоинтами.\n */\n// TODO: https://github.com/salute-developers/plasma/issues/906\nexport const mediaQuery = (breakpoint: Breakpoint, deviceScale = 2): MediaQueryFunction => {\n    const index = sizes.indexOf(breakpoint);\n    const nextBreakpoint = sizes[index - 1] as Breakpoint;\n    const min = breakpoints[breakpoint] > 0 ? breakpoints[breakpoint] * deviceScale : null;\n    const max = breakpoints[nextBreakpoint] ? (breakpoints[nextBreakpoint] - 1) * deviceScale : null;\n\n    if (min === null && max !== null) {\n        return (content) => `\n                @media (max-width: ${max}px) {\n                    ${content}\n                }\n            `;\n    }\n\n    if (min !== null && max !== null) {\n        return (content) => `\n                @media screen and (min-width: ${min}px) and (max-width: ${max}px) {\n                    ${content}\n                }\n            `;\n    }\n\n    return (content) => `\n            @media (min-width: ${min}px) {\n                ${content}\n            }\n        `;\n};\n"],"names":["breakpoints","XL","L","M","S","columns","margins","gutters","sizes","Object","keys","mediaQuery","breakpoint","deviceScale","arguments","length","undefined","index","indexOf","nextBreakpoint","min","max","content","concat"],"mappings":"AAAO,IAAMA,WAAW,GAAG;AACvBC,EAAAA,EAAE,EAAE,GAAG;AAAE;AACTC,EAAAA,CAAC,EAAE,GAAG;AAAE;AACRC,EAAAA,CAAC,EAAE,GAAG;AAAE;EACRC,CAAC,EAAE,CAAC;AACR,EAAC;AAEM,IAAMC,OAAO,GAAG;AACnBJ,EAAAA,EAAE,EAAE,EAAE;AACNC,EAAAA,CAAC,EAAE,CAAC;AACJC,EAAAA,CAAC,EAAE,CAAC;AACJC,EAAAA,CAAC,EAAE,CAAA;AACP,EAAC;AAEM,IAAME,OAAO,GAAG;AACnBL,EAAAA,EAAE,EAAE,CAAC;AACLC,EAAAA,CAAC,EAAE,GAAG;AACNC,EAAAA,CAAC,EAAE,GAAG;AACNC,EAAAA,CAAC,EAAE,CAAA;AACP,EAAC;AAEM,IAAMG,OAAO,GAAG;AACnBN,EAAAA,EAAE,EAAE,CAAC;AACLC,EAAAA,CAAC,EAAE,CAAC;AACJC,EAAAA,CAAC,EAAE,CAAC;AACJC,EAAAA,CAAC,EAAE,GAAA;AACP,EAAC;AAKM,IAAMI,KAAK,gBAAGC,MAAM,CAACC,IAAI,CAACV,WAAW,EAAiB;;AAE7D;AACA;AACA;AACA;IACaW,UAAU,GAAG,SAAbA,UAAUA,CAAIC,UAAsB,EAA0C;AAAA,EAAA,IAAxCC,WAAW,GAAAC,SAAA,CAAAC,MAAA,GAAA,CAAA,IAAAD,SAAA,CAAA,CAAA,CAAA,KAAAE,SAAA,GAAAF,SAAA,CAAA,CAAA,CAAA,GAAG,CAAC,CAAA;AAC9D,EAAA,IAAMG,KAAK,GAAGT,KAAK,CAACU,OAAO,CAACN,UAAU,CAAC,CAAA;AACvC,EAAA,IAAMO,cAAc,GAAGX,KAAK,CAACS,KAAK,GAAG,CAAC,CAAe,CAAA;AACrD,EAAA,IAAMG,GAAG,GAAGpB,WAAW,CAACY,UAAU,CAAC,GAAG,CAAC,GAAGZ,WAAW,CAACY,UAAU,CAAC,GAAGC,WAAW,GAAG,IAAI,CAAA;AACtF,EAAA,IAAMQ,GAAG,GAAGrB,WAAW,CAACmB,cAAc,CAAC,GAAG,CAACnB,WAAW,CAACmB,cAAc,CAAC,GAAG,CAAC,IAAIN,WAAW,GAAG,IAAI,CAAA;AAEhG,EAAA,IAAIO,GAAG,KAAK,IAAI,IAAIC,GAAG,KAAK,IAAI,EAAE;AAC9B,IAAA,OAAO,UAACC,OAAO,EAAA;AAAA,MAAA,OAAA,uCAAA,CAAAC,MAAA,CACcF,GAAG,EAAAE,6BAAAA,CAAAA,CAAAA,MAAA,CAClBD,OAAO,EAAA,mCAAA,CAAA,CAAA;KAEhB,CAAA;AACT,GAAA;AAEA,EAAA,IAAIF,GAAG,KAAK,IAAI,IAAIC,GAAG,KAAK,IAAI,EAAE;AAC9B,IAAA,OAAO,UAACC,OAAO,EAAA;MAAA,OAAAC,kDAAAA,CAAAA,MAAA,CACyBH,GAAG,EAAAG,sBAAAA,CAAAA,CAAAA,MAAA,CAAuBF,GAAG,EAAA,6BAAA,CAAA,CAAAE,MAAA,CACvDD,OAAO,EAAA,mCAAA,CAAA,CAAA;KAEhB,CAAA;AACT,GAAA;AAEA,EAAA,OAAO,UAACA,OAAO,EAAA;AAAA,IAAA,OAAA,mCAAA,CAAAC,MAAA,CACcH,GAAG,EAAAG,yBAAAA,CAAAA,CAAAA,MAAA,CAClBD,OAAO,EAAA,2BAAA,CAAA,CAAA;GAEhB,CAAA;AACT;;;;"}
import { objectWithoutProperties as _objectWithoutProperties, toConsumableArray as _toConsumableArray, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef } from 'react';
import { cx } from '@linaria/core';
import 'focus-visible';
import { getStaticVariants, getDynamicVariants } from './common.js';

var _excluded = ["className"];
/* eslint-disable no-underscore-dangle */
var _component = function _component(componentConfig) {
  var tag = componentConfig.tag,
    base = componentConfig.base,
    name = componentConfig.name;
  var staticVariants = getStaticVariants(componentConfig);
  var dynamicVariants = getDynamicVariants(componentConfig);
  var Root = tag;
  var component = /*#__PURE__*/forwardRef(function (props, ref) {
    var className = props.className,
      rest = _objectWithoutProperties(props, _excluded);
    var variants = dynamicVariants(rest);
    var cls = cx.apply(void 0, [className, base].concat(_toConsumableArray(staticVariants), _toConsumableArray(variants)));

    // styled-components do it inside
    // filter props
    var baseProps = {};
    for (var key in rest) {
      if (!(key in componentConfig.variations)) {
        baseProps[key] = rest[key];
      }
    }
    baseProps.ref = ref;

    // styled-components do it inside
    // add props that should be attr( disabled for example)
    var htmlAttrs = {};
    for (var _key in componentConfig.variations || {}) {
      if (_key in rest) {
        var variant = componentConfig.variations[_key];
        var attrs = variant.attrs;
        if (typeof attrs === 'boolean') {
          htmlAttrs[_key] = rest[_key];
        }
      }
    }
    return /*#__PURE__*/React.createElement(Root, _extends({
      className: cls
    }, htmlAttrs, baseProps));
  });
  if (name) {
    component.displayName = name;
  }
  return component;
};

export { _component };
//# sourceMappingURL=linaria.js.map

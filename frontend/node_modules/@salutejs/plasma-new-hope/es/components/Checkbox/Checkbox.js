import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useRef, useEffect, useMemo } from 'react';
import { useForkRef, safeUseId, extractTextFrom } from '@salutejs/plasma-core';
import { cx } from '../../utils/index.js';
import { base as base$2 } from './variations/_view/base.js';
import { base as base$1 } from './variations/_size/base.js';
import { base as base$3 } from './variations/_disabled/base.js';
import { base as base$4 } from './variations/_focused/base.js';
import { Indeterminate, Done } from './IconsSvg.js';
import { StyledInput, StyledContentWrapper, StyledTrigger, StyledContent, StyledLabel, StyledDescription, base } from './Checkbox.styles.js';
import { classes } from './Checkbox.tokens.js';

var _Indeterminate, _Done;
var _excluded = ["size", "view", "focused", "disabled", "id", "label", "description", "indeterminate", "style", "className", "singleLine", "aria-label"];
var checkboxRoot = function checkboxRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var size = props.size,
      view = props.view,
      focused = props.focused,
      disabled = props.disabled,
      id = props.id,
      label = props.label,
      description = props.description,
      indeterminate = props.indeterminate,
      style = props.style,
      className = props.className,
      _props$singleLine = props.singleLine,
      singleLine = _props$singleLine === void 0 ? false : _props$singleLine,
      ariaLabelExternal = props['aria-label'],
      rest = _objectWithoutProperties(props, _excluded);
    var inputRef = useRef(null);
    var forkRef = useForkRef(inputRef, ref);
    useEffect(function () {
      if (inputRef.current) {
        inputRef.current.indeterminate = Boolean(indeterminate);
      }
    }, [inputRef, indeterminate]);
    var uniqId = safeUseId();
    var uniqLabelId = "label-".concat(uniqId);
    var uniqDescriptionId = "description-".concat(uniqId);
    var checkboxId = id || "input-".concat(uniqId);
    var ariaLabel = useMemo(function () {
      return ariaLabelExternal || extractTextFrom(label);
    }, [ariaLabelExternal, label]);
    var isLabelAriaHidden = typeof label === 'string';
    var canFocused = focused ? 0 : -1;
    var hasContent = label || description;
    var singleLineClass = singleLine ? classes.singleLine : undefined;
    var onlyDescriptionClass = !label && description ? classes.onlyDescription : undefined;
    return /*#__PURE__*/React.createElement(Root, {
      view: view,
      size: size,
      disabled: disabled,
      focused: focused,
      style: style,
      className: className,
      tabIndex: -1
    }, /*#__PURE__*/React.createElement(StyledInput, _extends({}, rest, {
      id: checkboxId,
      ref: forkRef,
      type: "checkbox",
      disabled: disabled,
      "aria-label": ariaLabel,
      "aria-describedby": uniqDescriptionId,
      tabIndex: canFocused
    })), /*#__PURE__*/React.createElement(StyledContentWrapper, {
      htmlFor: checkboxId
    }, /*#__PURE__*/React.createElement(StyledTrigger, {
      className: classes.checkboxTrigger
    }, indeterminate ? _Indeterminate || (_Indeterminate = /*#__PURE__*/React.createElement(Indeterminate, null)) : _Done || (_Done = /*#__PURE__*/React.createElement(Done, null))), hasContent && /*#__PURE__*/React.createElement(StyledContent, {
      className: singleLineClass
    }, label && /*#__PURE__*/React.createElement(StyledLabel, {
      className: singleLineClass,
      id: uniqLabelId,
      "aria-hidden": isLabelAriaHidden
    }, label), description && /*#__PURE__*/React.createElement(StyledDescription, {
      className: cx(singleLineClass, onlyDescriptionClass),
      id: uniqDescriptionId
    }, description))));
  });
};
var checkboxConfig = {
  name: 'Checkbox',
  tag: 'div',
  layout: checkboxRoot,
  base: base,
  variations: {
    size: {
      css: base$1
    },
    view: {
      css: base$2
    },
    disabled: {
      css: base$3
    },
    focused: {
      css: base$4
    }
  },
  defaults: {
    size: 'm',
    view: 'accent'
  }
};

export { checkboxConfig, checkboxRoot };
//# sourceMappingURL=Checkbox.js.map

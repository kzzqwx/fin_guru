{"version":3,"file":"TextSkeleton.js","sources":["../../../../src/components/Skeleton/TextSkeleton/TextSkeleton.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport type { FC, HTMLAttributes } from 'react';\n\nimport type { LineSkeletonProps } from '../LineSkeleton';\n\nimport type { TextSkeletonProps } from './TextSkeleton.types';\nimport { StyledTextSkeleton } from './TextSkeleton.styles';\n\nconst variousWidth = [7.58, 5.27, 13.54, 6.63, 0.28, 14.8, 0.33, 11.26, 14.1, 10.59, 3.38, 13.5, 7.71, 3.34, 7.96];\n\n/**\n * Хок для создания компонента плейсхолдера нескольких строк текста.\n * Размеры компонента задаются с помощью констант и соответствуют размерам [типографических элементов](/?path=/docs/).\n */\nexport const textSkeleton = (\n    Component: FC<LineSkeletonProps>,\n): FC<TextSkeletonProps & HTMLAttributes<HTMLDivElement>> => ({\n    lines,\n    width,\n    roundness,\n    customGradientColor,\n    lighter,\n    size = 'body1',\n    ...props\n}: TextSkeletonProps & HTMLAttributes<HTMLDivElement>) => {\n    const [fixedWidth, setFixedWidth] = useState<string | number | null>(null);\n    const [linesWidth, setLinesWidth] = useState([]);\n\n    useEffect(() => {\n        if (!width) {\n            setFixedWidth(null);\n            const computedLengths = Array(lines)\n                .fill(0)\n                .reduce((acc, _, i) => {\n                    let w;\n                    // Последняя строка\n                    if (i === lines - 1 && lines !== 1) {\n                        w = 45 - variousWidth[i % variousWidth.length];\n                    } else if (lines === 1 || lines === 2) {\n                        // Единственная или первая из двух\n                        w = 100;\n                    } else {\n                        w = 100 - variousWidth[i % variousWidth.length];\n                    }\n\n                    return { ...acc, [i]: w };\n                }, {});\n\n            setLinesWidth(Object.values(computedLengths));\n            return;\n        }\n\n        if (!Number.isNaN(Number(width))) {\n            setFixedWidth(`${width}%`);\n        } else {\n            setFixedWidth(String(width));\n        }\n    }, [width, lines]);\n\n    return (\n        <StyledTextSkeleton {...props}>\n            {Array.from(Array<number>(lines), (_, i) => {\n                return (\n                    <Component\n                        key={`line:${i}`}\n                        size={size}\n                        roundness={roundness}\n                        customGradientColor={customGradientColor}\n                        lighter={lighter}\n                        style={{ width: fixedWidth || `${linesWidth[i]}%` }}\n                    />\n                );\n            })}\n        </StyledTextSkeleton>\n    );\n};\n"],"names":["variousWidth","textSkeleton","Component","_ref","lines","width","roundness","customGradientColor","lighter","_ref$size","size","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","fixedWidth","setFixedWidth","_useState3","_useState4","linesWidth","setLinesWidth","useEffect","computedLengths","Array","fill","reduce","acc","_","i","w","length","_objectSpread","_defineProperty","Object","values","Number","isNaN","concat","String","React","createElement","StyledTextSkeleton","from","key","style"],"mappings":"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"}
import { objectWithoutProperties as _objectWithoutProperties, extends as _extends, objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef } from 'react';
import { applySpacing } from '../../mixins/applySpacing.js';
import { cx } from '../../utils/index.js';
import { classes } from './tokens.js';

var _excluded = ["size", "children", "breakWord", "bold", "className", "style"];
var typographyRootCompose = function typographyRootCompose(defaultArgs) {
  return function (Root) {
    return /*#__PURE__*/forwardRef(function (props, ref) {
      var size = props.size,
        children = props.children,
        breakWord = props.breakWord,
        _props$bold = props.bold,
        bold = _props$bold === void 0 ? defaultArgs === null || defaultArgs === void 0 ? void 0 : defaultArgs.defaultBold : _props$bold,
        className = props.className,
        style = props.style,
        rest = _objectWithoutProperties(props, _excluded);
      var withBreakWord = breakWord ? classes.typoWithBreakWord : undefined;
      var typographyBold = bold ? classes.typoBold : undefined;
      return /*#__PURE__*/React.createElement(Root, _extends({
        size: size,
        ref: ref,
        className: cx(withBreakWord, typographyBold, className),
        style: _objectSpread2(_objectSpread2({}, style), applySpacing(rest)),
        bold: bold
      }, rest), children);
    });
  };
};

export { typographyRootCompose };
//# sourceMappingURL=Typography.js.map

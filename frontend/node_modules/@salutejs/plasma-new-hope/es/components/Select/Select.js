import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useState, useRef, useEffect, useCallback, useMemo, Children } from 'react';
import { safeUseId, useForkRef } from '@salutejs/plasma-core';
import { cx } from '../../utils/index.js';
import { getPlacements } from '../Dropdown/utils/index.js';
import { useForceUpdate } from '../../hooks/useForceUpdate.js';
import { useDidMountEffect } from '../../hooks/useDidMountEffect.js';
import { base } from './variations/_target/base.js';
import { base as base$1 } from './variations/_view/base.js';
import { base as base$2 } from './variations/_size/base.js';
import '@linaria/react';
import '@linaria/core';
import 'focus-visible';
import 'react-dom';
import 'react-popper';
import 'styled-components';
import { classes } from './Select.tokens.js';
import { SelectTarget } from './ui/SelectTarget/SelectTarget.js';
import { getNewSelected, getChildren, getValues } from './utils/index.js';
import { StyledRoot, StyledNativeSelect, StyledPopover, StyledSelect } from './Select.styles.js';
import { useKeyNavigation } from './hooks/useKeyNavigation.js';

var _excluded = ["name", "form", "readOnly", "disabled", "label", "id", "children", "role", "target", "view", "size", "frame", "usePortal", "enumerationType", "opened", "placement", "onToggle"];

/**
 * Выпадающий список без внешнего контроля видимости.
 */
var selectRoot = function selectRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var _targetRef$current;
    var name = _ref.name,
      form = _ref.form,
      readOnly = _ref.readOnly,
      disabled = _ref.disabled,
      label = _ref.label,
      id = _ref.id,
      children = _ref.children,
      role = _ref.role,
      target = _ref.target,
      view = _ref.view,
      size = _ref.size,
      frame = _ref.frame,
      usePortal = _ref.usePortal,
      _ref$enumerationType = _ref.enumerationType,
      enumerationType = _ref$enumerationType === void 0 ? 'comma' : _ref$enumerationType,
      _ref$opened = _ref.opened,
      opened = _ref$opened === void 0 ? false : _ref$opened,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      onToggle = _ref.onToggle,
      rest = _objectWithoutProperties(_ref, _excluded);
    var forceUpdate = useForceUpdate();
    var uniqId = safeUseId();
    var innerId = id || uniqId;
    var _rest$valueType = rest.valueType,
      valueType = _rest$valueType === void 0 ? 'single' : _rest$valueType,
      value = rest.value;
    var offset = [0, 4];
    var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      ref = _useState2[0],
      setRef = _useState2[1];
    var rootRef = useRef(null);
    var handleRef = useForkRef(rootRef, outerRootRef);
    var targetRef = useRef(null);
    var chipsRefs = useRef([]);
    var selectRef = useRef(null);
    var itemsRefs = useRef([]);
    var controlledRefs = {
      targetRef: targetRef,
      chipsRefs: chipsRefs,
      selectRef: selectRef,
      itemsRefs: itemsRefs
    };
    var _useState3 = useState(opened),
      _useState4 = _slicedToArray(_useState3, 2),
      innerOpened = _useState4[0],
      setOpened = _useState4[1];

    // INFO: нужно высчитывать для корректной работы портала
    var dynamicTargetWidth = (_targetRef$current = targetRef.current) === null || _targetRef$current === void 0 ? void 0 : _targetRef$current.offsetWidth;
    var withNativeSelectVisible = valueType === 'native' ? classes.nativeSelectVisible : undefined;

    // INFO: Из-за того, что классы передаются через ref,
    // состояние пропсов после изменения view, size, target
    // всегда предыдущее, поэтому нужно делать форс-ререндер
    useDidMountEffect(function () {
      forceUpdate();
    }, [view, size, target]);
    useEffect(function () {
      if (disabled || readOnly) {
        return;
      }
      setOpened(opened);
    }, [opened, disabled, readOnly]);
    var onInnerToggle = useCallback(function (openValue, event) {
      if (disabled || readOnly) {
        return;
      }
      if (onToggle) {
        onToggle(openValue, event);
        return;
      }
      setOpened(openValue);
    }, [disabled, readOnly, onToggle]);
    var updateValue = useCallback(function (item, event) {
      var _rest$onChangeValue2;
      var newValue = item.dataset.value;
      if (rest.valueType === 'multiple') {
        var _rest$onChangeValue;
        var _newSelected = getNewSelected(rest.value, newValue, rest.valueType);
        (_rest$onChangeValue = rest.onChangeValue) === null || _rest$onChangeValue === void 0 || _rest$onChangeValue.call(rest, _newSelected);
        return;
      }
      var newSelected = getNewSelected(rest.value, newValue, 'single');
      (_rest$onChangeValue2 = rest.onChangeValue) === null || _rest$onChangeValue2 === void 0 || _rest$onChangeValue2.call(rest, newSelected);
      onInnerToggle === null || onInnerToggle === void 0 || onInnerToggle(false, event);
    }, [rest.value, rest.valueType, rest.onChangeValue, onToggle, onInnerToggle]);
    var onClickChildrenItem = useCallback(function (event) {
      // INFO: Для корректной работы компонента Popper
      event.stopPropagation();
      var item = event.currentTarget;
      updateValue(item, event);
    }, [updateValue]);
    var onNativeSelectChange = useCallback(function (event) {
      var _rest$onChangeValue3;
      if (rest.valueType === 'multiple') {
        return;
      }
      var newValue = event.target.value;
      var newSelected = getNewSelected(rest.value, newValue, 'native');
      (_rest$onChangeValue3 = rest.onChangeValue) === null || _rest$onChangeValue3 === void 0 || _rest$onChangeValue3.call(rest, newSelected);
    }, [rest.value, rest.valueType, rest.onChangeValue]);
    var onChangeChipValue = useCallback(function (newValue) {
      var _rest$onChangeValue4;
      if (rest.valueType !== 'multiple') {
        return;
      }
      (_rest$onChangeValue4 = rest.onChangeValue) === null || _rest$onChangeValue4 === void 0 || _rest$onChangeValue4.call(rest, newValue);
    }, [rest.valueType]);
    var _useKeyNavigation = useKeyNavigation({
        controlledRefs: controlledRefs,
        opened: innerOpened,
        enumerationType: enumerationType,
        valueType: valueType,
        value: value,
        updateOpened: onInnerToggle,
        updateValue: updateValue
      }),
      onKeyDownTarget = _useKeyNavigation.onKeyDownTarget,
      onKeyDownSelect = _useKeyNavigation.onKeyDownSelect;
    var childrenArray = useMemo(function () {
      return Children.toArray(children);
    }, [children]);
    var childrenMemo = useMemo(function () {
      return getChildren(childrenArray, {
        onClick: onClickChildrenItem,
        childrenRefs: itemsRefs
      }, value);
    }, [childrenArray, value, innerOpened]);
    var values = useMemo(function () {
      return getValues(childrenArray, value);
    }, [childrenArray, value]);
    return /*#__PURE__*/React.createElement(StyledRoot, {
      ref: selectRef
    }, /*#__PURE__*/React.createElement(StyledNativeSelect, {
      "aria-invalid": "false",
      "aria-hidden": "true",
      "aria-readonly": readOnly,
      tabIndex: valueType === 'native' ? 0 : -1,
      form: form,
      name: name,
      ref: handleRef,
      value: "".concat(value),
      disabled: disabled || readOnly,
      onChange: onNativeSelectChange,
      className: cx(ref === null || ref === void 0 ? void 0 : ref.classList.toString(), withNativeSelectVisible)
    }, valueType === 'native' && childrenMemo), /*#__PURE__*/React.createElement(StyledPopover, {
      role: role,
      isOpen: innerOpened,
      onToggle: onInnerToggle,
      target: /*#__PURE__*/React.createElement(SelectTarget, {
        tabIndex: valueType === 'native' ? -1 : 0,
        opened: innerOpened,
        target: target,
        values: values,
        label: label,
        enumerationType: enumerationType,
        readOnly: readOnly,
        disabled: disabled,
        size: size,
        ref: targetRef,
        chipsRefs: chipsRefs,
        id: innerId,
        onChange: onChangeChipValue,
        onKeyDown: onKeyDownTarget
      }),
      className: cx(ref === null || ref === void 0 ? void 0 : ref.classList.toString()) // INFO: Прокидываем стили для Popover
      ,
      id: innerId,
      offset: offset,
      frame: frame,
      placement: getPlacements(placement),
      trigger: "click",
      usePortal: usePortal,
      selectWidth: dynamicTargetWidth,
      isFocusTrapped: false,
      preventOverflow: false,
      closeOnEsc: false,
      closeOnOverlayClick: true
    }, /*#__PURE__*/React.createElement(Root, _extends({
      ref: setRef,
      target: target,
      view: view,
      size: size
    }, rest), valueType !== 'native' && /*#__PURE__*/React.createElement(StyledSelect, {
      onKeyDown: onKeyDownSelect
    }, childrenMemo))));
  });
};
var selectConfig = {
  name: 'Select',
  tag: 'div',
  layout: selectRoot,
  base: '',
  variations: {
    target: {
      css: base
    },
    view: {
      css: base$1
    },
    size: {
      css: base$2
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};

export { selectConfig, selectRoot };
//# sourceMappingURL=Select.js.map

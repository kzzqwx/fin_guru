{"version":3,"file":"SelectTarget.js","sources":["../../../../../src/components/Select/ui/SelectTarget/SelectTarget.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useRef } from 'react';\n\nimport { classes } from '../../Select.tokens';\nimport { cx } from '../../../../utils';\nimport { SelectChip } from '../SelectChip/SelectChip';\nimport type { SelectPrimitiveValue } from '../../Select.types';\nimport { Keys } from '../../hooks/useKeyNavigation';\n\nimport {\n    StyledArrow,\n    StyledChips,\n    StyledChipsWrapper,\n    StyledLabel,\n    StyledSelectTarget,\n    StyledText,\n} from './SelectTarget.styles';\nimport type { SelectTargetProps } from './SelectTarget.types';\n\nconst {\n    hasNoFocus,\n    hasChips,\n    innerLabelUp,\n    arrowInverse,\n    selectTarget,\n    selectTargetArrow,\n    selectTargeText,\n    selectTargetLabel,\n} = classes;\n\n/**\n * Элемент для выпадающего списка\n */\nexport const SelectTarget = forwardRef<HTMLButtonElement, SelectTargetProps>(\n    (\n        {\n            values,\n            target = 'textField-like',\n            label,\n            opened,\n            readOnly,\n            disabled,\n            enumerationType,\n            size,\n            id,\n            chipsRefs,\n            onChange,\n            onKeyDown,\n            ...rest\n        },\n        ref,\n    ) => {\n        const hasText = Boolean(values?.some(([value]) => value));\n\n        const hasLabel = label && size !== 'xs' && target === 'textField-like';\n        const textContent = values?.map(([, text]) => text).join(', ');\n        const contentRef = useRef<HTMLDivElement>(null);\n\n        const withArrowInverse = opened ? arrowInverse : undefined;\n        const withInnerLabelUp = hasLabel && hasText ? innerLabelUp : undefined;\n        const withHasChips =\n            hasText && enumerationType === 'chip' && target === 'textField-like' ? hasChips : undefined;\n\n        const withNoFocus = target === 'textField-like' ? hasNoFocus : undefined;\n\n        const isLabelVisible = !hasText || (hasLabel && enumerationType === 'comma');\n\n        const onChipClick = useCallback((event: React.MouseEvent<HTMLButtonElement>) => {\n            event.stopPropagation();\n        }, []);\n\n        const onChipClear = useCallback(\n            (value: SelectPrimitiveValue, text: SelectPrimitiveValue, index: number) => {\n                const newValue = values\n                    ?.filter(([itemValue, itemText]) => !(itemValue === value && itemText === text))\n                    .map(([itemValue]) => itemValue);\n\n                chipsRefs?.current.splice(index, 1);\n                onChange?.(newValue);\n            },\n            [values, onChange],\n        );\n\n        const onChipKeyDown = useCallback(\n            (\n                value: SelectPrimitiveValue,\n                text: SelectPrimitiveValue,\n                index: number,\n                event: React.KeyboardEvent<HTMLButtonElement>,\n            ) => {\n                const { code, shiftKey } = event;\n\n                if (code === Keys.Tab || (code === Keys.Tab && shiftKey)) {\n                    event.preventDefault();\n                }\n\n                if (code === Keys.Backspace) {\n                    onChipClear(value, text, index);\n                }\n            },\n            [onChipClear],\n        );\n\n        const onWheel = useCallback((event: React.WheelEvent<HTMLButtonElement>) => {\n            const { deltaY } = event;\n\n            if (contentRef.current) {\n                contentRef.current.scrollLeft += Math.round(deltaY);\n            }\n        }, []);\n\n        const getRef = useCallback((element: HTMLButtonElement | null, index: number) => {\n            if (element && chipsRefs && chipsRefs.current) {\n                chipsRefs.current[index] = element;\n            }\n        }, []);\n\n        // INFO: Нужно очищать на каждый ререндер компонента для актуализации состояния рефов\n        if (chipsRefs) {\n            chipsRefs.current = [];\n        }\n\n        return (\n            <StyledSelectTarget\n                {...rest}\n                ref={ref}\n                opened={opened}\n                target={target}\n                readOnly={readOnly}\n                disabled={disabled}\n                title={textContent}\n                aria-label={label}\n                className={cx(withInnerLabelUp, withHasChips, withNoFocus, selectTarget)}\n                onWheel={onWheel}\n                onKeyDown={onKeyDown}\n                stretching=\"filled\"\n            >\n                {hasText &&\n                    (enumerationType === 'comma' || target === 'button-like' ? (\n                        <StyledText className={selectTargeText}>{textContent}</StyledText>\n                    ) : (\n                        <StyledChipsWrapper ref={contentRef}>\n                            <StyledChips>\n                                {values?.map(([value, text], index) => (\n                                    <SelectChip\n                                        index={index}\n                                        ref={(element) => getRef(element, index)}\n                                        key={`${value}_${text}`}\n                                        disabled={disabled}\n                                        readOnly={readOnly}\n                                        value={value}\n                                        text={text}\n                                        onClear={(v, t) => onChipClear(v, t, index)}\n                                        onClick={onChipClick}\n                                        onKeyDown={onChipKeyDown}\n                                    />\n                                ))}\n                            </StyledChips>\n                        </StyledChipsWrapper>\n                    ))}\n                {isLabelVisible && (\n                    <StyledLabel className={selectTargetLabel} htmlFor={id}>\n                        {label}\n                    </StyledLabel>\n                )}\n                <StyledArrow size=\"s\" color=\"inherit\" className={cx(selectTargetArrow, withArrowInverse)} />\n            </StyledSelectTarget>\n        );\n    },\n);\n"],"names":["hasNoFocus","classes","hasChips","innerLabelUp","arrowInverse","selectTarget","selectTargetArrow","selectTargeText","selectTargetLabel","SelectTarget","forwardRef","_ref","ref","values","_ref$target","target","label","opened","readOnly","disabled","enumerationType","size","id","chipsRefs","onChange","onKeyDown","rest","_objectWithoutProperties","_excluded","hasText","Boolean","some","_ref2","_ref3","_slicedToArray","value","hasLabel","textContent","map","_ref4","_ref5","text","join","contentRef","useRef","withArrowInverse","undefined","withInnerLabelUp","withHasChips","withNoFocus","isLabelVisible","onChipClick","useCallback","event","stopPropagation","onChipClear","index","newValue","filter","_ref6","_ref7","itemValue","itemText","_ref8","_ref9","current","splice","onChipKeyDown","code","shiftKey","Keys","Tab","preventDefault","Backspace","onWheel","deltaY","scrollLeft","Math","round","getRef","element","React","createElement","StyledSelectTarget","_extends","title","className","cx","stretching","StyledText","StyledChipsWrapper","StyledChips","_ref10","_ref11","SelectChip","key","concat","onClear","v","t","onClick","StyledLabel","htmlFor","StyledArrow","color"],"mappings":";;;;;;;;;AAkBA,IACIA,UAAU,GAQVC,OAAO,CARPD,UAAU;EACVE,QAAQ,GAORD,OAAO,CAPPC,QAAQ;EACRC,YAAY,GAMZF,OAAO,CANPE,YAAY;EACZC,YAAY,GAKZH,OAAO,CALPG,YAAY;EACZC,YAAY,GAIZJ,OAAO,CAJPI,YAAY;EACZC,iBAAiB,GAGjBL,OAAO,CAHPK,iBAAiB;EACjBC,eAAe,GAEfN,OAAO,CAFPM,eAAe;EACfC,iBAAiB,GACjBP,OAAO,CADPO,iBAAiB,CAAA;;AAGrB;AACA;AACA;AACO,IAAMC,YAAY,gBAAGC,UAAU,CAClC,UAAAC,IAAA,EAgBIC,GAAG,EACF;AAAA,EAAA,IAfGC,MAAM,GAAAF,IAAA,CAANE,MAAM;IAAAC,WAAA,GAAAH,IAAA,CACNI,MAAM;AAANA,IAAAA,MAAM,GAAAD,WAAA,KAAG,KAAA,CAAA,GAAA,gBAAgB,GAAAA,WAAA;IACzBE,KAAK,GAAAL,IAAA,CAALK,KAAK;IACLC,MAAM,GAAAN,IAAA,CAANM,MAAM;IACNC,QAAQ,GAAAP,IAAA,CAARO,QAAQ;IACRC,QAAQ,GAAAR,IAAA,CAARQ,QAAQ;IACRC,eAAe,GAAAT,IAAA,CAAfS,eAAe;IACfC,IAAI,GAAAV,IAAA,CAAJU,IAAI;IACJC,EAAE,GAAAX,IAAA,CAAFW,EAAE;IACFC,SAAS,GAAAZ,IAAA,CAATY,SAAS;IACTC,QAAQ,GAAAb,IAAA,CAARa,QAAQ;IACRC,SAAS,GAAAd,IAAA,CAATc,SAAS;AACNC,IAAAA,IAAI,GAAAC,wBAAA,CAAAhB,IAAA,EAAAiB,SAAA,CAAA,CAAA;AAIX,EAAA,IAAMC,OAAO,GAAGC,OAAO,CAACjB,MAAM,KAAA,IAAA,IAANA,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAANA,MAAM,CAAEkB,IAAI,CAAC,UAAAC,KAAA,EAAA;AAAA,IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,KAAA,EAAA,CAAA,CAAA;AAAEG,MAAAA,KAAK,GAAAF,KAAA,CAAA,CAAA,CAAA,CAAA;AAAA,IAAA,OAAME,KAAK,CAAA;AAAA,GAAA,CAAC,CAAC,CAAA;EAEzD,IAAMC,QAAQ,GAAGpB,KAAK,IAAIK,IAAI,KAAK,IAAI,IAAIN,MAAM,KAAK,gBAAgB,CAAA;EACtE,IAAMsB,WAAW,GAAGxB,MAAM,KAANA,IAAAA,IAAAA,MAAM,KAANA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAEyB,GAAG,CAAC,UAAAC,KAAA,EAAA;AAAA,IAAA,IAAAC,KAAA,GAAAN,cAAA,CAAAK,KAAA,EAAA,CAAA,CAAA;AAAIE,MAAAA,IAAI,GAAAD,KAAA,CAAA,CAAA,CAAA,CAAA;AAAA,IAAA,OAAMC,IAAI,CAAA;AAAA,GAAA,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAA;AAC9D,EAAA,IAAMC,UAAU,GAAGC,MAAM,CAAiB,IAAI,CAAC,CAAA;AAE/C,EAAA,IAAMC,gBAAgB,GAAG5B,MAAM,GAAGb,YAAY,GAAG0C,SAAS,CAAA;EAC1D,IAAMC,gBAAgB,GAAGX,QAAQ,IAAIP,OAAO,GAAG1B,YAAY,GAAG2C,SAAS,CAAA;AACvE,EAAA,IAAME,YAAY,GACdnB,OAAO,IAAIT,eAAe,KAAK,MAAM,IAAIL,MAAM,KAAK,gBAAgB,GAAGb,QAAQ,GAAG4C,SAAS,CAAA;EAE/F,IAAMG,WAAW,GAAGlC,MAAM,KAAK,gBAAgB,GAAGf,UAAU,GAAG8C,SAAS,CAAA;EAExE,IAAMI,cAAc,GAAG,CAACrB,OAAO,IAAKO,QAAQ,IAAIhB,eAAe,KAAK,OAAQ,CAAA;AAE5E,EAAA,IAAM+B,WAAW,GAAGC,WAAW,CAAC,UAACC,KAA0C,EAAK;IAC5EA,KAAK,CAACC,eAAe,EAAE,CAAA;GAC1B,EAAE,EAAE,CAAC,CAAA;EAEN,IAAMC,WAAW,GAAGH,WAAW,CAC3B,UAACjB,KAA2B,EAAEM,IAA0B,EAAEe,KAAa,EAAK;IACxE,IAAMC,QAAQ,GAAG5C,MAAM,KAANA,IAAAA,IAAAA,MAAM,KAANA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CACjB6C,MAAM,CAAC,UAAAC,KAAA,EAAA;AAAA,MAAA,IAAAC,KAAA,GAAA1B,cAAA,CAAAyB,KAAA,EAAA,CAAA,CAAA;AAAEE,QAAAA,SAAS,GAAAD,KAAA,CAAA,CAAA,CAAA;AAAEE,QAAAA,QAAQ,GAAAF,KAAA,CAAA,CAAA,CAAA,CAAA;MAAA,OAAM,EAAEC,SAAS,KAAK1B,KAAK,IAAI2B,QAAQ,KAAKrB,IAAI,CAAC,CAAA;AAAA,KAAA,CAAC,CAC/EH,GAAG,CAAC,UAAAyB,KAAA,EAAA;AAAA,MAAA,IAAAC,KAAA,GAAA9B,cAAA,CAAA6B,KAAA,EAAA,CAAA,CAAA;AAAEF,QAAAA,SAAS,GAAAG,KAAA,CAAA,CAAA,CAAA,CAAA;AAAA,MAAA,OAAMH,SAAS,CAAA;KAAC,CAAA,CAAA;AAEpCtC,IAAAA,SAAS,KAATA,IAAAA,IAAAA,SAAS,KAATA,KAAAA,CAAAA,IAAAA,SAAS,CAAE0C,OAAO,CAACC,MAAM,CAACV,KAAK,EAAE,CAAC,CAAC,CAAA;AACnChC,IAAAA,QAAQ,aAARA,QAAQ,KAAA,KAAA,CAAA,IAARA,QAAQ,CAAGiC,QAAQ,CAAC,CAAA;AACxB,GAAC,EACD,CAAC5C,MAAM,EAAEW,QAAQ,CACrB,CAAC,CAAA;AAED,EAAA,IAAM2C,aAAa,GAAGf,WAAW,CAC7B,UACIjB,KAA2B,EAC3BM,IAA0B,EAC1Be,KAAa,EACbH,KAA6C,EAC5C;AACD,IAAA,IAAQe,IAAI,GAAef,KAAK,CAAxBe,IAAI;MAAEC,QAAQ,GAAKhB,KAAK,CAAlBgB,QAAQ,CAAA;AAEtB,IAAA,IAAID,IAAI,KAAKE,IAAI,CAACC,GAAG,IAAKH,IAAI,KAAKE,IAAI,CAACC,GAAG,IAAIF,QAAS,EAAE;MACtDhB,KAAK,CAACmB,cAAc,EAAE,CAAA;AAC1B,KAAA;AAEA,IAAA,IAAIJ,IAAI,KAAKE,IAAI,CAACG,SAAS,EAAE;AACzBlB,MAAAA,WAAW,CAACpB,KAAK,EAAEM,IAAI,EAAEe,KAAK,CAAC,CAAA;AACnC,KAAA;AACJ,GAAC,EACD,CAACD,WAAW,CAChB,CAAC,CAAA;AAED,EAAA,IAAMmB,OAAO,GAAGtB,WAAW,CAAC,UAACC,KAA0C,EAAK;AACxE,IAAA,IAAQsB,MAAM,GAAKtB,KAAK,CAAhBsB,MAAM,CAAA;IAEd,IAAIhC,UAAU,CAACsB,OAAO,EAAE;MACpBtB,UAAU,CAACsB,OAAO,CAACW,UAAU,IAAIC,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,CAAA;AACvD,KAAA;GACH,EAAE,EAAE,CAAC,CAAA;EAEN,IAAMI,MAAM,GAAG3B,WAAW,CAAC,UAAC4B,OAAiC,EAAExB,KAAa,EAAK;AAC7E,IAAA,IAAIwB,OAAO,IAAIzD,SAAS,IAAIA,SAAS,CAAC0C,OAAO,EAAE;AAC3C1C,MAAAA,SAAS,CAAC0C,OAAO,CAACT,KAAK,CAAC,GAAGwB,OAAO,CAAA;AACtC,KAAA;GACH,EAAE,EAAE,CAAC,CAAA;;AAEN;AACA,EAAA,IAAIzD,SAAS,EAAE;IACXA,SAAS,CAAC0C,OAAO,GAAG,EAAE,CAAA;AAC1B,GAAA;EAEA,oBACIgB,KAAA,CAAAC,aAAA,CAACC,kBAAkB,EAAAC,QAAA,KACX1D,IAAI,EAAA;AACRd,IAAAA,GAAG,EAAEA,GAAI;AACTK,IAAAA,MAAM,EAAEA,MAAO;AACfF,IAAAA,MAAM,EAAEA,MAAO;AACfG,IAAAA,QAAQ,EAAEA,QAAS;AACnBC,IAAAA,QAAQ,EAAEA,QAAS;AACnBkE,IAAAA,KAAK,EAAEhD,WAAY;AACnB,IAAA,YAAA,EAAYrB,KAAM;IAClBsE,SAAS,EAAEC,EAAE,CAACxC,gBAAgB,EAAEC,YAAY,EAAEC,WAAW,EAAE5C,YAAY,CAAE;AACzEqE,IAAAA,OAAO,EAAEA,OAAQ;AACjBjD,IAAAA,SAAS,EAAEA,SAAU;AACrB+D,IAAAA,UAAU,EAAC,QAAA;AAAQ,GAAA,CAAA,EAElB3D,OAAO,KACHT,eAAe,KAAK,OAAO,IAAIL,MAAM,KAAK,aAAa,gBACpDkE,KAAA,CAAAC,aAAA,CAACO,UAAU,EAAA;AAACH,IAAAA,SAAS,EAAE/E,eAAAA;AAAgB,GAAA,EAAE8B,WAAwB,CAAC,gBAElE4C,KAAA,CAAAC,aAAA,CAACQ,kBAAkB,EAAA;AAAC9E,IAAAA,GAAG,EAAE+B,UAAAA;AAAW,GAAA,eAChCsC,KAAA,CAAAC,aAAA,CAACS,WAAW,QACP9E,MAAM,KAAA,IAAA,IAANA,MAAM,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAANA,MAAM,CAAEyB,GAAG,CAAC,UAAAsD,MAAA,EAAgBpC,KAAK,EAAA;AAAA,IAAA,IAAAqC,MAAA,GAAA3D,cAAA,CAAA0D,MAAA,EAAA,CAAA,CAAA;AAAnBzD,MAAAA,KAAK,GAAA0D,MAAA,CAAA,CAAA,CAAA;AAAEpD,MAAAA,IAAI,GAAAoD,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,IAAA,oBACtBZ,KAAA,CAAAC,aAAA,CAACY,UAAU,EAAA;AACPtC,MAAAA,KAAK,EAAEA,KAAM;MACb5C,GAAG,EAAE,SAAAA,GAAAA,CAACoE,OAAO,EAAA;AAAA,QAAA,OAAKD,MAAM,CAACC,OAAO,EAAExB,KAAK,CAAC,CAAA;OAAC;MACzCuC,GAAG,EAAA,EAAA,CAAAC,MAAA,CAAK7D,KAAK,OAAA6D,MAAA,CAAIvD,IAAI,CAAG;AACxBtB,MAAAA,QAAQ,EAAEA,QAAS;AACnBD,MAAAA,QAAQ,EAAEA,QAAS;AACnBiB,MAAAA,KAAK,EAAEA,KAAM;AACbM,MAAAA,IAAI,EAAEA,IAAK;AACXwD,MAAAA,OAAO,EAAE,SAAAA,OAACC,CAAAA,CAAC,EAAEC,CAAC,EAAA;AAAA,QAAA,OAAK5C,WAAW,CAAC2C,CAAC,EAAEC,CAAC,EAAE3C,KAAK,CAAC,CAAA;OAAC;AAC5C4C,MAAAA,OAAO,EAAEjD,WAAY;AACrB1B,MAAAA,SAAS,EAAE0C,aAAAA;AAAc,KAC5B,CAAC,CAAA;GACL,CACQ,CACG,CACvB,CAAC,EACLjB,cAAc,iBACX+B,KAAA,CAAAC,aAAA,CAACmB,WAAW,EAAA;AAACf,IAAAA,SAAS,EAAE9E,iBAAkB;AAAC8F,IAAAA,OAAO,EAAEhF,EAAAA;AAAG,GAAA,EAClDN,KACQ,CAChB,eACDiE,KAAA,CAAAC,aAAA,CAACqB,WAAW,EAAA;AAAClF,IAAAA,IAAI,EAAC,GAAG;AAACmF,IAAAA,KAAK,EAAC,SAAS;AAAClB,IAAAA,SAAS,EAAEC,EAAE,CAACjF,iBAAiB,EAAEuC,gBAAgB,CAAA;AAAE,GAAE,CAC3E,CAAC,CAAA;AAE7B,CACJ;;;;"}
{"version":3,"file":"Radiobox.styles.js","sources":["../../../src/components/Radiobox/Radiobox.styles.ts"],"sourcesContent":["import { styled } from '@linaria/react';\nimport { css } from '@linaria/core';\n\nimport { checkboxTokens } from '../Checkbox';\nimport { applyEllipsis, applyNoUserSelect } from '../../mixins';\n\nimport { classes, tokens } from './Radiobox.tokens';\n\n// NOTE: Необходимое переопределение токенов из компонента Checkbox т.к. используются его части\nconst mappingOverride = `\n    ${checkboxTokens.labelFontFamily}: var(${tokens.labelFontFamily});\n    ${checkboxTokens.labelFontSize}: var(${tokens.labelFontSize});\n    ${checkboxTokens.labelFontStyle}: var(${tokens.labelFontStyle});\n    ${checkboxTokens.labelFontWeight}: var(${tokens.labelFontWeight});\n    ${checkboxTokens.labelLetterSpacing}: var(${tokens.labelLetterSpacing});\n    ${checkboxTokens.labelLineHeight}: var(${tokens.labelLineHeight});\n    ${checkboxTokens.descriptionMarginTop}: var(${tokens.descriptionMarginTop});\n    ${checkboxTokens.descriptionFontFamily}: var(${tokens.descriptionFontFamily});\n    ${checkboxTokens.descriptionFontSize}: var(${tokens.descriptionFontSize});\n    ${checkboxTokens.descriptionFontStyle}: var(${tokens.descriptionFontStyle});\n    ${checkboxTokens.descriptionFontWeight}: var(${tokens.descriptionFontWeight});\n    ${checkboxTokens.descriptionLetterSpacing}: var(${tokens.descriptionLetterSpacing});\n    ${checkboxTokens.descriptionLineHeight}: var(${tokens.descriptionLineHeight});\n\n    ${checkboxTokens.fillColor}: var(${tokens.fillColor});\n    ${checkboxTokens.descriptionColor}: var(${tokens.descriptionColor});\n    ${checkboxTokens.triggerBorderColor}: var(${tokens.triggerBorderColor});\n\n    ${checkboxTokens.contentTopOffset}: var(${tokens.contentTopOffset});\n    ${checkboxTokens.contentLeftOffset}: var(${tokens.contentLeftOffset});\n    ${checkboxTokens.triggerSize}: var(${tokens.triggerSize});\n    ${checkboxTokens.triggerBorderRadius}: var(${tokens.triggerBorderRadius});\n    ${checkboxTokens.triggerMargin}: var(${tokens.triggerMargin});\n`;\n\nexport const StyledEllipse = styled.div`\n    width: var(${tokens.ellipseSize});\n    height: var(${tokens.ellipseSize});\n    border-radius: var(${tokens.ellipseSize});\n\n    background-color: var(${tokens.ellipseColor});\n    transition: transform 0.3s ease-in-out;\n    transform: scale(0);\n\n    input:checked + label & {\n        transform: scale(1);\n    }\n`;\n\nexport const base = css`\n    ${mappingOverride};\n\n    margin: var(${tokens.margin});\n\n    ${applyNoUserSelect()};\n\n    position: relative;\n    align-items: flex-start;\n    display: flex;\n    cursor: pointer;\n\n    .${classes.singleLine} {\n        ${applyEllipsis()};\n    }\n`;\n"],"names":["StyledEllipse","styled","name","class","propsAsIs","base"],"mappings":";;AAQA;;AA2BO,IAAMA,aAAa,gBAAGC,MAAM,CAAA,KAAA,CAAA,CAAA;AAAAC,EAAAA,IAAA,EAAA,eAAA;AAAAC,EAAAA,OAAAA,EAAA,UAAA;AAAAC,EAAAA,SAAA,EAAA,KAAA;AAAA,CAYlC,EAAA;AAEM,IAAMC,IAAI,GAehB;;;;"}
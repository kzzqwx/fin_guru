import './Tooltip_aay375.css';
import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useState, useEffect } from 'react';
import { styled } from '@linaria/react';
import '@linaria/core';
import { component } from '../../engines/common.js';
import { popoverConfig } from '../Popover/Popover.js';
import { cx } from '../../utils/index.js';
import { TooltipRoot, StyledContentLeft } from './Tooltip.styles.js';
import { base } from './variations/_view/base.js';
import { base as base$1 } from './variations/_size/base.js';
import { classes } from './Tooltip.tokens.js';

var _excluded = ["id", "text", "isOpen", "isVisible", "hasArrow", "arrow", "animated", "offset", "minWidth", "maxWidth", "placement", "usePortal", "target", "children", "onDismiss", "view", "size", "contentLeft", "zIndex", "className"];
var ESCAPE_KEYCODE = 27;
var getStringValue = function getStringValue(value) {
  return typeof value === 'number' ? "".concat(value, "rem") : value;
};
var Popover = /*#__PURE__*/component(popoverConfig);
var _exp = function _exp() {
  return Popover;
};
var StyledPopover = /*#__PURE__*/styled(_exp())({
  name: "StyledPopover",
  "class": "s1cz8cv8",
  propsAsIs: true
});

/**
 * Компонент для текстовых подсказок. Основное предназначение — подписи к блокам.
 */

var tooltipRoot = function tooltipRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRef) {
    var id = _ref.id,
      text = _ref.text,
      isOpen = _ref.isOpen,
      isVisible = _ref.isVisible,
      _ref$hasArrow = _ref.hasArrow,
      hasArrow = _ref$hasArrow === void 0 ? true : _ref$hasArrow,
      arrow = _ref.arrow,
      animated = _ref.animated,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 8] : _ref$offset,
      minWidth = _ref.minWidth,
      maxWidth = _ref.maxWidth,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$usePortal = _ref.usePortal,
      usePortal = _ref$usePortal === void 0 ? true : _ref$usePortal,
      target = _ref.target,
      children = _ref.children,
      onDismiss = _ref.onDismiss,
      view = _ref.view,
      size = _ref.size,
      contentLeft = _ref.contentLeft,
      _ref$zIndex = _ref.zIndex,
      zIndex = _ref$zIndex === void 0 ? '9200' : _ref$zIndex,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      ref = _useState2[0],
      setRef = _useState2[1];

    // TODO убрать после отказа от старого API
    var innerIsOpen = isVisible || isOpen;
    var innerHasArrow = arrow || hasArrow;
    var showTooltip = innerIsOpen && Boolean(text === null || text === void 0 ? void 0 : text.length);
    var animatedClass = animated ? classes.animated : undefined;
    useEffect(function () {
      var onKeyDown = function onKeyDown(event) {
        if (event.keyCode === ESCAPE_KEYCODE) {
          onDismiss === null || onDismiss === void 0 || onDismiss();
        }
      };
      window.addEventListener('keydown', onKeyDown);
      return function () {
        window.removeEventListener('keydown', onKeyDown);
      };
    }, []);
    var withContentLeft = contentLeft ? classes.hasContentLeft : undefined;
    return /*#__PURE__*/React.createElement(StyledPopover, _extends({
      isOpen: showTooltip,
      placement: placement,
      offset: offset,
      zIndex: zIndex,
      target: target || children,
      usePortal: usePortal,
      hasArrow: innerHasArrow,
      "aria-hidden": !innerIsOpen,
      "aria-live": "polite",
      role: "tooltip",
      className: cx(ref === null || ref === void 0 ? void 0 : ref.classList.toString(), animatedClass, className)
      // INFO: Прокидываем стили для Popover из Root Tooltip-а
    }, rest), /*#__PURE__*/React.createElement(Root, {
      view: view,
      size: size,
      ref: setRef
    }, /*#__PURE__*/React.createElement(TooltipRoot, {
      ref: outerRef,
      id: id,
      className: cx(withContentLeft),
      maxWidth: getStringValue(maxWidth),
      minWidth: getStringValue(minWidth)
    }, contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), text)));
  });
};
var tooltipConfig = {
  name: 'Tooltip',
  tag: 'div',
  layout: tooltipRoot,
  base: '',
  variations: {
    view: {
      css: base
    },
    size: {
      css: base$1
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};

export { tooltipConfig, tooltipRoot };
//# sourceMappingURL=Tooltip.js.map

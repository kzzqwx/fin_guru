{"version":3,"file":"Handler.js","sources":["../../../../../src/components/Slider/ui/Handler/Handler.tsx"],"sourcesContent":["import React, { useRef, forwardRef, KeyboardEvent } from 'react';\nimport Draggable, { DraggableEventHandler } from 'react-draggable';\nimport type { DraggableData } from 'react-draggable';\n\nimport { getSliderThumbValue, getOffsets } from '../../utils';\nimport { Thumb } from '../Thumb/Thumb';\n\nimport type { HandlerProps } from './Handler.types';\nimport { HandlerStyled, StyledValue } from './Handler.styles';\n\n// TODO: PLASMA-1707\ndeclare module 'react-draggable' {\n    export interface DraggableProps {\n        children: React.ReactNode;\n    }\n}\n\nconst KeyboardSupport = {\n    PageUp: 33,\n    PageDown: 34,\n    End: 35,\n    Home: 36,\n    ArrowLeft: 37,\n    ArrowUp: 38,\n    ArrowRight: 39,\n    ArrowDown: 40,\n};\n\nexport const Handler = forwardRef<HTMLDivElement, HandlerProps>(\n    (\n        {\n            stepSize,\n            onChangeCommitted,\n            onChange,\n            xPosition = 0,\n            min,\n            max,\n            bounds = [],\n            zIndex,\n            disabled,\n            side,\n            showCurrentValue = false,\n            startOffset = 0,\n            endOffset = 0,\n            value,\n            ...rest\n        },\n        ref,\n    ) => {\n        const lastOnChangeValue = useRef<number>();\n\n        const [offsetLeft, offsetRight] = getOffsets(ref, side);\n\n        const [leftValueBound, rightValueBound] = bounds;\n        const leftPositionBound = leftValueBound ? (leftValueBound - min) * stepSize : null;\n        const rightPositionBound = rightValueBound ? (rightValueBound - min) * stepSize : null;\n\n        const position = typeof xPosition === 'number' ? { x: xPosition, y: 0 } : undefined;\n        const tabIndex = disabled ? -1 : 0;\n\n        const computedBounds = {\n            left: (leftPositionBound ?? 0) - (offsetLeft ? stepSize : 0),\n            right: (rightPositionBound ?? stepSize * (max - min)) - (offsetRight ? stepSize : 0),\n        };\n\n        console.log(computedBounds);\n\n        const showCurrentValueCondition =\n            showCurrentValue &&\n            ((xPosition >= startOffset && xPosition <= max * stepSize - endOffset) || (xPosition === 0 && value !== 0));\n\n        const onDrag: DraggableEventHandler = (_, data) => {\n            const newValue = getSliderThumbValue(data.x, stepSize, min, max);\n            if (lastOnChangeValue.current !== newValue) {\n                onChange?.(newValue, data);\n                lastOnChangeValue.current = newValue;\n            }\n        };\n\n        const onStop: DraggableEventHandler = (_, data) => {\n            const newValue = getSliderThumbValue(data.x, stepSize, min, max);\n            onChangeCommitted && onChangeCommitted(newValue, data);\n        };\n\n        const onKeyPress = (event: KeyboardEvent<HTMLDivElement>) => {\n            event.persist();\n\n            const { keyCode, target } = event;\n\n            if (!Object.values(KeyboardSupport).includes(keyCode)) {\n                return;\n            }\n\n            const { ArrowUp, ArrowRight, ArrowDown, ArrowLeft, Home, End, PageDown, PageUp } = KeyboardSupport;\n\n            const computedMultipleSteps = stepSize * ((rest.multipleStepSize / 100) * max);\n\n            const data: DraggableData = {\n                x: 0,\n                deltaX: stepSize,\n                lastX: xPosition,\n                y: 0,\n                deltaY: 0,\n                lastY: 0,\n                node: target as HTMLDivElement,\n            };\n\n            switch (keyCode) {\n                case ArrowUp:\n                case ArrowRight:\n                    data.x = xPosition + stepSize;\n                    break;\n                case ArrowDown:\n                case ArrowLeft:\n                    data.x = xPosition - stepSize;\n                    data.deltaX = -stepSize;\n                    break;\n                case PageUp:\n                    data.x = xPosition + computedMultipleSteps;\n                    data.deltaX = computedMultipleSteps;\n                    break;\n                case PageDown:\n                    data.x = xPosition - computedMultipleSteps;\n                    data.deltaX = -computedMultipleSteps;\n                    break;\n                case End:\n                    data.x = max * stepSize;\n                    break;\n                case Home:\n                    data.x = 0;\n                    break;\n                default:\n                    data.x = 0;\n            }\n\n            const { left, right } = computedBounds;\n\n            /*\n             * INFO: Находим значение в диапазоне между указанными левой и правой границами.\n             * Необходимо для правильного расчета положения SliderThumb.\n             * см. функция clamp\n             */\n            const boundedValue = Math.max(Math.min(right, data.x), left);\n\n            const computedValue = getSliderThumbValue(boundedValue, stepSize, min, max);\n            lastOnChangeValue.current = computedValue;\n\n            onChangeCommitted && onChangeCommitted(computedValue, data);\n        };\n\n        return (\n            <Draggable\n                axis=\"x\"\n                bounds={computedBounds}\n                grid={[stepSize, 1]}\n                onStop={onStop}\n                onDrag={onDrag}\n                position={position}\n                disabled={disabled}\n            >\n                <HandlerStyled ref={ref} style={{ zIndex }} onKeyDown={onKeyPress}>\n                    <Thumb tabIndex={tabIndex} min={min} max={max} value={value} disabled={disabled} {...rest} />\n                    {showCurrentValueCondition && <StyledValue>{value}</StyledValue>}\n                </HandlerStyled>\n            </Draggable>\n        );\n    },\n);\n"],"names":["KeyboardSupport","PageUp","PageDown","End","Home","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Handler","forwardRef","_ref","ref","stepSize","onChangeCommitted","onChange","_ref$xPosition","xPosition","min","max","_ref$bounds","bounds","zIndex","disabled","side","_ref$showCurrentValue","showCurrentValue","_ref$startOffset","startOffset","_ref$endOffset","endOffset","value","rest","_objectWithoutProperties","_excluded","lastOnChangeValue","useRef","_getOffsets","getOffsets","_getOffsets2","_slicedToArray","offsetLeft","offsetRight","_bounds","leftValueBound","rightValueBound","leftPositionBound","rightPositionBound","position","x","y","undefined","tabIndex","computedBounds","left","right","console","log","showCurrentValueCondition","onDrag","_","data","newValue","getSliderThumbValue","current","onStop","onKeyPress","event","persist","keyCode","target","Object","values","includes","computedMultipleSteps","multipleStepSize","deltaX","lastX","deltaY","lastY","node","boundedValue","Math","computedValue","React","createElement","Draggable","axis","grid","HandlerStyled","style","onKeyDown","Thumb","_extends","StyledValue"],"mappings":"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"}
import { objectWithoutProperties as _objectWithoutProperties, extends as _extends, objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef } from 'react';
import { cx } from '../../utils/index.js';
import { base } from './variations/_view/base.js';
import { base as base$1 } from './variations/_size/base.js';
import { base as base$2 } from './variations/_orientation/base.js';
import { classes } from './Divider.tokens.js';
import { getSizeValueFromProp } from '../../utils/getSizeValueFromProp.js';

var _excluded = ["view", "className", "style", "orientation", "length"];
var dividerRoot = function dividerRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, ref) {
    var view = _ref.view,
      className = _ref.className,
      style = _ref.style,
      _ref$orientation = _ref.orientation,
      orientation = _ref$orientation === void 0 ? 'horizontal' : _ref$orientation,
      _ref$length = _ref.length,
      length = _ref$length === void 0 ? '100%' : _ref$length,
      rest = _objectWithoutProperties(_ref, _excluded);
    var orientationClass = classes[orientation];
    var scaleToken = {
      '--plasma_private-divider-scale': getSizeValueFromProp(length, '%')
    };
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      className: cx(orientationClass, classes.divider, className),
      orientation: orientation,
      view: view,
      style: _objectSpread2(_objectSpread2({}, style), scaleToken)
    }, rest));
  });
};
var dividerConfig = {
  name: 'Divider',
  tag: 'div',
  layout: dividerRoot,
  base: '',
  variations: {
    view: {
      css: base
    },
    size: {
      css: base$1
    },
    orientation: {
      css: base$2
    }
  },
  defaults: {
    view: 'default',
    size: 'm',
    orientation: 'horizontal'
  }
};

export { dividerConfig, dividerRoot };
//# sourceMappingURL=Divider.js.map

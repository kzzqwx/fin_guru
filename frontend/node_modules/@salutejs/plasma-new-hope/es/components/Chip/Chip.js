import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useMemo } from 'react';
import { IconClose } from '../_Icon/Icons/IconClose.js';
import { cx } from '../../utils/index.js';
import { base as base$1 } from './variations/_view/base.js';
import { base as base$2 } from './variations/_size/base.js';
import { base as base$3 } from './variations/_disabled/base.js';
import { base as base$4 } from './variations/_readonly/base.js';
import { base as base$5 } from './variations/_focused/base.js';
import { base as base$6 } from './variations/_pilled/base.js';
import { StyledContentClear, StyledContentLeft, StyledContentMain, StyledContentRight, base } from './Chip.styles.js';
import { tokens, classes } from './Chip.tokens.js';

var _excluded = ["children", "text", "contentLeft", "contentRight", "contentClearButton", "size", "className", "onClear", "onClick", "pilled", "readOnly", "disabled"];
var chipRoot = function chipRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var children = props.children,
      text = props.text,
      contentLeft = props.contentLeft,
      contentRight = props.contentRight,
      contentClearButton = props.contentClearButton,
      size = props.size,
      className = props.className,
      onClear = props.onClear,
      onClick = props.onClick,
      _props$pilled = props.pilled,
      pilled = _props$pilled === void 0 ? false : _props$pilled,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      rest = _objectWithoutProperties(props, _excluded);
    var txt = !text && typeof children === 'string' ? children : text;
    var pilledClass = pilled ? classes.pilled : undefined;
    var handleClick = function handleClick(event) {
      if (disabled || readOnly) {
        return;
      }
      onClick === null || onClick === void 0 || onClick(event);
      onClear === null || onClear === void 0 || onClear();
    };
    var ClearContent = useMemo(function () {
      return contentClearButton || /*#__PURE__*/React.createElement(StyledContentClear, null, /*#__PURE__*/React.createElement(IconClose, {
        sizeCustomProperty: tokens.closeIconSize,
        color: "inherit"
      }));
    }, [contentClearButton, tokens.closeIconSize]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      type: "button",
      ref: ref,
      className: cx(pilledClass, className),
      tabIndex: readOnly ? -1 : 0,
      onClick: handleClick,
      disabled: disabled,
      pilled: pilled,
      readOnly: !disabled && readOnly,
      size: size
    }, rest), contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), txt ? /*#__PURE__*/React.createElement(StyledContentMain, null, txt) : children, contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight), ClearContent);
  });
};
var chipConfig = {
  name: 'Chip',
  tag: 'button',
  layout: chipRoot,
  base: base,
  variations: {
    view: {
      css: base$1
    },
    size: {
      css: base$2
    },
    disabled: {
      css: base$3,
      attrs: true
    },
    readOnly: {
      css: base$4,
      attrs: true
    },
    focused: {
      css: base$5
    },
    pilled: {
      css: base$6,
      attrs: true
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};

export { chipConfig, chipRoot };
//# sourceMappingURL=Chip.js.map

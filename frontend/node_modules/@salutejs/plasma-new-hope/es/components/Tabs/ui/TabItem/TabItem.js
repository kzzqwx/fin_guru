import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useRef, useContext, useEffect, useCallback } from 'react';
import { useForkRef } from '@salutejs/plasma-core';
import { classes } from '../../tokens.js';
import { cx } from '../../../../utils/index.js';
import { TabsContext } from '../../TabsContext.js';
import { base as base$2 } from './variations/_view/base.js';
import { base as base$1 } from './variations/_size/base.js';
import { base as base$4 } from './variations/_pilled/base.js';
import { base as base$3 } from './variations/_disabled/base.js';
import { LeftContent, StyledContent, RightContent, base } from './TabItem.styles.js';

var _excluded = ["size", "view", "isActive", "selected", "disabled", "pilled", "children", "contentLeft", "contentRight", "animated", "onIndexChange", "itemIndex", "tabIndex", "className"];
var tabItemRoot = function tabItemRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, outerRef) {
    var size = props.size,
      view = props.view,
      isActive = props.isActive,
      selected = props.selected,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$pilled = props.pilled,
      pilled = _props$pilled === void 0 ? false : _props$pilled,
      children = props.children,
      contentLeft = props.contentLeft,
      contentRight = props.contentRight,
      _props$animated = props.animated,
      animated = _props$animated === void 0 ? true : _props$animated,
      onIndexChange = props.onIndexChange,
      itemIndex = props.itemIndex,
      tabIndex = props.tabIndex,
      className = props.className,
      rest = _objectWithoutProperties(props, _excluded);
    var innerRef = useRef(null);
    var ref = useForkRef(outerRef, innerRef);
    var refs = useContext(TabsContext);
    var role = 'tab';
    var pilledAttr = view !== 'clear' && pilled;
    var animatedClass = animated ? classes.tabItemAnimated : undefined;
    var pilledClass = pilledAttr ? classes.tabsPilled : undefined;
    var selectedClass = isActive || selected ? classes.selectedTabsItem : undefined;
    var hasKeyNavigation = itemIndex !== undefined && onIndexChange !== undefined;
    var navigationTabIndex = !disabled && (refs === null || refs === void 0 ? void 0 : refs.current) === itemIndex ? 0 : -1;
    useEffect(function () {
      if (!refs) {
        return;
      }
      refs.register(innerRef);
      return function () {
        return refs.unregister(innerRef);
      };
    }, [refs]);
    var onItemFocus = useCallback(function (event) {
      if (!hasKeyNavigation && innerRef !== null && innerRef !== void 0 && innerRef.current) {
        innerRef.current.scrollTo({
          top: 0,
          left: innerRef.current.offsetLeft,
          behavior: 'smooth'
        });
        return;
      }
      if (disabled || !refs) {
        return;
      }
      var focusIndex = refs.items.findIndex(function (itemRef) {
        return itemRef.current === event.target;
      });
      if (focusIndex === refs.current) {
        return;
      }
      onIndexChange === null || onIndexChange === void 0 || onIndexChange(focusIndex);
      refs.setCurrent(focusIndex);
    }, [refs, innerRef, onIndexChange, disabled]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      disabled: disabled,
      pilled: pilled,
      role: role,
      view: view,
      size: size,
      onFocus: onItemFocus,
      tabIndex: hasKeyNavigation ? navigationTabIndex : tabIndex,
      className: cx(pilledClass, selectedClass, animatedClass, className)
    }, rest), /*#__PURE__*/React.createElement(React.Fragment, null, contentLeft && /*#__PURE__*/React.createElement(LeftContent, {
      className: classes.tabLeftContent
    }, contentLeft), /*#__PURE__*/React.createElement(StyledContent, {
      className: classes.tabContent
    }, children), contentRight && /*#__PURE__*/React.createElement(RightContent, {
      className: classes.tabRightContent
    }, contentRight)));
  });
};
var tabItemConfig = {
  name: 'TabItem',
  tag: 'button',
  layout: tabItemRoot,
  base: base,
  variations: {
    size: {
      css: base$1
    },
    view: {
      css: base$2
    },
    disabled: {
      css: base$3,
      attrs: true
    },
    pilled: {
      css: base$4
    }
  },
  defaults: {
    view: 'default'
  }
};

export { tabItemConfig, tabItemRoot };
//# sourceMappingURL=TabItem.js.map

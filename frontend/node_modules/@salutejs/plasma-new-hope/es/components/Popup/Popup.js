import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useRef, useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import { safeUseId, useForkRef } from '@salutejs/plasma-core';
import { cx } from '../../utils/index.js';
import { POPUP_PORTAL_ID } from './PopupContext.js';
import { PopupRoot } from './PopupRoot.js';
import { usePopup } from './hooks/usePopup.js';
import { classes } from './Popup.tokens.js';

var _excluded = ["id", "isOpen", "placement", "offset", "frame", "children", "overlay", "role", "zIndex", "popupInfo", "withAnimation", "className"];
var handlePosition = function handlePosition(placement, offset) {
  var x = '0rem';
  var y = '0rem';
  if (offset) {
    var _offset = _slicedToArray(offset, 2),
      _x = _offset[0],
      _y = _offset[1];
    x = typeof _x === 'number' ? "".concat(_x, "rem") : _x;
    y = typeof _y === 'number' ? "".concat(_y, "rem") : _y;
  }
  if (!placement || placement === 'center') {
    return {
      left: "calc(50% + ".concat(x, ")"),
      top: "calc(50% - ".concat(y, ")"),
      transform: 'translate(-50%, -50%)'
    };
  }
  var left;
  var right;
  var top;
  var bottom;
  var transform;
  var placements = placement.split('-');
  placements.forEach(function (placement) {
    switch (placement) {
      case 'left':
        left = x;
        break;
      case 'right':
        right = x;
        break;
      case 'top':
        top = y;
        break;
      case 'bottom':
        bottom = y;
        break;
    }
  });
  var isCenteredX = left === undefined && right === undefined;
  var isCenteredY = top === undefined && bottom === undefined;
  if (isCenteredX) {
    transform = 'translateX(-50%)';
  }
  if (isCenteredY) {
    transform = 'translateY(-50%)';
  }
  return {
    left: isCenteredX ? "calc(50% + ".concat(x, ")") : left,
    right: right,
    top: isCenteredY ? "calc(50% - ".concat(y, ")") : top,
    bottom: bottom,
    transform: transform
  };
};

/**
 * Базовый копмонент Popup.
 */
var popupRoot = function popupRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var id = _ref.id,
      _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'center' : _ref$placement,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
      _ref$frame = _ref.frame,
      frame = _ref$frame === void 0 ? 'document' : _ref$frame,
      children = _ref.children,
      overlay = _ref.overlay,
      zIndex = _ref.zIndex,
      popupInfo = _ref.popupInfo,
      _ref$withAnimation = _ref.withAnimation,
      withAnimation = _ref$withAnimation === void 0 ? false : _ref$withAnimation,
      className = _ref.className,
      rest = _objectWithoutProperties(_ref, _excluded);
    var uniqId = safeUseId();
    var innerId = id || uniqId;
    var _usePopup = usePopup({
        isOpen: isOpen,
        id: innerId,
        popupInfo: popupInfo,
        withAnimation: withAnimation
      }),
      isVisible = _usePopup.isVisible,
      animationInfo = _usePopup.animationInfo,
      setVisible = _usePopup.setVisible;
    var portalRef = useRef(null);
    var contentRef = useRef(null);
    var innerRef = useForkRef(contentRef, outerRootRef);
    var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      forceRender = _useState2[1];
    useEffect(function () {
      var portal = document.getElementById(POPUP_PORTAL_ID);
      if (typeof frame !== 'string' && frame && frame.current) {
        portal = frame.current;
      }
      if (!portal) {
        portal = document.createElement('div');
        portal.setAttribute('id', POPUP_PORTAL_ID);
        /**
         * Нужно для того, чтобы во фрейме не происходило скачков контента
         * при анимации через transform, если есть элемент с шириной/высотой в 100% (Overlay)
         */
        portal.style.width = '0';
        if (typeof frame === 'string' && frame !== 'document') {
          var _document$getElementB;
          (_document$getElementB = document.getElementById(frame)) === null || _document$getElementB === void 0 || _document$getElementB.appendChild(portal);
        } else {
          document.body.appendChild(portal);
        }
      }
      portalRef.current = portal;

      /**
       * Изменение стейта нужно для того, чтобы Popup
       * отобразился после записи DOM элемента в portalRef.current
       */
      forceRender(true);
    }, []);
    if (!isVisible && !isOpen) {
      return null;
    }
    var cls = cx(className, animationInfo !== null && animationInfo !== void 0 && animationInfo.endAnimation ? classes.endAnimation : '', animationInfo !== null && animationInfo !== void 0 && animationInfo.endTransition ? classes.endTransition : '');
    return /*#__PURE__*/React.createElement(React.Fragment, null, portalRef.current && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(Root, _extends({
      className: cls
    }, rest), overlay, /*#__PURE__*/React.createElement(PopupRoot, {
      id: innerId,
      ref: innerRef,
      position: handlePosition(placement, offset),
      frame: frame,
      zIndex: zIndex,
      animationInfo: animationInfo,
      setVisible: setVisible
    }, children)), portalRef.current));
  });
};
var popupConfig = {
  name: 'Popup',
  tag: 'div',
  layout: popupRoot,
  base: '',
  variations: {},
  defaults: {}
};

export { handlePosition, popupConfig, popupRoot };
//# sourceMappingURL=Popup.js.map

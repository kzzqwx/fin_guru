import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useState, Children, useCallback, useMemo, useEffect } from 'react';
import { safeUseId, useCarousel } from '@salutejs/plasma-core';
import { IconDisclosureLeft } from '../../../_Icon/Icons/IconDisclosureLeft.js';
import { IconDisclosureRight } from '../../../_Icon/Icons/IconDisclosureRight.js';
import '@linaria/react';
import { tokens, classes } from '../../tokens.js';
import { cx } from '../../../../utils/index.js';
import { useSegmentInner } from '../../SegmentProvider/SegmentProvider.js';
import { base as base$1 } from './variations/_size/base.js';
import { base as base$2 } from './variations/_view/base.js';
import { base as base$3 } from './variations/_disabled/base.js';
import { base as base$4 } from './variations/_pilled/base.js';
import { base as base$6 } from './variations/_filledBackgound/base.js';
import { base as base$5 } from './variations/_stretch/base.js';
import { StyledArrow, StyledContentWrapper, StyledContent, base } from './SegmentGroup.styles.js';

var _excluded = ["id", "selectionMode", "pilled", "stretch", "filledBackground", "disabled", "size", "view", "children"];
var segmentGroupRoot = function segmentGroupRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, outerRef) {
    var id = props.id,
      selectionMode = props.selectionMode,
      pilled = props.pilled,
      stretch = props.stretch,
      _props$filledBackgrou = props.filledBackground,
      filledBackground = _props$filledBackgrou === void 0 ? false : _props$filledBackgrou,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      size = props.size,
      view = props.view,
      children = props.children,
      rest = _objectWithoutProperties(props, _excluded);
    var _useSegmentInner = useSegmentInner(),
      setSelectionMode = _useSegmentInner.setSelectionMode,
      setDisabledGroup = _useSegmentInner.setDisabledGroup;
    var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      index = _useState2[0],
      setIndex = _useState2[1];
    var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      firstItemVisible = _useState4[0],
      setFirstItemVisible = _useState4[1];
    var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      lastItemVisible = _useState6[0],
      setLastItemVisible = _useState6[1];
    var uniqId = safeUseId();
    var segmentGroupId = id || uniqId;
    var pilledAttr = view !== 'clear' && pilled;
    var filledBackgroundAttr = view !== 'clear' && filledBackground;
    var pilledClass = pilledAttr ? classes.segmentPilled : undefined;
    var filledClass = filledBackgroundAttr ? classes.segmentGroupFilledBackground : undefined;
    var stretchClass = firstItemVisible && lastItemVisible && stretch ? classes.segmentStretch : undefined;
    var items = (Children === null || Children === void 0 ? void 0 : Children.map(children, function (child) {
      return child;
    })) || [];
    var onPrev = useCallback(function () {
      !disabled && setIndex(function (prevIndex) {
        return prevIndex > 0 ? prevIndex - 1 : 0;
      });
    }, [disabled]);
    var onNext = useCallback(function () {
      !disabled && setIndex(function (prevIndex) {
        return prevIndex < items.length - 1 ? prevIndex + 1 : prevIndex;
      });
    }, [disabled]);
    var onIntersecting = function onIntersecting(setVisible) {
      return function (entries) {
        /*
         * Пробегаемся по элементам на которых есть слушатель события появления.
         * Если элемент находится в зоне видимости или выходит из нее, меняем значение флага видимости
         */
        entries.forEach(function (entry) {
          if (entry.isIntersecting) {
            setVisible(true);
          } else {
            setVisible(false);
          }
        });
      };
    };
    var _useCarousel = useCarousel({
        index: index,
        axis: 'x',
        scrollAlign: 'start',
        detectActive: true,
        debounceMs: 250,
        onIndexChange: setIndex
      }),
      scrollRef = _useCarousel.scrollRef,
      trackRef = _useCarousel.trackRef;
    var PreviousButton = useMemo(function () {
      return /*#__PURE__*/React.createElement(StyledArrow, {
        type: "button",
        "aria-label": "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u0441\u0435\u0433\u043C\u0435\u043D\u0442",
        onClick: onPrev,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled
      }, /*#__PURE__*/React.createElement(IconDisclosureLeft, {
        color: "var(".concat(tokens.arrowColor, ")")
      }));
    }, [onPrev]);
    var NextButton = useMemo(function () {
      return /*#__PURE__*/React.createElement(StyledArrow, {
        type: "button",
        "aria-label": "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u0441\u0435\u0433\u043C\u0435\u043D\u0442",
        onClick: onNext,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled
      }, /*#__PURE__*/React.createElement(IconDisclosureRight, {
        color: "var(".concat(tokens.arrowColor, ")")
      }));
    }, [onNext]);
    useEffect(function () {
      selectionMode && setSelectionMode(selectionMode);
      setDisabledGroup(disabled);
    }, [selectionMode, disabled]);
    useEffect(function () {
      var _trackRef$current;
      // Intersection observer для первого сегмента
      var observeFirstItem = new IntersectionObserver(onIntersecting(setFirstItemVisible), {
        root: null,
        rootMargin: '0px',
        threshold: 0.5
      });

      // Intersection observer для последнего сегмента
      var observeLastItem = new IntersectionObserver(onIntersecting(setLastItemVisible), {
        root: null,
        rootMargin: '0px',
        threshold: 0.5
      });

      // получаем список сегментов внутри SegmentGroup
      var childrenArray = Array.from(((_trackRef$current = trackRef.current) === null || _trackRef$current === void 0 ? void 0 : _trackRef$current.children) || []);
      if (childrenArray.length) {
        // подписываемся на событие появление внутри SegmentGroup
        observeFirstItem.observe(childrenArray[0]);
        observeLastItem.observe(childrenArray[childrenArray.length - 1]);
      }
      return function () {
        // отписываемся от события появления внутри SegmentGroup
        observeFirstItem.disconnect();
        observeLastItem.disconnect();
      };
    }, [children]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      view: view,
      size: size,
      id: segmentGroupId,
      ref: outerRef,
      filledBackground: filledBackgroundAttr,
      disabled: disabled,
      pilled: pilledAttr,
      className: cx(pilledClass, filledClass, stretchClass)
    }, rest), !firstItemVisible && PreviousButton, /*#__PURE__*/React.createElement(StyledContentWrapper, {
      ref: scrollRef
    }, /*#__PURE__*/React.createElement(StyledContent, {
      ref: trackRef
    }, children)), !lastItemVisible && NextButton);
  });
};
var segmentGroupConfig = {
  name: 'SegmentGroup',
  tag: 'div',
  layout: segmentGroupRoot,
  base: base,
  variations: {
    size: {
      css: base$1
    },
    view: {
      css: base$2
    },
    disabled: {
      css: base$3,
      attrs: true
    },
    pilled: {
      css: base$4,
      attrs: true
    },
    stretch: {
      css: base$5,
      attrs: true
    },
    filledBackground: {
      css: base$6,
      attrs: true
    }
  },
  defaults: {
    view: 'clear',
    size: 'xs'
  }
};

export { segmentGroupConfig, segmentGroupRoot };
//# sourceMappingURL=SegmentGroup.js.map

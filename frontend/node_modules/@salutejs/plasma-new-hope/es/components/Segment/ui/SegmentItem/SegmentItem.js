import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useMemo, useCallback } from 'react';
import { safeUseId } from '@salutejs/plasma-core';
import { cx } from '../../../../utils/index.js';
import { classes } from '../../tokens.js';
import { useSegmentInner } from '../../SegmentProvider/SegmentProvider.js';
import { base as base$1 } from './variations/_size/base.js';
import { base as base$2 } from './variations/_view/base.js';
import { base as base$3 } from './variations/_disabled/base.js';
import { base as base$4 } from './variations/_pilled/base.js';
import { StyledContent, base } from './SegmentItem.styles.js';
import { extractTextFrom } from '../../../../utils/extractTextFrom.js';

var _excluded = ["size", "view", "id", "label", "value", "pilled", "customHandleSelect", "aria-label"];
var segmentItemRoot = function segmentItemRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, outerRef) {
    var size = props.size,
      view = props.view,
      id = props.id,
      label = props.label,
      value = props.value,
      pilled = props.pilled,
      customHandleSelect = props.customHandleSelect,
      ariaLabelExternal = props['aria-label'],
      rest = _objectWithoutProperties(props, _excluded);
    var _useSegmentInner = useSegmentInner(),
      selectionMode = _useSegmentInner.selectionMode,
      disabledGroup = _useSegmentInner.disabledGroup,
      handleSelect = _useSegmentInner.handleSelect,
      selectedSegmentItems = _useSegmentInner.selectedSegmentItems;
    var uniqId = safeUseId();
    var segmentId = id || "label-".concat(uniqId);
    var ariaLabelDefault = useMemo(function () {
      return extractTextFrom(label);
    }, [label]);
    var pilledAttr = view !== 'clear' && pilled;
    var pilledClass = pilledAttr ? classes.segmentPilled : undefined;
    var isSelected = selectedSegmentItems === null || selectedSegmentItems === void 0 ? void 0 : selectedSegmentItems.includes(value || ariaLabelDefault);
    var selectedClass = isSelected ? classes.selectedSegmentItem : undefined;
    var handleSelectSegment = useCallback(function (event) {
      if (disabledGroup) {
        return;
      }
      customHandleSelect === null || customHandleSelect === void 0 || customHandleSelect(event);
      handleSelect === null || handleSelect === void 0 || handleSelect(value || ariaLabelDefault);
    }, [selectionMode]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      view: view,
      size: size,
      id: segmentId,
      ref: outerRef,
      "aria-label": ariaLabelExternal || ariaLabelDefault,
      value: value,
      pilled: pilledAttr,
      className: cx(selectedClass, pilledClass),
      onClick: handleSelectSegment,
      tabIndex: disabledGroup ? -1 : 0,
      disabled: disabledGroup
    }, rest), /*#__PURE__*/React.createElement(StyledContent, null, label || value));
  });
};
var segmentItemConfig = {
  name: 'SegmentItem',
  tag: 'button',
  layout: segmentItemRoot,
  base: base,
  variations: {
    size: {
      css: base$1
    },
    view: {
      css: base$2
    },
    disabled: {
      css: base$3,
      attrs: true
    },
    pilled: {
      css: base$4,
      attrs: true
    }
  },
  defaults: {
    view: 'clear',
    size: 'xs'
  }
};

export { segmentItemConfig, segmentItemRoot };
//# sourceMappingURL=SegmentItem.js.map

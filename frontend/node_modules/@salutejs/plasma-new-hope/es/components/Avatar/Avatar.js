import './Avatar_13f2qzh.css';
import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useMemo } from 'react';
import { styled } from '@linaria/react';
import '@linaria/core';
import { component, mergeConfig } from '../../engines/common.js';
import { cx } from '../../utils/index.js';
import { indicatorConfig } from '../Indicator/Indicator.js';
import { classes, tokens } from './Avatar.tokens.js';
import { Wrapper, StatusIcon, base, Text, Image } from './Avatar.styles.js';
import { base as base$1 } from './variations/_size/base.js';
import { base as base$2 } from './variations/_focused/base.js';
import { getInitialsForName } from './utils/getInitialsForName.js';

var _excluded = ["size", "name", "url", "customText", "status", "className", "focused", "isScalable", "statusLabels"];
var StatusLabelsDefault = {
  active: 'Активен',
  inactive: 'Неактивен'
};
var getAvatarContent = function getAvatarContent(_ref) {
  var customText = _ref.customText,
    url = _ref.url,
    initials = _ref.initials,
    name = _ref.name;
  if (customText) {
    return /*#__PURE__*/React.createElement(Text, null, customText);
  }
  if (url) {
    return /*#__PURE__*/React.createElement(Image, {
      src: url,
      alt: name
    });
  }
  return /*#__PURE__*/React.createElement(Text, null, initials);
};
var getAriaLabel = function getAriaLabel(_ref2) {
  var url = _ref2.url,
    name = _ref2.name,
    status = _ref2.status,
    ariaLabelProp = _ref2['aria-label'],
    statusLabels = _ref2.statusLabels;
  if (!url) {
    return;
  }

  // INFO: включаем aria-label чтобы озвучить что на изображении
  var ariaLabel = !ariaLabelProp || ariaLabelProp.trim() === '' ? name : ariaLabelProp;
  return status ? "".concat(ariaLabel, ". ").concat(statusLabels[status]) : ariaLabel;
};
var mergedConfig = /*#__PURE__*/mergeConfig(indicatorConfig);
var Indicator = /*#__PURE__*/component(mergedConfig);
var _exp = function _exp() {
  return Indicator;
};
var _exp5 = function _exp5() {
  return function (_ref3) {
    var status = _ref3.status;
    return status === 'active' ? "var(".concat(tokens.statusOnlineColor, ")") : "var(".concat(tokens.statusOfflineColor, ")");
  };
};
var StyledIndicator = /*#__PURE__*/styled(_exp())({
  name: "StyledIndicator",
  "class": "sgw0czr",
  propsAsIs: true,
  vars: {
    "sgw0czr-0": [/*#__PURE__*/_exp5()]
  }
});
var avatarRoot = function avatarRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var avatarSize = props.size,
      name = props.name,
      url = props.url,
      customText = props.customText,
      status = props.status,
      className = props.className,
      _props$focused = props.focused,
      focused = _props$focused === void 0 ? true : _props$focused,
      isScalable = props.isScalable,
      _props$statusLabels = props.statusLabels,
      statusLabels = _props$statusLabels === void 0 ? StatusLabelsDefault : _props$statusLabels,
      rest = _objectWithoutProperties(props, _excluded);
    var initials = useMemo(function () {
      return getInitialsForName(name);
    }, [name]);
    var ariaLabel = getAriaLabel(_objectSpread2(_objectSpread2({}, props), {}, {
      statusLabels: statusLabels
    }));
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      size: avatarSize,
      className: cx(classes.avatarItem, className),
      "aria-label": ariaLabel,
      focused: focused
    }, rest), /*#__PURE__*/React.createElement(Wrapper, {
      isScalable: isScalable
    }, getAvatarContent({
      customText: customText,
      url: url,
      initials: initials,
      name: name
    })), status && /*#__PURE__*/React.createElement(StatusIcon, null, /*#__PURE__*/React.createElement(StyledIndicator, {
      "aria-label": statusLabels[status],
      status: status
    })));
  });
};
var avatarConfig = {
  name: 'Avatar',
  tag: 'div',
  layout: avatarRoot,
  base: base,
  variations: {
    size: {
      css: base$1
    },
    focused: {
      css: base$2
    }
  },
  defaults: {
    size: 'm'
  }
};

export { avatarConfig, avatarRoot };
//# sourceMappingURL=Avatar.js.map

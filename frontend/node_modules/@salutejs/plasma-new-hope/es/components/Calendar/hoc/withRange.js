import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import React, { useMemo, useState, useCallback } from 'react';
import { isValueUpdate, getSortedValues } from '../utils/index.js';

var _excluded = ["value", "disabledList", "eventList", "min", "max", "onChangeValue", "onChangeStartOfRange"];

/**
 * HOC для календаря, дающий возможность выбора диапазона даты
 */
var withRange = function withRange(Component) {
  return function (_ref) {
    var value = _ref.value,
      disabledList = _ref.disabledList,
      eventList = _ref.eventList,
      min = _ref.min,
      max = _ref.max,
      onChangeValue = _ref.onChangeValue,
      onChangeStartOfRange = _ref.onChangeStartOfRange,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useMemo = useMemo(function () {
        return value;
      }, [value]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      startExternalValue = _useMemo2[0],
      endExternalValue = _useMemo2[1];
    var _useState = useState([startExternalValue, endExternalValue]),
      _useState2 = _slicedToArray(_useState, 2),
      _useState2$ = _slicedToArray(_useState2[0], 2),
      startValue = _useState2$[0],
      endValue = _useState2$[1],
      setValues = _useState2[1];
    var _useState3 = useState(value),
      _useState4 = _slicedToArray(_useState3, 2),
      prevValue = _useState4[0],
      setPrevValue = _useState4[1];
    if (isValueUpdate(value, prevValue)) {
      setValues([startExternalValue, endExternalValue]);
      setPrevValue(value);
    }
    var handleOnChangeDay = useCallback(function (newDay) {
      if (endValue) {
        setValues([newDay, undefined]);
        onChangeStartOfRange === null || onChangeStartOfRange === void 0 || onChangeStartOfRange(newDay);
        return;
      }
      setValues([startValue, newDay]);
      var _getSortedValues = getSortedValues([startValue, newDay]),
        _getSortedValues2 = _slicedToArray(_getSortedValues, 2),
        first = _getSortedValues2[0],
        second = _getSortedValues2[1];
      if (first) {
        onChangeValue([first, second]);
      }
    }, [onChangeValue, onChangeStartOfRange, startValue, endValue]);
    return /*#__PURE__*/React.createElement(Component, _extends({
      value: [startValue, endValue],
      onChangeValue: handleOnChangeDay,
      disabledList: disabledList,
      eventList: eventList,
      min: min,
      max: max
    }, rest));
  };
};

export { withRange };
//# sourceMappingURL=withRange.js.map

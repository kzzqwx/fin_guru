import { objectSpread2 as _objectSpread2, slicedToArray as _slicedToArray } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import { getDateFromValue, getStartYear, getNextDate, getPrevDate } from '../utils/index.js';
import { ActionType } from './types.js';

var getInitialState = function getInitialState(value, size, calendarState) {
  var initDate = value || new Date();
  var date = getDateFromValue(initDate);
  return {
    date: _objectSpread2(_objectSpread2({}, date), {}, {
      day: value !== undefined ? date.day : 0
    }),
    startYear: getStartYear(date.year),
    calendarState: calendarState,
    size: size
  };
};
var reducer = function reducer(state, action) {
  switch (action.type) {
    case ActionType.PREVIOUS_MONTH:
      {
        var _action$payload = action.payload,
          year = _action$payload.year,
          monthIndex = _action$payload.monthIndex;
        var _getPrevDate = getPrevDate(year, monthIndex),
          _getPrevDate2 = _slicedToArray(_getPrevDate, 2),
          prevYear = _getPrevDate2[0],
          prevMonthIndex = _getPrevDate2[1];
        return _objectSpread2(_objectSpread2({}, state), {}, {
          date: {
            day: state.date.day,
            monthIndex: prevMonthIndex,
            year: prevYear
          }
        });
      }
    case ActionType.NEXT_MONTH:
      {
        var _action$payload2 = action.payload,
          _monthIndex = _action$payload2.monthIndex,
          _year = _action$payload2.year;
        var _getNextDate = getNextDate(_year, _monthIndex),
          _getNextDate2 = _slicedToArray(_getNextDate, 2),
          nextYear = _getNextDate2[0],
          nextMonthIndex = _getNextDate2[1];
        return _objectSpread2(_objectSpread2({}, state), {}, {
          date: {
            day: state.date.day,
            monthIndex: nextMonthIndex,
            year: nextYear
          }
        });
      }
    case ActionType.PREVIOUS_YEAR:
      {
        var step = action.payload.step;
        return _objectSpread2(_objectSpread2({}, state), {}, {
          startYear: state.startYear - step,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: state.date.year - step
          }
        });
      }
    case ActionType.NEXT_YEAR:
      {
        var _step = action.payload.step;
        return _objectSpread2(_objectSpread2({}, state), {}, {
          startYear: state.startYear + _step,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: state.date.year + _step
          }
        });
      }
    case ActionType.PREVIOUS_START_YEAR:
      {
        var yearsCount = action.payload.yearsCount;
        return _objectSpread2(_objectSpread2({}, state), {}, {
          startYear: state.startYear - yearsCount
        });
      }
    case ActionType.NEXT_START_YEAR:
      {
        var _yearsCount = action.payload.yearsCount;
        return _objectSpread2(_objectSpread2({}, state), {}, {
          startYear: state.startYear + _yearsCount
        });
      }
    case ActionType.UPDATE_DATE:
      {
        var value = action.payload.value;
        var date = getDateFromValue(value);
        var startYear = getStartYear(value.getFullYear());
        return _objectSpread2(_objectSpread2({}, state), {}, {
          date: date,
          startYear: startYear
        });
      }
    case ActionType.UPDATE_MONTH:
      {
        var _action$payload3 = action.payload,
          calendarState = _action$payload3.calendarState,
          _monthIndex2 = _action$payload3.monthIndex,
          size = _action$payload3.size;
        return _objectSpread2(_objectSpread2({}, state), {}, {
          size: size,
          calendarState: calendarState,
          date: {
            day: state.date.day,
            monthIndex: _monthIndex2,
            year: state.date.year
          }
        });
      }
    case ActionType.UPDATE_YEAR:
      {
        var _action$payload4 = action.payload,
          _calendarState = _action$payload4.calendarState,
          _year2 = _action$payload4.year;
        return _objectSpread2(_objectSpread2({}, state), {}, {
          calendarState: _calendarState,
          date: {
            day: state.date.day,
            monthIndex: state.date.monthIndex,
            year: _year2
          }
        });
      }
    case ActionType.UPDATE_CALENDAR_STATE:
      {
        var _action$payload5 = action.payload,
          _calendarState2 = _action$payload5.calendarState,
          _size = _action$payload5.size;
        return _objectSpread2(_objectSpread2({}, state), {}, {
          calendarState: _calendarState2,
          size: _size || state.size
        });
      }
    default:
      return state;
  }
};

export { getInitialState, reducer };
//# sourceMappingURL=reducer.js.map

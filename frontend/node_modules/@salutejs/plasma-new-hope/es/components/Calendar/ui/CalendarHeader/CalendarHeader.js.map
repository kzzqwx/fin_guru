{"version":3,"file":"CalendarHeader.js","sources":["../../../../../src/components/Calendar/ui/CalendarHeader/CalendarHeader.tsx"],"sourcesContent":["import React, { useCallback, useMemo } from 'react';\n\nimport { IconDisclosureLeft, IconDisclosureRight } from '../../../_Icon';\nimport { CalendarState } from '../../store/types';\nimport { getCalendarType, MONTH_NAMES, YEAR_RENDER_COUNT } from '../../utils';\nimport type { DateObject } from '../../Calendar.types';\n\nimport type { CalendarHeaderProps } from './CalendarHeader.types';\nimport {\n    StyledArrow,\n    StyledArrows,\n    StyledCalendarHeader,\n    StyledHeader,\n    StyledHeaderDouble,\n    StyledNavigation,\n} from './CalendarHeader.styles';\n\n/**\n * Компонент шапки календаря.\n */\nexport const CalendarHeader: React.FC<CalendarHeaderProps> = ({\n    type = 'Days',\n    startYear = 0,\n    firstDate,\n    secondDate,\n    isDouble,\n    onPrev,\n    onNext,\n    onUpdateCalendarState,\n}) => {\n    const handleCalendarState = useCallback(() => {\n        if (type === CalendarState.Days) {\n            onUpdateCalendarState?.(CalendarState.Months, [3, 2]);\n        }\n\n        if (type === CalendarState.Months) {\n            onUpdateCalendarState?.(CalendarState.Years, [3, 2]);\n        }\n    }, [type, onUpdateCalendarState]);\n\n    const getHeaderContent = useCallback(\n        (date?: DateObject) => {\n            if (!date) {\n                return '';\n            }\n\n            if (type === CalendarState.Days) {\n                return `${MONTH_NAMES[date.monthIndex]} ${date.year}`;\n            }\n\n            if (type === CalendarState.Months) {\n                return `${date.year}`;\n            }\n\n            if (type === CalendarState.Years) {\n                return `${startYear}—${startYear + YEAR_RENDER_COUNT - 1}`;\n            }\n\n            return '';\n        },\n        [type, startYear],\n    );\n\n    const currentCalendarType = getCalendarType(isDouble ? CalendarState.Days : type);\n\n    const PreviousButton = useMemo(\n        () => (\n            <StyledArrow\n                type=\"button\"\n                aria-label={`Предыдущий ${currentCalendarType}`}\n                tabIndex={0}\n                onClick={() => onPrev()}\n            >\n                <IconDisclosureLeft />\n            </StyledArrow>\n        ),\n        [currentCalendarType, onPrev],\n    );\n\n    const NextButton = useMemo(\n        () => (\n            <StyledArrow\n                type=\"button\"\n                aria-label={`Следующий ${currentCalendarType}`}\n                tabIndex={0}\n                onClick={() => onNext()}\n            >\n                <IconDisclosureRight />\n            </StyledArrow>\n        ),\n        [currentCalendarType, onNext],\n    );\n\n    return (\n        <StyledCalendarHeader>\n            {isDouble ? (\n                <StyledNavigation>\n                    {PreviousButton}\n                    <StyledHeaderDouble aria-live=\"polite\">{getHeaderContent(firstDate)}</StyledHeaderDouble>\n                    <StyledHeaderDouble aria-live=\"polite\">{getHeaderContent(secondDate)}</StyledHeaderDouble>\n                    {NextButton}\n                </StyledNavigation>\n            ) : (\n                <>\n                    <StyledHeader\n                        type=\"button\"\n                        aria-live=\"polite\"\n                        id=\"id-grid-label\"\n                        onClick={handleCalendarState}\n                        tabIndex={0}\n                    >\n                        {getHeaderContent(firstDate)}\n                    </StyledHeader>\n                    <StyledArrows>\n                        {PreviousButton}\n                        {NextButton}\n                    </StyledArrows>\n                </>\n            )}\n        </StyledCalendarHeader>\n    );\n};\n"],"names":["CalendarHeader","_ref","_ref$type","type","_ref$startYear","startYear","firstDate","secondDate","isDouble","onPrev","onNext","onUpdateCalendarState","handleCalendarState","useCallback","CalendarState","Days","Months","Years","getHeaderContent","date","concat","MONTH_NAMES","monthIndex","year","YEAR_RENDER_COUNT","currentCalendarType","getCalendarType","PreviousButton","useMemo","React","createElement","StyledArrow","tabIndex","onClick","_IconDisclosureLeft","IconDisclosureLeft","NextButton","_IconDisclosureRight","IconDisclosureRight","StyledCalendarHeader","StyledNavigation","StyledHeaderDouble","Fragment","StyledHeader","id","StyledArrows"],"mappings":"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"}
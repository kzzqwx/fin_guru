import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useMemo, useState, useReducer, useCallback } from 'react';
import { reducer, getInitialState } from '../store/reducer.js';
import { CalendarState, ActionType } from '../store/types.js';
import { YEAR_RENDER_COUNT, isValueUpdate } from '../utils/index.js';
import { useKeyNavigation } from '../hooks/useKeyNavigation.js';
import { CalendarHeader } from '../ui/CalendarHeader/CalendarHeader.js';
import { CalendarDays } from '../ui/CalendarDays/CalendarDays.js';
import { CalendarMonths } from '../ui/CalendarMonths/CalendarMonths.js';
import { CalendarYears } from '../ui/CalendarYears/CalendarYears.js';
import { base } from './variations/_view/base.js';
import { base as base$1 } from './variations/_size/base.js';
import { IsOutOfRange, StyledCalendar } from './CalendarBase.styles.js';

var _excluded = ["value", "min", "max", "includeEdgeDates", "type", "eventList", "disabledList", "onChangeValue"];
/**
 * Компонент календаря.
 */
var calendarBaseRoot = function calendarBaseRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var externalValue = _ref.value,
      min = _ref.min,
      max = _ref.max,
      includeEdgeDates = _ref.includeEdgeDates,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? 'Days' : _ref$type,
      eventList = _ref.eventList,
      disabledList = _ref.disabledList,
      onChangeValue = _ref.onChangeValue,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useMemo = useMemo(function () {
        return Array.isArray(externalValue) ? externalValue : [externalValue];
      }, [externalValue]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      firstValue = _useMemo2[0],
      secondValue = _useMemo2[1];
    var value = secondValue || firstValue;
    var _useState = useState(),
      _useState2 = _slicedToArray(_useState, 2),
      hoveredDay = _useState2[0],
      setHoveredDay = _useState2[1];
    var _useState3 = useState(type),
      _useState4 = _slicedToArray(_useState3, 2),
      prevType = _useState4[0],
      setPrevType = _useState4[1];
    var _useState5 = useState(value),
      _useState6 = _slicedToArray(_useState5, 2),
      prevValue = _useState6[0],
      setPrevValue = _useState6[1];
    var _useState7 = useState(0),
      _useState8 = _slicedToArray(_useState7, 2),
      outOfRangeKey = _useState8[0],
      setOutOfRangeKey = _useState8[1];
    var _useReducer = useReducer(reducer, getInitialState(value, [5, 6], type)),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      state = _useReducer2[0],
      dispatch = _useReducer2[1];
    var date = state.date,
      calendarState = state.calendarState,
      startYear = state.startYear,
      size = state.size;
    var handlePrev = useCallback(function () {
      var withShift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (calendarState === CalendarState.Days) {
        if (withShift) {
          dispatch({
            type: ActionType.PREVIOUS_YEAR,
            payload: {
              step: 1
            }
          });
          return;
        }
        dispatch({
          type: ActionType.PREVIOUS_MONTH,
          payload: {
            monthIndex: date.monthIndex,
            year: date.year
          }
        });
        return;
      }
      if (calendarState === CalendarState.Months) {
        dispatch({
          type: ActionType.PREVIOUS_YEAR,
          payload: {
            step: 1
          }
        });
        return;
      }
      if (calendarState === CalendarState.Years) {
        dispatch({
          type: ActionType.PREVIOUS_START_YEAR,
          payload: {
            yearsCount: YEAR_RENDER_COUNT
          }
        });
      }
    }, [date, calendarState]);
    var handleNext = useCallback(function () {
      var withShift = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (calendarState === CalendarState.Days) {
        if (withShift) {
          dispatch({
            type: ActionType.NEXT_YEAR,
            payload: {
              step: 1
            }
          });
          return;
        }
        dispatch({
          type: ActionType.NEXT_MONTH,
          payload: {
            monthIndex: date.monthIndex,
            year: date.year
          }
        });
        return;
      }
      if (calendarState === CalendarState.Months) {
        dispatch({
          type: ActionType.NEXT_YEAR,
          payload: {
            step: 1
          }
        });
        return;
      }
      if (calendarState === CalendarState.Years) {
        dispatch({
          type: ActionType.NEXT_START_YEAR,
          payload: {
            yearsCount: YEAR_RENDER_COUNT
          }
        });
      }
    }, [date, calendarState]);
    var _useKeyNavigation = useKeyNavigation({
        size: size,
        onNext: handleNext,
        onPrev: handlePrev
      }),
      _useKeyNavigation2 = _slicedToArray(_useKeyNavigation, 5),
      selectIndexes = _useKeyNavigation2[0],
      onKeyDown = _useKeyNavigation2[1],
      onSelectIndexes = _useKeyNavigation2[2],
      outerRefs = _useKeyNavigation2[3],
      isOutOfRange = _useKeyNavigation2[4];
    var handleOnChangeDay = useCallback(function (newDate, coord) {
      var newDay = new Date(newDate.year, newDate.monthIndex, newDate.day);
      onChangeValue === null || onChangeValue === void 0 || onChangeValue(newDay);
      onSelectIndexes(coord);
    }, [onChangeValue, onSelectIndexes]);
    var handleOnChangeMonth = useCallback(function (monthIndex) {
      dispatch({
        type: ActionType.UPDATE_MONTH,
        payload: {
          calendarState: CalendarState.Days,
          monthIndex: monthIndex,
          size: [5, 6]
        }
      });
    }, []);
    var handleOnChangeYear = useCallback(function (year) {
      dispatch({
        type: ActionType.UPDATE_YEAR,
        payload: {
          calendarState: CalendarState.Months,
          year: year
        }
      });
    }, []);
    var handleUpdateCalendarState = useCallback(function (newCalendarState, newSize) {
      dispatch({
        type: ActionType.UPDATE_CALENDAR_STATE,
        payload: {
          calendarState: newCalendarState,
          size: newSize
        }
      });
    }, []);
    if (value && prevValue && isValueUpdate(value, prevValue)) {
      dispatch({
        type: ActionType.UPDATE_DATE,
        payload: {
          value: value
        }
      });
      setPrevValue(value);
    }
    if (prevType !== type) {
      dispatch({
        type: ActionType.UPDATE_CALENDAR_STATE,
        payload: {
          calendarState: type
        }
      });
      setPrevType(type);
    }

    // Изменяем ключ каждый раз как пытаемся перейти на даты которые находятся за пределами min/max ограничений.
    // Это необходимо для того чтобы screen-reader корректно озвучивал уведомление aria-live="assertive"
    // о том что нет доступных дат
    var handleKeyDown = useCallback(function (event) {
      setOutOfRangeKey(function (previousState) {
        return Number(!previousState);
      });
      onKeyDown(event);
    }, [onKeyDown]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: outerRootRef,
      "aria-label": "\u0412\u044B\u0431\u043E\u0440 \u0434\u0430\u0442\u044B"
    }, rest), isOutOfRange && /*#__PURE__*/React.createElement(IsOutOfRange, {
      key: outOfRangeKey,
      "aria-atomic": "true",
      role: "alert",
      "aria-live": "assertive",
      "aria-relevant": "additions"
    }, "\u0414\u0430\u043B\u0435\u0435 \u043D\u0435\u0442 \u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445 \u0434\u0430\u0442."), /*#__PURE__*/React.createElement(CalendarHeader, {
      firstDate: date,
      startYear: startYear,
      type: calendarState,
      onPrev: handlePrev,
      onNext: handleNext,
      onUpdateCalendarState: handleUpdateCalendarState
    }), calendarState === CalendarState.Days && /*#__PURE__*/React.createElement(CalendarDays, {
      eventList: eventList,
      disabledList: disabledList,
      min: min,
      max: max,
      includeEdgeDates: includeEdgeDates,
      value: externalValue,
      date: date,
      hoveredDay: hoveredDay,
      selectIndexes: selectIndexes,
      onChangeDay: handleOnChangeDay,
      onHoverDay: setHoveredDay,
      onSetSelected: onSelectIndexes,
      onKeyDown: handleKeyDown,
      outerRefs: outerRefs
    }), calendarState === CalendarState.Months && /*#__PURE__*/React.createElement(CalendarMonths, {
      date: date,
      selectIndexes: selectIndexes,
      onChangeMonth: handleOnChangeMonth,
      onSetSelected: onSelectIndexes,
      onKeyDown: onKeyDown,
      outerRefs: outerRefs
    }), calendarState === CalendarState.Years && /*#__PURE__*/React.createElement(CalendarYears, {
      date: date,
      startYear: startYear,
      selectIndexes: selectIndexes,
      onChangeYear: handleOnChangeYear,
      onSetSelected: onSelectIndexes,
      onKeyDown: onKeyDown,
      outerRefs: outerRefs
    }));
  });
};
var calendarBaseConfig = {
  name: 'CalendarBase',
  tag: 'div',
  layout: calendarBaseRoot,
  base: StyledCalendar,
  variations: {
    view: {
      css: base
    },
    size: {
      css: base$1
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};

export { calendarBaseConfig, calendarBaseRoot };
//# sourceMappingURL=CalendarBase.js.map

import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useRef } from 'react';
import { useUniqId, useForkRef, useFocusTrap } from '@salutejs/plasma-core';
import { base } from './variations/_view/base.js';
import { base as base$1 } from './variations/_size/base.js';
import { StyledPopover, StyledDropdown } from './Dropdown.styles.js';
import { getPlacements } from './utils/index.js';

var _excluded = ["id", "target", "children", "hasArrow", "role", "view", "size", "frame", "onToggle", "isFocusTrapped", "isOpen", "placement", "trigger", "offset", "preventOverflow", "closeOnOverlayClick", "closeOnEsc"];
/**
 * Выпадающий список без внешнего контроля видимости.
 */
var dropdownOldRoot = function dropdownOldRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {
    var id = _ref.id,
      target = _ref.target,
      children = _ref.children,
      hasArrow = _ref.hasArrow,
      role = _ref.role,
      view = _ref.view,
      size = _ref.size,
      frame = _ref.frame,
      _onToggle = _ref.onToggle,
      _ref$isFocusTrapped = _ref.isFocusTrapped,
      isFocusTrapped = _ref$isFocusTrapped === void 0 ? true : _ref$isFocusTrapped,
      _ref$isOpen = _ref.isOpen,
      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
      _ref$trigger = _ref.trigger,
      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 6] : _ref$offset,
      _ref$preventOverflow = _ref.preventOverflow,
      preventOverflow = _ref$preventOverflow === void 0 ? false : _ref$preventOverflow,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? false : _ref$closeOnOverlayCl,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? false : _ref$closeOnEsc,
      rest = _objectWithoutProperties(_ref, _excluded);
    var uniqId = useUniqId();
    var innerId = id || uniqId;
    var rootRef = useRef(null);
    var dropdownRef = useRef(null);
    var handleRef = useForkRef(rootRef, outerRootRef);
    var trapRef = useFocusTrap(isOpen && isFocusTrapped);
    var dropdownForkRef = useForkRef(dropdownRef, trapRef);
    return /*#__PURE__*/React.createElement(StyledPopover, {
      role: role,
      isOpen: isOpen,
      usePortal: false,
      onToggle: function onToggle(is, event) {
        return _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(is, event);
      },
      id: innerId,
      ref: dropdownForkRef,
      target: target,
      offset: offset,
      preventOverflow: preventOverflow,
      hasArrow: hasArrow,
      placement: getPlacements(placement),
      trigger: trigger,
      closeOnOverlayClick: closeOnOverlayClick,
      closeOnEsc: closeOnEsc,
      isFocusTrapped: isFocusTrapped,
      frame: frame
    }, /*#__PURE__*/React.createElement(Root, _extends({
      ref: handleRef,
      view: view,
      size: size
    }, rest), /*#__PURE__*/React.createElement(StyledDropdown, null, children)));
  });
};
var dropdownOldConfig = {
  name: 'Dropdown',
  tag: 'div',
  layout: dropdownOldRoot,
  base: '',
  variations: {
    view: {
      css: base
    },
    size: {
      css: base$1
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};

export { dropdownOldConfig, dropdownOldRoot };
//# sourceMappingURL=DropdownOld.js.map

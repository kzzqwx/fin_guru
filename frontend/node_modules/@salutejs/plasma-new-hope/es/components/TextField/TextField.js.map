{"version":3,"file":"TextField.js","sources":["../../../src/components/TextField/TextField.tsx"],"sourcesContent":["import React, { forwardRef, useEffect, useRef, useState } from 'react';\nimport type { ChangeEventHandler, KeyboardEvent, ChangeEvent } from 'react';\nimport { safeUseId, useForkRef } from '@salutejs/plasma-core';\nimport { css } from '@linaria/core';\n\nimport type { RootProps } from '../../engines';\nimport { cx } from '../../utils';\n\nimport type { ChipValues, TextFieldPrimitiveValue, TextFieldProps } from './TextField.types';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as disabledCSS } from './variations/_disabled/base';\nimport { base as readOnlyCSS } from './variations/_read-only/base';\nimport { base as labelPlacementCSS } from './variations/_label-placement/base';\nimport {\n    Input,\n    LeftHelper,\n    Label,\n    InputWrapper,\n    InputLabelWrapper,\n    StyledContentLeft,\n    StyledContentRight,\n    StyledChips,\n    StyledTextBefore,\n    StyledTextAfter,\n} from './TextField.styles';\nimport { classes } from './TextField.tokens';\nimport { TextFieldChip } from './ui';\nimport { useKeyNavigation } from './hooks';\n\nexport const base = css`\n    /* NOTE: Webkit не применяет opacity к inline тегам */\n    display: block;\n    overflow: hidden;\n`;\n\nexport const textFieldRoot = (Root: RootProps<HTMLDivElement, TextFieldProps>) =>\n    forwardRef<HTMLInputElement, TextFieldProps>(\n        (\n            {\n                id,\n                className,\n                style,\n\n                // layout\n                contentLeft,\n                contentRight,\n                label,\n                labelPlacement,\n                textBefore,\n                textAfter,\n                placeholder,\n                leftHelper,\n                enumerationType = 'plain',\n\n                // variations\n                view,\n                size,\n                readOnly = false,\n                disabled = false,\n\n                // controlled\n                chips: values,\n\n                // events\n                onChange,\n                onChangeChips,\n                onSearch,\n                onKeyDown,\n\n                ...rest\n            },\n            ref,\n        ) => {\n            const contentRef = useRef<HTMLDivElement>(null);\n            const inputRef = useRef<HTMLInputElement>(null);\n            const inputForkRef = useForkRef(inputRef, ref);\n            const chipsRefs = useRef<Array<HTMLButtonElement>>([]);\n\n            const controlledRefs = { contentRef, inputRef, chipsRefs };\n\n            const [chips, setChips] = useState<Array<ChipValues>>([]);\n\n            const uniqId = safeUseId();\n            const innerId = id || uniqId;\n            const labelId = safeUseId();\n            const helperTextId = safeUseId();\n\n            const isChipEnumeration = enumerationType === 'chip';\n            const hideLabel = (size === 'xs' || isChipEnumeration) && labelPlacement === 'inner';\n            const labelInside = size !== 'xs' && labelPlacement === 'inner';\n            const innerLabelPlacementValue = hideLabel ? 'outer' : labelPlacement;\n            const innerPlaceholderValue = hideLabel ? label : placeholder;\n            const innerLabelValue = hideLabel ? undefined : label;\n\n            const isChipsVisible = isChipEnumeration && chips?.length;\n            const withHasChips = isChipsVisible ? classes.hasChips : undefined;\n            const wrapperWithoutLeftContent = !contentLeft && isChipsVisible ? classes.hasEmptyContentLeft : undefined;\n            const wrapperWithoutRightContent =\n                !contentRight && isChipsVisible ? classes.hasEmptyContentRight : undefined;\n\n            const handleChange: ChangeEventHandler<HTMLInputElement> = (event) => {\n                if (disabled || readOnly) {\n                    return;\n                }\n\n                const { maxLength, value } = event.target;\n\n                if (maxLength !== -1 && value.length > maxLength) {\n                    return;\n                }\n\n                onChange?.(event);\n            };\n\n            const updateChips = (newChips: Array<ChipValues>, newValues: Array<TextFieldPrimitiveValue>) => {\n                setChips(newChips);\n                onChangeChips?.(newValues);\n            };\n\n            const { handleInputKeydown, handleChipKeyDown, onChipClear, handleContentKeyDown } = useKeyNavigation({\n                controlledRefs,\n                disabled,\n                readOnly,\n                chips,\n                enumerationType,\n                updateChips,\n                onSearch,\n                onChange,\n            });\n\n            const onChipClick = (event: React.MouseEvent<HTMLButtonElement>) => event.stopPropagation();\n\n            const handleInputFocus = () => {\n                if (readOnly || disabled || !inputRef?.current) {\n                    return;\n                }\n\n                inputRef.current.scrollTo({\n                    top: 0,\n                    left: inputRef.current.offsetLeft,\n                    behavior: 'smooth',\n                });\n\n                inputRef.current.focus();\n            };\n\n            const getRef = (element: HTMLButtonElement | null, index: number) => {\n                if (element && chipsRefs?.current) {\n                    chipsRefs.current[index] = element;\n                }\n            };\n\n            const handleOnKeyDown = (event: ChangeEvent<HTMLInputElement> & KeyboardEvent<HTMLInputElement>) => {\n                handleInputKeydown(event);\n                onKeyDown && onKeyDown(event);\n            };\n\n            useEffect(() => {\n                if (!isChipEnumeration && !values?.length) {\n                    return;\n                }\n\n                const newChips =\n                    values?.map((value, index) => ({\n                        id: `${index}_${value}`,\n                        text: value,\n                    })) || [];\n\n                setChips(newChips);\n            }, [isChipEnumeration, values]);\n\n            return (\n                <Root\n                    view={view}\n                    size={size}\n                    disabled={disabled}\n                    readOnly={!disabled && readOnly}\n                    labelPlacement={innerLabelPlacementValue}\n                    onClick={handleInputFocus}\n                    className={className}\n                    style={style}\n                >\n                    {labelInside ||\n                        (innerLabelValue && (\n                            <Label id={labelId} htmlFor={id}>\n                                {innerLabelValue}\n                            </Label>\n                        ))}\n                    <InputWrapper className={cx(withHasChips, wrapperWithoutLeftContent, wrapperWithoutRightContent)}>\n                        {contentLeft && <StyledContentLeft>{contentLeft}</StyledContentLeft>}\n                        <InputLabelWrapper\n                            tabIndex={-1}\n                            ref={contentRef}\n                            onKeyDown={handleContentKeyDown}\n                            className={withHasChips}\n                        >\n                            {textBefore && <StyledTextBefore>{textBefore}</StyledTextBefore>}\n                            {isChipEnumeration && Boolean(chips?.length) && (\n                                <StyledChips>\n                                    {chips?.map(({ id: chipId, text }, index) => {\n                                        return (\n                                            <TextFieldChip\n                                                id={chipId}\n                                                ref={(element) => getRef(element, index)}\n                                                key={`${chipId}_${index}`}\n                                                disabled={disabled}\n                                                readOnly={readOnly}\n                                                value={text}\n                                                text={text}\n                                                onKeyDown={(event) => handleChipKeyDown(event, chipId, index)}\n                                                onClear={() => onChipClear(chipId, index)}\n                                                onClick={onChipClick}\n                                            />\n                                        );\n                                    })}\n                                </StyledChips>\n                            )}\n                            <Input\n                                {...rest}\n                                ref={inputForkRef}\n                                id={innerId}\n                                aria-labelledby={labelId}\n                                aria-describedby={helperTextId}\n                                placeholder={innerPlaceholderValue}\n                                disabled={disabled}\n                                readOnly={!disabled && readOnly}\n                                onChange={handleChange}\n                                onKeyDown={handleOnKeyDown}\n                            />\n                            {labelInside && (\n                                <Label id={labelId} htmlFor={innerId}>\n                                    {innerLabelValue}\n                                </Label>\n                            )}\n                            {textAfter && <StyledTextAfter>{textAfter}</StyledTextAfter>}\n                        </InputLabelWrapper>\n                        {contentRight && <StyledContentRight>{contentRight}</StyledContentRight>}\n                    </InputWrapper>\n                    {leftHelper && <LeftHelper id={helperTextId}>{leftHelper}</LeftHelper>}\n                </Root>\n            );\n        },\n    );\n\nexport const textFieldConfig = {\n    name: 'TextField',\n    tag: 'div',\n    layout: textFieldRoot,\n    base,\n    variations: {\n        view: {\n            css: viewCSS,\n        },\n        size: {\n            css: sizeCSS,\n        },\n        disabled: {\n            css: disabledCSS,\n            attrs: true,\n        },\n        readOnly: {\n            css: readOnlyCSS,\n            attrs: true,\n        },\n        labelPlacement: {\n            css: labelPlacementCSS,\n        },\n    },\n    defaults: {\n        size: 'm',\n        view: 'default',\n    },\n};\n"],"names":["base","textFieldRoot","Root","forwardRef","_ref","ref","id","className","style","contentLeft","contentRight","label","labelPlacement","textBefore","textAfter","placeholder","leftHelper","_ref$enumerationType","enumerationType","view","size","_ref$readOnly","readOnly","_ref$disabled","disabled","values","chips","onChange","onChangeChips","onSearch","onKeyDown","rest","contentRef","useRef","inputRef","inputForkRef","useForkRef","chipsRefs","controlledRefs","_useState","useState","_useState2","_slicedToArray","setChips","uniqId","safeUseId","innerId","labelId","helperTextId","isChipEnumeration","hideLabel","labelInside","innerLabelPlacementValue","innerPlaceholderValue","innerLabelValue","undefined","isChipsVisible","length","withHasChips","classes","hasChips","wrapperWithoutLeftContent","hasEmptyContentLeft","wrapperWithoutRightContent","hasEmptyContentRight","handleChange","event","_event$target","target","maxLength","value","updateChips","newChips","newValues","_useKeyNavigation","useKeyNavigation","handleInputKeydown","handleChipKeyDown","onChipClear","handleContentKeyDown","onChipClick","stopPropagation","handleInputFocus","current","scrollTo","top","left","offsetLeft","behavior","focus","getRef","element","index","handleOnKeyDown","useEffect","map","concat","text","React","createElement","onClick","Label","htmlFor","InputWrapper","cx","StyledContentLeft","InputLabelWrapper","tabIndex","StyledTextBefore","Boolean","StyledChips","_ref2","chipId","TextFieldChip","key","onClear","Input","_extends","StyledTextAfter","StyledContentRight","LeftHelper","textFieldConfig","name","tag","layout","variations","css","viewCSS","sizeCSS","disabledCSS","attrs","readOnlyCSS","labelPlacementCSS","defaults"],"mappings":"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"}
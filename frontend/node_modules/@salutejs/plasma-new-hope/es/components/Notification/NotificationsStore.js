import { objectWithoutProperties as _objectWithoutProperties, objectSpread2 as _objectSpread2 } from '../../_virtual/_rollupPluginBabelHelpers.js';
import { createStoreon } from 'storeon';

var _excluded = ["id"];
/**
 * Создает хранилищие с ключем `notifications` к массиву с окнами.
 */
var NotificationsStore = /*#__PURE__*/createStoreon([function (store) {
  store.on('@init', function () {
    return {
      notifications: []
    };
  });
  store.on('add', function (_ref, notif) {
    var notifications = _ref.notifications;
    return {
      notifications: notifications.concat([notif])
    };
  });
  store.on('hide', function (_ref2, id) {
    var notifications = _ref2.notifications;
    return {
      notifications: notifications.map(function (notif) {
        return id === notif.id ? _objectSpread2(_objectSpread2({}, notif), {}, {
          isHidden: true
        }) : notif;
      })
    };
  });
  store.on('remove', function (_ref3, id) {
    var notifications = _ref3.notifications;
    return {
      notifications: notifications.filter(function (notif) {
        return id !== notif.id;
      })
    };
  });
}]);
var closeNotification = function closeNotification(id) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 380;
  var dispatch = NotificationsStore.dispatch;
  dispatch('hide', id);
  setTimeout(function () {
    return dispatch('remove', id);
  }, delay);
};

/**
 * Открыть новое окно.
 * @param props Пропсы всплывающего окна
 * @return Идентификатор нового окна
 */
function addNotification(_ref4) {
  var externalId = _ref4.id,
    rest = _objectWithoutProperties(_ref4, _excluded);
  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
  var id = externalId || "plasma-notification-".concat(Date.now());
  var dispatch = NotificationsStore.dispatch;
  dispatch('add', _objectSpread2(_objectSpread2({}, rest), {}, {
    id: id,
    isHidden: false
  }));
  setTimeout(function () {
    return closeNotification(id);
  }, timeout);
  return id;
}

export { NotificationsStore, addNotification, closeNotification };
//# sourceMappingURL=NotificationsStore.js.map

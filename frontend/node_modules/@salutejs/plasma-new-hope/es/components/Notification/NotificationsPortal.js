import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { useMemo } from 'react';
import { useStoreon } from 'storeon/react';
import { PopupProvider } from '../Popup/PopupContext.js';
import { popupConfig } from '../Popup/Popup.js';
import '@linaria/core';
import { component } from '../../engines/common.js';
import { cx } from '../../utils/index.js';
import { closeNotification } from './NotificationsStore.js';
import { StyledRoot, StyledItemWrapper } from './Notification.styles.js';
import { classes } from './Notification.tokens.js';

var _excluded = ["id", "isHidden"];

// issue #823
var Popup = /*#__PURE__*/component(popupConfig);

/**
 * Обертка для визуального представления уведомлений.
 */
var NotificationsPortal = function NotificationsPortal(_ref) {
  var config = _ref.config,
    frame = _ref.frame;
  var _useStoreon = useStoreon('notifications'),
    notifications = _useStoreon.notifications;
  var Notification = useMemo(function () {
    return component(config);
  }, []);
  return /*#__PURE__*/React.createElement(PopupProvider, null, notifications.length > 0 && /*#__PURE__*/React.createElement(Popup, {
    isOpen: true,
    frame: frame,
    placement: "bottom-right",
    zIndex: "9100"
  }, /*#__PURE__*/React.createElement(StyledRoot, null, notifications.map(function (_ref2) {
    var id = _ref2.id,
      isHidden = _ref2.isHidden,
      rest = _objectWithoutProperties(_ref2, _excluded);
    return /*#__PURE__*/React.createElement(StyledItemWrapper, {
      key: id,
      className: cx(isHidden ? classes.notificationItemHidden : classes.notificationItemOpened),
      isHidden: isHidden || false
    }, /*#__PURE__*/React.createElement(Notification, _extends({
      key: id,
      id: id,
      onCloseButtonClick: function onCloseButtonClick() {
        return closeNotification(id);
      }
    }, rest)));
  }))));
};

export { NotificationsPortal };
//# sourceMappingURL=NotificationsPortal.js.map

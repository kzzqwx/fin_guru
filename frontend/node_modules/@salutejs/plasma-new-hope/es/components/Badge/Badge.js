import { objectWithoutProperties as _objectWithoutProperties, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef } from 'react';
import { cx } from '../../utils/index.js';
import { base as base$1 } from './variations/_view/base.js';
import { base as base$2 } from './variations/_size/base.js';
import { base as base$3 } from './variations/_pilled/base.js';
import { base as base$4 } from './variations/_transparent/base.js';
import { StyledContentLeft, StyledContentMain, StyledContentRight, base } from './Badge.styles.js';
import { classes } from './Badge.tokens.js';

var _excluded = ["children", "className", "text", "contentLeft", "contentRight", "size", "view", "pilled", "transparent"];
var badgeRoot = function badgeRoot(Root) {
  return /*#__PURE__*/forwardRef(function (props, ref) {
    var children = props.children,
      className = props.className,
      text = props.text,
      contentLeft = props.contentLeft,
      contentRight = props.contentRight,
      size = props.size,
      view = props.view,
      _props$pilled = props.pilled,
      pilled = _props$pilled === void 0 ? false : _props$pilled,
      _props$transparent = props.transparent,
      transparent = _props$transparent === void 0 ? false : _props$transparent,
      rest = _objectWithoutProperties(props, _excluded);
    var pilledClass = pilled ? classes.badgePilled : undefined;
    var transparentClass = transparent ? classes.badgeTransparent : undefined;
    var txt = !text && typeof children === 'string' ? children : text;
    return /*#__PURE__*/React.createElement(Root, _extends({
      ref: ref,
      className: cx(pilledClass, transparentClass, className),
      view: view,
      size: size,
      pilled: pilled,
      transparent: transparent
    }, rest), contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), txt ? /*#__PURE__*/React.createElement(StyledContentMain, null, txt) : children, contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight));
  });
};
var badgeConfig = {
  name: 'Badge',
  tag: 'div',
  layout: badgeRoot,
  base: base,
  variations: {
    view: {
      css: base$1
    },
    size: {
      css: base$2
    },
    pilled: {
      css: base$3,
      attrs: true
    },
    transparent: {
      css: base$4,
      attrs: true
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};

export { badgeConfig, badgeRoot };
//# sourceMappingURL=Badge.js.map

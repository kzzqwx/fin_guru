import { objectWithoutProperties as _objectWithoutProperties, slicedToArray as _slicedToArray, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';
import React, { forwardRef, useState, useEffect } from 'react';
import { cx } from '../../utils/index.js';
import { PaginationRoot, PaginationPages, PaginationButtonGroup, PaginationShorter, PaginationSection, PaginationButton, PaginationActions } from './Pagination.styles.js';
import { getSections, defaultValues } from './utils/index.js';
import { base } from './variations/_view/base.js';
import { base as base$2 } from './variations/_type/base.js';
import { base as base$1 } from './variations/_size/base.js';
import { classes } from './Pagination.tokens.js';
import { PaginationQuickJumpToPage } from './ui/PaginationQuickJumpToPage/PaginationQuickJumpToPage.js';
import { PaginationSelectPerPage } from './ui/PaginationSelectPerPage/PaginationSelectPerPage.js';
import { isNumber } from '../../utils/isNumber.js';

var _PaginationShorter;
var _excluded = ["value", "perPage", "slots", "view", "viewCurrentPage", "type", "size", "pilled", "square", "disabledPages", "count", "hasQuickJump", "hasPerPage", "perPageList", "isCommonButtonStyles", "placeholderQuickJump", "textQuickJump", "textPerPage", "leftContent", "rightContent", "onChangePageValue", "onChangePerPageValue"];
var paginationRoot = function paginationRoot(Root) {
  return /*#__PURE__*/forwardRef(function (_ref, ref) {
    var _ref$value = _ref.value,
      value = _ref$value === void 0 ? defaultValues.value : _ref$value,
      perPage = _ref.perPage,
      _ref$slots = _ref.slots,
      slots = _ref$slots === void 0 ? defaultValues.slots : _ref$slots,
      view = _ref.view,
      viewCurrentPage = _ref.viewCurrentPage,
      _ref$type = _ref.type,
      type = _ref$type === void 0 ? defaultValues.type : _ref$type,
      size = _ref.size,
      _ref$pilled = _ref.pilled,
      pilled = _ref$pilled === void 0 ? defaultValues.pilled : _ref$pilled,
      _ref$square = _ref.square,
      square = _ref$square === void 0 ? defaultValues.square : _ref$square,
      _ref$disabledPages = _ref.disabledPages,
      disabledPages = _ref$disabledPages === void 0 ? defaultValues.disabledPages : _ref$disabledPages,
      _ref$count = _ref.count,
      count = _ref$count === void 0 ? defaultValues.value : _ref$count,
      _ref$hasQuickJump = _ref.hasQuickJump,
      hasQuickJump = _ref$hasQuickJump === void 0 ? defaultValues.hasQuickJump : _ref$hasQuickJump,
      _ref$hasPerPage = _ref.hasPerPage,
      hasPerPage = _ref$hasPerPage === void 0 ? defaultValues.hasPerPage : _ref$hasPerPage,
      _ref$perPageList = _ref.perPageList,
      perPageList = _ref$perPageList === void 0 ? defaultValues.perPageList : _ref$perPageList,
      _ref$isCommonButtonSt = _ref.isCommonButtonStyles,
      isCommonButtonStyles = _ref$isCommonButtonSt === void 0 ? defaultValues.isCommonButtonStyles : _ref$isCommonButtonSt,
      _ref$placeholderQuick = _ref.placeholderQuickJump,
      placeholderQuickJump = _ref$placeholderQuick === void 0 ? defaultValues.placeholderQuickJump : _ref$placeholderQuick,
      _ref$textQuickJump = _ref.textQuickJump,
      textQuickJump = _ref$textQuickJump === void 0 ? defaultValues.textQuickJump : _ref$textQuickJump,
      _ref$textPerPage = _ref.textPerPage,
      textPerPage = _ref$textPerPage === void 0 ? defaultValues.textPerPage : _ref$textPerPage,
      leftContent = _ref.leftContent,
      rightContent = _ref.rightContent,
      onChangePageValue = _ref.onChangePageValue,
      onChangePerPageValue = _ref.onChangePerPageValue,
      rest = _objectWithoutProperties(_ref, _excluded);
    var _useState = useState(1),
      _useState2 = _slicedToArray(_useState, 2),
      page = _useState2[0],
      setPageValue = _useState2[1];
    var _useState3 = useState(perPage),
      _useState4 = _slicedToArray(_useState3, 2),
      perPageValue = _useState4[0],
      setPerPageValue = _useState4[1];
    var _useState5 = useState(value),
      _useState6 = _slicedToArray(_useState5, 2),
      pages = _useState6[0],
      setPagesValue = _useState6[1];
    var _useState7 = useState(null),
      _useState8 = _slicedToArray(_useState7, 2),
      sections = _useState8[0],
      setSections = _useState8[1];
    var typeClass = classes["".concat(type, "Type")];
    var roundedClass = pilled ? 'circle-circle' : 'square-square';
    var withHasPerPageSelect = hasPerPage ? classes.withHasPerPageSelect : undefined;
    var withHasQuickJump = hasQuickJump ? classes.withHasQuickJump : undefined;
    var disabled = disabledPages.map(function (el) {
      return isNumber(el) ? Number(el) : null;
    });
    var handlerSetPages = function handlerSetPages(newPerPage) {
      setPagesValue(Math.ceil(count / (newPerPage || (hasPerPage ? defaultValues.perPage : 1))));
    };
    var handlerSetPage = function handlerSetPage(newPageValue) {
      var pageValue = newPageValue !== null && newPageValue !== void 0 ? newPageValue : defaultValues.value;
      if (pageValue > pages) {
        pageValue = pages;
      }
      if (pageValue < 1) {
        pageValue = 1;
      }
      if (disabled.includes(pageValue)) {
        return;
      }
      setPageValue(pageValue);
      onChangePageValue === null || onChangePageValue === void 0 || onChangePageValue(pageValue);
    };
    var handlerSetPerPage = function handlerSetPerPage(newPerPageValue) {
      handlerSetPage(1);
      setPerPageValue(newPerPageValue);
      onChangePerPageValue === null || onChangePerPageValue === void 0 || onChangePerPageValue(newPerPageValue);
      handlerSetPages(newPerPageValue);
    };
    var isActiveButton = function isActiveButton(checkPage) {
      return page === checkPage ? classes.paginationPageButtonActive : '';
    };
    useEffect(function () {
      handlerSetPages(perPage);
    }, [perPage, count, handlerSetPages]);
    useEffect(function () {
      handlerSetPage(value);
    }, [value]);
    useEffect(function () {
      setSections(getSections(page, pages, slots));
    }, [page, slots, pages, setSections, getSections]);
    return /*#__PURE__*/React.createElement(Root, _extends({
      size: size,
      view: view,
      viewCurrentPage: viewCurrentPage,
      className: cx(classes.wrapper, typeClass),
      ref: ref
    }, rest), /*#__PURE__*/React.createElement(PaginationRoot, {
      className: typeClass
    }, /*#__PURE__*/React.createElement(PaginationPages, null, leftContent && /*#__PURE__*/React.createElement(PaginationButtonGroup, {
      isCommonButtonStyles: isCommonButtonStyles
    }, leftContent), sections && sections.map(function (section, indexSection) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, indexSection !== 0 && (_PaginationShorter || (_PaginationShorter = /*#__PURE__*/React.createElement(PaginationShorter, {
        stretching: "fixed",
        disabled: true
      }, "..."))), /*#__PURE__*/React.createElement(PaginationSection, {
        key: indexSection
      }, section.map(function (pageValue) {
        return /*#__PURE__*/React.createElement(PaginationButton, {
          square: square,
          pin: roundedClass,
          key: pageValue,
          onClick: function onClick() {
            return handlerSetPage(pageValue);
          },
          disabled: disabled.includes(pageValue),
          className: cx(classes.paginationPageButton, isActiveButton(pageValue))
        }, pageValue);
      })));
    }), rightContent && /*#__PURE__*/React.createElement(PaginationButtonGroup, {
      isCommonButtonStyles: isCommonButtonStyles
    }, rightContent)), /*#__PURE__*/React.createElement(PaginationActions, {
      className: cx(classes.actions, typeClass, withHasPerPageSelect, withHasQuickJump)
    }, hasQuickJump && /*#__PURE__*/React.createElement(PaginationQuickJumpToPage, {
      placeholderQuickJump: placeholderQuickJump,
      textQuickJump: textQuickJump,
      onChangeValue: handlerSetPage
    }), hasPerPage && /*#__PURE__*/React.createElement(PaginationSelectPerPage, {
      textPerPage: textPerPage,
      value: perPageValue,
      valuesList: perPageList,
      onChangeValue: handlerSetPerPage
    }))));
  });
};
var paginationConfig = {
  name: 'Pagination',
  tag: 'div',
  layout: paginationRoot,
  base: '',
  variations: {
    view: {
      css: base
    },
    size: {
      css: base$1
    },
    type: {
      css: base$2
    }
  },
  defaults: {
    view: 'clear',
    size: 'm'
  }
};

export { paginationConfig, paginationRoot };
//# sourceMappingURL=Pagination.js.map

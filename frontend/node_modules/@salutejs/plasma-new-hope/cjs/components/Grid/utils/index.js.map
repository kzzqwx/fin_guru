{"version":3,"file":"index.js","sources":["../../../../src/components/Grid/utils/index.ts"],"sourcesContent":["import { classes, tokens } from '../Grid.tokens';\nimport { ScreenMap } from '../ui';\nimport type { ColOffsetProps, ColSizeProps } from '../ui/Col/Col.types';\n\nimport type { BreakpointTokens, ScreenVariant, TokensType } from './types';\n\nexport const gridSizes: Array<ScreenVariant> = [\n    'smallXXS',\n    'smallXS',\n    'smallS',\n    'smallM',\n    'smallL',\n    'smallXL',\n    'smallXXL',\n    'mediumXXS',\n    'mediumXS',\n    'mediumS',\n    'mediumM',\n    'mediumL',\n    'mediumXL',\n    'mediumXXL',\n    'largeXXS',\n    'largeXS',\n    'largeS',\n    'largeM',\n    'largeL',\n    'largeXL',\n    'largeXXL',\n];\n\n// TODO удалить после отказа от старой сетки\nconst legacyGridSizesMap = {\n    S: 'smallM',\n    M: 'mediumS',\n    L: 'mediumM',\n    XL: 'largeS',\n    XXL: 'largeM',\n};\n\nconst tokenPrefix = '--plasma-grid-';\n\nconst initialGridViewStyle = `\n    max-width: var(--plasma_private-grid-max-width, unset);\n`;\n\nexport const getGridViewClass = (view: string) => {\n    return `plasma-grid-${view}-view`;\n};\n\n/**\n * Генерирует набор медиа-запросов под различную ширину вьюпорта\n *\n * @param {GridToken} cssTokens - объект view с набором токенов ширины вьюпорта\n * @return {string} сгенерированный набор медиа-запросов\n */\nconst gridMediaQueryTemplate = (breakpoints: BreakpointTokens): string => {\n    return gridSizes\n        .map((size) => {\n            if (!String(breakpoints[`${tokenPrefix}${size}-min-width`])) {\n                return;\n            }\n\n            const minWidth = breakpoints[`${tokenPrefix}${size}-min-width` as keyof typeof breakpoints];\n            const gap = tokens[`${size}Gap` as TokensType];\n            const colsCount = tokens[`${size}ColsCount` as TokensType];\n            const margin = tokens[`${size}Margin` as TokensType];\n\n            return `\n                @media (min-width: ${minWidth}) {\n                    --plasma_private-grid-cols-count: var(${colsCount});\n                    --plasma_private-grid-gap: calc(var(${gap}) / 2);\n                    --plasma_private-grid-margin: var(${margin});\n                    \n                    padding: 0 var(--plasma_private-grid-margin);\n\n                    .${classes.col} {\n                        --plasma_private-col-width: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-${size}-size, var(--plasma_private-grid-col-default-size)));\n                        --plasma_private-col-offset: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-${size}-offset, var(--plasma_private-grid-col-default-offset)));\n\n                        width: var(--plasma_private-col-width, auto);\n                        margin-left: var(--plasma_private-col-offset, initial);\n                    }\n                }\n            `;\n        })\n        .filter((style) => style)\n        .join('\\n');\n};\n\n/**\n * Генерирует строку со стилями для обертки Grid и набором медиа-запросов\n *\n * @param {BreakpointToken} breakponts - объект view с набором токенов ширины вьюпорта\n * @param {string} viewName - название view из конфига\n * @return {string} стили для обертки Grid\n */\nexport const getBaseGridView = (breakponts: BreakpointTokens, viewName: string) => {\n    return `\n        ${initialGridViewStyle}\n\n        &.${getGridViewClass(viewName)} {\n            ${gridMediaQueryTemplate(breakponts)}\n        }\n    `;\n};\n\n/**\n * Используется для получения токенов для view=\"legacy\"\n */\n// TODO удалить после отказа от старой сетки\nconst getColLegacyTokens = (props: ColOffsetProps & ColSizeProps) => {\n    return Object.entries(legacyGridSizesMap).reduce((acc, [legacyGridSize, gridSize]) => {\n        const offset = props[`offset${legacyGridSize}` as keyof ColOffsetProps];\n        const size = props[`size${legacyGridSize}` as keyof ColSizeProps];\n\n        if (!offset && !size) {\n            return acc;\n        }\n\n        return {\n            ...acc,\n            [`--plasma_private-grid-col-${gridSize}-size`]: size,\n            [`--plasma_private-grid-col-${gridSize}-offset`]: offset,\n        };\n    }, {});\n};\n\n/**\n * Используется в Col.tsx для получения токенов для view=\"default\"\n */\nexport const getColTokens = (props: ScreenMap & ColOffsetProps & ColSizeProps) => {\n    // TODO удалить после отказа от старой сетки\n    const legacyTokens = getColLegacyTokens(props);\n    if (Object.keys(legacyTokens).length) {\n        return legacyTokens;\n    }\n\n    return gridSizes.reduce((acc, size) => {\n        if (!props[size]) {\n            return acc;\n        }\n\n        return {\n            ...acc,\n            [`--plasma_private-grid-col-${size}-size`]: props[size]?.size,\n            [`--plasma_private-grid-col-${size}-offset`]: props[size]?.offset,\n        };\n    }, {});\n};\n"],"names":["gridSizes","legacyGridSizesMap","S","M","L","XL","XXL","tokenPrefix","initialGridViewStyle","getGridViewClass","view","concat","gridMediaQueryTemplate","breakpoints","map","size","String","minWidth","gap","tokens","colsCount","margin","classes","col","filter","style","join","getBaseGridView","breakponts","viewName","getColLegacyTokens","props","Object","entries","reduce","acc","_ref","_ref2","_slicedToArray","legacyGridSize","gridSize","offset","_objectSpread","_defineProperty","getColTokens","legacyTokens","keys","length","_props$size","_props$size2"],"mappings":"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"}
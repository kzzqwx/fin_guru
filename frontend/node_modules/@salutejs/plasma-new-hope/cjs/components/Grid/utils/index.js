'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var Grid_tokens = require('../Grid.tokens.js');

var gridSizes = ['smallXXS', 'smallXS', 'smallS', 'smallM', 'smallL', 'smallXL', 'smallXXL', 'mediumXXS', 'mediumXS', 'mediumS', 'mediumM', 'mediumL', 'mediumXL', 'mediumXXL', 'largeXXS', 'largeXS', 'largeS', 'largeM', 'largeL', 'largeXL', 'largeXXL'];

// TODO удалить после отказа от старой сетки
var legacyGridSizesMap = {
  S: 'smallM',
  M: 'mediumS',
  L: 'mediumM',
  XL: 'largeS',
  XXL: 'largeM'
};
var tokenPrefix = '--plasma-grid-';
var initialGridViewStyle = "\n    max-width: var(--plasma_private-grid-max-width, unset);\n";
var getGridViewClass = function getGridViewClass(view) {
  return "plasma-grid-".concat(view, "-view");
};

/**
 * Генерирует набор медиа-запросов под различную ширину вьюпорта
 *
 * @param {GridToken} cssTokens - объект view с набором токенов ширины вьюпорта
 * @return {string} сгенерированный набор медиа-запросов
 */
var gridMediaQueryTemplate = function gridMediaQueryTemplate(breakpoints) {
  return gridSizes.map(function (size) {
    if (!String(breakpoints["".concat(tokenPrefix).concat(size, "-min-width")])) {
      return;
    }
    var minWidth = breakpoints["".concat(tokenPrefix).concat(size, "-min-width")];
    var gap = Grid_tokens.tokens["".concat(size, "Gap")];
    var colsCount = Grid_tokens.tokens["".concat(size, "ColsCount")];
    var margin = Grid_tokens.tokens["".concat(size, "Margin")];
    return "\n                @media (min-width: ".concat(minWidth, ") {\n                    --plasma_private-grid-cols-count: var(").concat(colsCount, ");\n                    --plasma_private-grid-gap: calc(var(").concat(gap, ") / 2);\n                    --plasma_private-grid-margin: var(").concat(margin, ");\n                    \n                    padding: 0 var(--plasma_private-grid-margin);\n\n                    .").concat(Grid_tokens.classes.col, " {\n                        --plasma_private-col-width: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-").concat(size, "-size, var(--plasma_private-grid-col-default-size)));\n                        --plasma_private-col-offset: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-").concat(size, "-offset, var(--plasma_private-grid-col-default-offset)));\n\n                        width: var(--plasma_private-col-width, auto);\n                        margin-left: var(--plasma_private-col-offset, initial);\n                    }\n                }\n            ");
  }).filter(function (style) {
    return style;
  }).join('\n');
};

/**
 * Генерирует строку со стилями для обертки Grid и набором медиа-запросов
 *
 * @param {BreakpointToken} breakponts - объект view с набором токенов ширины вьюпорта
 * @param {string} viewName - название view из конфига
 * @return {string} стили для обертки Grid
 */
var getBaseGridView = function getBaseGridView(breakponts, viewName) {
  return "\n        ".concat(initialGridViewStyle, "\n\n        &.").concat(getGridViewClass(viewName), " {\n            ").concat(gridMediaQueryTemplate(breakponts), "\n        }\n    ");
};

/**
 * Используется для получения токенов для view="legacy"
 */
// TODO удалить после отказа от старой сетки
var getColLegacyTokens = function getColLegacyTokens(props) {
  return Object.entries(legacyGridSizesMap).reduce(function (acc, _ref) {
    var _ref2 = _rollupPluginBabelHelpers.slicedToArray(_ref, 2),
      legacyGridSize = _ref2[0],
      gridSize = _ref2[1];
    var offset = props["offset".concat(legacyGridSize)];
    var size = props["size".concat(legacyGridSize)];
    if (!offset && !size) {
      return acc;
    }
    return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, acc), {}, _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.defineProperty({}, "--plasma_private-grid-col-".concat(gridSize, "-size"), size), "--plasma_private-grid-col-".concat(gridSize, "-offset"), offset));
  }, {});
};

/**
 * Используется в Col.tsx для получения токенов для view="default"
 */
var getColTokens = function getColTokens(props) {
  // TODO удалить после отказа от старой сетки
  var legacyTokens = getColLegacyTokens(props);
  if (Object.keys(legacyTokens).length) {
    return legacyTokens;
  }
  return gridSizes.reduce(function (acc, size) {
    var _props$size, _props$size2;
    if (!props[size]) {
      return acc;
    }
    return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, acc), {}, _rollupPluginBabelHelpers.defineProperty(_rollupPluginBabelHelpers.defineProperty({}, "--plasma_private-grid-col-".concat(size, "-size"), (_props$size = props[size]) === null || _props$size === void 0 ? void 0 : _props$size.size), "--plasma_private-grid-col-".concat(size, "-offset"), (_props$size2 = props[size]) === null || _props$size2 === void 0 ? void 0 : _props$size2.offset));
  }, {});
};

exports.getBaseGridView = getBaseGridView;
exports.getColTokens = getColTokens;
exports.getGridViewClass = getGridViewClass;
exports.gridSizes = gridSizes;
//# sourceMappingURL=index.js.map

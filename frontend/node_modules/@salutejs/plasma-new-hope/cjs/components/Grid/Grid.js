'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index = require('../../utils/index.js');
var Grid_styles = require('./Grid.styles.js');
var base = require('./variations/_view/base.js');
var index$1 = require('./utils/index.js');

var _excluded = ["children", "view", "className", "style", "maxWidth"];
var gridRoot = function gridRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
      view = props.view,
      className = props.className,
      style = props.style,
      maxWidth = props.maxWidth,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var viewClass = index$1.getGridViewClass(view || 'deafult');
    var maxWidthValue = view === 'legacy' ? '90rem' : null;
    var maxWidthToken = maxWidthValue || maxWidth ? {
      '--plasma_private-grid-max-width': maxWidth || maxWidthValue
    } : {};
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      ref: ref,
      view: view,
      className: index.cx(viewClass, className),
      style: _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, maxWidthToken), style)
    }, rest), children);
  });
};
var gridConfig = {
  name: 'Grid',
  tag: 'div',
  layout: gridRoot,
  base: Grid_styles.base,
  variations: {
    view: {
      css: base.base
    }
  },
  defaults: {
    view: 'default'
  }
};

exports.gridConfig = gridConfig;
exports.gridRoot = gridRoot;
//# sourceMappingURL=Grid.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
require('@linaria/react');
var IconDone = require('../../../_Icon/Icons/IconDone.js');
var index = require('../../utils/index.js');
var Pagination_tokens = require('../../Pagination.tokens.js');
var PaginationSelectPerPage_styles = require('./PaginationSelectPerPage.styles.js');

var _IconDone;
var _excluded = ["value", "valuesList", "textPerPage", "onChangeValue"];
var PaginationSelectPerPage = function PaginationSelectPerPage(_ref) {
  var _ref$value = _ref.value,
    value = _ref$value === void 0 ? index.defaultValues.perPage : _ref$value,
    _ref$valuesList = _ref.valuesList,
    valuesList = _ref$valuesList === void 0 ? index.defaultValues.perPageList : _ref$valuesList,
    _ref$textPerPage = _ref.textPerPage,
    textPerPage = _ref$textPerPage === void 0 ? index.defaultValues.textPerPage : _ref$textPerPage,
    onChangeValue = _ref.onChangeValue,
    rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
  var _useState = React.useState(value),
    _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
    selectedValue = _useState2[0],
    setSelectedValue = _useState2[1];
  var handleSelectChange = function handleSelectChange(newValue) {
    if (newValue) {
      setSelectedValue(Number(newValue));
      onChangeValue === null || onChangeValue === void 0 || onChangeValue(Number(newValue));
    }
  };
  return /*#__PURE__*/React.createElement(PaginationSelectPerPage_styles.SelectPerPageRoot, rest, /*#__PURE__*/React.createElement(PaginationSelectPerPage_styles.SelectPerPageTypography, null, textPerPage), /*#__PURE__*/React.createElement(PaginationSelectPerPage_styles.SelectPerPageSelect, {
    className: Pagination_tokens.classes.selectWrapper,
    value: selectedValue,
    onChangeValue: handleSelectChange
  }, valuesList === null || valuesList === void 0 ? void 0 : valuesList.map(function (item) {
    return /*#__PURE__*/React.createElement(PaginationSelectPerPage_styles.SelectPerPageSelectItem, {
      contentLeft: item === selectedValue ? _IconDone || (_IconDone = /*#__PURE__*/React.createElement(IconDone.IconDone, {
        size: "xs",
        color: "inherit"
      })) : undefined,
      key: item,
      value: item,
      text: String(item)
    });
  })));
};

exports.PaginationSelectPerPage = PaginationSelectPerPage;
//# sourceMappingURL=PaginationSelectPerPage.js.map

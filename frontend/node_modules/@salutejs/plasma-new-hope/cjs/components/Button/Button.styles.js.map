{"version":3,"file":"Button.styles.js","sources":["../../../src/components/Button/Button.styles.ts"],"sourcesContent":["import { css } from '@linaria/core';\nimport { styled } from '@linaria/react';\n\nimport { applyEllipsis, addFocus } from '../../mixins';\nimport { component, mergeConfig } from '../../engines';\nimport { spinnerConfig, spinnerTokens } from '../Spinner';\n\nimport { classes, tokens } from './Button.tokens';\n\n// issue #823\nconst mergedConfig = mergeConfig(spinnerConfig);\nconst Spinner = component(mergedConfig);\n\nexport const ButtonText = styled.span`\n    min-width: 4ch;\n    flex-shrink: 2;\n    \n    ${applyEllipsis()}\n    \n\n    &.${String(classes.contentRelaxed)} {\n        text-align: start;\n        flex-grow: 2;\n    }\n`;\n\nexport const ButtonValue = styled.span`\n    color: var(${tokens.buttonValueColor});\n\n    margin: var(${tokens.buttonValueMargin});\n\n    min-width: 4ch;\n\n    ${applyEllipsis()}\n`;\n\n// TODO: #720\nexport const LoadWrap = styled.div<{ contentPlacing: string; isLoading?: boolean }>`\n    opacity: ${({ isLoading }) => (isLoading ? '0' : '1')};\n    display: flex;\n    align-items: inherit;\n    justify-content: ${({ contentPlacing }) => contentPlacing};\n    height: 100%;\n    width: 100%;\n`;\n\nexport const Loader = styled.div`\n    position: absolute;\n`;\n\nexport const StyledSpinner = styled(Spinner)`\n    ${spinnerTokens.size}: var(${tokens.buttonSpinnerSize});\n    ${spinnerTokens.color}: var(${tokens.buttonSpinnerColor});\n`;\n\nexport const StyledContentLeft = styled.div`\n    display: flex;\n    margin: var(${tokens.buttonLeftContentMargin});\n`;\n\nexport const StyledContentRight = styled.div`\n    display: flex;\n    margin: var(${tokens.buttonRightContentMargin});\n`;\n\nexport const base = css`\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    box-sizing: border-box;\n    justify-content: center;\n\n    appearance: none;\n    border: none;\n    cursor: pointer;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    a& {\n        text-decoration: none;\n    }\n\n    /* NOTE: \n        --plasma_computed-btn-br-radius is defined in Button.tsx\n    */\n    --plasma_private-btn-br: var(--plasma_computed-btn-br);\n    border-radius: var(--plasma_private-btn-br);\n\n    &&.${String(classes.buttonSquare)} {\n        width: var(${tokens.buttonHeight});\n        padding: 0;\n    }\n`;\n\n// INFO: Для возможности переиспользования стилей в других компонентах\nexport const baseContent = `\n    position: relative;\n    display: inline-flex;\n    align-items: center;\n    box-sizing: border-box;\n    justify-content: center;\n\n    appearance: none;\n    border: none;\n    cursor: pointer;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n    a& {\n        text-decoration: none;\n    }\n\n    /* NOTE: \n        --plasma_computed-btn-br-radius is defined in Button.tsx\n    */\n    --plasma_private-btn-br: var(--plasma_computed-btn-br);\n    border-radius: var(--plasma_private-btn-br);\n\n    &&.${String(classes.buttonSquare)} {\n        width: var(${tokens.buttonHeight});\n        padding: 0;\n    }\n\n    color: var(${tokens.buttonColor});\n    background-color: var(${tokens.buttonBackgroundColor});\n\n    :hover {\n        color: var(${tokens.buttonColorHover}, var(${tokens.buttonColor}));\n        background-color: var(${tokens.buttonBackgroundColorHover}, var(${tokens.buttonBackgroundColor}));\n\n        scale: var(${tokens.buttonScaleHover});\n    }\n\n    :active {\n        color: var(${tokens.buttonColorActive}, var(${tokens.buttonColor}));\n        background-color: var(${tokens.buttonBackgroundColorActive}, var(${tokens.buttonBackgroundColor}));\n\n        scale: var(${tokens.buttonScaleActive});\n    }\n\n    height: var(${tokens.buttonHeight});\n    width: var(${tokens.buttonWidth});\n\n    /* TODO: #714 move these calc's to plasma-mapping | ds-generator and add Math.round() */\n    padding: 0 var(${tokens.buttonPadding}, calc(var(${tokens.buttonHeight}) * 1.618 / 4));\n\n    font-family: var(${tokens.buttonFontFamily});\n    font-size: var(${tokens.buttonFontSize});\n    font-style: var(${tokens.buttonFontStyle});\n    font-weight: var(${tokens.buttonFontWeight});\n    letter-spacing: var(${tokens.buttonLetterSpacing});\n    line-height: var(${tokens.buttonLineHeight});\n\n    /* TODO: #710 make it token API ? */\n    --plasma_private-btn-outline-size: var(--plasma-button-outline-size, 0.0625rem);\n\n    :focus {\n        outline: none;\n    }\n\n    ${addFocus({\n        outlineOffset: '-0.125rem',\n        outlineSize: 'var(--plasma_private-btn-outline-size)',\n        outlineRadius: 'calc(0.125rem + var(--plasma_private-btn-br))',\n        outlineColor: `var(${tokens.buttonFocusColor})`,\n    })}\n\n    &[disabled] {\n        opacity: var(${tokens.buttonDisabledOpacity});\n        cursor: not-allowed;\n\n        :hover,\n        :active {\n            scale: none;\n\n            color: var(${tokens.buttonColor});\n            background-color: var(${tokens.buttonBackgroundColor});\n        }\n    }\n\n    &.${classes.fixedStretching} {\n        width: var(${tokens.buttonWidth});\n    }\n    &.${classes.filledStretching} {\n        width: 100%;\n    }\n    &.${classes.autoStretching} {\n        width: fit-content;\n    }\n`;\n"],"names":["mergedConfig","mergeConfig","spinnerConfig","Spinner","component","ButtonText","styled","name","class","propsAsIs","ButtonValue","_exp6","_ref","isLoading","_exp7","_ref2","contentPlacing","LoadWrap","vars","Loader","_exp8","StyledSpinner","StyledContentLeft","StyledContentRight","base"],"mappings":";;;;;;;;;;;AASA;AACA,IAAMA,YAAY,gBAAGC,kBAAW,CAACC,uBAAa,CAAC,CAAA;AAC/C,IAAMC,OAAO,gBAAGC,gBAAS,CAACJ,YAAY,CAAC,CAAA;AAEhC,IAAMK,UAAU,gBAAGC,YAAM,CAAA,MAAA,CAAA,CAAA;AAAAC,EAAAA,IAAA,EAAA,YAAA;AAAAC,EAAAA,OAAAA,EAAA,SAAA;AAAAC,EAAAA,SAAA,EAAA,KAAA;AAAA,CAW/B,EAAA;AAEM,IAAMC,WAAW,gBAAGJ,YAAM,CAAA,MAAA,CAAA,CAAA;AAAAC,EAAAA,IAAA,EAAA,aAAA;AAAAC,EAAAA,OAAAA,EAAA,SAAA;AAAAC,EAAAA,SAAA,EAAA,KAAA;AAAA,CAQhC,EAAA;;AAED;AAAA,IAAAE,KAAA,GAnCkBA,SAmClBA,KAAAA,GAAA;AAAA,EAAA,OAEe,UAAAC,IAAA,EAAA;AAAA,IAAA,IAAGC,SAAAA,GAAAA,IAAAA,CAAAA,SAAAA,CAAAA;AAAAA,IAAAA,OAAiBA,SAAS,GAAG,GAAG,GAAG,GAAI,CAAA;AAAA,GAAA,CAAA;AAAA,CAAA,CAAA;AAAA,IAAAC,KAAA,GArCvCA,SAqCuCA,KAAAA,GAAA;AAAA,EAAA,OAGlC,UAAAC,KAAA,EAAA;AAAA,IAAA,IAAGC,cAAAA,GAAAA,KAAAA,CAAAA,cAAAA,CAAAA;AAAAA,IAAAA,OAAqBA,cAAc,CAAA;AAAA,GAAA,CAAA;AAAA,CAAA,CAAA;AAJtD,IAAMC,QAAQ,gBAAGX,YAAM,CAAA,KAAA,CAAA,CAAA;AAAAC,EAAAA,IAAA,EAAA,UAAA;AAAAC,EAAAA,OAAAA,EAAA,SAAA;AAAAC,EAAAA,SAAA,EAAA,KAAA;AAAAS,EAAAA,IAAA,EAAA;AAAA,IAAA,WAAA,EAAA,cACfP,KAA0C,EAAA,CAAA;AAAA,IAAA,WAAA,EAAA,cAGlCG,KAAsC,EAAA,CAAA;AAAA,GAAA;AAAA,CAG5D,EAAA;AAEM,IAAMK,MAAM,gBAAGb,YAAM,CAAA,KAAA,CAAA,CAAA;AAAAC,EAAAA,IAAA,EAAA,QAAA;AAAAC,EAAAA,OAAAA,EAAA,SAAA;AAAAC,EAAAA,SAAA,EAAA,KAAA;AAAA,CAE3B,EAAA;AAAC,IAAAW,KAAA,GA/CgBA,SA+ChBA,KAAAA,GAAA;AAAA,EAAA,OAEkCjB,OAAO,CAAA;AAAA,CAAA,CAAA;AAApC,IAAMkB,aAAa,gBAAGf,YAAM,CAAAc,KAAA,EAAA,CAAA,CAAA;AAAAb,EAAAA,IAAA,EAAA,eAAA;AAAAC,EAAAA,OAAAA,EAAA,SAAA;AAAAC,EAAAA,SAAA,EAAA,IAAA;AAAA,CAGlC,EAAA;AAEM,IAAMa,iBAAiB,gBAAGhB,YAAM,CAAA,KAAA,CAAA,CAAA;AAAAC,EAAAA,IAAA,EAAA,mBAAA;AAAAC,EAAAA,OAAAA,EAAA,SAAA;AAAAC,EAAAA,SAAA,EAAA,KAAA;AAAA,CAGtC,EAAA;AAEM,IAAMc,kBAAkB,gBAAGjB,YAAM,CAAA,KAAA,CAAA,CAAA;AAAAC,EAAAA,IAAA,EAAA,oBAAA;AAAAC,EAAAA,OAAAA,EAAA,UAAA;AAAAC,EAAAA,SAAA,EAAA,KAAA;AAAA,CAGvC,EAAA;AAEM,IAAMe,IAAI,GA0BhB;;;;;;;;;;;"}
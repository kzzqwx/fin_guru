'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var roundness = require('../../utils/roundness.js');
var index = require('../../utils/index.js');
var base = require('./variations/_view/base.js');
var base$1 = require('./variations/_size/base.js');
var base$2 = require('./variations/_disabled/base.js');
var base$3 = require('./variations/_focused/base.js');
var base$5 = require('./variations/_stretching/base.js');
var base$4 = require('./variations/_blurred/base.js');
var Button_styles = require('./Button.styles.js');
var Button_tokens = require('./Button.tokens.js');

var _StyledSpinner;
var _excluded = ["children", "view", "size", "text", "value", "contentLeft", "contentRight", "contentPlacing", "isLoading", "loader", "stretch", "square", "pin", "disabled", "focused", "outlined", "className", "blur", "style", "stretching"];
var buttonRoot = function buttonRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
      view = props.view,
      size = props.size,
      text = props.text,
      value = props.value,
      contentLeft = props.contentLeft,
      contentRight = props.contentRight,
      _props$contentPlacing = props.contentPlacing,
      contentPlacing = _props$contentPlacing === void 0 ? 'default' : _props$contentPlacing,
      isLoading = props.isLoading,
      loader = props.loader,
      stretch = props.stretch,
      square = props.square,
      pin = props.pin,
      disabled = props.disabled,
      focused = props.focused,
      outlined = props.outlined,
      className = props.className,
      blur = props.blur,
      style = props.style,
      _props$stretching = props.stretching,
      stretching = _props$stretching === void 0 ? 'auto' : _props$stretching,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var txt = typeof children === 'string' ? children : text;
    var stretchingClass = stretch ? Button_tokens.classes.filledStretching : Button_tokens.classes["".concat(stretching, "Stretching")];
    var contentRelaxedClass = contentPlacing === 'relaxed' ? Button_tokens.classes.contentRelaxed : undefined;
    var squareClass = square ? Button_tokens.classes.buttonSquare : undefined;
    var buttonBorderRadius = pin ? roundness.convertRoundnessMatrix(pin, "var(".concat(Button_tokens.tokens.buttonRadius, ")"), "var(".concat(Button_tokens.tokens.buttonHeight, ")")) : "var(".concat(Button_tokens.tokens.buttonRadius, ", calc(var(").concat(Button_tokens.tokens.buttonHeight, ") / 4))");
    var contentPlacingMapper = {
      "default": 'center',
      relaxed: 'space-between'
    };
    var contentPlacementValue = contentPlacing ? contentPlacingMapper[contentPlacing] : 'center';
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      type: "button",
      ref: ref,
      view: view,
      size: size,
      value: value,
      disabled: disabled,
      focused: focused || outlined,
      contentPlacing: contentPlacing,
      className: index.cx(squareClass, stretchingClass, Button_tokens.classes.buttonItem, className),
      style: _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, style), {}, {
        '--plasma_computed-btn-br': buttonBorderRadius,
        '--plasma_private-blur': blur
      })
    }, rest), /*#__PURE__*/React.createElement(Button_styles.LoadWrap, {
      contentPlacing: contentPlacementValue,
      isLoading: isLoading
    }, contentLeft && /*#__PURE__*/React.createElement(Button_styles.StyledContentLeft, null, contentLeft), txt ? /*#__PURE__*/React.createElement(Button_styles.ButtonText, {
      className: contentRelaxedClass
    }, txt) : children, value && /*#__PURE__*/React.createElement(Button_styles.ButtonValue, null, value), contentRight && /*#__PURE__*/React.createElement(Button_styles.StyledContentRight, null, contentRight)), isLoading && /*#__PURE__*/React.createElement(Button_styles.Loader, null, loader || _StyledSpinner || (_StyledSpinner = /*#__PURE__*/React.createElement(Button_styles.StyledSpinner, null))));
  });
};
var buttonConfig = {
  name: 'Button',
  tag: 'button',
  layout: buttonRoot,
  base: Button_styles.base,
  variations: {
    view: {
      css: base.base
    },
    size: {
      css: base$1.base
    },
    disabled: {
      css: base$2.base,
      attrs: true
    },
    focused: {
      css: base$3.base
      // TODO: isLoading => disabled
    },
    blurred: {
      css: base$4.base
    },
    stretching: {
      css: base$5.base
    }
  },
  defaults: {
    view: 'secondary',
    size: 'm',
    stretching: 'auto'
  }
};

exports.buttonConfig = buttonConfig;
exports.buttonRoot = buttonRoot;
//# sourceMappingURL=Button.js.map

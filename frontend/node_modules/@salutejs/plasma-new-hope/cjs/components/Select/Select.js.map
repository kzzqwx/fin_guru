{"version":3,"file":"Select.js","sources":["../../../src/components/Select/Select.tsx"],"sourcesContent":["import React, { Children, forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { safeUseId, useForkRef } from '@salutejs/plasma-core';\n\nimport { RootProps } from '../../engines';\nimport { cx } from '../../utils';\nimport { getPlacements } from '../Dropdown/utils';\nimport { useDidMountEffect, useForceUpdate } from '../../hooks';\n\nimport { base as targetCSS } from './variations/_target/base';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { SelectTarget } from './ui';\nimport { getChildren, getNewSelected, getValues } from './utils';\nimport { classes } from './Select.tokens';\nimport { StyledNativeSelect, StyledPopover, StyledRoot, StyledSelect } from './Select.styles';\nimport type { SelectPrimitiveValue, SelectProps } from './Select.types';\nimport { useKeyNavigation } from './hooks';\n\n/**\n * Выпадающий список без внешнего контроля видимости.\n */\nexport const selectRoot = (Root: RootProps<HTMLSelectElement, SelectProps>) =>\n    forwardRef<HTMLSelectElement, SelectProps>(\n        (\n            {\n                name,\n                form,\n                readOnly,\n                disabled,\n                label,\n                id,\n                children,\n                role,\n                target,\n                view,\n                size,\n                frame,\n                usePortal,\n                enumerationType = 'comma',\n                opened = false,\n                placement = 'bottom',\n                onToggle,\n                ...rest\n            },\n            outerRootRef,\n        ) => {\n            const forceUpdate = useForceUpdate();\n            const uniqId = safeUseId();\n            const innerId = id || uniqId;\n            const { valueType = 'single', value } = rest;\n            const offset = [0, 4] as [number, number];\n\n            const [ref, setRef] = useState<HTMLSelectElement | null>(null);\n            const rootRef = useRef<HTMLSelectElement | null>(null);\n            const handleRef = useForkRef<HTMLSelectElement>(rootRef, outerRootRef);\n\n            const targetRef = useRef<HTMLButtonElement>(null);\n            const chipsRefs = useRef<Array<HTMLButtonElement>>([]);\n            const selectRef = useRef<HTMLDivElement>(null);\n            const itemsRefs = useRef<Array<HTMLDivElement>>([]);\n            const controlledRefs = { targetRef, chipsRefs, selectRef, itemsRefs };\n\n            const [innerOpened, setOpened] = useState(opened);\n\n            // INFO: нужно высчитывать для корректной работы портала\n            const dynamicTargetWidth = targetRef.current?.offsetWidth;\n            const withNativeSelectVisible = valueType === 'native' ? classes.nativeSelectVisible : undefined;\n\n            // INFO: Из-за того, что классы передаются через ref,\n            // состояние пропсов после изменения view, size, target\n            // всегда предыдущее, поэтому нужно делать форс-ререндер\n            useDidMountEffect(() => {\n                forceUpdate();\n            }, [view, size, target]);\n\n            useEffect(() => {\n                if (disabled || readOnly) {\n                    return;\n                }\n\n                setOpened(opened);\n            }, [opened, disabled, readOnly]);\n\n            const onInnerToggle = useCallback(\n                (openValue: boolean, event: React.SyntheticEvent | Event) => {\n                    if (disabled || readOnly) {\n                        return;\n                    }\n\n                    if (onToggle) {\n                        onToggle(openValue, event);\n                        return;\n                    }\n\n                    setOpened(openValue);\n                },\n                [disabled, readOnly, onToggle],\n            );\n\n            const updateValue = useCallback(\n                (item: HTMLElement, event: React.SyntheticEvent | Event) => {\n                    const {\n                        dataset: { value: newValue },\n                    } = item;\n\n                    if (rest.valueType === 'multiple') {\n                        const newSelected = getNewSelected(rest.value, newValue, rest.valueType);\n                        rest.onChangeValue?.(newSelected);\n\n                        return;\n                    }\n\n                    const newSelected = getNewSelected(rest.value, newValue, 'single');\n\n                    rest.onChangeValue?.(newSelected);\n\n                    onInnerToggle?.(false, event);\n                },\n                [rest.value, rest.valueType, rest.onChangeValue, onToggle, onInnerToggle],\n            );\n\n            const onClickChildrenItem = useCallback(\n                (event: React.MouseEvent<HTMLDivElement>) => {\n                    // INFO: Для корректной работы компонента Popper\n                    event.stopPropagation();\n\n                    const item = event.currentTarget as HTMLElement;\n\n                    updateValue(item, event);\n                },\n                [updateValue],\n            );\n\n            const onNativeSelectChange = useCallback(\n                (event: React.ChangeEvent<HTMLSelectElement>) => {\n                    if (rest.valueType === 'multiple') {\n                        return;\n                    }\n\n                    const { value: newValue } = event.target;\n                    const newSelected = getNewSelected(rest.value, newValue, 'native');\n\n                    rest.onChangeValue?.(newSelected);\n                },\n                [rest.value, rest.valueType, rest.onChangeValue],\n            );\n\n            const onChangeChipValue = useCallback(\n                (newValue?: Array<SelectPrimitiveValue>) => {\n                    if (rest.valueType !== 'multiple') {\n                        return;\n                    }\n\n                    rest.onChangeValue?.(newValue);\n                },\n                [rest.valueType],\n            );\n\n            const { onKeyDownTarget, onKeyDownSelect } = useKeyNavigation({\n                controlledRefs,\n                opened: innerOpened,\n                enumerationType,\n                valueType,\n                value,\n                updateOpened: onInnerToggle,\n                updateValue,\n            });\n\n            const childrenArray = useMemo(() => Children.toArray(children), [children]) as React.ReactElement[];\n\n            const childrenMemo = useMemo(\n                () => getChildren(childrenArray, { onClick: onClickChildrenItem, childrenRefs: itemsRefs }, value),\n                [childrenArray, value, innerOpened],\n            );\n\n            const values = useMemo(() => getValues(childrenArray, value), [childrenArray, value]);\n\n            return (\n                <StyledRoot ref={selectRef}>\n                    <StyledNativeSelect\n                        aria-invalid=\"false\"\n                        aria-hidden=\"true\"\n                        aria-readonly={readOnly}\n                        tabIndex={valueType === 'native' ? 0 : -1}\n                        form={form}\n                        name={name}\n                        ref={handleRef}\n                        value={`${value}`}\n                        disabled={disabled || readOnly}\n                        onChange={onNativeSelectChange}\n                        className={cx(ref?.classList.toString(), withNativeSelectVisible)}\n                    >\n                        {valueType === 'native' && childrenMemo}\n                    </StyledNativeSelect>\n                    <StyledPopover\n                        role={role}\n                        isOpen={innerOpened}\n                        onToggle={onInnerToggle}\n                        target={\n                            <SelectTarget\n                                tabIndex={valueType === 'native' ? -1 : 0}\n                                opened={innerOpened}\n                                target={target}\n                                values={values}\n                                label={label}\n                                enumerationType={enumerationType}\n                                readOnly={readOnly}\n                                disabled={disabled}\n                                size={size}\n                                ref={targetRef}\n                                chipsRefs={chipsRefs}\n                                id={innerId}\n                                onChange={onChangeChipValue}\n                                onKeyDown={onKeyDownTarget}\n                            />\n                        }\n                        className={cx(ref?.classList.toString())} // INFO: Прокидываем стили для Popover\n                        id={innerId}\n                        offset={offset}\n                        frame={frame}\n                        placement={getPlacements(placement)}\n                        trigger=\"click\"\n                        usePortal={usePortal}\n                        selectWidth={dynamicTargetWidth}\n                        isFocusTrapped={false}\n                        preventOverflow={false}\n                        closeOnEsc={false}\n                        closeOnOverlayClick\n                    >\n                        <Root ref={setRef} target={target} view={view} size={size} {...rest}>\n                            {valueType !== 'native' && (\n                                <StyledSelect onKeyDown={onKeyDownSelect}>{childrenMemo}</StyledSelect>\n                            )}\n                        </Root>\n                    </StyledPopover>\n                </StyledRoot>\n            );\n        },\n    );\n\nexport const selectConfig = {\n    name: 'Select',\n    tag: 'div',\n    layout: selectRoot,\n    base: '',\n    variations: {\n        target: {\n            css: targetCSS,\n        },\n        view: {\n            css: viewCSS,\n        },\n        size: {\n            css: sizeCSS,\n        },\n    },\n    defaults: {\n        view: 'default',\n        size: 'm',\n    },\n};\n"],"names":["selectRoot","Root","forwardRef","_ref","outerRootRef","_targetRef$current","name","form","readOnly","disabled","label","id","children","role","target","view","size","frame","usePortal","_ref$enumerationType","enumerationType","_ref$opened","opened","_ref$placement","placement","onToggle","rest","_objectWithoutProperties","_excluded","forceUpdate","useForceUpdate","uniqId","safeUseId","innerId","_rest$valueType","valueType","value","offset","_useState","useState","_useState2","_slicedToArray","ref","setRef","rootRef","useRef","handleRef","useForkRef","targetRef","chipsRefs","selectRef","itemsRefs","controlledRefs","_useState3","_useState4","innerOpened","setOpened","dynamicTargetWidth","current","offsetWidth","withNativeSelectVisible","classes","nativeSelectVisible","undefined","useDidMountEffect","useEffect","onInnerToggle","useCallback","openValue","event","updateValue","item","_rest$onChangeValue2","newValue","dataset","_rest$onChangeValue","newSelected","getNewSelected","onChangeValue","call","onClickChildrenItem","stopPropagation","currentTarget","onNativeSelectChange","_rest$onChangeValue3","onChangeChipValue","_rest$onChangeValue4","_useKeyNavigation","useKeyNavigation","updateOpened","onKeyDownTarget","onKeyDownSelect","childrenArray","useMemo","Children","toArray","childrenMemo","getChildren","onClick","childrenRefs","values","getValues","React","createElement","StyledRoot","StyledNativeSelect","tabIndex","concat","onChange","className","cx","classList","toString","StyledPopover","isOpen","SelectTarget","onKeyDown","getPlacements","trigger","selectWidth","isFocusTrapped","preventOverflow","closeOnEsc","closeOnOverlayClick","_extends","StyledSelect","selectConfig","tag","layout","base","variations","css","targetCSS","viewCSS","sizeCSS","defaults"],"mappings":"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"}
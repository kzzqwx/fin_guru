'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var Select_tokens = require('../../Select.tokens.js');
var index = require('../../../../utils/index.js');
var SelectChip = require('../SelectChip/SelectChip.js');
var useKeyNavigation = require('../../hooks/useKeyNavigation.js');
var SelectTarget_styles = require('./SelectTarget.styles.js');

var _excluded = ["values", "target", "label", "opened", "readOnly", "disabled", "enumerationType", "size", "id", "chipsRefs", "onChange", "onKeyDown"];
var hasNoFocus = Select_tokens.classes.hasNoFocus,
  hasChips = Select_tokens.classes.hasChips,
  innerLabelUp = Select_tokens.classes.innerLabelUp,
  arrowInverse = Select_tokens.classes.arrowInverse,
  selectTarget = Select_tokens.classes.selectTarget,
  selectTargetArrow = Select_tokens.classes.selectTargetArrow,
  selectTargeText = Select_tokens.classes.selectTargeText,
  selectTargetLabel = Select_tokens.classes.selectTargetLabel;

/**
 * Элемент для выпадающего списка
 */
var SelectTarget = /*#__PURE__*/React.forwardRef(function (_ref, ref) {
  var values = _ref.values,
    _ref$target = _ref.target,
    target = _ref$target === void 0 ? 'textField-like' : _ref$target,
    label = _ref.label,
    opened = _ref.opened,
    readOnly = _ref.readOnly,
    disabled = _ref.disabled,
    enumerationType = _ref.enumerationType,
    size = _ref.size,
    id = _ref.id,
    chipsRefs = _ref.chipsRefs,
    onChange = _ref.onChange,
    onKeyDown = _ref.onKeyDown,
    rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
  var hasText = Boolean(values === null || values === void 0 ? void 0 : values.some(function (_ref2) {
    var _ref3 = _rollupPluginBabelHelpers.slicedToArray(_ref2, 1),
      value = _ref3[0];
    return value;
  }));
  var hasLabel = label && size !== 'xs' && target === 'textField-like';
  var textContent = values === null || values === void 0 ? void 0 : values.map(function (_ref4) {
    var _ref5 = _rollupPluginBabelHelpers.slicedToArray(_ref4, 2),
      text = _ref5[1];
    return text;
  }).join(', ');
  var contentRef = React.useRef(null);
  var withArrowInverse = opened ? arrowInverse : undefined;
  var withInnerLabelUp = hasLabel && hasText ? innerLabelUp : undefined;
  var withHasChips = hasText && enumerationType === 'chip' && target === 'textField-like' ? hasChips : undefined;
  var withNoFocus = target === 'textField-like' ? hasNoFocus : undefined;
  var isLabelVisible = !hasText || hasLabel && enumerationType === 'comma';
  var onChipClick = React.useCallback(function (event) {
    event.stopPropagation();
  }, []);
  var onChipClear = React.useCallback(function (value, text, index) {
    var newValue = values === null || values === void 0 ? void 0 : values.filter(function (_ref6) {
      var _ref7 = _rollupPluginBabelHelpers.slicedToArray(_ref6, 2),
        itemValue = _ref7[0],
        itemText = _ref7[1];
      return !(itemValue === value && itemText === text);
    }).map(function (_ref8) {
      var _ref9 = _rollupPluginBabelHelpers.slicedToArray(_ref8, 1),
        itemValue = _ref9[0];
      return itemValue;
    });
    chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.splice(index, 1);
    onChange === null || onChange === void 0 || onChange(newValue);
  }, [values, onChange]);
  var onChipKeyDown = React.useCallback(function (value, text, index, event) {
    var code = event.code,
      shiftKey = event.shiftKey;
    if (code === useKeyNavigation.Keys.Tab || code === useKeyNavigation.Keys.Tab && shiftKey) {
      event.preventDefault();
    }
    if (code === useKeyNavigation.Keys.Backspace) {
      onChipClear(value, text, index);
    }
  }, [onChipClear]);
  var onWheel = React.useCallback(function (event) {
    var deltaY = event.deltaY;
    if (contentRef.current) {
      contentRef.current.scrollLeft += Math.round(deltaY);
    }
  }, []);
  var getRef = React.useCallback(function (element, index) {
    if (element && chipsRefs && chipsRefs.current) {
      chipsRefs.current[index] = element;
    }
  }, []);

  // INFO: Нужно очищать на каждый ререндер компонента для актуализации состояния рефов
  if (chipsRefs) {
    chipsRefs.current = [];
  }
  return /*#__PURE__*/React.createElement(SelectTarget_styles.StyledSelectTarget, _rollupPluginBabelHelpers.extends({}, rest, {
    ref: ref,
    opened: opened,
    target: target,
    readOnly: readOnly,
    disabled: disabled,
    title: textContent,
    "aria-label": label,
    className: index.cx(withInnerLabelUp, withHasChips, withNoFocus, selectTarget),
    onWheel: onWheel,
    onKeyDown: onKeyDown,
    stretching: "filled"
  }), hasText && (enumerationType === 'comma' || target === 'button-like' ? /*#__PURE__*/React.createElement(SelectTarget_styles.StyledText, {
    className: selectTargeText
  }, textContent) : /*#__PURE__*/React.createElement(SelectTarget_styles.StyledChipsWrapper, {
    ref: contentRef
  }, /*#__PURE__*/React.createElement(SelectTarget_styles.StyledChips, null, values === null || values === void 0 ? void 0 : values.map(function (_ref10, index) {
    var _ref11 = _rollupPluginBabelHelpers.slicedToArray(_ref10, 2),
      value = _ref11[0],
      text = _ref11[1];
    return /*#__PURE__*/React.createElement(SelectChip.SelectChip, {
      index: index,
      ref: function ref(element) {
        return getRef(element, index);
      },
      key: "".concat(value, "_").concat(text),
      disabled: disabled,
      readOnly: readOnly,
      value: value,
      text: text,
      onClear: function onClear(v, t) {
        return onChipClear(v, t, index);
      },
      onClick: onChipClick,
      onKeyDown: onChipKeyDown
    });
  })))), isLabelVisible && /*#__PURE__*/React.createElement(SelectTarget_styles.StyledLabel, {
    className: selectTargetLabel,
    htmlFor: id
  }, label), /*#__PURE__*/React.createElement(SelectTarget_styles.StyledArrow, {
    size: "s",
    color: "inherit",
    className: index.cx(selectTargetArrow, withArrowInverse)
  }));
});

exports.SelectTarget = SelectTarget;
//# sourceMappingURL=SelectTarget.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaCore = require('@salutejs/plasma-core');
var tokens = require('../../tokens.js');
var index = require('../../../../utils/index.js');
var TabsContext = require('../../TabsContext.js');
var base$1 = require('./variations/_view/base.js');
var base = require('./variations/_size/base.js');
var base$3 = require('./variations/_pilled/base.js');
var base$2 = require('./variations/_disabled/base.js');
var TabItem_styles = require('./TabItem.styles.js');

var _excluded = ["size", "view", "isActive", "selected", "disabled", "pilled", "children", "contentLeft", "contentRight", "animated", "onIndexChange", "itemIndex", "tabIndex", "className"];
var tabItemRoot = function tabItemRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, outerRef) {
    var size = props.size,
      view = props.view,
      isActive = props.isActive,
      selected = props.selected,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$pilled = props.pilled,
      pilled = _props$pilled === void 0 ? false : _props$pilled,
      children = props.children,
      contentLeft = props.contentLeft,
      contentRight = props.contentRight,
      _props$animated = props.animated,
      animated = _props$animated === void 0 ? true : _props$animated,
      onIndexChange = props.onIndexChange,
      itemIndex = props.itemIndex,
      tabIndex = props.tabIndex,
      className = props.className,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var innerRef = React.useRef(null);
    var ref = plasmaCore.useForkRef(outerRef, innerRef);
    var refs = React.useContext(TabsContext.TabsContext);
    var role = 'tab';
    var pilledAttr = view !== 'clear' && pilled;
    var animatedClass = animated ? tokens.classes.tabItemAnimated : undefined;
    var pilledClass = pilledAttr ? tokens.classes.tabsPilled : undefined;
    var selectedClass = isActive || selected ? tokens.classes.selectedTabsItem : undefined;
    var hasKeyNavigation = itemIndex !== undefined && onIndexChange !== undefined;
    var navigationTabIndex = !disabled && (refs === null || refs === void 0 ? void 0 : refs.current) === itemIndex ? 0 : -1;
    React.useEffect(function () {
      if (!refs) {
        return;
      }
      refs.register(innerRef);
      return function () {
        return refs.unregister(innerRef);
      };
    }, [refs]);
    var onItemFocus = React.useCallback(function (event) {
      if (!hasKeyNavigation && innerRef !== null && innerRef !== void 0 && innerRef.current) {
        innerRef.current.scrollTo({
          top: 0,
          left: innerRef.current.offsetLeft,
          behavior: 'smooth'
        });
        return;
      }
      if (disabled || !refs) {
        return;
      }
      var focusIndex = refs.items.findIndex(function (itemRef) {
        return itemRef.current === event.target;
      });
      if (focusIndex === refs.current) {
        return;
      }
      onIndexChange === null || onIndexChange === void 0 || onIndexChange(focusIndex);
      refs.setCurrent(focusIndex);
    }, [refs, innerRef, onIndexChange, disabled]);
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      ref: ref,
      disabled: disabled,
      pilled: pilled,
      role: role,
      view: view,
      size: size,
      onFocus: onItemFocus,
      tabIndex: hasKeyNavigation ? navigationTabIndex : tabIndex,
      className: index.cx(pilledClass, selectedClass, animatedClass, className)
    }, rest), /*#__PURE__*/React.createElement(React.Fragment, null, contentLeft && /*#__PURE__*/React.createElement(TabItem_styles.LeftContent, {
      className: tokens.classes.tabLeftContent
    }, contentLeft), /*#__PURE__*/React.createElement(TabItem_styles.StyledContent, {
      className: tokens.classes.tabContent
    }, children), contentRight && /*#__PURE__*/React.createElement(TabItem_styles.RightContent, {
      className: tokens.classes.tabRightContent
    }, contentRight)));
  });
};
var tabItemConfig = {
  name: 'TabItem',
  tag: 'button',
  layout: tabItemRoot,
  base: TabItem_styles.base,
  variations: {
    size: {
      css: base.base
    },
    view: {
      css: base$1.base
    },
    disabled: {
      css: base$2.base,
      attrs: true
    },
    pilled: {
      css: base$3.base
    }
  },
  defaults: {
    view: 'default'
  }
};

exports.tabItemConfig = tabItemConfig;
exports.tabItemRoot = tabItemRoot;
//# sourceMappingURL=TabItem.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaCore = require('@salutejs/plasma-core');
var IconDisclosureLeft = require('../../../_Icon/Icons/IconDisclosureLeft.js');
var IconDisclosureRight = require('../../../_Icon/Icons/IconDisclosureRight.js');
require('@linaria/react');
var tokens = require('../../tokens.js');
var index = require('../../../../utils/index.js');
var TabsContext = require('../../TabsContext.js');
var base = require('./variations/_size/base.js');
var base$1 = require('./variations/_view/base.js');
var base$2 = require('./variations/_disabled/base.js');
var base$4 = require('./variations/_pilled/base.js');
var base$3 = require('./variations/_stretch/base.js');
var Tabs_styles = require('./Tabs.styles.js');

var _excluded = ["id", "stretch", "disabled", "size", "view", "children", "pilled", "index", "className"];
var Keys = /*#__PURE__*/function (Keys) {
  Keys[Keys["end"] = 35] = "end";
  Keys[Keys["home"] = 36] = "home";
  Keys[Keys["left"] = 37] = "left";
  Keys[Keys["right"] = 39] = "right";
  return Keys;
}(Keys || {});
var tabsRoot = function tabsRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, outerRef) {
    var id = props.id,
      _props$stretch = props.stretch,
      stretch = _props$stretch === void 0 ? false : _props$stretch,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      size = props.size,
      view = props.view,
      children = props.children,
      pilled = props.pilled,
      index$1 = props.index,
      className = props.className,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var _useState = React.useState(true),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      firstItemVisible = _useState2[0],
      setFirstItemVisible = _useState2[1];
    var _useState3 = React.useState(true),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      lastItemVisible = _useState4[0],
      setLastItemVisible = _useState4[1];
    var refs = React.useMemo(function () {
      return new TabsContext.TabItemRefs(index$1);
    }, []);
    var uniqId = plasmaCore.safeUseId();
    var tabsId = id || uniqId;
    var isFilled = view === 'filled'; // outer padding is only for filled view
    var pilledAttr = view !== 'clear' && pilled;
    var pilledClass = pilledAttr ? tokens.classes.tabsPilled : undefined;
    var stretchClass = firstItemVisible && lastItemVisible && stretch ? tokens.classes.tabsStretch : undefined;
    var hasLeftArrowClass = !firstItemVisible ? tokens.classes.tabsHasLeftArrow : undefined;
    var hasRightArrowClass = !lastItemVisible ? tokens.classes.tabsHasRightArrow : undefined;
    var scrollRef = React.useRef(null);
    var trackRef = React.useRef(null);
    var onPrev = React.useCallback(function () {
      !disabled && scrollRef.current && plasmaCore.animatedScrollToX(scrollRef.current, scrollRef.current.scrollLeft - scrollRef.current.offsetWidth / 2);
    }, [disabled, scrollRef]);
    var onNext = React.useCallback(function () {
      !disabled && scrollRef.current && plasmaCore.animatedScrollToX(scrollRef.current, scrollRef.current.scrollLeft + scrollRef.current.offsetWidth / 2);
    }, [disabled, scrollRef]);
    var PreviousButton = React.useMemo(function () {
      return /*#__PURE__*/React.createElement(Tabs_styles.StyledArrow, {
        type: "button",
        "aria-label": "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u0442\u0430\u0431",
        onClick: onPrev,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled,
        isFilled: isFilled,
        isLeftArrow: true
      }, /*#__PURE__*/React.createElement(IconDisclosureLeft.IconDisclosureLeft, {
        color: "var(".concat(tokens.tokens.arrowColor, ")")
      }));
    }, [onPrev, disabled, isFilled]);
    var NextButton = React.useMemo(function () {
      return /*#__PURE__*/React.createElement(Tabs_styles.StyledArrow, {
        type: "button",
        "aria-label": "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u0442\u0430\u0431",
        onClick: onNext,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled,
        isFilled: isFilled
      }, /*#__PURE__*/React.createElement(IconDisclosureRight.IconDisclosureRight, {
        color: "var(".concat(tokens.tokens.arrowColor, ")")
      }));
    }, [onNext, disabled, isFilled]);
    var handleScroll = React.useCallback(function (event) {
      event.stopPropagation();
      var maxScrollLeft = event.currentTarget.scrollWidth - event.currentTarget.clientWidth;
      setFirstItemVisible(event.currentTarget.scrollLeft <= 0);
      setLastItemVisible(event.currentTarget.scrollLeft >= maxScrollLeft);
    }, [setFirstItemVisible, setLastItemVisible]);
    var onKeyDown = React.useCallback(function (event) {
      if (index$1 === undefined) {
        return;
      }
      var minIndex = 0;
      var maxIndex = refs.items.length - 1;
      var nextIndex;
      switch (event.keyCode) {
        case Keys.end:
          nextIndex = maxIndex;
          break;
        case Keys.left:
          nextIndex = index$1 > minIndex ? index$1 - 1 : index$1;
          break;
        case Keys.right:
          nextIndex = index$1 < maxIndex ? index$1 + 1 : index$1;
          break;
        case Keys.home:
          nextIndex = minIndex;
          break;
        default:
          return;
      }
      if (nextIndex !== index$1) {
        var _refs$items$nextIndex, _refs$items$nextIndex2;
        event.preventDefault();
        (_refs$items$nextIndex = refs.items[nextIndex].current) === null || _refs$items$nextIndex === void 0 || _refs$items$nextIndex.focus();
        (_refs$items$nextIndex2 = refs.items[nextIndex].current) === null || _refs$items$nextIndex2 === void 0 || _refs$items$nextIndex2.scrollIntoView({
          block: 'center',
          inline: 'center',
          behavior: 'smooth'
        });
      }
    }, [index$1]);
    React.useEffect(function () {
      var _scrollRef$current, _scrollRef$current2;
      setLastItemVisible(((_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollWidth) === ((_scrollRef$current2 = scrollRef.current) === null || _scrollRef$current2 === void 0 ? void 0 : _scrollRef$current2.clientWidth));
    }, []);
    return /*#__PURE__*/React.createElement(TabsContext.TabsContext.Provider, {
      value: refs
    }, /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      view: view,
      role: "tablist",
      size: size,
      pilled: pilled,
      id: tabsId,
      ref: outerRef,
      disabled: disabled,
      className: index.cx(pilledClass, stretchClass, hasLeftArrowClass, hasRightArrowClass, className),
      onKeyDown: onKeyDown
    }, rest), !firstItemVisible && PreviousButton, /*#__PURE__*/React.createElement(Tabs_styles.StyledContentWrapper, {
      ref: scrollRef,
      onScroll: handleScroll
    }, /*#__PURE__*/React.createElement(Tabs_styles.StyledContent, {
      ref: trackRef
    }, children)), !lastItemVisible && NextButton));
  });
};
var tabsConfig = {
  name: 'Tabs',
  tag: 'div',
  layout: tabsRoot,
  base: Tabs_styles.base,
  variations: {
    size: {
      css: base.base
    },
    view: {
      css: base$1.base
    },
    disabled: {
      css: base$2.base,
      attrs: true
    },
    stretch: {
      css: base$3.base,
      attrs: true
    },
    pilled: {
      css: base$4.base
    }
  },
  defaults: {
    view: 'clear',
    size: 'xs'
  }
};

exports.tabsConfig = tabsConfig;
exports.tabsRoot = tabsRoot;
//# sourceMappingURL=Tabs.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var Toast_tokens = require('./Toast.tokens.js');
var Toast_styles = require('./Toast.styles.js');
var ToastProvider = require('./ToastProvider/ToastProvider.js');
var utils = require('./utils.js');

var _excluded = ["position", "offset", "fade", "text"];
var ToastControllerHoc = function ToastControllerHoc(ToastComponent) {
  return function ToastController(props) {
    var _props$position = props.position,
      position = _props$position === void 0 ? 'bottom' : _props$position,
      offset = props.offset,
      fade = props.fade,
      text = props.text,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var _useToastInner = ToastProvider.useToastInner(),
      hideToast = _useToastInner.hideToast,
      isVisible = _useToastInner.isVisible,
      hideTimeout = _useToastInner.hideTimeout,
      animationRunTimeout = _useToastInner.animationRunTimeout;
    var toastKey = "".concat(text).concat(position);
    var showedClass = isVisible ? Toast_tokens.classes.toastShowed : Toast_tokens.classes.toastHidden;
    var showedFadeClass = isVisible ? Toast_tokens.classes.toastFadeShowed : Toast_tokens.classes.toastFadeHidden;
    var toastProps = _rollupPluginBabelHelpers.objectSpread2({
      text: text,
      onCloseButtonClick: hideToast
    }, rest);
    React.useEffect(function () {
      return function () {
        if (hideTimeout !== null && hideTimeout !== void 0 && hideTimeout.current) {
          clearTimeout(hideTimeout.current);
        }
        if (animationRunTimeout !== null && animationRunTimeout !== void 0 && animationRunTimeout.current) {
          clearTimeout(animationRunTimeout.current);
        }
      };
    }, []);
    if (!text) {
      return null;
    }
    return /*#__PURE__*/React.createElement(React.Fragment, null, fade && /*#__PURE__*/React.createElement(Toast_styles.StyledOverlay, {
      className: showedFadeClass,
      zIndex: utils.FADE_Z_INDEX,
      backgroundColorProperty: utils.gradients[position],
      isClickable: false
    }), /*#__PURE__*/React.createElement(Toast_styles.StyledRoot, {
      key: toastKey,
      position: position,
      offset: offset,
      isVisible: isVisible,
      className: showedClass
    }, /*#__PURE__*/React.createElement(ToastComponent, toastProps)));
  };
};

exports.ToastControllerHoc = ToastControllerHoc;
//# sourceMappingURL=ToastController.js.map

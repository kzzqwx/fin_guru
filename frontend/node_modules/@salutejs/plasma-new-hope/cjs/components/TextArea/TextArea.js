import './TextArea_ob9y3r.css';
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaCore = require('@salutejs/plasma-core');
var index = require('../../utils/index.js');
var useAutoResize = require('./hooks/useAutoResize.js');
var TextArea_styles = require('./TextArea.styles.js');
var TextArea_tokens = require('./TextArea.tokens.js');
var base$2 = require('./variations/_view/base.js');
var base$1 = require('./variations/_size/base.js');
var base$3 = require('./variations/_disabled/base.js');

var _excluded = ["helperText", "status", "resize", "rightHelper", "leftHelper", "contentRight", "autoResize", "minAuto", "maxAuto", "label", "labelPlacement", "placeholder", "defaultValue", "height", "width", "value", "disabled", "size", "view", "id", "style", "className", "readOnly", "rows", "cols", "onChange"];
var innerPlaceholderUp = TextArea_tokens.classes.innerPlaceholderUp,
  focusedOuterPlaceholderColor = TextArea_tokens.classes.focusedOuterPlaceholderColor,
  hidePlaceHolder = TextArea_tokens.classes.hidePlaceHolder,
  styledContainer = TextArea_tokens.classes.styledContainer,
  styledTextArea = TextArea_tokens.classes.styledTextArea,
  styledTextAreaWrapper = TextArea_tokens.classes.styledTextAreaWrapper,
  styledPlaceholder = TextArea_tokens.classes.styledPlaceholder,
  styledHelpers = TextArea_tokens.classes.styledHelpers;
var base = "b6rykm0";

// TODO: Удалить после отказа от старых библиотек plasma-web / plasma-b2c
var fallbackStatusMap = {
  '': 'primary',
  success: 'positive',
  warning: 'warning',
  error: 'negative'
};

// TODO: Перенести этот метод в файл applyDynamicLabel.ts
var getDynamicLabelClasses = function getDynamicLabelClasses(props, focused) {
  var readOnly = props.readOnly,
    label = props.label,
    labelPlacement = props.labelPlacement,
    autoResize = props.autoResize,
    rows = props.rows,
    value = props.value,
    size = props.size;

  // Добавить класс отвечающий за изменение цвета плейсхолдера при фокусе
  var withFocusedOuterUpPlaceholder = !readOnly && focused && (!label || labelPlacement === 'outer') ? focusedOuterPlaceholderColor : undefined;

  // Добавить класс отвечающий за поднятие и уменьшение плейсхолдера
  var withInnerPlaceholderUp = labelPlacement === 'inner' && label && !autoResize && !rows && size !== 'xs' && (!readOnly && (value || focused) || readOnly && value) ? innerPlaceholderUp : undefined;

  // Добавить класс отвечающий за скрытие плейсхолдера
  var withHidePlaceholder = value && !label || labelPlacement === 'inner' && (focused && !readOnly || value) && label && (rows || autoResize) || labelPlacement === 'outer' && value || labelPlacement === 'inner' && size === 'xs' && value ? hidePlaceHolder : undefined;
  return [withFocusedOuterUpPlaceholder, withInnerPlaceholderUp, withHidePlaceholder];
};
var textAreaRoot = function textAreaRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, innerRef) {
    var helperText = props.helperText,
      status = props.status,
      resize = props.resize,
      rightHelper = props.rightHelper,
      leftHelper = props.leftHelper,
      contentRight = props.contentRight,
      _props$autoResize = props.autoResize,
      autoResize = _props$autoResize === void 0 ? false : _props$autoResize,
      _props$minAuto = props.minAuto,
      minAuto = _props$minAuto === void 0 ? 0 : _props$minAuto,
      maxAuto = props.maxAuto,
      label = props.label,
      _props$labelPlacement = props.labelPlacement,
      labelPlacement = _props$labelPlacement === void 0 ? 'inner' : _props$labelPlacement,
      placeholder = props.placeholder,
      defaultValue = props.defaultValue,
      height = props.height,
      width = props.width,
      value = props.value,
      disabled = props.disabled,
      size = props.size,
      view = props.view,
      id = props.id,
      style = props.style,
      className = props.className,
      readOnly = props.readOnly,
      rows = props.rows,
      cols = props.cols,
      onChange = props.onChange,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var _useState = React.useState(width ? "".concat(width, "rem") : '100%'),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      helperWidth = _useState2[0],
      setHelperWidth = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      focused = _useState4[0],
      setFocused = _useState4[1];
    var _useState5 = React.useState(),
      _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
      uncontrolledValue = _useState6[0],
      setUncontrolledValue = _useState6[1];
    var outerRef = innerRef && 'current' in innerRef ? innerRef : /*#__PURE__*/React.createRef();
    var hasHelper = Boolean(leftHelper || rightHelper || helperText);
    var overriddenView = status !== undefined ? fallbackStatusMap[status] : view;
    var textareaHelperId = id ? "".concat(id, "-helper") : undefined;
    var applyCustomWidth = resize !== 'horizontal' && resize !== 'both' && !cols;
    var placeLabel = labelPlacement === 'inner' && label && size !== 'xs' ? label : placeholder;
    plasmaCore.useResizeObserver(outerRef, function (currentElement) {
      var _currentElement$style = currentElement.style,
        inlineWidth = _currentElement$style.width,
        inlineHeight = _currentElement$style.height;
      if (inlineWidth || inlineHeight || cols) {
        var _currentElement$getBo = currentElement.getBoundingClientRect(),
          elementWidth = _currentElement$getBo.width;
        setHelperWidth("".concat(elementWidth / useAutoResize.ROOT_FONT_SIZE, "rem"));
      }
    });
    useAutoResize.useAutoResize(autoResize, outerRef, value, minAuto, maxAuto);
    var onFocusHandler = React.useCallback(function () {
      setFocused(true);
    }, []);
    var onBlurHandler = React.useCallback(function () {
      setFocused(false);
    }, []);
    var onChangeHandler = React.useCallback(function (event) {
      // INFO: Для крайне редких кейсов, когда value снаружи не контролируется
      if (value === undefined) {
        setUncontrolledValue(event === null || event === void 0 ? void 0 : event.target.value);
      }
      onChange === null || onChange === void 0 || onChange(event);
    }, [value, onChange]);
    var dynamicLabelClasses = getDynamicLabelClasses({
      size: size,
      readOnly: readOnly,
      label: label,
      labelPlacement: labelPlacement,
      autoResize: autoResize,
      rows: rows,
      value: value || uncontrolledValue || defaultValue
    }, focused);
    return /*#__PURE__*/React.createElement(Root, {
      view: overriddenView,
      size: size,
      disabled: disabled,
      readOnly: readOnly,
      style: style,
      className: className
    }, label && labelPlacement === 'outer' && /*#__PURE__*/React.createElement(TextArea_styles.StyledLabel, null, label), /*#__PURE__*/React.createElement(TextArea_styles.StyledContainer, {
      className: index.cx.apply(void 0, [styledContainer].concat(_rollupPluginBabelHelpers.toConsumableArray(dynamicLabelClasses))),
      width: helperWidth,
      onFocus: onFocusHandler,
      onBlur: onBlurHandler
    }, contentRight && /*#__PURE__*/React.createElement(TextArea_styles.StyledContent, null, contentRight), /*#__PURE__*/React.createElement(TextArea_styles.StyledTextAreaWrapper, {
      className: styledTextAreaWrapper,
      hasHelper: hasHelper
    }, /*#__PURE__*/React.createElement(TextArea_styles.StyledTextArea, _rollupPluginBabelHelpers.extends({
      className: styledTextArea,
      id: id,
      hasContentRight: Boolean(contentRight),
      hasHelper: hasHelper,
      applyCustomWidth: applyCustomWidth,
      ref: outerRef,
      disabled: disabled,
      height: autoResize ? minAuto : height,
      width: width,
      placeholder: placeLabel,
      "aria-describedby": textareaHelperId,
      value: value,
      readOnly: readOnly,
      rows: rows,
      cols: cols,
      resize: resize,
      defaultValue: defaultValue,
      onChange: onChangeHandler
    }, rest))), hasHelper && /*#__PURE__*/React.createElement(TextArea_styles.StyledHelpers, {
      className: styledHelpers,
      id: textareaHelperId
    }, (leftHelper || helperText) && /*#__PURE__*/React.createElement(TextArea_styles.StyledLeftHelper, null, leftHelper || helperText), rightHelper && /*#__PURE__*/React.createElement(TextArea_styles.StyledRightHelper, null, rightHelper)), placeLabel && /*#__PURE__*/React.createElement(TextArea_styles.StyledPlaceholder, {
      hasContentRight: Boolean(contentRight),
      className: styledPlaceholder,
      htmlFor: id
    }, placeLabel)));
  });
};
var textAreaConfig = {
  name: 'TextArea',
  tag: 'div',
  layout: textAreaRoot,
  base: base,
  variations: {
    size: {
      css: base$1.base
    },
    view: {
      css: base$2.base
    },
    disabled: {
      css: base$3.base,
      attrs: true
    },
    readOnly: {
      attrs: true
    }
  },
  defaults: {
    size: 'm',
    view: 'primary'
  }
};

exports.getDynamicLabelClasses = getDynamicLabelClasses;
exports.textAreaConfig = textAreaConfig;
exports.textAreaRoot = textAreaRoot;
//# sourceMappingURL=TextArea.js.map

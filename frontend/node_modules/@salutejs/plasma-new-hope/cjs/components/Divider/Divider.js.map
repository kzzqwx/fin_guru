{"version":3,"file":"Divider.js","sources":["../../../src/components/Divider/Divider.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\n\nimport type { RootProps } from '../../engines';\nimport { cx, getSizeValueFromProp } from '../../utils';\n\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as orientationCSS } from './variations/_orientation/base';\nimport type { DividerProps } from './Divider.types';\nimport { classes } from './Divider.tokens';\n\nexport const dividerRoot = (Root: RootProps<HTMLDivElement, DividerProps>) =>\n    forwardRef<HTMLDivElement, DividerProps>(\n        ({ view, className, style, orientation = 'horizontal', length = '100%', ...rest }, ref) => {\n            const orientationClass = classes[orientation as keyof typeof classes];\n\n            const scaleToken = {\n                '--plasma_private-divider-scale': getSizeValueFromProp(length, '%'),\n            };\n\n            return (\n                <Root\n                    ref={ref}\n                    className={cx(orientationClass, classes.divider, className)}\n                    orientation={orientation}\n                    view={view}\n                    style={{\n                        ...style,\n                        ...scaleToken,\n                    }}\n                    {...rest}\n                />\n            );\n        },\n    );\n\nexport const dividerConfig = {\n    name: 'Divider',\n    tag: 'div',\n    layout: dividerRoot,\n    base: '',\n    variations: {\n        view: {\n            css: viewCSS,\n        },\n        size: {\n            css: sizeCSS,\n        },\n        orientation: {\n            css: orientationCSS,\n        },\n    },\n    defaults: {\n        view: 'default',\n        size: 'm',\n        orientation: 'horizontal',\n    },\n};\n"],"names":["dividerRoot","Root","forwardRef","_ref","ref","view","className","style","_ref$orientation","orientation","_ref$length","length","rest","_objectWithoutProperties","_excluded","orientationClass","classes","scaleToken","getSizeValueFromProp","React","createElement","_extends","cx","divider","_objectSpread","dividerConfig","name","tag","layout","base","variations","css","viewCSS","size","sizeCSS","orientationCSS","defaults"],"mappings":";;;;;;;;;;;;;;IAWaA,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAA6C,EAAA;AAAA,EAAA,oBACrEC,gBAAU,CACN,UAAAC,IAAA,EAAmFC,GAAG,EAAK;AAAA,IAAA,IAAxFC,IAAI,GAAAF,IAAA,CAAJE,IAAI;MAAEC,SAAS,GAAAH,IAAA,CAATG,SAAS;MAAEC,KAAK,GAAAJ,IAAA,CAALI,KAAK;MAAAC,gBAAA,GAAAL,IAAA,CAAEM,WAAW;AAAXA,MAAAA,WAAW,GAAAD,gBAAA,KAAG,KAAA,CAAA,GAAA,YAAY,GAAAA,gBAAA;MAAAE,WAAA,GAAAP,IAAA,CAAEQ,MAAM;AAANA,MAAAA,MAAM,GAAAD,WAAA,KAAG,KAAA,CAAA,GAAA,MAAM,GAAAA,WAAA;AAAKE,MAAAA,IAAI,GAAAC,iDAAA,CAAAV,IAAA,EAAAW,SAAA,CAAA,CAAA;AAC3E,IAAA,IAAMC,gBAAgB,GAAGC,sBAAO,CAACP,WAAW,CAAyB,CAAA;AAErE,IAAA,IAAMQ,UAAU,GAAG;AACf,MAAA,gCAAgC,EAAEC,yCAAoB,CAACP,MAAM,EAAE,GAAG,CAAA;KACrE,CAAA;AAED,IAAA,oBACIQ,KAAA,CAAAC,aAAA,CAACnB,IAAI,EAAAoB,iCAAA,CAAA;AACDjB,MAAAA,GAAG,EAAEA,GAAI;MACTE,SAAS,EAAEgB,QAAE,CAACP,gBAAgB,EAAEC,sBAAO,CAACO,OAAO,EAAEjB,SAAS,CAAE;AAC5DG,MAAAA,WAAW,EAAEA,WAAY;AACzBJ,MAAAA,IAAI,EAAEA,IAAK;AACXE,MAAAA,KAAK,EAAAiB,uCAAA,CAAAA,uCAAA,CACEjB,EAAAA,EAAAA,KAAK,GACLU,UAAU,CAAA;KAEbL,EAAAA,IAAI,CACX,CAAC,CAAA;AAEV,GACJ,CAAC,CAAA;AAAA,EAAA;AAEE,IAAMa,aAAa,GAAG;AACzBC,EAAAA,IAAI,EAAE,SAAS;AACfC,EAAAA,GAAG,EAAE,KAAK;AACVC,EAAAA,MAAM,EAAE5B,WAAW;AACnB6B,EAAAA,IAAI,EAAE,EAAE;AACRC,EAAAA,UAAU,EAAE;AACRzB,IAAAA,IAAI,EAAE;AACF0B,MAAAA,GAAG,EAAEC,SAAAA;KACR;AACDC,IAAAA,IAAI,EAAE;AACFF,MAAAA,GAAG,EAAEG,WAAAA;KACR;AACDzB,IAAAA,WAAW,EAAE;AACTsB,MAAAA,GAAG,EAAEI,WAAAA;AACT,KAAA;GACH;AACDC,EAAAA,QAAQ,EAAE;AACN/B,IAAAA,IAAI,EAAE,SAAS;AACf4B,IAAAA,IAAI,EAAE,GAAG;AACTxB,IAAAA,WAAW,EAAE,YAAA;AACjB,GAAA;AACJ;;;;;"}
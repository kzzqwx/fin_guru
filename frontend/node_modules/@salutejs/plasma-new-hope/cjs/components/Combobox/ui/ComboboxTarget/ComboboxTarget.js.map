{"version":3,"file":"ComboboxTarget.js","sources":["../../../../../src/components/Combobox/ui/ComboboxTarget/ComboboxTarget.tsx"],"sourcesContent":["import React, { forwardRef, useRef, useState } from 'react';\n\nimport { classes } from '../../Combobox.tokens';\nimport { cx } from '../../../../utils';\nimport { ComboboxChip } from '../ComboboxChip/ComboboxChip';\nimport type { ComboboxPrimitiveValue } from '../../Combobox.types';\nimport { useFocusController } from '../../hooks';\nimport { Keys } from '../../../Select/hooks/useKeyNavigation';\n\nimport {\n    StyledArrow,\n    StyledChips,\n    StyledContent,\n    StyledLabel,\n    StyledComboboxInput,\n    StyledComboboxInputHelper,\n    StyledComboboxTarget,\n    StyledText,\n} from './ComboboxTarget.styles';\nimport type { ComboboxTargetProps } from './ComboboxTarget.types';\n\nconst {\n    hasChips,\n    innerLabelUp,\n    arrowInverse,\n    comboboxTargetArrow,\n    comboboxTargeText,\n    comboboxTargetInput,\n    comboboxTargetLabel,\n} = classes;\n\n/**\n * Элемент для выпадающего списка\n */\nexport const ComboboxTarget = forwardRef<HTMLInputElement, ComboboxTargetProps>(\n    (\n        {\n            values,\n            search,\n            label,\n            placeholder,\n            opened,\n            readOnly,\n            disabled,\n            enumerationType,\n            valueType,\n            size,\n            closedWithoutChanges,\n            id,\n            chipsRefs,\n            inputRef,\n            onChange,\n            onSearch,\n            onKeyDown,\n            ...rest\n        },\n        ref,\n    ) => {\n        const contentRef = useRef<HTMLDivElement>(null);\n        const inputHelperRef = useRef<HTMLDivElement>(null);\n        const [focused, setFocused] = useState(false);\n\n        const controlledRefs = { contentRef, inputHelperRef, inputRef };\n        const textContent = values?.map(([, text]) => text).join(', ');\n        const hasValue = values?.some(([value]) => value);\n\n        const isEnumerationComma = enumerationType === 'comma';\n        const isExtraSmall = size === 'xs';\n        const isInputNotEmpty = hasValue || search;\n        const isInputActive = !hasValue && (opened || (focused && !readOnly));\n        const hasLabel = label && !isExtraSmall && isEnumerationComma;\n        const hasOnlyLabel = !placeholder || label;\n        const hasNoAnyTip = !placeholder && !label;\n        const placeholderValue = (!label && !hasValue) || isExtraSmall ? placeholder : undefined;\n\n        const withInnerLabelUp =\n            !isExtraSmall && !hasNoAnyTip && hasOnlyLabel && (isInputActive || (hasLabel && isInputNotEmpty))\n                ? innerLabelUp\n                : undefined;\n        const withArrowInverse = opened ? arrowInverse : undefined;\n        const withHasChips = hasValue && enumerationType === 'chip' ? hasChips : undefined;\n\n        const isLabelVisible = (!hasValue && !isExtraSmall) || hasLabel;\n        const isEnumerationVisible = hasValue && valueType !== 'single';\n\n        const onChipClick = (event: React.MouseEvent<HTMLButtonElement>) => event.stopPropagation();\n\n        const { onClickText, onFocusInput, onBlurInput } = useFocusController({\n            controlledRefs,\n            opened,\n            hasValue,\n            textContent,\n            search,\n            values,\n            valueType,\n            readOnly,\n            closedWithoutChanges,\n            updateFocused: setFocused,\n            updateSearch: onSearch,\n            onChipClick,\n        });\n\n        const onChipClear = (value: ComboboxPrimitiveValue, text: ComboboxPrimitiveValue, index: number) => {\n            const newValue = values\n                ?.filter(([itemValue, itemText]) => !(itemValue === value && itemText === text))\n                .map(([itemValue]) => itemValue);\n\n            chipsRefs?.current.splice(index, 1);\n            onChange?.(newValue);\n        };\n\n        const onChipKeyDown = (\n            value: ComboboxPrimitiveValue,\n            text: ComboboxPrimitiveValue,\n            index: number,\n            event: React.KeyboardEvent<HTMLButtonElement>,\n        ) => {\n            const { code } = event;\n\n            if (code === Keys.Tab) {\n                event.preventDefault();\n            }\n\n            if (code === Keys.Backspace) {\n                onChipClear(value, text, index);\n            }\n        };\n\n        const onKeyDownInput = (event: React.KeyboardEvent<HTMLInputElement>) => {\n            const { code } = event;\n\n            if (opened && code === Keys.Tab) {\n                event.preventDefault();\n            }\n\n            if (code === Keys.Backspace && !event.currentTarget?.value.length) {\n                const newValue = values?.map(([itemValue]) => itemValue);\n                newValue?.pop();\n                chipsRefs?.current.pop();\n\n                onChange?.(newValue);\n            }\n        };\n\n        const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n            onSearch?.(event.currentTarget.value);\n        };\n\n        const onWheel = (event: React.WheelEvent<HTMLDivElement>) => {\n            const { deltaY } = event;\n\n            if (contentRef.current) {\n                contentRef.current.scrollLeft += Math.round(deltaY);\n            }\n        };\n\n        const getRef = (element: HTMLButtonElement | null, index: number) => {\n            if (element && chipsRefs && chipsRefs.current) {\n                chipsRefs.current[index] = element;\n            }\n        };\n\n        // INFO: Нужно очищать на каждый ререндер компонента для актуализации состояния рефов\n        if (chipsRefs) {\n            chipsRefs.current = [];\n        }\n\n        return (\n            <StyledComboboxTarget\n                ref={ref}\n                opened={opened}\n                readOnly={readOnly}\n                disabled={disabled}\n                title={textContent}\n                aria-label={label}\n                className={cx(withInnerLabelUp, withHasChips)}\n                onWheel={onWheel}\n                onKeyDown={onKeyDown}\n                {...rest}\n            >\n                <StyledContent tabIndex={-1} ref={contentRef} className={withHasChips}>\n                    {isEnumerationVisible &&\n                        (isEnumerationComma ? (\n                            <StyledText className={comboboxTargeText} onClick={onClickText}>\n                                {textContent}\n                            </StyledText>\n                        ) : (\n                            <StyledChips>\n                                {values?.map(([value, text], index) => (\n                                    <ComboboxChip\n                                        index={index}\n                                        ref={(element) => getRef(element, index)}\n                                        key={`${value}_${text}`}\n                                        disabled={disabled}\n                                        readOnly={readOnly}\n                                        value={value}\n                                        text={text}\n                                        onClear={(v, t) => onChipClear(v, t, index)}\n                                        onClick={onChipClick}\n                                        onKeyDown={onChipKeyDown}\n                                    />\n                                ))}\n                            </StyledChips>\n                        ))}\n                    <StyledComboboxInput\n                        ref={inputRef}\n                        role=\"textbox\"\n                        className={comboboxTargetInput}\n                        value={search}\n                        placeholder={placeholderValue}\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        onFocus={onFocusInput}\n                        onBlur={onBlurInput}\n                        onChange={onChangeInput}\n                        onKeyDown={onKeyDownInput}\n                    />\n                    {valueType === 'multiple' && (\n                        <StyledComboboxInputHelper ref={inputHelperRef}>{search}</StyledComboboxInputHelper>\n                    )}\n                </StyledContent>\n                {isLabelVisible && (\n                    <StyledLabel className={comboboxTargetLabel} htmlFor={id}>\n                        {label}\n                    </StyledLabel>\n                )}\n                <StyledArrow size=\"s\" className={cx(comboboxTargetArrow, withArrowInverse)} />\n            </StyledComboboxTarget>\n        );\n    },\n);\n"],"names":["hasChips","classes","innerLabelUp","arrowInverse","comboboxTargetArrow","comboboxTargeText","comboboxTargetInput","comboboxTargetLabel","ComboboxTarget","forwardRef","_ref","ref","values","search","label","placeholder","opened","readOnly","disabled","enumerationType","valueType","size","closedWithoutChanges","id","chipsRefs","inputRef","onChange","onSearch","onKeyDown","rest","_objectWithoutProperties","_excluded","contentRef","useRef","inputHelperRef","_useState","useState","_useState2","_slicedToArray","focused","setFocused","controlledRefs","textContent","map","_ref2","_ref3","text","join","hasValue","some","_ref4","_ref5","value","isEnumerationComma","isExtraSmall","isInputNotEmpty","isInputActive","hasLabel","hasOnlyLabel","hasNoAnyTip","placeholderValue","undefined","withInnerLabelUp","withArrowInverse","withHasChips","isLabelVisible","isEnumerationVisible","onChipClick","event","stopPropagation","_useFocusController","useFocusController","updateFocused","updateSearch","onClickText","onFocusInput","onBlurInput","onChipClear","index","newValue","filter","_ref6","_ref7","itemValue","itemText","_ref8","_ref9","current","splice","onChipKeyDown","code","Keys","Tab","preventDefault","Backspace","onKeyDownInput","_event$currentTarget","currentTarget","length","_ref10","_ref11","pop","onChangeInput","onWheel","deltaY","scrollLeft","Math","round","getRef","element","React","createElement","StyledComboboxTarget","_extends","title","className","cx","StyledContent","tabIndex","StyledText","onClick","StyledChips","_ref12","_ref13","ComboboxChip","key","concat","onClear","v","t","StyledComboboxInput","role","onFocus","onBlur","StyledComboboxInputHelper","StyledLabel","htmlFor","StyledArrow"],"mappings":"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"}
{"version":3,"file":"Double.js","sources":["../../../../../src/components/Slider/components/Double/Double.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport type { FC, ChangeEvent, KeyboardEvent, FocusEvent } from 'react';\n\nimport { SliderBase } from '../SliderBase/SliderBase';\nimport { Handler } from '../../ui';\nimport type { HandlerProps } from '../../ui';\nimport { sizeData } from '../../utils';\nimport { cx, isNumber } from '../../../../utils';\nimport { classes } from '../../Slider.tokens';\n\nimport { DoubleSliderProps } from './Double.types';\nimport {\n    SliderWrapper,\n    InputsWrapper,\n    Label,\n    LabelContentLeft,\n    LabelWrapper,\n    StyledInput,\n    DoubleWrapper,\n} from './Double.styles';\n\nfunction getXCenterHandle(handle: HTMLDivElement) {\n    const containerX = handle.parentElement?.getBoundingClientRect()?.x || 0;\n    const handleRect = handle.getBoundingClientRect();\n    const handlePosition = handleRect.x;\n    return handlePosition - containerX;\n}\n\nexport const DoubleSlider: FC<DoubleSliderProps> = ({\n    min,\n    max,\n    value,\n    disabled,\n    label,\n    labelContentLeft,\n    size = 'm',\n    onChangeCommitted,\n    onChangeTextField,\n    onBlurTextField,\n    onKeyDownTextField,\n    onChange,\n    ariaLabel,\n    multipleStepSize = 10,\n    ...rest\n}) => {\n    const [state, setState] = useState({\n        stepSize: 0,\n        railFillWidth: 0,\n        railFillXPosition: 0,\n        xFirstHandle: 0,\n        xSecondHandle: 0,\n        firstHandleZIndex: 100,\n        secondHandleZIndex: 101,\n        firstValue: value[0],\n        secondValue: value[1],\n    });\n    const [firstInputActive, setFirstInputActive] = useState(false);\n    const [secondInputActive, setSecondInputActive] = useState(false);\n\n    const [firstValue, setFirstValue] = useState<number>(value[0]);\n    const [secondValue, setSecondValue] = useState<number>(value[1]);\n\n    const firstHandleRef = useRef<HTMLDivElement | null>(null);\n    const secondHandleRef = useRef<HTMLDivElement | null>(null);\n\n    const firstHandleValue = useRef<number>(value[0]);\n    const secondHandleValue = useRef<number>(value[1]);\n\n    const { stepSize } = state;\n\n    const hasLabelContent = label || labelContentLeft;\n    const firstInputActiveClass = firstInputActive && !disabled ? classes.textFieldActive : undefined;\n    const secondInputActiveClass = secondInputActive && !disabled ? classes.textFieldActive : undefined;\n\n    useEffect(() => {\n        const firstLocalValue = Math.min(Math.max(value[0], min), max) - min;\n        const secondLocalValue = Math.min(Math.max(value[1], min), max) - min;\n\n        setFirstValue(value[0]);\n        setSecondValue(value[1]);\n\n        setState((prevState) => ({\n            ...prevState,\n            railFillXPosition: stepSize * firstLocalValue,\n            railFillWidth: stepSize * secondLocalValue - stepSize * firstLocalValue,\n            xFirstHandle: stepSize * firstLocalValue,\n            xSecondHandle: stepSize * secondLocalValue,\n        }));\n    }, [value, stepSize, min, max, setFirstValue, setSecondValue]);\n\n    const setStepSize = useCallback(\n        (newStepSize: number) => {\n            setState((prevState) => ({\n                ...prevState,\n                stepSize: newStepSize,\n            }));\n        },\n        [setState],\n    );\n\n    const onFirstHandleChange: NonNullable<HandlerProps['onChange']> = (handleValue, data) => {\n        if (!secondHandleRef?.current) {\n            return;\n        }\n        const newHandleXPosition = data.x;\n        const secondHandleXPosition = getXCenterHandle(secondHandleRef.current);\n        const fillWidth = secondHandleXPosition - newHandleXPosition;\n\n        firstHandleValue.current = handleValue;\n\n        setFirstValue(handleValue);\n\n        setState((prevState) => ({\n            ...prevState,\n            firstHandleZIndex: 101,\n            secondHandleZIndex: 100,\n            railFillWidth: fillWidth < 0 ? 0 : fillWidth,\n            railFillXPosition: newHandleXPosition,\n        }));\n        if (onChange) {\n            onChange([handleValue, value[1]]);\n        }\n    };\n\n    const onFirstHandleChangeCommitted: NonNullable<HandlerProps['onChangeCommitted']> = (handleValue, data) => {\n        if (!secondHandleRef?.current) {\n            return;\n        }\n        const newHandleXPosition = data.x;\n        const secondHandleXPosition = getXCenterHandle(secondHandleRef.current);\n        const fillWidth = secondHandleXPosition - newHandleXPosition;\n\n        firstHandleValue.current = handleValue;\n\n        setFirstValue(handleValue);\n        if (onChangeCommitted) {\n            onChangeCommitted([handleValue, value[1]]);\n        }\n\n        setState((prevState) => ({\n            ...prevState,\n            firstValue: handleValue,\n            xFirstHandle: data.x,\n            railFillWidth: fillWidth < 0 ? 0 : fillWidth,\n            railFillXPosition: newHandleXPosition,\n        }));\n    };\n\n    const onFirstTextfieldChange = (event: ChangeEvent<HTMLInputElement>) => {\n        if (!isNumber(event.target.value)) {\n            return;\n        }\n\n        const handleValue = Number(event.target.value);\n\n        setFirstValue(handleValue);\n        if (onChangeTextField) {\n            onChangeTextField([handleValue, secondValue], event);\n        }\n    };\n\n    const onFirstTextfieldBlur = (event: FocusEvent<HTMLInputElement>) => {\n        if (!isNumber(event.target.value)) {\n            return;\n        }\n\n        const handleValue = Number(event.target.value);\n\n        setFirstValue(handleValue);\n        if (onBlurTextField) {\n            onBlurTextField && onBlurTextField([handleValue, secondValue], event);\n        }\n    };\n\n    const onSecondHandleChange: NonNullable<HandlerProps['onChange']> = (handleValue, data) => {\n        if (!firstHandleRef?.current) {\n            return;\n        }\n        const firstXHandleXPosition = getXCenterHandle(firstHandleRef.current);\n\n        const newHandleXPosition = data.x;\n        const fillWidth = newHandleXPosition - firstXHandleXPosition;\n\n        secondHandleValue.current = handleValue;\n\n        setSecondValue(handleValue);\n        setState((prevState) => ({\n            ...prevState,\n            firstHandleZIndex: 100,\n            secondHandleZIndex: 101,\n            railFillWidth: fillWidth < 0 ? 0 : fillWidth,\n            railFillXPosition: firstXHandleXPosition,\n        }));\n        if (onChange) {\n            onChange([value[0], handleValue]);\n        }\n    };\n\n    const onSecondHandleChangeCommitted: NonNullable<HandlerProps['onChangeCommitted']> = (handleValue, data) => {\n        if (!firstHandleRef?.current) {\n            return;\n        }\n        const firstXHandleXPosition = getXCenterHandle(firstHandleRef.current);\n\n        const newHandleXPosition = data.x;\n        const fillWidth = newHandleXPosition - firstXHandleXPosition;\n\n        secondHandleValue.current = handleValue;\n\n        if (onChangeCommitted) {\n            onChangeCommitted([value[0], handleValue]);\n        }\n\n        setSecondValue(handleValue);\n        setState((prevState) => ({\n            ...prevState,\n            secondValue: handleValue,\n            xSecondHandle: data.x,\n            railFillWidth: fillWidth < 0 ? 0 : fillWidth,\n            railFillXPosition: firstXHandleXPosition,\n        }));\n    };\n\n    const onSecondTextfieldChange = (event: ChangeEvent<HTMLInputElement>) => {\n        if (!isNumber(event.target.value)) {\n            return;\n        }\n        const handleValue = Number(event.target.value);\n\n        setSecondValue(handleValue);\n        if (onChangeTextField) {\n            onChangeTextField([firstValue, handleValue], event);\n        }\n    };\n\n    const onSecondTextfieldBlur = (event: FocusEvent<HTMLInputElement>) => {\n        if (!isNumber(event.target.value)) {\n            return;\n        }\n\n        const handleValue = Number(event.target.value);\n\n        setSecondValue(handleValue);\n        if (onBlurTextField) {\n            onBlurTextField([firstValue, handleValue], event);\n        }\n    };\n\n    const onTextfieldKeyDown = (event: ChangeEvent<HTMLInputElement> & KeyboardEvent<HTMLInputElement>) => {\n        if (onKeyDownTextField) {\n            onKeyDownTextField([firstValue, secondValue], event);\n        }\n    };\n\n    const [ariaLabelLeft, ariaLabelRight] = ariaLabel || [];\n    const currentFirstSliderValue = Math.max(state.firstValue, min);\n\n    return (\n        <DoubleWrapper>\n            {hasLabelContent && (\n                <LabelWrapper>\n                    {labelContentLeft && <LabelContentLeft>{labelContentLeft}</LabelContentLeft>}\n                    {label && <Label>{label}</Label>}\n                </LabelWrapper>\n            )}\n            <SliderWrapper>\n                <SliderBase\n                    min={min}\n                    max={max}\n                    disabled={disabled}\n                    setStepSize={setStepSize}\n                    railFillWidth={state.railFillWidth}\n                    settings={sizeData[size]}\n                    railFillXPosition={state.railFillXPosition}\n                    {...rest}\n                >\n                    <Handler\n                        ref={firstHandleRef}\n                        stepSize={state.stepSize}\n                        multipleStepSize={multipleStepSize}\n                        onChangeCommitted={onFirstHandleChangeCommitted}\n                        onChange={onFirstHandleChange}\n                        min={min}\n                        max={state.secondValue}\n                        disabled={disabled}\n                        bounds={[min, state.secondValue]}\n                        side=\"left\"\n                        xPosition={state.xFirstHandle}\n                        zIndex={state.firstHandleZIndex}\n                        value={currentFirstSliderValue}\n                        ariaLabel={ariaLabelLeft}\n                        onMouseEnter={() => setFirstInputActive(true)}\n                        onMouseLeave={() => setFirstInputActive(false)}\n                    />\n                    <Handler\n                        ref={secondHandleRef}\n                        stepSize={state.stepSize}\n                        multipleStepSize={multipleStepSize}\n                        onChangeCommitted={onSecondHandleChangeCommitted}\n                        onChange={onSecondHandleChange}\n                        min={min}\n                        ariaValueMin={currentFirstSliderValue}\n                        max={max}\n                        disabled={disabled}\n                        bounds={[state.firstValue, max]}\n                        side=\"right\"\n                        xPosition={state.xSecondHandle}\n                        zIndex={state.secondHandleZIndex}\n                        value={Math.max(state.secondValue, min)}\n                        ariaLabel={ariaLabelRight}\n                        onMouseEnter={() => setSecondInputActive(true)}\n                        onMouseLeave={() => setSecondInputActive(false)}\n                    />\n                </SliderBase>\n\n                <InputsWrapper>\n                    <StyledInput\n                        className={cx(classes.firstTextField, firstInputActiveClass)}\n                        enumerationType=\"plain\"\n                        disabled={disabled}\n                        value={firstValue}\n                        onChange={onFirstTextfieldChange}\n                        onBlur={onFirstTextfieldBlur}\n                        onKeyDown={onTextfieldKeyDown}\n                    />\n                    <StyledInput\n                        className={cx(classes.secondTextField, secondInputActiveClass)}\n                        enumerationType=\"plain\"\n                        disabled={disabled}\n                        value={secondValue}\n                        onChange={onSecondTextfieldChange}\n                        onBlur={onSecondTextfieldBlur}\n                        onKeyDown={onTextfieldKeyDown}\n                    />\n                </InputsWrapper>\n            </SliderWrapper>\n        </DoubleWrapper>\n    );\n};\n"],"names":["getXCenterHandle","handle","_handle$parentElement","containerX","parentElement","getBoundingClientRect","x","handleRect","handlePosition","DoubleSlider","_ref","min","max","value","disabled","label","labelContentLeft","_ref$size","size","onChangeCommitted","onChangeTextField","onBlurTextField","onKeyDownTextField","onChange","ariaLabel","_ref$multipleStepSize","multipleStepSize","rest","_objectWithoutProperties","_excluded","_useState","useState","stepSize","railFillWidth","railFillXPosition","xFirstHandle","xSecondHandle","firstHandleZIndex","secondHandleZIndex","firstValue","secondValue","_useState2","_slicedToArray","state","setState","_useState3","_useState4","firstInputActive","setFirstInputActive","_useState5","_useState6","secondInputActive","setSecondInputActive","_useState7","_useState8","setFirstValue","_useState9","_useState10","setSecondValue","firstHandleRef","useRef","secondHandleRef","firstHandleValue","secondHandleValue","hasLabelContent","firstInputActiveClass","classes","textFieldActive","undefined","secondInputActiveClass","useEffect","firstLocalValue","Math","secondLocalValue","prevState","_objectSpread","setStepSize","useCallback","newStepSize","onFirstHandleChange","handleValue","data","current","newHandleXPosition","secondHandleXPosition","fillWidth","onFirstHandleChangeCommitted","onFirstTextfieldChange","event","isNumber","target","Number","onFirstTextfieldBlur","onSecondHandleChange","firstXHandleXPosition","onSecondHandleChangeCommitted","onSecondTextfieldChange","onSecondTextfieldBlur","onTextfieldKeyDown","_ref2","_ref3","ariaLabelLeft","ariaLabelRight","currentFirstSliderValue","React","createElement","DoubleWrapper","LabelWrapper","LabelContentLeft","Label","SliderWrapper","SliderBase","_extends","settings","sizeData","Handler","ref","bounds","side","xPosition","zIndex","onMouseEnter","onMouseLeave","ariaValueMin","InputsWrapper","StyledInput","className","cx","firstTextField","enumerationType","onBlur","onKeyDown","secondTextField"],"mappings":"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"}
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var SliderBase = require('../SliderBase/SliderBase.js');
var Handler = require('../../ui/Handler/Handler.js');
require('@linaria/react');
var index$1 = require('../../utils/index.js');
var index = require('../../../../utils/index.js');
var Slider_tokens = require('../../Slider.tokens.js');
var Single_styles = require('./Single.styles.js');
var isNumber = require('../../../../utils/isNumber.js');

var _excluded = ["min", "max", "value", "disabled", "onChangeCommitted", "onChange", "ariaLabel", "label", "labelContentLeft", "showRangeValues", "showCurrentValue", "hideMinValueDiff", "hideMaxValueDiff", "labelPlacement", "rangeValuesPlacement", "multipleStepSize", "size"];
var SingleSlider = function SingleSlider(_ref) {
  var min = _ref.min,
    max = _ref.max,
    value = _ref.value,
    disabled = _ref.disabled,
    onChangeCommitted = _ref.onChangeCommitted,
    onChange = _ref.onChange,
    ariaLabel = _ref.ariaLabel,
    label = _ref.label,
    labelContentLeft = _ref.labelContentLeft,
    showRangeValues = _ref.showRangeValues,
    showCurrentValue = _ref.showCurrentValue,
    hideMinValueDiff = _ref.hideMinValueDiff,
    hideMaxValueDiff = _ref.hideMaxValueDiff,
    _ref$labelPlacement = _ref.labelPlacement,
    labelPlacement = _ref$labelPlacement === void 0 ? 'outer' : _ref$labelPlacement,
    _ref$rangeValuesPlace = _ref.rangeValuesPlacement,
    rangeValuesPlacement = _ref$rangeValuesPlace === void 0 ? 'outer' : _ref$rangeValuesPlace,
    _ref$multipleStepSize = _ref.multipleStepSize,
    multipleStepSize = _ref$multipleStepSize === void 0 ? 10 : _ref$multipleStepSize,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'm' : _ref$size,
    rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
  var _useState = React.useState({
      xHandle: 0,
      stepSize: 0,
      railFillWidth: 0
    }),
    _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var _useState3 = React.useState(0),
    _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
    startOffset = _useState4[0],
    setStartOffset = _useState4[1];
  var _useState5 = React.useState(0),
    _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
    endOffset = _useState6[0],
    setEndOffset = _useState6[1];
  var _useState7 = React.useState(value),
    _useState8 = _rollupPluginBabelHelpers.slicedToArray(_useState7, 2),
    dragValue = _useState8[0],
    setDragValue = _useState8[1];
  var stepSize = state.stepSize;
  var hasLabelContent = label || labelContentLeft;
  var labelPlacementClass = labelPlacement === 'outer' ? Slider_tokens.classes.labelPlacementOuter : Slider_tokens.classes.labelPlacementInner;
  var rangeValuesPlacementClass = rangeValuesPlacement === 'outer' ? Slider_tokens.classes.rangeValuesPlacementOuter : Slider_tokens.classes.rangeValuesPlacementInner;
  var hideMinValueDiffClass = hideMinValueDiff && value - min <= hideMinValueDiff ? Slider_tokens.classes.hideMinValue : '';
  var hideMaxValueDiffClass = hideMaxValueDiff && max - value <= hideMaxValueDiff ? Slider_tokens.classes.hideMaxValue : '';
  var startLabelRef = React.useRef(null);
  var endLabelRef = React.useRef(null);
  var activeFirstValue = dragValue === min ? Slider_tokens.classes.activeRangeValue : undefined;
  var activeSecondValue = dragValue === max ? Slider_tokens.classes.activeRangeValue : undefined;
  React.useEffect(function () {
    var localValue = Math.min(Math.max(value, min), max) - min;
    if (rangeValuesPlacement === 'outer') {
      var _startLabelRef$curren, _endLabelRef$current;
      var startWidth = (_startLabelRef$curren = startLabelRef.current) === null || _startLabelRef$curren === void 0 ? void 0 : _startLabelRef$curren.offsetWidth;
      if (isNumber.isNumber(startWidth)) {
        setStartOffset(Number(startWidth));
      }
      var endWidth = (_endLabelRef$current = endLabelRef.current) === null || _endLabelRef$current === void 0 ? void 0 : _endLabelRef$current.offsetWidth;
      if (isNumber.isNumber(endWidth)) {
        setEndOffset(Number(endWidth));
      }
    } else {
      setStartOffset(1);
      setEndOffset(1);
    }
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        xHandle: stepSize * localValue,
        railFillWidth: stepSize * localValue
      });
    });
  }, [value, labelPlacement, stepSize, rangeValuesPlacement, min, max, setStartOffset, setEndOffset]);
  var setStepSize = React.useCallback(function (newStepSize) {
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        stepSize: newStepSize
      });
    });
  }, [setState]);
  var onHandleChange = function onHandleChange(handleValue, data) {
    var newHandleXPosition = data.x;
    var newValue = Math.round(handleValue);
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        railFillWidth: newHandleXPosition
      });
    });
    if (onChange) {
      onChange(newValue);
    }
    setDragValue(newValue);
  };
  var onHandleChangeCommitted = function onHandleChangeCommitted(handleValue, data) {
    var newValue = Math.round(handleValue);
    if (onChangeCommitted) {
      onChangeCommitted(newValue);
    }
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        xHandle: data.lastX,
        railFillWidth: data.lastX
      });
    });
    setDragValue(newValue);
  };
  return /*#__PURE__*/React.createElement(Single_styles.SingleWrapper, {
    className: labelPlacementClass
  }, hasLabelContent && /*#__PURE__*/React.createElement(Single_styles.LabelWrapper, null, labelContentLeft && /*#__PURE__*/React.createElement(Single_styles.LabelContentLeft, null, labelContentLeft), label && /*#__PURE__*/React.createElement(Single_styles.Label, null, label)), /*#__PURE__*/React.createElement(Single_styles.SliderBaseWrapper, {
    className: rangeValuesPlacementClass
  }, showRangeValues && /*#__PURE__*/React.createElement(Single_styles.StyledRangeValue, {
    ref: startLabelRef,
    className: index.cx(hideMinValueDiffClass, activeFirstValue)
  }, min), /*#__PURE__*/React.createElement(SliderBase.SliderBase, _rollupPluginBabelHelpers.extends({
    min: min,
    max: max,
    disabled: disabled,
    setStepSize: setStepSize,
    onChange: onHandleChangeCommitted,
    railFillWidth: state.railFillWidth,
    settings: index$1.sizeData[size],
    labelPlacement: labelPlacement,
    rangeValuesPlacement: rangeValuesPlacement
  }, rest), /*#__PURE__*/React.createElement(Handler.Handler, {
    stepSize: state.stepSize,
    onChangeCommitted: onHandleChangeCommitted,
    onChange: onHandleChange,
    xPosition: state.xHandle,
    min: min,
    max: max,
    startOffset: startOffset,
    endOffset: endOffset,
    value: dragValue,
    disabled: disabled,
    ariaLabel: ariaLabel,
    multipleStepSize: multipleStepSize,
    showCurrentValue: showCurrentValue
  })), showRangeValues && /*#__PURE__*/React.createElement(Single_styles.StyledRangeValue, {
    ref: endLabelRef,
    className: index.cx(Slider_tokens.classes.maxRangeValue, hideMaxValueDiffClass, activeSecondValue)
  }, max)));
};

exports.SingleSlider = SingleSlider;
//# sourceMappingURL=Single.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var SliderBase = require('../SliderBase/SliderBase.js');
var Handler = require('../../ui/Handler/Handler.js');
require('@linaria/react');
var index = require('../../utils/index.js');
var index$1 = require('../../../../utils/index.js');
var Slider_tokens = require('../../Slider.tokens.js');
var Double_styles = require('./Double.styles.js');
var isNumber = require('../../../../utils/isNumber.js');

var _excluded = ["min", "max", "value", "disabled", "label", "labelContentLeft", "size", "onChangeCommitted", "onChangeTextField", "onBlurTextField", "onKeyDownTextField", "onChange", "ariaLabel", "multipleStepSize"];
function getXCenterHandle(handle) {
  var _handle$parentElement;
  var containerX = ((_handle$parentElement = handle.parentElement) === null || _handle$parentElement === void 0 || (_handle$parentElement = _handle$parentElement.getBoundingClientRect()) === null || _handle$parentElement === void 0 ? void 0 : _handle$parentElement.x) || 0;
  var handleRect = handle.getBoundingClientRect();
  var handlePosition = handleRect.x;
  return handlePosition - containerX;
}
var DoubleSlider = function DoubleSlider(_ref) {
  var min = _ref.min,
    max = _ref.max,
    value = _ref.value,
    disabled = _ref.disabled,
    label = _ref.label,
    labelContentLeft = _ref.labelContentLeft,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'm' : _ref$size,
    onChangeCommitted = _ref.onChangeCommitted,
    onChangeTextField = _ref.onChangeTextField,
    onBlurTextField = _ref.onBlurTextField,
    onKeyDownTextField = _ref.onKeyDownTextField,
    onChange = _ref.onChange,
    ariaLabel = _ref.ariaLabel,
    _ref$multipleStepSize = _ref.multipleStepSize,
    multipleStepSize = _ref$multipleStepSize === void 0 ? 10 : _ref$multipleStepSize,
    rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
  var _useState = React.useState({
      stepSize: 0,
      railFillWidth: 0,
      railFillXPosition: 0,
      xFirstHandle: 0,
      xSecondHandle: 0,
      firstHandleZIndex: 100,
      secondHandleZIndex: 101,
      firstValue: value[0],
      secondValue: value[1]
    }),
    _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
    state = _useState2[0],
    setState = _useState2[1];
  var _useState3 = React.useState(false),
    _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
    firstInputActive = _useState4[0],
    setFirstInputActive = _useState4[1];
  var _useState5 = React.useState(false),
    _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
    secondInputActive = _useState6[0],
    setSecondInputActive = _useState6[1];
  var _useState7 = React.useState(value[0]),
    _useState8 = _rollupPluginBabelHelpers.slicedToArray(_useState7, 2),
    firstValue = _useState8[0],
    setFirstValue = _useState8[1];
  var _useState9 = React.useState(value[1]),
    _useState10 = _rollupPluginBabelHelpers.slicedToArray(_useState9, 2),
    secondValue = _useState10[0],
    setSecondValue = _useState10[1];
  var firstHandleRef = React.useRef(null);
  var secondHandleRef = React.useRef(null);
  var firstHandleValue = React.useRef(value[0]);
  var secondHandleValue = React.useRef(value[1]);
  var stepSize = state.stepSize;
  var hasLabelContent = label || labelContentLeft;
  var firstInputActiveClass = firstInputActive && !disabled ? Slider_tokens.classes.textFieldActive : undefined;
  var secondInputActiveClass = secondInputActive && !disabled ? Slider_tokens.classes.textFieldActive : undefined;
  React.useEffect(function () {
    var firstLocalValue = Math.min(Math.max(value[0], min), max) - min;
    var secondLocalValue = Math.min(Math.max(value[1], min), max) - min;
    setFirstValue(value[0]);
    setSecondValue(value[1]);
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        railFillXPosition: stepSize * firstLocalValue,
        railFillWidth: stepSize * secondLocalValue - stepSize * firstLocalValue,
        xFirstHandle: stepSize * firstLocalValue,
        xSecondHandle: stepSize * secondLocalValue
      });
    });
  }, [value, stepSize, min, max, setFirstValue, setSecondValue]);
  var setStepSize = React.useCallback(function (newStepSize) {
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        stepSize: newStepSize
      });
    });
  }, [setState]);
  var onFirstHandleChange = function onFirstHandleChange(handleValue, data) {
    if (!(secondHandleRef !== null && secondHandleRef !== void 0 && secondHandleRef.current)) {
      return;
    }
    var newHandleXPosition = data.x;
    var secondHandleXPosition = getXCenterHandle(secondHandleRef.current);
    var fillWidth = secondHandleXPosition - newHandleXPosition;
    firstHandleValue.current = handleValue;
    setFirstValue(handleValue);
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        firstHandleZIndex: 101,
        secondHandleZIndex: 100,
        railFillWidth: fillWidth < 0 ? 0 : fillWidth,
        railFillXPosition: newHandleXPosition
      });
    });
    if (onChange) {
      onChange([handleValue, value[1]]);
    }
  };
  var onFirstHandleChangeCommitted = function onFirstHandleChangeCommitted(handleValue, data) {
    if (!(secondHandleRef !== null && secondHandleRef !== void 0 && secondHandleRef.current)) {
      return;
    }
    var newHandleXPosition = data.x;
    var secondHandleXPosition = getXCenterHandle(secondHandleRef.current);
    var fillWidth = secondHandleXPosition - newHandleXPosition;
    firstHandleValue.current = handleValue;
    setFirstValue(handleValue);
    if (onChangeCommitted) {
      onChangeCommitted([handleValue, value[1]]);
    }
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        firstValue: handleValue,
        xFirstHandle: data.x,
        railFillWidth: fillWidth < 0 ? 0 : fillWidth,
        railFillXPosition: newHandleXPosition
      });
    });
  };
  var onFirstTextfieldChange = function onFirstTextfieldChange(event) {
    if (!isNumber.isNumber(event.target.value)) {
      return;
    }
    var handleValue = Number(event.target.value);
    setFirstValue(handleValue);
    if (onChangeTextField) {
      onChangeTextField([handleValue, secondValue], event);
    }
  };
  var onFirstTextfieldBlur = function onFirstTextfieldBlur(event) {
    if (!isNumber.isNumber(event.target.value)) {
      return;
    }
    var handleValue = Number(event.target.value);
    setFirstValue(handleValue);
    if (onBlurTextField) {
      onBlurTextField && onBlurTextField([handleValue, secondValue], event);
    }
  };
  var onSecondHandleChange = function onSecondHandleChange(handleValue, data) {
    if (!(firstHandleRef !== null && firstHandleRef !== void 0 && firstHandleRef.current)) {
      return;
    }
    var firstXHandleXPosition = getXCenterHandle(firstHandleRef.current);
    var newHandleXPosition = data.x;
    var fillWidth = newHandleXPosition - firstXHandleXPosition;
    secondHandleValue.current = handleValue;
    setSecondValue(handleValue);
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        firstHandleZIndex: 100,
        secondHandleZIndex: 101,
        railFillWidth: fillWidth < 0 ? 0 : fillWidth,
        railFillXPosition: firstXHandleXPosition
      });
    });
    if (onChange) {
      onChange([value[0], handleValue]);
    }
  };
  var onSecondHandleChangeCommitted = function onSecondHandleChangeCommitted(handleValue, data) {
    if (!(firstHandleRef !== null && firstHandleRef !== void 0 && firstHandleRef.current)) {
      return;
    }
    var firstXHandleXPosition = getXCenterHandle(firstHandleRef.current);
    var newHandleXPosition = data.x;
    var fillWidth = newHandleXPosition - firstXHandleXPosition;
    secondHandleValue.current = handleValue;
    if (onChangeCommitted) {
      onChangeCommitted([value[0], handleValue]);
    }
    setSecondValue(handleValue);
    setState(function (prevState) {
      return _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, prevState), {}, {
        secondValue: handleValue,
        xSecondHandle: data.x,
        railFillWidth: fillWidth < 0 ? 0 : fillWidth,
        railFillXPosition: firstXHandleXPosition
      });
    });
  };
  var onSecondTextfieldChange = function onSecondTextfieldChange(event) {
    if (!isNumber.isNumber(event.target.value)) {
      return;
    }
    var handleValue = Number(event.target.value);
    setSecondValue(handleValue);
    if (onChangeTextField) {
      onChangeTextField([firstValue, handleValue], event);
    }
  };
  var onSecondTextfieldBlur = function onSecondTextfieldBlur(event) {
    if (!isNumber.isNumber(event.target.value)) {
      return;
    }
    var handleValue = Number(event.target.value);
    setSecondValue(handleValue);
    if (onBlurTextField) {
      onBlurTextField([firstValue, handleValue], event);
    }
  };
  var onTextfieldKeyDown = function onTextfieldKeyDown(event) {
    if (onKeyDownTextField) {
      onKeyDownTextField([firstValue, secondValue], event);
    }
  };
  var _ref2 = ariaLabel || [],
    _ref3 = _rollupPluginBabelHelpers.slicedToArray(_ref2, 2),
    ariaLabelLeft = _ref3[0],
    ariaLabelRight = _ref3[1];
  var currentFirstSliderValue = Math.max(state.firstValue, min);
  return /*#__PURE__*/React.createElement(Double_styles.DoubleWrapper, null, hasLabelContent && /*#__PURE__*/React.createElement(Double_styles.LabelWrapper, null, labelContentLeft && /*#__PURE__*/React.createElement(Double_styles.LabelContentLeft, null, labelContentLeft), label && /*#__PURE__*/React.createElement(Double_styles.Label, null, label)), /*#__PURE__*/React.createElement(Double_styles.SliderWrapper, null, /*#__PURE__*/React.createElement(SliderBase.SliderBase, _rollupPluginBabelHelpers.extends({
    min: min,
    max: max,
    disabled: disabled,
    setStepSize: setStepSize,
    railFillWidth: state.railFillWidth,
    settings: index.sizeData[size],
    railFillXPosition: state.railFillXPosition
  }, rest), /*#__PURE__*/React.createElement(Handler.Handler, {
    ref: firstHandleRef,
    stepSize: state.stepSize,
    multipleStepSize: multipleStepSize,
    onChangeCommitted: onFirstHandleChangeCommitted,
    onChange: onFirstHandleChange,
    min: min,
    max: state.secondValue,
    disabled: disabled,
    bounds: [min, state.secondValue],
    side: "left",
    xPosition: state.xFirstHandle,
    zIndex: state.firstHandleZIndex,
    value: currentFirstSliderValue,
    ariaLabel: ariaLabelLeft,
    onMouseEnter: function onMouseEnter() {
      return setFirstInputActive(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setFirstInputActive(false);
    }
  }), /*#__PURE__*/React.createElement(Handler.Handler, {
    ref: secondHandleRef,
    stepSize: state.stepSize,
    multipleStepSize: multipleStepSize,
    onChangeCommitted: onSecondHandleChangeCommitted,
    onChange: onSecondHandleChange,
    min: min,
    ariaValueMin: currentFirstSliderValue,
    max: max,
    disabled: disabled,
    bounds: [state.firstValue, max],
    side: "right",
    xPosition: state.xSecondHandle,
    zIndex: state.secondHandleZIndex,
    value: Math.max(state.secondValue, min),
    ariaLabel: ariaLabelRight,
    onMouseEnter: function onMouseEnter() {
      return setSecondInputActive(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setSecondInputActive(false);
    }
  })), /*#__PURE__*/React.createElement(Double_styles.InputsWrapper, null, /*#__PURE__*/React.createElement(Double_styles.StyledInput, {
    className: index$1.cx(Slider_tokens.classes.firstTextField, firstInputActiveClass),
    enumerationType: "plain",
    disabled: disabled,
    value: firstValue,
    onChange: onFirstTextfieldChange,
    onBlur: onFirstTextfieldBlur,
    onKeyDown: onTextfieldKeyDown
  }), /*#__PURE__*/React.createElement(Double_styles.StyledInput, {
    className: index$1.cx(Slider_tokens.classes.secondTextField, secondInputActiveClass),
    enumerationType: "plain",
    disabled: disabled,
    value: secondValue,
    onChange: onSecondTextfieldChange,
    onBlur: onSecondTextfieldBlur,
    onKeyDown: onTextfieldKeyDown
  }))));
};

exports.DoubleSlider = DoubleSlider;
//# sourceMappingURL=Double.js.map

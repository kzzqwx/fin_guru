'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');

var SegmentContext = /*#__PURE__*/React.createContext(undefined);
var useSegmentInner = function useSegmentInner() {
  var context = React.useContext(SegmentContext);
  if (!context) {
    throw new Error('useSegment must be used within a SegmentProvider');
  }
  return context;
};
var useSegment = function useSegment() {
  var _useSegmentInner = useSegmentInner(),
    selectedSegmentItems = _useSegmentInner.selectedSegmentItems;
  return {
    selectedSegmentItems: selectedSegmentItems
  };
};
var SegmentProvider = function SegmentProvider(_ref) {
  var children = _ref.children;
  var _useState = React.useState([]),
    _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
    selectedSegmentItems = _useState2[0],
    setSelectedSegmentItems = _useState2[1];
  var _useState3 = React.useState('single'),
    _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
    selectionMode = _useState4[0],
    setSelectionMode = _useState4[1];
  var _useState5 = React.useState(false),
    _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
    disabledGroup = _useState6[0],
    setDisabledGroup = _useState6[1];
  var handleSelect = React.useCallback(function (label) {
    if (selectionMode !== 'multiple') {
      setSelectedSegmentItems(function (prevSelected) {
        return prevSelected.includes(label) ? [] : [label];
      });
      return;
    }
    setSelectedSegmentItems(function (prevSelected) {
      return prevSelected.includes(label) ? prevSelected.filter(function (item) {
        return item !== label;
      }) : [].concat(_rollupPluginBabelHelpers.toConsumableArray(prevSelected), [label]);
    });
  }, [selectionMode, setSelectedSegmentItems]);
  var contextValue = {
    selectedSegmentItems: selectedSegmentItems,
    handleSelect: handleSelect,
    selectionMode: selectionMode,
    setSelectionMode: setSelectionMode,
    disabledGroup: disabledGroup,
    setDisabledGroup: setDisabledGroup
  };
  React.useEffect(function () {
    setSelectedSegmentItems([]);
  }, [selectionMode]);
  return /*#__PURE__*/React.createElement(SegmentContext.Provider, {
    value: contextValue
  }, children);
};

exports.SegmentContext = SegmentContext;
exports.SegmentProvider = SegmentProvider;
exports.useSegment = useSegment;
exports.useSegmentInner = useSegmentInner;
//# sourceMappingURL=SegmentProvider.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaCore = require('@salutejs/plasma-core');
var IconDisclosureLeft = require('../../../_Icon/Icons/IconDisclosureLeft.js');
var IconDisclosureRight = require('../../../_Icon/Icons/IconDisclosureRight.js');
require('@linaria/react');
var tokens = require('../../tokens.js');
var index = require('../../../../utils/index.js');
var SegmentProvider = require('../../SegmentProvider/SegmentProvider.js');
var base = require('./variations/_size/base.js');
var base$1 = require('./variations/_view/base.js');
var base$2 = require('./variations/_disabled/base.js');
var base$3 = require('./variations/_pilled/base.js');
var base$5 = require('./variations/_filledBackgound/base.js');
var base$4 = require('./variations/_stretch/base.js');
var SegmentGroup_styles = require('./SegmentGroup.styles.js');

var _excluded = ["id", "selectionMode", "pilled", "stretch", "filledBackground", "disabled", "size", "view", "children"];
var segmentGroupRoot = function segmentGroupRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, outerRef) {
    var id = props.id,
      selectionMode = props.selectionMode,
      pilled = props.pilled,
      stretch = props.stretch,
      _props$filledBackgrou = props.filledBackground,
      filledBackground = _props$filledBackgrou === void 0 ? false : _props$filledBackgrou,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      size = props.size,
      view = props.view,
      children = props.children,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var _useSegmentInner = SegmentProvider.useSegmentInner(),
      setSelectionMode = _useSegmentInner.setSelectionMode,
      setDisabledGroup = _useSegmentInner.setDisabledGroup;
    var _useState = React.useState(0),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      index$1 = _useState2[0],
      setIndex = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      firstItemVisible = _useState4[0],
      setFirstItemVisible = _useState4[1];
    var _useState5 = React.useState(false),
      _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
      lastItemVisible = _useState6[0],
      setLastItemVisible = _useState6[1];
    var uniqId = plasmaCore.safeUseId();
    var segmentGroupId = id || uniqId;
    var pilledAttr = view !== 'clear' && pilled;
    var filledBackgroundAttr = view !== 'clear' && filledBackground;
    var pilledClass = pilledAttr ? tokens.classes.segmentPilled : undefined;
    var filledClass = filledBackgroundAttr ? tokens.classes.segmentGroupFilledBackground : undefined;
    var stretchClass = firstItemVisible && lastItemVisible && stretch ? tokens.classes.segmentStretch : undefined;
    var items = (React.Children === null || React.Children === void 0 ? void 0 : React.Children.map(children, function (child) {
      return child;
    })) || [];
    var onPrev = React.useCallback(function () {
      !disabled && setIndex(function (prevIndex) {
        return prevIndex > 0 ? prevIndex - 1 : 0;
      });
    }, [disabled]);
    var onNext = React.useCallback(function () {
      !disabled && setIndex(function (prevIndex) {
        return prevIndex < items.length - 1 ? prevIndex + 1 : prevIndex;
      });
    }, [disabled]);
    var onIntersecting = function onIntersecting(setVisible) {
      return function (entries) {
        /*
         * Пробегаемся по элементам на которых есть слушатель события появления.
         * Если элемент находится в зоне видимости или выходит из нее, меняем значение флага видимости
         */
        entries.forEach(function (entry) {
          if (entry.isIntersecting) {
            setVisible(true);
          } else {
            setVisible(false);
          }
        });
      };
    };
    var _useCarousel = plasmaCore.useCarousel({
        index: index$1,
        axis: 'x',
        scrollAlign: 'start',
        detectActive: true,
        debounceMs: 250,
        onIndexChange: setIndex
      }),
      scrollRef = _useCarousel.scrollRef,
      trackRef = _useCarousel.trackRef;
    var PreviousButton = React.useMemo(function () {
      return /*#__PURE__*/React.createElement(SegmentGroup_styles.StyledArrow, {
        type: "button",
        "aria-label": "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 \u0441\u0435\u0433\u043C\u0435\u043D\u0442",
        onClick: onPrev,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled
      }, /*#__PURE__*/React.createElement(IconDisclosureLeft.IconDisclosureLeft, {
        color: "var(".concat(tokens.tokens.arrowColor, ")")
      }));
    }, [onPrev]);
    var NextButton = React.useMemo(function () {
      return /*#__PURE__*/React.createElement(SegmentGroup_styles.StyledArrow, {
        type: "button",
        "aria-label": "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 \u0441\u0435\u0433\u043C\u0435\u043D\u0442",
        onClick: onNext,
        tabIndex: disabled ? -1 : 0,
        disabled: disabled
      }, /*#__PURE__*/React.createElement(IconDisclosureRight.IconDisclosureRight, {
        color: "var(".concat(tokens.tokens.arrowColor, ")")
      }));
    }, [onNext]);
    React.useEffect(function () {
      selectionMode && setSelectionMode(selectionMode);
      setDisabledGroup(disabled);
    }, [selectionMode, disabled]);
    React.useEffect(function () {
      var _trackRef$current;
      // Intersection observer для первого сегмента
      var observeFirstItem = new IntersectionObserver(onIntersecting(setFirstItemVisible), {
        root: null,
        rootMargin: '0px',
        threshold: 0.5
      });

      // Intersection observer для последнего сегмента
      var observeLastItem = new IntersectionObserver(onIntersecting(setLastItemVisible), {
        root: null,
        rootMargin: '0px',
        threshold: 0.5
      });

      // получаем список сегментов внутри SegmentGroup
      var childrenArray = Array.from(((_trackRef$current = trackRef.current) === null || _trackRef$current === void 0 ? void 0 : _trackRef$current.children) || []);
      if (childrenArray.length) {
        // подписываемся на событие появление внутри SegmentGroup
        observeFirstItem.observe(childrenArray[0]);
        observeLastItem.observe(childrenArray[childrenArray.length - 1]);
      }
      return function () {
        // отписываемся от события появления внутри SegmentGroup
        observeFirstItem.disconnect();
        observeLastItem.disconnect();
      };
    }, [children]);
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      view: view,
      size: size,
      id: segmentGroupId,
      ref: outerRef,
      filledBackground: filledBackgroundAttr,
      disabled: disabled,
      pilled: pilledAttr,
      className: index.cx(pilledClass, filledClass, stretchClass)
    }, rest), !firstItemVisible && PreviousButton, /*#__PURE__*/React.createElement(SegmentGroup_styles.StyledContentWrapper, {
      ref: scrollRef
    }, /*#__PURE__*/React.createElement(SegmentGroup_styles.StyledContent, {
      ref: trackRef
    }, children)), !lastItemVisible && NextButton);
  });
};
var segmentGroupConfig = {
  name: 'SegmentGroup',
  tag: 'div',
  layout: segmentGroupRoot,
  base: SegmentGroup_styles.base,
  variations: {
    size: {
      css: base.base
    },
    view: {
      css: base$1.base
    },
    disabled: {
      css: base$2.base,
      attrs: true
    },
    pilled: {
      css: base$3.base,
      attrs: true
    },
    stretch: {
      css: base$4.base,
      attrs: true
    },
    filledBackground: {
      css: base$5.base,
      attrs: true
    }
  },
  defaults: {
    view: 'clear',
    size: 'xs'
  }
};

exports.segmentGroupConfig = segmentGroupConfig;
exports.segmentGroupRoot = segmentGroupRoot;
//# sourceMappingURL=SegmentGroup.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaCore = require('@salutejs/plasma-core');
var index = require('../../../../utils/index.js');
var tokens = require('../../tokens.js');
var SegmentProvider = require('../../SegmentProvider/SegmentProvider.js');
var base = require('./variations/_size/base.js');
var base$1 = require('./variations/_view/base.js');
var base$2 = require('./variations/_disabled/base.js');
var base$3 = require('./variations/_pilled/base.js');
var SegmentItem_styles = require('./SegmentItem.styles.js');
var extractTextFrom = require('../../../../utils/extractTextFrom.js');

var _excluded = ["size", "view", "id", "label", "value", "pilled", "customHandleSelect", "aria-label"];
var segmentItemRoot = function segmentItemRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, outerRef) {
    var size = props.size,
      view = props.view,
      id = props.id,
      label = props.label,
      value = props.value,
      pilled = props.pilled,
      customHandleSelect = props.customHandleSelect,
      ariaLabelExternal = props['aria-label'],
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var _useSegmentInner = SegmentProvider.useSegmentInner(),
      selectionMode = _useSegmentInner.selectionMode,
      disabledGroup = _useSegmentInner.disabledGroup,
      handleSelect = _useSegmentInner.handleSelect,
      selectedSegmentItems = _useSegmentInner.selectedSegmentItems;
    var uniqId = plasmaCore.safeUseId();
    var segmentId = id || "label-".concat(uniqId);
    var ariaLabelDefault = React.useMemo(function () {
      return extractTextFrom.extractTextFrom(label);
    }, [label]);
    var pilledAttr = view !== 'clear' && pilled;
    var pilledClass = pilledAttr ? tokens.classes.segmentPilled : undefined;
    var isSelected = selectedSegmentItems === null || selectedSegmentItems === void 0 ? void 0 : selectedSegmentItems.includes(value || ariaLabelDefault);
    var selectedClass = isSelected ? tokens.classes.selectedSegmentItem : undefined;
    var handleSelectSegment = React.useCallback(function (event) {
      if (disabledGroup) {
        return;
      }
      customHandleSelect === null || customHandleSelect === void 0 || customHandleSelect(event);
      handleSelect === null || handleSelect === void 0 || handleSelect(value || ariaLabelDefault);
    }, [selectionMode]);
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      view: view,
      size: size,
      id: segmentId,
      ref: outerRef,
      "aria-label": ariaLabelExternal || ariaLabelDefault,
      value: value,
      pilled: pilledAttr,
      className: index.cx(selectedClass, pilledClass),
      onClick: handleSelectSegment,
      tabIndex: disabledGroup ? -1 : 0,
      disabled: disabledGroup
    }, rest), /*#__PURE__*/React.createElement(SegmentItem_styles.StyledContent, null, label || value));
  });
};
var segmentItemConfig = {
  name: 'SegmentItem',
  tag: 'button',
  layout: segmentItemRoot,
  base: SegmentItem_styles.base,
  variations: {
    size: {
      css: base.base
    },
    view: {
      css: base$1.base
    },
    disabled: {
      css: base$2.base,
      attrs: true
    },
    pilled: {
      css: base$3.base,
      attrs: true
    }
  },
  defaults: {
    view: 'clear',
    size: 'xs'
  }
};

exports.segmentItemConfig = segmentItemConfig;
exports.segmentItemRoot = segmentItemRoot;
//# sourceMappingURL=SegmentItem.js.map

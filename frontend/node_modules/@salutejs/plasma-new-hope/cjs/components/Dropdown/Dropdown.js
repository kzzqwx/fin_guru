'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index = require('../../utils/index.js');
var pathReducer = require('./reducers/pathReducer.js');
var focusedPathReducer = require('./reducers/focusedPathReducer.js');
require('@salutejs/plasma-core');
require('@linaria/react');
var Dropdown_tokens = require('./Dropdown.tokens.js');
var DropdownInner = require('./ui/DropdownInner/DropdownInner.js');
var index$1 = require('./utils/index.js');
require('focus-visible');
require('styled-components');
require('@linaria/core');
require('react-dom');
require('react-popper');
var base = require('./variations/_view/base.js');
var base$1 = require('./variations/_size/base.js');
var Dropdown_styles = require('./Dropdown.styles.js');
var useKeyboardNavigation = require('./hooks/useKeyboardNavigation.js');
var useHashMaps = require('./hooks/useHashMaps.js');

var _excluded = ["items", "children", "placement", "offset", "closeOnOverlayClick", "onToggle", "size", "view", "itemRole", "className", "listWidth", "listHeight", "listOverflow", "closeOnSelect", "onHover", "onItemSelect", "onItemClick", "trigger", "variant", "hasArrow"];

/**
 * Выпадающий список.
 */
var dropdownRoot = function dropdownRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (_ref, ref) {
    var items = _ref.items,
      children = _ref.children,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      onToggle = _ref.onToggle,
      size = _ref.size,
      view = _ref.view,
      _ref$itemRole = _ref.itemRole,
      itemRole = _ref$itemRole === void 0 ? 'treeitem' : _ref$itemRole,
      className = _ref.className,
      listWidth = _ref.listWidth,
      listHeight = _ref.listHeight,
      listOverflow = _ref.listOverflow,
      _ref$closeOnSelect = _ref.closeOnSelect,
      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,
      onHover = _ref.onHover,
      onItemSelect = _ref.onItemSelect,
      onItemClick = _ref.onItemClick,
      _ref$trigger = _ref.trigger,
      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,
      _ref$variant = _ref.variant,
      variant = _ref$variant === void 0 ? 'normal' : _ref$variant,
      _ref$hasArrow = _ref.hasArrow,
      hasArrow = _ref$hasArrow === void 0 ? true : _ref$hasArrow,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
    var _useReducer = React.useReducer(pathReducer.pathReducer, []),
      _useReducer2 = _rollupPluginBabelHelpers.slicedToArray(_useReducer, 2),
      path = _useReducer2[0],
      dispatchPath = _useReducer2[1];
    var _useReducer3 = React.useReducer(focusedPathReducer.focusedPathReducer, []),
      _useReducer4 = _rollupPluginBabelHelpers.slicedToArray(_useReducer3, 2),
      focusedPath = _useReducer4[0],
      dispatchFocusedPath = _useReducer4[1];
    var _useHashMaps = useHashMaps.useHashMaps(items),
      _useHashMaps2 = _rollupPluginBabelHelpers.slicedToArray(_useHashMaps, 2),
      pathMap = _useHashMaps2[0],
      focusedToValueMap = _useHashMaps2[1];
    var handleGlobalToggle = function handleGlobalToggle(opened, event) {
      if (opened) {
        dispatchPath({
          type: 'opened_first_level'
        });
      } else {
        dispatchFocusedPath({
          type: 'reset'
        });
        dispatchPath({
          type: 'reset'
        });
      }
      if (onToggle) {
        onToggle(opened, event);
      }
    };
    var _useKeyNavigation = useKeyboardNavigation.useKeyNavigation({
        focusedPath: focusedPath,
        dispatchFocusedPath: dispatchFocusedPath,
        path: path,
        dispatchPath: dispatchPath,
        pathMap: pathMap,
        focusedToValueMap: focusedToValueMap,
        handleGlobalToggle: handleGlobalToggle,
        closeOnSelect: closeOnSelect,
        onItemSelect: onItemSelect,
        onItemClick: onItemClick
      }),
      onKeyDown = _useKeyNavigation.onKeyDown;
    var isCurrentListOpen = Boolean(path[0]);
    var getActiveDescendant = function getActiveDescendant() {
      var _focusedToValueMap$ge;
      var focusedPathAsString = focusedPath.reduce(function (acc, n) {
        return "".concat(acc, "/").concat(n);
      }, '').replace(/^(\/)/, '');
      return focusedToValueMap === null || focusedToValueMap === void 0 || (_focusedToValueMap$ge = focusedToValueMap.get(focusedPathAsString)) === null || _focusedToValueMap$ge === void 0 ? void 0 : _focusedToValueMap$ge.value.toString();
    };
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      className: index.cx(className, Dropdown_tokens.classes.dropdownRoot),
      ref: ref,
      view: view,
      size: size,
      items: items
    }, rest), /*#__PURE__*/React.createElement(Dropdown_styles.StyledPopover, {
      isOpen: isCurrentListOpen,
      usePortal: false,
      onToggle: handleGlobalToggle,
      offset: offset,
      placement: index$1.getPlacements(placement),
      trigger: trigger,
      closeOnOverlayClick: closeOnOverlayClick,
      isFocusTrapped: false,
      target: index$1.childrenWithProps(children, {
        role: 'combobox',
        'aria-controls': 'tree_level_1',
        'aria-expanded': isCurrentListOpen,
        'aria-activedescendant': getActiveDescendant(),
        onKeyDown: onKeyDown
      }),
      preventOverflow: false
    }, /*#__PURE__*/React.createElement(Dropdown_styles.Ul, {
      listHeight: listHeight,
      listOverflow: listOverflow,
      role: "tree",
      id: "tree_level_1",
      listWidth: listWidth
    }, items.map(function (item, index) {
      return /*#__PURE__*/React.createElement(DropdownInner.DropdownInner, {
        key: "".concat(index, "/0"),
        item: item,
        currentLevel: 0,
        focusedPath: focusedPath,
        trigger: trigger,
        path: path,
        dispatchPath: dispatchPath,
        index: index,
        itemRole: itemRole,
        listHeight: listHeight,
        listOverflow: listOverflow,
        handleGlobalToggle: handleGlobalToggle,
        closeOnSelect: closeOnSelect,
        onHover: onHover,
        onItemSelect: onItemSelect,
        onItemClick: onItemClick,
        listWidth: listWidth,
        variant: variant,
        hasArrow: hasArrow
      });
    }))));
  });
};
var dropdownConfig = {
  name: 'Dropdown',
  tag: 'div',
  layout: dropdownRoot,
  base: Dropdown_styles.base,
  variations: {
    view: {
      css: base.base
    },
    size: {
      css: base$1.base
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};

exports.dropdownConfig = dropdownConfig;
exports.dropdownRoot = dropdownRoot;
//# sourceMappingURL=Dropdown.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaCore = require('@salutejs/plasma-core');
var Dropdown_tokens = require('../../Dropdown.tokens.js');
var index$1 = require('../../../../utils/index.js');
var index = require('../../utils/index.js');
var base = require('./variations/_view/base.js');
var base$1 = require('./variations/_size/base.js');
var DropdownItem_styles = require('./DropdownItem.styles.js');

var _excluded = ["id", "className", "children", "text", "isSelected", "name", "checked", "value", "role", "view", "size", "disabled", "contentLeft", "contentRight", "onSelect", "onClick", "onChange"];
/**
 * Элемент выпадающего списка
 */
var dropdownItemOldRoot = function dropdownItemOldRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (_ref, outerRootRef) {
    var id = _ref.id,
      className = _ref.className,
      children = _ref.children,
      text = _ref.text,
      isSelected = _ref.isSelected,
      name = _ref.name,
      checked = _ref.checked,
      value = _ref.value,
      role = _ref.role,
      view = _ref.view,
      size = _ref.size,
      disabled = _ref.disabled,
      ContentLeftComponent = _ref.contentLeft,
      ContentRightComponent = _ref.contentRight,
      onSelect = _ref.onSelect,
      onClick = _ref.onClick,
      onChange = _ref.onChange,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
    var uniqId = plasmaCore.safeUseId();
    var innerId = id || uniqId;
    var withDropdownItemIsSelected = checked || isSelected ? Dropdown_tokens.classes.dropdownItemIsSelected : undefined;
    var withDropdownItemIsDisabled = disabled ? Dropdown_tokens.classes.dropdownItemIsDisabled : undefined;
    var handleOnClick = React.useCallback(function (event) {
      if (disabled) {
        return;
      }
      onClick === null || onClick === void 0 || onClick(event);
      if (onSelect && !ContentLeftComponent) {
        onSelect(value, text);
      }
    }, [onSelect, disabled]);
    var handleOnChange = React.useCallback(function (event) {
      if (disabled) {
        return;
      }
      onChange === null || onChange === void 0 || onChange(event);
      if (onSelect && ContentLeftComponent) {
        onSelect(value, text);
      }
    }, [onSelect, disabled]);
    var contentProps = _rollupPluginBabelHelpers.objectSpread2({
      name: name,
      value: value,
      checked: checked || isSelected,
      disabled: disabled,
      tabIndex: 0
    }, !disabled && {
      onChange: handleOnChange
    });
    var ContentLeft = React.useMemo(function () {
      return index.getValidComponent(ContentLeftComponent, contentProps);
    }, [ContentRightComponent, contentProps]);
    var ContentRight = React.useMemo(function () {
      return index.getValidComponent(ContentRightComponent, contentProps);
    }, [ContentRightComponent, contentProps]);
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      className: index$1.cx(withDropdownItemIsSelected, withDropdownItemIsDisabled, className),
      view: view,
      size: size,
      id: innerId,
      isSelected: isSelected,
      role: role,
      ref: outerRootRef,
      tabIndex: 0,
      "aria-disabled": disabled,
      onClick: handleOnClick,
      "data-value": value
    }, rest), text ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DropdownItem_styles.StyledContentLeft, null, ContentLeftComponent && ContentLeft), /*#__PURE__*/React.createElement(DropdownItem_styles.StyledText, null, text), /*#__PURE__*/React.createElement(DropdownItem_styles.StyledContentRight, null, ContentRightComponent && ContentRight)) : children);
  });
};
var dropdownItemOldConfig = {
  name: 'DropdownItem',
  tag: 'div',
  layout: dropdownItemOldRoot,
  base: DropdownItem_styles.base,
  variations: {
    view: {
      css: base.base
    },
    size: {
      css: base$1.base
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};

exports.dropdownItemOldConfig = dropdownItemOldConfig;
exports.dropdownItemOldRoot = dropdownItemOldRoot;
//# sourceMappingURL=DropdownItemOld.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var Dropdown_tokens = require('../../Dropdown.tokens.js');
var index = require('../../../../utils/index.js');
require('@linaria/react');
var IconDisclosureRight = require('../../../_Icon/Icons/IconDisclosureRight.js');
var DropdownItem_styles = require('./DropdownItem.styles.js');

var _DisclosureIconWrappe;
var DropdownItem = function DropdownItem(_ref) {
  var item = _ref.item,
    path = _ref.path,
    focusedPath = _ref.focusedPath,
    currentLevel = _ref.currentLevel,
    index$1 = _ref.index,
    itemRole = _ref.itemRole,
    closeOnSelect = _ref.closeOnSelect,
    handleGlobalToggle = _ref.handleGlobalToggle,
    onHover = _ref.onHover,
    onItemSelect = _ref.onItemSelect,
    onItemClick = _ref.onItemClick,
    ariaControls = _ref.ariaControls,
    ariaExpanded = _ref.ariaExpanded,
    ariaHasPopup = _ref.ariaHasPopup,
    ariaLevel = _ref.ariaLevel,
    ariaLabel = _ref.ariaLabel,
    variant = _ref.variant,
    hasArrow = _ref.hasArrow;
  var value = item.value,
    label = item.label,
    disabled = item.disabled,
    isDisabled = item.isDisabled,
    contentLeft = item.contentLeft,
    contentRight = item.contentRight;
  var ref = React.useRef(null);
  var isDisabledClassName = disabled || isDisabled ? Dropdown_tokens.classes.dropdownItemIsDisabled : undefined;
  var focusedClass = currentLevel === focusedPath.length - 1 && index$1 === (focusedPath === null || focusedPath === void 0 ? void 0 : focusedPath[currentLevel]) ? Dropdown_tokens.classes.dropdownItemIsFocused : undefined;
  var activeClass = value === (path === null || path === void 0 ? void 0 : path[currentLevel + 1]) ? Dropdown_tokens.classes.dropdownItemIsActive : undefined;
  React.useEffect(function () {
    if (focusedClass && ref !== null && ref !== void 0 && ref.current) {
      ref.current.scrollIntoView({
        behavior: 'smooth',
        block: 'center',
        inline: 'center'
      });
    }
  }, [focusedClass]);
  var handleClick = function handleClick(event) {
    if (disabled || isDisabled) {
      return;
    }
    if (onItemSelect) {
      onItemSelect(item, event);
    }
    if (onItemClick) {
      onItemClick(item, event);
    }
    if (handleGlobalToggle && closeOnSelect) {
      handleGlobalToggle(false, event);
    }
  };
  var handleHover = function handleHover() {
    if (onHover) {
      onHover(index$1);
    }
  };
  return /*#__PURE__*/React.createElement(DropdownItem_styles.Wrapper, {
    className: index.cx(isDisabledClassName, focusedClass, activeClass),
    id: value.toString(),
    role: itemRole,
    ref: ref,
    "aria-disabled": disabled || isDisabled,
    onClick: handleClick,
    onMouseEnter: handleHover,
    variant: variant,
    "aria-controls": ariaControls,
    "aria-expanded": ariaExpanded,
    "aria-haspopup": ariaHasPopup,
    "aria-level": ariaLevel,
    "aria-label": ariaLabel
  }, contentLeft && /*#__PURE__*/React.createElement(DropdownItem_styles.StyledContentLeft, null, contentLeft), /*#__PURE__*/React.createElement(DropdownItem_styles.StyledText, null, label), contentRight && /*#__PURE__*/React.createElement(DropdownItem_styles.StyledContentRight, null, contentRight), item.items && hasArrow && (_DisclosureIconWrappe || (_DisclosureIconWrappe = /*#__PURE__*/React.createElement(DropdownItem_styles.DisclosureIconWrapper, null, /*#__PURE__*/React.createElement(IconDisclosureRight.IconDisclosureRight, {
    size: "xs",
    color: "inherit"
  })))));
};

exports.DropdownItem = DropdownItem;
//# sourceMappingURL=DropdownItem.js.map

{"version":3,"file":"Spinner.js","sources":["../../../src/components/Spinner/Spinner.tsx"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { safeUseId } from '@salutejs/plasma-core';\n\nimport type { RootProps } from '../../engines/types';\n\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { SpinnerSvg } from './SpinnerSvg';\nimport { SpinnerWrapper, base } from './Spinner.styles';\nimport type { SpinnerProps } from './Spinner.types';\nimport { useInnerProps } from './hooks';\n\nexport const spinnerRoot = (Root: RootProps<HTMLDivElement, SpinnerProps>) =>\n    forwardRef<HTMLDivElement, SpinnerProps>((props, ref) => {\n        const { id, ...rest } = props;\n\n        const innerProps = useInnerProps(props, {\n            wrapperWidth: 'auto',\n            wrapperHeight: 'auto',\n            svgWidth: 'var(--plasma-spinner-size)',\n            svgHeight: 'var(--plasma-spinner-size)',\n            color: 'currentColor',\n        });\n\n        const uniqId = safeUseId;\n        const innerId = id || uniqId();\n\n        return (\n            <Root ref={ref} id={innerId} {...rest}>\n                <SpinnerWrapper width={innerProps.wrapperWidth} height={innerProps.wrapperHeight}>\n                    <SpinnerSvg\n                        id={innerId}\n                        width={innerProps.svgWidth}\n                        height={innerProps.svgHeight}\n                        color={innerProps.color}\n                    />\n                </SpinnerWrapper>\n            </Root>\n        );\n    });\n\nexport const spinnerConfig = {\n    name: 'Spinner',\n    tag: 'div',\n    layout: spinnerRoot,\n    base,\n    variations: {\n        size: {\n            css: sizeCSS,\n        },\n        view: {\n            css: viewCSS,\n        },\n    },\n    defaults: {\n        size: 'm',\n        view: 'accent',\n    },\n};\n"],"names":["spinnerRoot","Root","forwardRef","props","ref","id","rest","_objectWithoutProperties","_excluded","innerProps","useInnerProps","wrapperWidth","wrapperHeight","svgWidth","svgHeight","color","uniqId","safeUseId","innerId","React","createElement","_extends","SpinnerWrapper","width","height","SpinnerSvg","spinnerConfig","name","tag","layout","base","variations","size","css","sizeCSS","view","viewCSS","defaults"],"mappings":";;;;;;;;;;;;;;IAYaA,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAA6C,EAAA;AAAA,EAAA,oBACrEC,gBAAU,CAA+B,UAACC,KAAK,EAAEC,GAAG,EAAK;AACrD,IAAA,IAAQC,EAAE,GAAcF,KAAK,CAArBE,EAAE;AAAKC,MAAAA,IAAI,GAAAC,iDAAA,CAAKJ,KAAK,EAAAK,SAAA,CAAA,CAAA;AAE7B,IAAA,IAAMC,UAAU,GAAGC,mBAAa,CAACP,KAAK,EAAE;AACpCQ,MAAAA,YAAY,EAAE,MAAM;AACpBC,MAAAA,aAAa,EAAE,MAAM;AACrBC,MAAAA,QAAQ,EAAE,4BAA4B;AACtCC,MAAAA,SAAS,EAAE,4BAA4B;AACvCC,MAAAA,KAAK,EAAE,cAAA;AACX,KAAC,CAAC,CAAA;IAEF,IAAMC,MAAM,GAAGC,oBAAS,CAAA;AACxB,IAAA,IAAMC,OAAO,GAAGb,EAAE,IAAIW,MAAM,EAAE,CAAA;AAE9B,IAAA,oBACIG,KAAA,CAAAC,aAAA,CAACnB,IAAI,EAAAoB,iCAAA,CAAA;AAACjB,MAAAA,GAAG,EAAEA,GAAI;AAACC,MAAAA,EAAE,EAAEa,OAAAA;AAAQ,KAAA,EAAKZ,IAAI,CACjCa,eAAAA,KAAA,CAAAC,aAAA,CAACE,6BAAc,EAAA;MAACC,KAAK,EAAEd,UAAU,CAACE,YAAa;MAACa,MAAM,EAAEf,UAAU,CAACG,aAAAA;AAAc,KAAA,eAC7EO,KAAA,CAAAC,aAAA,CAACK,qBAAU,EAAA;AACPpB,MAAAA,EAAE,EAAEa,OAAQ;MACZK,KAAK,EAAEd,UAAU,CAACI,QAAS;MAC3BW,MAAM,EAAEf,UAAU,CAACK,SAAU;MAC7BC,KAAK,EAAEN,UAAU,CAACM,KAAAA;KACrB,CACW,CACd,CAAC,CAAA;AAEf,GAAC,CAAC,CAAA;AAAA,EAAA;AAEC,IAAMW,aAAa,GAAG;AACzBC,EAAAA,IAAI,EAAE,SAAS;AACfC,EAAAA,GAAG,EAAE,KAAK;AACVC,EAAAA,MAAM,EAAE7B,WAAW;AACnB8B,EAAAA,IAAI,EAAJA,mBAAI;AACJC,EAAAA,UAAU,EAAE;AACRC,IAAAA,IAAI,EAAE;AACFC,MAAAA,GAAG,EAAEC,SAAAA;KACR;AACDC,IAAAA,IAAI,EAAE;AACFF,MAAAA,GAAG,EAAEG,WAAAA;AACT,KAAA;GACH;AACDC,EAAAA,QAAQ,EAAE;AACNL,IAAAA,IAAI,EAAE,GAAG;AACTG,IAAAA,IAAI,EAAE,QAAA;AACV,GAAA;AACJ;;;;;"}
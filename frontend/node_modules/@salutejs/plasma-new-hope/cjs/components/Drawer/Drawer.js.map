{"version":3,"file":"Drawer.js","sources":["../../../src/components/Drawer/Drawer.tsx"],"sourcesContent":["import React, { forwardRef, useMemo } from 'react';\nimport { useFocusTrap, useForkRef, safeUseId } from '@salutejs/plasma-core';\n\nimport { component, mergeConfig } from '../../engines';\nimport type { RootProps } from '../../engines';\nimport { usePopupContext } from '../Popup';\nimport { Overlay } from '../Overlay';\nimport { DEFAULT_Z_INDEX } from '../Popup/utils';\nimport { panelConfig } from '../Panel';\nimport { getSizeValueFromProp } from '../../utils';\n\nimport { classes, tokens } from './Drawer.tokens';\nimport type { DrawerProps } from './Drawer.types';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as borderRadiusCSS } from './variations/_borderRadius/base';\nimport { StyledPopup } from './Drawer.styles';\nimport { getIdLastDrawer } from './DrawerContext';\nimport { useDrawer } from './hooks';\n\n// issue #823\nconst mergedPanelConfig = mergeConfig(panelConfig);\nconst Panel = component(mergedPanelConfig);\n\nexport const drawerRoot = (Root: RootProps<HTMLDivElement, DrawerProps>) =>\n    forwardRef<HTMLDivElement, DrawerProps>(\n        (\n            {\n                id,\n                zIndex,\n                popupInfo,\n                withBlur,\n                children,\n                view,\n                size,\n                width,\n                height,\n                isOpen,\n                initialFocusRef,\n                focusAfterRef,\n                className,\n                onClose,\n                onOverlayClick,\n                onEscKeyDown,\n                offset,\n                frame,\n                borderRadius = 'none',\n                placement = 'right',\n                closeOnEsc = true,\n                closeOnOverlayClick = true,\n                asModal = true,\n                ...rest\n            },\n            outerRef,\n        ) => {\n            const trapRef = useFocusTrap(true, initialFocusRef, focusAfterRef);\n            const popupController = usePopupContext();\n\n            const innerRef = useForkRef<HTMLDivElement>(trapRef, outerRef);\n\n            const uniqId = safeUseId();\n            const innerId = id || uniqId;\n            const overlayBackgroundToken = withBlur\n                ? `var(${tokens.drawerOverlayWithBlurColor})`\n                : `var(${tokens.drawerOverlayColor})`;\n            const innerWidth = width ? getSizeValueFromProp(width) : '100%';\n            const innerHeight = height ? getSizeValueFromProp(height) : '100%';\n\n            const { drawerInfo } = useDrawer({\n                id: innerId,\n                isOpen,\n                closeOnEsc,\n                onEscKeyDown,\n                onClose,\n                popupInfo,\n                disableScroll: asModal,\n            });\n            const transparent = useMemo(() => getIdLastDrawer(popupController.items) !== innerId, [\n                innerId,\n                popupController.items,\n            ]);\n\n            const onDrawerOverlayKeyDown = (event: React.MouseEvent<HTMLDivElement>) => {\n                if (onOverlayClick) {\n                    onOverlayClick(event);\n                    return;\n                }\n\n                if (onClose) {\n                    onClose();\n                }\n            };\n\n            return (\n                <StyledPopup\n                    id={innerId}\n                    ref={asModal ? innerRef : outerRef}\n                    isOpen={isOpen}\n                    zIndex={zIndex}\n                    placement={placement}\n                    popupInfo={drawerInfo}\n                    frame={frame}\n                    width={innerWidth}\n                    height={innerHeight}\n                    offset={offset}\n                    withAnimation\n                    overlay={\n                        asModal && (\n                            <Root view={view}>\n                                <Overlay\n                                    className={classes.overlay}\n                                    zIndex={zIndex || DEFAULT_Z_INDEX}\n                                    backgroundColorProperty={overlayBackgroundToken}\n                                    withBlur={withBlur}\n                                    transparent={transparent}\n                                    isClickable={closeOnOverlayClick}\n                                    onOverlayClick={onDrawerOverlayKeyDown}\n                                />\n                            </Root>\n                        )\n                    }\n                    {...rest}\n                >\n                    <Root\n                        view={view}\n                        size={size}\n                        style={{ width: innerWidth, height: innerHeight }}\n                        borderRadius={borderRadius}\n                    >\n                        <Panel width={innerWidth} height={innerHeight} className={className}>\n                            {children}\n                        </Panel>\n                    </Root>\n                </StyledPopup>\n            );\n        },\n    );\n\nexport const drawerConfig = {\n    name: 'Drawer',\n    tag: 'div',\n    layout: drawerRoot,\n    base: '',\n    variations: {\n        view: {\n            css: viewCSS,\n        },\n        size: {\n            css: sizeCSS,\n        },\n        borderRadius: {\n            css: borderRadiusCSS,\n        },\n    },\n    defaults: {\n        view: 'default',\n        size: 'm',\n        borderRadius: 'none',\n    },\n};\n"],"names":["mergedPanelConfig","mergeConfig","panelConfig","Panel","component","drawerRoot","Root","forwardRef","_ref","outerRef","id","zIndex","popupInfo","withBlur","children","view","size","width","height","isOpen","initialFocusRef","focusAfterRef","className","onClose","onOverlayClick","onEscKeyDown","offset","frame","_ref$borderRadius","borderRadius","_ref$placement","placement","_ref$closeOnEsc","closeOnEsc","_ref$closeOnOverlayCl","closeOnOverlayClick","_ref$asModal","asModal","rest","_objectWithoutProperties","_excluded","trapRef","useFocusTrap","popupController","usePopupContext","innerRef","useForkRef","uniqId","safeUseId","innerId","overlayBackgroundToken","concat","tokens","drawerOverlayWithBlurColor","drawerOverlayColor","innerWidth","getSizeValueFromProp","innerHeight","_useDrawer","useDrawer","disableScroll","drawerInfo","transparent","useMemo","getIdLastDrawer","items","onDrawerOverlayKeyDown","event","React","createElement","StyledPopup","_extends","ref","withAnimation","overlay","Overlay","classes","DEFAULT_Z_INDEX","backgroundColorProperty","isClickable","style","drawerConfig","name","tag","layout","base","variations","css","viewCSS","sizeCSS","borderRadiusCSS","defaults"],"mappings":"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"}
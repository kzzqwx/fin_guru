'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaCore = require('@salutejs/plasma-core');
require('@linaria/core');
var common = require('../../engines/common.js');
var PopupContext = require('../Popup/PopupContext.js');
require('react-dom');
var getSizeValueFromProp = require('../../utils/getSizeValueFromProp.js');
require('../../utils/react.js');
require('@linaria/react');
var index = require('../Popup/utils/index.js');
var Overlay = require('../Overlay/Overlay.js');
var Panel$1 = require('../Panel/Panel.js');
require('focus-visible');
require('styled-components');
var Drawer_tokens = require('./Drawer.tokens.js');
var base = require('./variations/_view/base.js');
var base$1 = require('./variations/_size/base.js');
var base$2 = require('./variations/_borderRadius/base.js');
var Drawer_styles = require('./Drawer.styles.js');
var DrawerContext = require('./DrawerContext.js');
var useDrawer = require('./hooks/useDrawer.js');

var _excluded = ["id", "zIndex", "popupInfo", "withBlur", "children", "view", "size", "width", "height", "isOpen", "initialFocusRef", "focusAfterRef", "className", "onClose", "onOverlayClick", "onEscKeyDown", "offset", "frame", "borderRadius", "placement", "closeOnEsc", "closeOnOverlayClick", "asModal"];

// issue #823
var mergedPanelConfig = /*#__PURE__*/common.mergeConfig(Panel$1.panelConfig);
var Panel = /*#__PURE__*/common.component(mergedPanelConfig);
var drawerRoot = function drawerRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (_ref, outerRef) {
    var id = _ref.id,
      zIndex = _ref.zIndex,
      popupInfo = _ref.popupInfo,
      withBlur = _ref.withBlur,
      children = _ref.children,
      view = _ref.view,
      size = _ref.size,
      width = _ref.width,
      height = _ref.height,
      isOpen = _ref.isOpen,
      initialFocusRef = _ref.initialFocusRef,
      focusAfterRef = _ref.focusAfterRef,
      className = _ref.className,
      onClose = _ref.onClose,
      onOverlayClick = _ref.onOverlayClick,
      onEscKeyDown = _ref.onEscKeyDown,
      offset = _ref.offset,
      frame = _ref.frame,
      _ref$borderRadius = _ref.borderRadius,
      borderRadius = _ref$borderRadius === void 0 ? 'none' : _ref$borderRadius,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'right' : _ref$placement,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,
      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,
      _ref$asModal = _ref.asModal,
      asModal = _ref$asModal === void 0 ? true : _ref$asModal,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
    var trapRef = plasmaCore.useFocusTrap(true, initialFocusRef, focusAfterRef);
    var popupController = PopupContext.usePopupContext();
    var innerRef = plasmaCore.useForkRef(trapRef, outerRef);
    var uniqId = plasmaCore.safeUseId();
    var innerId = id || uniqId;
    var overlayBackgroundToken = withBlur ? "var(".concat(Drawer_tokens.tokens.drawerOverlayWithBlurColor, ")") : "var(".concat(Drawer_tokens.tokens.drawerOverlayColor, ")");
    var innerWidth = width ? getSizeValueFromProp.getSizeValueFromProp(width) : '100%';
    var innerHeight = height ? getSizeValueFromProp.getSizeValueFromProp(height) : '100%';
    var _useDrawer = useDrawer.useDrawer({
        id: innerId,
        isOpen: isOpen,
        closeOnEsc: closeOnEsc,
        onEscKeyDown: onEscKeyDown,
        onClose: onClose,
        popupInfo: popupInfo,
        disableScroll: asModal
      }),
      drawerInfo = _useDrawer.drawerInfo;
    var transparent = React.useMemo(function () {
      return DrawerContext.getIdLastDrawer(popupController.items) !== innerId;
    }, [innerId, popupController.items]);
    var onDrawerOverlayKeyDown = function onDrawerOverlayKeyDown(event) {
      if (onOverlayClick) {
        onOverlayClick(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    };
    return /*#__PURE__*/React.createElement(Drawer_styles.StyledPopup, _rollupPluginBabelHelpers.extends({
      id: innerId,
      ref: asModal ? innerRef : outerRef,
      isOpen: isOpen,
      zIndex: zIndex,
      placement: placement,
      popupInfo: drawerInfo,
      frame: frame,
      width: innerWidth,
      height: innerHeight,
      offset: offset,
      withAnimation: true,
      overlay: asModal && /*#__PURE__*/React.createElement(Root, {
        view: view
      }, /*#__PURE__*/React.createElement(Overlay.Overlay, {
        className: Drawer_tokens.classes.overlay,
        zIndex: zIndex || index.DEFAULT_Z_INDEX,
        backgroundColorProperty: overlayBackgroundToken,
        withBlur: withBlur,
        transparent: transparent,
        isClickable: closeOnOverlayClick,
        onOverlayClick: onDrawerOverlayKeyDown
      }))
    }, rest), /*#__PURE__*/React.createElement(Root, {
      view: view,
      size: size,
      style: {
        width: innerWidth,
        height: innerHeight
      },
      borderRadius: borderRadius
    }, /*#__PURE__*/React.createElement(Panel, {
      width: innerWidth,
      height: innerHeight,
      className: className
    }, children)));
  });
};
var drawerConfig = {
  name: 'Drawer',
  tag: 'div',
  layout: drawerRoot,
  base: '',
  variations: {
    view: {
      css: base.base
    },
    size: {
      css: base$1.base
    },
    borderRadius: {
      css: base$2.base
    }
  },
  defaults: {
    view: 'default',
    size: 'm',
    borderRadius: 'none'
  }
};

exports.drawerConfig = drawerConfig;
exports.drawerRoot = drawerRoot;
//# sourceMappingURL=Drawer.js.map

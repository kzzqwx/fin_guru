'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var DrawerContext = require('../DrawerContext.js');
var PopupContext = require('../../Popup/PopupContext.js');
require('react-dom');
require('@salutejs/plasma-core');
require('../../../utils/react.js');
require('@linaria/react');

var ESCAPE_KEYCODE = 27;
var useDrawer = function useDrawer(_ref) {
  var id = _ref.id,
    isOpen = _ref.isOpen,
    popupInfo = _ref.popupInfo,
    onEscKeyDown = _ref.onEscKeyDown,
    onClose = _ref.onClose,
    _ref$closeOnEsc = _ref.closeOnEsc,
    closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
    _ref$disableScroll = _ref.disableScroll,
    disableScroll = _ref$disableScroll === void 0 ? true : _ref$disableScroll;
  var popupController = PopupContext.usePopupContext();
  var overflow = React.useRef(document.body.style.overflowY);

  // При ESC закрывает текущее окно, если это возможно
  var onKeyDown = React.useCallback(function (event) {
    if (!closeOnEsc) {
      return;
    }
    if (event.keyCode === ESCAPE_KEYCODE && DrawerContext.getIdLastDrawer(popupController.items) === id) {
      if (onEscKeyDown) {
        onEscKeyDown(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    }
  }, [onClose, onEscKeyDown, popupController.items, closeOnEsc]);
  React.useEffect(function () {
    window.addEventListener('keydown', onKeyDown);
    return function () {
      window.removeEventListener('keydown', onKeyDown);
    };
  }, [onKeyDown]);

  // linaria не поддерживает динамический global
  React.useEffect(function () {
    if (isOpen && disableScroll) {
      overflow.current = document.body.style.overflowY;
      document.body.style.overflowY = 'hidden';
    }
  }, [isOpen, disableScroll]);
  React.useEffect(function () {
    if (!isOpen && !DrawerContext.hasDrawers(popupController.items)) {
      document.body.style.overflowY = overflow.current;
    }
  }, [isOpen, popupController.items]);
  var drawerInfo = _rollupPluginBabelHelpers.objectSpread2({
    id: id,
    info: {
      isDrawer: true
    }
  }, popupInfo);
  return {
    drawerInfo: drawerInfo
  };
};

exports.useDrawer = useDrawer;
//# sourceMappingURL=useDrawer.js.map

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var ModalContext = require('../ModalContext.js');
var PopupContext = require('../../Popup/PopupContext.js');
require('react-dom');
require('@salutejs/plasma-core');
require('../../../utils/react.js');
require('@linaria/react');

var ESCAPE_KEYCODE = 27;
var useModal = function useModal(_ref) {
  var id = _ref.id,
    isOpen = _ref.isOpen,
    popupInfo = _ref.popupInfo,
    onEscKeyDown = _ref.onEscKeyDown,
    onClose = _ref.onClose,
    _ref$closeOnEsc = _ref.closeOnEsc,
    closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc;
  var popupController = PopupContext.usePopupContext();
  var overflow = React.useRef(document.body.style.overflowY);

  // При ESC закрывает текущее окно, если это возможно
  var onKeyDown = React.useCallback(function (event) {
    if (!closeOnEsc) {
      return;
    }
    if (event.keyCode === ESCAPE_KEYCODE && ModalContext.getIdLastModal(popupController.items) === id) {
      if (onEscKeyDown) {
        onEscKeyDown(event);
        return;
      }
      if (onClose) {
        onClose();
      }
    }
  }, [onClose, onEscKeyDown, popupController.items, closeOnEsc]);
  React.useEffect(function () {
    window.addEventListener('keydown', onKeyDown);
    return function () {
      window.removeEventListener('keydown', onKeyDown);
    };
  }, [onClose, onEscKeyDown, popupController.items, closeOnEsc]);

  // linaria не поддерживает динамический global
  React.useEffect(function () {
    if (isOpen) {
      overflow.current = document.body.style.overflowY;
      document.body.style.overflowY = 'hidden';
    }
  }, [isOpen]);
  React.useEffect(function () {
    if (!isOpen && !ModalContext.hasModals(popupController.items)) {
      document.body.style.overflowY = overflow.current;
    }
  }, [isOpen, overflow.current, popupController.items]);
  var modalInfo = _rollupPluginBabelHelpers.objectSpread2({
    id: id,
    info: {
      isModal: true
    }
  }, popupInfo);
  return {
    modalInfo: modalInfo
  };
};

exports.useModal = useModal;
//# sourceMappingURL=useModal.js.map

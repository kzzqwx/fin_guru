'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index = require('../../utils/index.js');
var base = require('./variations/_view/base.js');
var base$1 = require('./variations/_size/base.js');
var base$2 = require('./variations/_gap/base.js');
var base$4 = require('./variations/_shape/base.js');
var base$3 = require('./variations/_orientation/base.js');
var base$5 = require('./variations/_stretching/base.js');
var ButtonGroup_styles = require('./ButtonGroup.styles.js');
var ButtonGroup_tokens = require('./ButtonGroup.tokens.js');

var _excluded = ["children", "view", "size", "className", "stretching", "gap", "orientation", "shape", "isCommonButtonStyles"];
var buttonGroupRoot = function buttonGroupRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
      view = props.view,
      size = props.size,
      className = props.className,
      _props$stretching = props.stretching,
      stretching = _props$stretching === void 0 ? 'auto' : _props$stretching,
      _props$gap = props.gap,
      gap = _props$gap === void 0 ? 'dense' : _props$gap,
      _props$orientation = props.orientation,
      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
      _props$shape = props.shape,
      shape = _props$shape === void 0 ? 'default' : _props$shape,
      _props$isCommonButton = props.isCommonButtonStyles,
      isCommonButtonStyles = _props$isCommonButton === void 0 ? true : _props$isCommonButton,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var orientationClass = ButtonGroup_tokens.classes[orientation];
    var gapClass = ButtonGroup_tokens.classes[gap];
    var shapeClass = ButtonGroup_tokens.classes[shape];
    var stretchingClass = ButtonGroup_tokens.classes["".concat(stretching, "Stretching")];
    var overrideStylesClass = isCommonButtonStyles ? ButtonGroup_tokens.classes.buttonGroupOverrideStyles : undefined;
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      ref: ref,
      view: view,
      size: size,
      gap: gap,
      orientation: orientation,
      shape: shape,
      className: index.cx(overrideStylesClass, orientationClass, gapClass, shapeClass, stretchingClass, className)
    }, rest), children);
  });
};
var buttonGroupConfig = {
  name: 'ButtonGroup',
  tag: 'div',
  layout: buttonGroupRoot,
  base: ButtonGroup_styles.base,
  variations: {
    view: {
      css: base.base
    },
    size: {
      css: base$1.base
    },
    gap: {
      css: base$2.base
    },
    orientation: {
      css: base$3.base
    },
    shape: {
      css: base$4.base
    },
    stretching: {
      css: base$5.base
    }
  },
  defaults: {
    view: 'primary',
    size: 'm',
    gap: 'dense',
    orientation: 'horizontal',
    shape: 'default',
    stretching: 'auto'
  }
};

exports.buttonGroupConfig = buttonGroupConfig;
exports.buttonGroupRoot = buttonGroupRoot;
//# sourceMappingURL=ButtonGroup.js.map

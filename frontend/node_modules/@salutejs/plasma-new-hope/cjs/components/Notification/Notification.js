'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index = require('../../utils/index.js');
var IconCross = require('../_Icon/Icons/IconCross.js');
var Notification_tokens = require('./Notification.tokens.js');
var base$1 = require('./variations/_view/base.js');
var base = require('./variations/_layout/base.js');
var base$2 = require('./variations/_size/base.js');
var Notification_types = require('./Notification.types.js');
var Notification_styles = require('./Notification.styles.js');
var index$1 = require('./utils/index.js');

var _IconCross;
var _excluded = ["role", "title", "children", "actions", "view", "size", "iconPlacement", "showCloseIcon", "layout", "icon", "onCloseButtonClick"];

/**
 * Компонент для небольших уведомлений пользователя
 */
var notificationRoot = function notificationRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    var _props$role = props.role,
      role = _props$role === void 0 ? 'status' : _props$role,
      title = props.title,
      content = props.children,
      actions = props.actions,
      view = props.view,
      size = props.size,
      iconPlacement = props.iconPlacement,
      _props$showCloseIcon = props.showCloseIcon,
      showCloseIcon = _props$showCloseIcon === void 0 ? true : _props$showCloseIcon,
      _props$layout = props.layout,
      layout = _props$layout === void 0 ? Notification_types.layouts.vertical : _props$layout,
      icon = props.icon,
      onCloseButtonClick = props.onCloseButtonClick,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var ariaLive = 'polite';
    var ariaAtomic = false;
    if (role === 'alert') {
      ariaLive = 'assertive';
    } else if (role === 'status') {
      ariaAtomic = true;
    }
    var isOneLine = !content || !title;
    var oneLineClass = isOneLine ? Notification_tokens.classes.oneLine : undefined;
    var withoutIconClass = icon ? undefined : Notification_tokens.classes.withoutIcon;
    var withoutCloseIconClass = showCloseIcon ? undefined : Notification_tokens.classes.withoutCloseIcon;
    var IconPlacementInternal = React.useMemo(function () {
      return icon ? iconPlacement : undefined;
    }, [icon, iconPlacement]);
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      view: view,
      size: size,
      layout: layout,
      ref: ref,
      role: role,
      "aria-live": ariaLive,
      "aria-atomic": ariaAtomic
    }, rest), /*#__PURE__*/React.createElement(Notification_styles.Wrapper, {
      className: index.cx(Notification_tokens.classes.wrapper, index$1.getLayoutClass(layout), oneLineClass, withoutCloseIconClass)
    }, /*#__PURE__*/React.createElement(Notification_styles.ContentBox, {
      iconPlacement: IconPlacementInternal,
      className: index.cx(Notification_tokens.classes.contentBox, index$1.getLayoutClass(layout), withoutIconClass)
    }, icon && /*#__PURE__*/React.createElement(Notification_styles.IconWrapper, {
      iconPlacement: IconPlacementInternal,
      className: index.cx(Notification_tokens.classes.icon, index$1.getLayoutClass(layout))
    }, icon), /*#__PURE__*/React.createElement(Notification_styles.TextBox, {
      iconPlacement: IconPlacementInternal,
      showCloseIcon: showCloseIcon,
      className: index.cx(Notification_tokens.classes.textbox, index$1.getLayoutClass(layout))
    }, title && /*#__PURE__*/React.createElement(Notification_styles.StyledTitle, {
      className: Notification_tokens.classes.title
    }, title), content && /*#__PURE__*/React.createElement(Notification_styles.StyledContent, {
      className: Notification_tokens.classes.text
    }, content))), actions && /*#__PURE__*/React.createElement(Notification_styles.ButtonsWrapper, {
      iconPlacement: IconPlacementInternal,
      className: index.cx(Notification_tokens.classes.buttonsWrapper, index$1.getLayoutClass(layout))
    }, actions), showCloseIcon && /*#__PURE__*/React.createElement(Notification_styles.CloseIconWrapper, {
      view: "clear",
      size: "s",
      onClick: onCloseButtonClick,
      className: index.cx(Notification_tokens.classes.closeIcon, index$1.getLayoutClass(layout))
    }, _IconCross || (_IconCross = /*#__PURE__*/React.createElement(IconCross.IconCross, {
      size: "s",
      color: "inherit"
    })))));
  });
};
var noticationConfig = {
  name: 'Notification',
  tag: 'div',
  layout: notificationRoot,
  base: Notification_styles.StyledNotification,
  variations: {
    layout: {
      css: base.base
    },
    view: {
      css: base$1.base
    },
    size: {
      css: base$2.base
    }
  },
  defaults: {
    view: 'default',
    layout: Notification_types.layouts.vertical,
    size: 'xs'
  }
};

exports.noticationConfig = noticationConfig;
exports.notificationRoot = notificationRoot;
//# sourceMappingURL=Notification.js.map

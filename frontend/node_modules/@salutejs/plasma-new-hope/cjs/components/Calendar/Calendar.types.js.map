{"version":3,"file":"Calendar.types.js","sources":["../../../src/components/Calendar/Calendar.types.ts"],"sourcesContent":["import { HTMLAttributes, MutableRefObject } from 'react';\n\nimport type { CalendarBaseProps } from './CalendarBase/CalendarBase';\nimport type { CalendarDoubleProps } from './CalendarDouble/CalendarDouble';\n\nexport enum Keys {\n    pageUp = 33,\n    pageDown = 34,\n    home = 36,\n    end = 35,\n    left = 37,\n    right = 39,\n    up = 38,\n    down = 40,\n    enter = 13,\n    space = 32,\n}\n\nexport interface DateObject {\n    day: number;\n    monthIndex: number;\n    year: number;\n}\n\nexport interface ItemProps {\n    isCurrent: boolean;\n    isSelected: boolean;\n}\n\nexport interface DateItem extends ItemProps {\n    isDayInCurrentMonth: boolean;\n    inRange?: boolean;\n    date: DateObject;\n    events?: EventDay[];\n    disabled?: boolean;\n    isOutOfMinMaxRange?: boolean;\n    disabledArrowKey?: string;\n    disabledMonths?: string;\n}\n\nexport interface DayProps extends Partial<ItemProps> {\n    isDouble?: boolean;\n    isDayInCurrentMonth?: boolean;\n    isHovered?: boolean;\n    inRange?: boolean;\n    sideInRange?: 'left' | 'right';\n    disabled?: boolean;\n    dayOfWeek?: boolean;\n}\n\nexport interface MonthsProps extends ItemProps {}\n\nexport interface MonthsItem extends ItemProps {\n    monthName: string;\n    monthFullName?: string;\n    monthIndex: number;\n}\n\nexport interface YearsProps extends ItemProps {}\n\nexport interface YearsItem extends ItemProps {\n    yearValue: number;\n}\n\nexport interface EventDay {\n    date: Date;\n    color?: string;\n}\n\nexport interface DisabledDay {\n    date: Date;\n}\n\nexport interface UseKeyNavigationProps {\n    size: [number, number];\n    isDouble?: boolean;\n    onPrev: (withShift?: boolean) => void;\n    onNext: (withShift?: boolean) => void;\n}\n\nexport type CalendarValueType = Date | undefined | [Date | undefined, Date?];\n\nexport interface Calendar extends HTMLAttributes<HTMLDivElement> {\n    /**\n     * Выбранное значение.\n     */\n    value: CalendarValueType;\n    /**\n     * Состояние календаря, отвечающее за отображение.\n     */\n    date?: DateObject;\n    /**\n     * Минимальное значение даты.\n     */\n    min?: Date;\n    /**\n     * Максимальное значение даты.\n     */\n    max?: Date;\n    /**\n     * Должны ли значения минимального и максимального дня включаться в диапазон.\n     */\n    includeEdgeDates?: boolean;\n    /**\n     * Список событий.\n     */\n    eventList?: EventDay[];\n    /**\n     * Список отключенных дней.\n     */\n    disabledList?: DisabledDay[];\n    /**\n     * Обработчик изменения значения.\n     */\n    onChangeValue: (value: Date) => void;\n}\n\nexport type CalendarRange<T> = Omit<T, 'value' | 'onChangeValue'> & {\n    /**\n     * Выбранное значение.\n     */\n    value: [Date, Date?];\n    /**\n     * Обработчик изменения значения.\n     */\n    onChangeValue: (values: [Date, Date?]) => void;\n    /**\n     * Обработчик для выбора стартового значения в диапазоне.\n     */\n    onChangeStartOfRange?: (value: Date) => void;\n};\n\nexport interface DaysMetaDescription {\n    refs: MutableRefObject<HTMLDivElement[][]>;\n    rowSize: number;\n    newRowIndex: number;\n    newColumnIndex: number;\n    columnSize: number;\n    minColumnIndex: number;\n    defaultState?: number[];\n}\n\nexport type KeyboardArrowKey = 'left' | 'right' | 'up' | 'down';\n\ntype BaseProps = {\n    /**\n     * Режим отображения: двойной или одинарный.\n     */\n    isDouble?: false;\n    /**\n     * Режим выбора: диапазон или одинарный.\n     */\n    isRange?: false;\n    /**\n     * Выбранное значение.\n     */\n    value: Date;\n} & CalendarBaseProps;\n\ntype BaseRangeProps = {\n    /**\n     * Режим отображения: двойной или одинарный.\n     */\n    isDouble?: false;\n    /**\n     * Режим выбора: диапазон или одинарный.\n     */\n    isRange: true;\n} & CalendarRange<CalendarBaseProps>;\n\ntype DoubleProps = {\n    /**\n     * Режим отображения: двойной или одинарный.\n     */\n    isDouble?: true;\n    /**\n     * Режим выбора: диапазон или одинарный.\n     */\n    isRange?: false;\n    /**\n     * Выбранное значение.\n     */\n    value: Date;\n} & CalendarDoubleProps;\n\ntype DoubleRangeProps = {\n    /**\n     * Режим отображения: двойной или одинарный.\n     */\n    isDouble?: true;\n    /**\n     * Режим выбора: диапазон или одинарный.\n     */\n    isRange: true;\n} & CalendarRange<CalendarDoubleProps>;\n\nexport type ComponentVariation = {\n    base: React.FC<CalendarBaseProps>;\n    baseRange: React.FC<CalendarRange<CalendarBaseProps>>;\n    double: React.FC<CalendarDoubleProps>;\n    doubleRange: React.FC<CalendarRange<CalendarDoubleProps>>;\n};\n\nexport type CalendarProps = BaseProps | BaseRangeProps | DoubleProps | DoubleRangeProps;\n"],"names":["Keys"],"mappings":";;;;AAKYA,IAAAA,IAAI,0BAAJA,IAAI,EAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,QAAA,CAAA,GAAA,EAAA,CAAA,GAAA,QAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,GAAA,UAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,KAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,IAAA,CAAA,GAAA,EAAA,CAAA,GAAA,IAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,MAAA,CAAA,GAAA,EAAA,CAAA,GAAA,MAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA,CAAA;AAAJA,EAAAA,IAAI,CAAJA,IAAI,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,OAAA,CAAA;AAAA,EAAA,OAAJA,IAAI,CAAA;AAAA,CAAA,CAAA,EAAA;;;;"}
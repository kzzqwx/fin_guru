{"version":3,"file":"useKeyNavigation.js","sources":["../../../../src/components/Calendar/hooks/useKeyNavigation.ts"],"sourcesContent":["import React, { KeyboardEvent, useCallback, useLayoutEffect, useRef, useState } from 'react';\n\nimport type { DaysMetaDescription, KeyboardArrowKey, UseKeyNavigationProps } from '../Calendar.types';\nimport { Keys } from '../Calendar.types';\nimport { ROW_STEP } from '../utils';\n\n/**\n * Метод для получения стороны двойного календаря.\n */\nconst getDoubleCalendarSide = (currentIndexWeek: number) => {\n    if (currentIndexWeek >= 0 && currentIndexWeek < ROW_STEP) {\n        return 'first';\n    }\n\n    if (currentIndexWeek >= ROW_STEP && currentIndexWeek < ROW_STEP * 2) {\n        return 'second';\n    }\n\n    return '';\n};\n\nconst isOutOfBound = ([rowIndex, columnIndex]: number[], rowSize: number, columnSize: number) =>\n    columnIndex === -1 || columnIndex === columnSize + 1 || rowIndex === -1 || rowIndex === rowSize + 1;\n\nconst isVisible = (refs: React.MutableRefObject<HTMLDivElement[][]>, row: number, column: number) =>\n    refs.current?.[row]?.[column];\n\nconst isAriaDisableItem = (item: HTMLDivElement) => item?.getAttribute('aria-disabled') === 'true';\n\nconst hasDisabledArrowKey = ({\n    refs,\n    payload,\n    key,\n}: {\n    refs: React.MutableRefObject<HTMLDivElement[][]>;\n    payload: number[];\n    key: KeyboardArrowKey;\n}) => {\n    const [previousRowIndex, previousColumnIndex] = payload;\n\n    const disabledArrowKey = refs.current?.[previousRowIndex]?.[previousColumnIndex]?.dataset.disabledArrowKey;\n\n    return Boolean(disabledArrowKey?.includes(key));\n};\n\nconst hasDisabledMonths = ({ item, key }: { item: HTMLDivElement; key: 'previous' | 'next' }) => {\n    return item?.dataset?.disabledMonths ? item?.dataset?.disabledMonths.includes(key) : false;\n};\n\nconst getNextCorrectPosition = ({\n    refs,\n    rowSize,\n    newRowIndex,\n    newColumnIndex,\n    columnSize,\n    minColumnIndex,\n    defaultState = [],\n}: DaysMetaDescription): number[] => {\n    let item = refs.current?.[newRowIndex]?.[newColumnIndex];\n\n    while (isAriaDisableItem(item) && newColumnIndex <= columnSize) {\n        newColumnIndex++;\n\n        if (newColumnIndex > columnSize && newRowIndex < rowSize) {\n            newRowIndex++;\n            newColumnIndex = minColumnIndex;\n        }\n\n        item = refs.current?.[newRowIndex]?.[newColumnIndex];\n\n        if (item) {\n            const isDisabledArrowDown = hasDisabledArrowKey({\n                refs,\n                payload: [newRowIndex, newColumnIndex],\n                key: 'down',\n            });\n\n            const isDisabledArrowRight = hasDisabledArrowKey({\n                refs,\n                payload: [newRowIndex, newColumnIndex],\n                key: 'right',\n            });\n\n            if (isDisabledArrowDown || isDisabledArrowRight) {\n                return defaultState;\n            }\n        }\n    }\n\n    return [newRowIndex, newColumnIndex];\n};\n\nconst getPreviousCorrectPosition = ({\n    refs,\n    rowSize,\n    newRowIndex,\n    newColumnIndex,\n    columnSize,\n    minColumnIndex,\n    defaultState = [],\n}: DaysMetaDescription): number[] => {\n    let item = refs.current?.[newRowIndex]?.[newColumnIndex];\n\n    while (isAriaDisableItem(item) && newColumnIndex >= minColumnIndex) {\n        newColumnIndex--;\n\n        if (newColumnIndex < minColumnIndex && newRowIndex <= rowSize) {\n            newRowIndex--;\n            newColumnIndex = columnSize;\n        }\n\n        item = refs.current?.[newRowIndex]?.[newColumnIndex];\n\n        if (item && item.dataset.day === '1') {\n            const isDisabledArrowUp = hasDisabledArrowKey({\n                refs,\n                payload: [newRowIndex, newColumnIndex],\n                key: 'up',\n            });\n\n            const isDisabledArrowLeft = hasDisabledArrowKey({\n                refs,\n                payload: [newRowIndex, newColumnIndex],\n                key: 'left',\n            });\n\n            if (isDisabledArrowUp || isDisabledArrowLeft) {\n                return defaultState;\n            }\n        }\n    }\n\n    return [newRowIndex, newColumnIndex];\n};\n\n/**\n * Метод для нахождения стартового индекса дня в следующем/предыдущем месяце\n */\nfunction getCorrectColumnIndex({\n    refs,\n    rowSize,\n    isNext,\n}: {\n    refs: HTMLDivElement[][];\n    rowSize: number;\n    isNext: boolean;\n}): number {\n    if (isNext) {\n        let index = refs[rowSize].filter(Boolean).length;\n\n        if (!index) {\n            index = refs[rowSize - 1].filter(Boolean).length;\n        }\n\n        return index;\n    }\n\n    // Смещение влево - начинаем поиск первого не-nullable элемента в первой строке\n    return refs[0].findIndex((item) => item) - 1;\n}\n\nconst getCorrectIndexes = (\n    refs: React.MutableRefObject<HTMLDivElement[][]>,\n    [rowIndex, columnIndex]: number[],\n    rowSize: number,\n    columnSize: number,\n    withShift: boolean,\n    defaultState: number[],\n) => {\n    let newRowIndex = rowIndex;\n    let newColumnIndex = columnIndex;\n\n    const minRowIndex = newRowIndex + 1;\n    const maxRowIndex = newRowIndex - 1;\n\n    const minColumnIndex = 0;\n    const maxColumnIndex = columnSize;\n\n    if (newColumnIndex === minColumnIndex - 1) {\n        newColumnIndex += 1;\n\n        while (newColumnIndex < maxColumnIndex && !isVisible(refs, newRowIndex, newColumnIndex)) {\n            newColumnIndex++;\n        }\n    }\n\n    if (newColumnIndex === columnSize + 1) {\n        newColumnIndex -= 1;\n\n        while (newColumnIndex > minColumnIndex && !isVisible(refs, newRowIndex, newColumnIndex)) {\n            newColumnIndex--;\n        }\n    }\n\n    if (newRowIndex === minColumnIndex - 1) {\n        newRowIndex = ROW_STEP - 1;\n\n        while (newRowIndex > minRowIndex && !isVisible(refs, newRowIndex, newColumnIndex)) {\n            newRowIndex--;\n        }\n    }\n\n    if (newRowIndex === rowSize + 1) {\n        newRowIndex = rowSize + 1 - ROW_STEP;\n\n        while (newRowIndex <= maxRowIndex && !isVisible(refs, newRowIndex, newColumnIndex)) {\n            newRowIndex++;\n        }\n    }\n\n    // INFO: Логика для получения правильной позиции дня, когда переключились на другой месяц\n    // INFO: и ставим указатель на первый доступный день. Только при зажатой клавиши Shift.\n    if (isAriaDisableItem(refs.current?.[newRowIndex]?.[newColumnIndex]) && withShift) {\n        const isNext = rowIndex === rowSize + 1;\n        const isPrevious = rowIndex === minColumnIndex - 1;\n\n        const state = { refs, rowSize, newColumnIndex, minColumnIndex, columnSize, newRowIndex, defaultState };\n\n        if (isNext) {\n            return getNextCorrectPosition(state);\n        }\n\n        if (isPrevious) {\n            return getPreviousCorrectPosition(state);\n        }\n    }\n\n    return [newRowIndex, newColumnIndex];\n};\n\n/**\n * Хук для осуществления возможности клавиатурной навигации по матрице.\n */\nexport const useKeyNavigation = ({ isDouble = false, size, onPrev, onNext }: UseKeyNavigationProps) => {\n    const [rowSize, columnSize] = size;\n    const [selectIndexes, setSelectIndexes] = useState<number[]>([0, 0]);\n    const [isOutOfMinMaxRange, setIsOutOfMinMaxRange] = useState<boolean>(false);\n\n    const withShiftState = useRef<boolean>(false);\n    const currentIndexes = useRef<number[]>([0, 0]);\n\n    const outerRefs = useRef(\n        Array(rowSize + 1)\n            .fill(0)\n            .map(() => Array<HTMLDivElement>(columnSize + 1)),\n    );\n\n    useLayoutEffect(() => {\n        if (!isOutOfBound(selectIndexes, rowSize, columnSize)) {\n            return;\n        }\n\n        if (withShiftState.current) {\n            const isNext = selectIndexes[0] === rowSize + 1;\n\n            let refs = outerRefs.current;\n\n            const isSecond = isDouble && isNext;\n            const isFirst = isDouble && !isNext;\n\n            // Определяем какую часть сдвоенного календаря взять\n            if (isFirst) {\n                refs = outerRefs.current.slice(0, 5);\n            } else if (isSecond) {\n                refs = outerRefs.current.slice(5, 12);\n            }\n\n            const refsList = refs?.flatMap((items) => items.filter(Boolean));\n\n            // Если в месяце нет хотя бы одной none-disabled даты значит весь месяц выключен.\n            const hasSomeEnabledDay = refsList.some((item) => !isAriaDisableItem(item));\n\n            const isDisabledNextMonth = hasDisabledMonths({ item: refsList[refsList.length - 1], key: 'next' });\n            const isDisabledPreviousMonth = hasDisabledMonths({ item: refsList[0], key: 'previous' });\n\n            // Если следующий/предыдущий месяц находится за границами мин/макс, то переходить на него\n            // с текущего выключенного, нет смысла.\n            if (!hasSomeEnabledDay && (isDisabledNextMonth || isDisabledPreviousMonth)) {\n                const inverseHandle = isNext ? onPrev : onNext;\n\n                inverseHandle();\n\n                setSelectIndexes(currentIndexes.current);\n\n                // Если индексы равны, значит мы остались на текущей дате по причине, того\n                // что в следующем(-их)/предыдущем(-их) месяце нет доступных дат\n                setIsOutOfMinMaxRange(true);\n\n                return;\n            }\n\n            if (!hasSomeEnabledDay) {\n                const handle = isNext ? onNext : onPrev;\n\n                const startColumnIndex = getCorrectColumnIndex({\n                    refs,\n                    rowSize: isDouble ? refs.length - 1 : rowSize,\n                    isNext,\n                });\n\n                handle();\n\n                setSelectIndexes([selectIndexes[0], startColumnIndex]);\n\n                return;\n            }\n        }\n\n        const [newRowIndex, newColumnIndex] = getCorrectIndexes(\n            outerRefs,\n            selectIndexes,\n            rowSize,\n            columnSize,\n            withShiftState.current,\n            currentIndexes.current,\n        );\n\n        /**\n         * Изменение состояния необходимо сделать здесь, т.к.\n         * требуется дождаться обновление DOM и outerRefs\n         */\n        setSelectIndexes([newRowIndex, newColumnIndex]);\n    }, [onPrev, onNext, selectIndexes, rowSize, columnSize, withShiftState, currentIndexes, isDouble]);\n\n    useLayoutEffect(() => {\n        const [rowIndex, columnIndex] = selectIndexes;\n\n        const item = outerRefs?.current?.[rowIndex]?.[columnIndex];\n\n        if (item) {\n            item.focus();\n        }\n    }, [selectIndexes]);\n\n    const onKeyDown = useCallback(\n        (event: KeyboardEvent<HTMLDivElement>) => {\n            setIsOutOfMinMaxRange(false);\n\n            const { keyCode, shiftKey: withShift } = event;\n\n            const [currentRowIndex, currentColumnIndex] = selectIndexes;\n\n            let newRowIndex = currentRowIndex;\n            let newColumnIndex = currentColumnIndex;\n\n            const minColumnIndex = 0;\n            const minRowIndex = 0;\n\n            const prevRowIndex = currentRowIndex - 1;\n            const nextRowIndex = currentRowIndex + 1;\n\n            const prevColumnIndex = currentColumnIndex - 1;\n            const nextColumnIndex = currentColumnIndex + 1;\n\n            currentIndexes.current = [currentRowIndex, currentColumnIndex];\n\n            const positionState = {\n                refs: outerRefs,\n                rowSize,\n                columnSize,\n                minColumnIndex,\n                defaultState: [currentRowIndex, currentColumnIndex],\n            };\n\n            switch (keyCode) {\n                case Keys.pageUp: {\n                    const isDisabledPreviousMonth = hasDisabledMonths({\n                        item: outerRefs.current[currentRowIndex][currentColumnIndex],\n                        key: 'previous',\n                    });\n\n                    if (isDisabledPreviousMonth) {\n                        setIsOutOfMinMaxRange(true);\n\n                        break;\n                    }\n\n                    onPrev(withShift);\n\n                    break;\n                }\n                case Keys.pageDown: {\n                    const isDisabledNextMonth = hasDisabledMonths({\n                        item: outerRefs.current[currentRowIndex][currentColumnIndex],\n                        key: 'next',\n                    });\n\n                    if (isDisabledNextMonth) {\n                        setIsOutOfMinMaxRange(true);\n\n                        break;\n                    }\n\n                    onNext(withShift);\n\n                    break;\n                }\n                case Keys.home: {\n                    newColumnIndex = minColumnIndex;\n\n                    if (isVisible(outerRefs, newRowIndex, newColumnIndex)) {\n                        break;\n                    }\n\n                    newColumnIndex = minColumnIndex - 1;\n\n                    break;\n                }\n                case Keys.end: {\n                    newColumnIndex = columnSize;\n\n                    if (isVisible(outerRefs, newRowIndex, newColumnIndex)) {\n                        break;\n                    }\n\n                    newColumnIndex = columnSize + 1;\n\n                    break;\n                }\n\n                case Keys.left: {\n                    newRowIndex = prevColumnIndex < minColumnIndex ? prevRowIndex : currentRowIndex;\n                    newColumnIndex = prevColumnIndex < minColumnIndex ? columnSize : prevColumnIndex;\n\n                    withShiftState.current = withShift;\n\n                    const isCurrentDateDisabledArrowLeft = hasDisabledArrowKey({\n                        refs: outerRefs,\n                        payload: [currentRowIndex, currentColumnIndex],\n                        key: 'left',\n                    });\n\n                    setIsOutOfMinMaxRange(isCurrentDateDisabledArrowLeft);\n\n                    if (isCurrentDateDisabledArrowLeft) {\n                        newRowIndex = currentRowIndex;\n                        newColumnIndex = currentColumnIndex;\n\n                        break;\n                    }\n\n                    // INFO: Для навигации только по доступным дням\n                    if (withShift) {\n                        const [rowIndex, columnIndex] = getPreviousCorrectPosition({\n                            ...positionState,\n                            newRowIndex,\n                            newColumnIndex,\n                        });\n\n                        // Если индексы равны, значит мы остались на текущей дате по причине, того\n                        // что в следующем(-их)/предыдущем(-их) месяце нет доступных дат\n                        setIsOutOfMinMaxRange(rowIndex === currentRowIndex && currentColumnIndex === columnIndex);\n\n                        newRowIndex = rowIndex;\n                        newColumnIndex = columnIndex;\n                    }\n\n                    if (isVisible(outerRefs, newRowIndex, newColumnIndex)) {\n                        break;\n                    }\n\n                    if (!isDouble || getDoubleCalendarSide(currentRowIndex) === 'first') {\n                        if (isCurrentDateDisabledArrowLeft) {\n                            newRowIndex = currentRowIndex;\n                            newColumnIndex = currentColumnIndex;\n\n                            break;\n                        }\n\n                        onPrev();\n                    }\n\n                    newRowIndex = minRowIndex - 1;\n\n                    break;\n                }\n                case Keys.up: {\n                    newRowIndex = prevRowIndex < minRowIndex ? rowSize : prevRowIndex;\n\n                    withShiftState.current = withShift;\n\n                    const isCurrentDateDisabledArrowUp = hasDisabledArrowKey({\n                        refs: outerRefs,\n                        payload: [currentRowIndex, currentColumnIndex],\n                        key: 'up',\n                    });\n\n                    setIsOutOfMinMaxRange(isCurrentDateDisabledArrowUp);\n\n                    if (isCurrentDateDisabledArrowUp) {\n                        newRowIndex = currentRowIndex;\n                        newColumnIndex = currentColumnIndex;\n\n                        break;\n                    }\n\n                    if (withShift) {\n                        const item = outerRefs.current[newRowIndex][newColumnIndex];\n\n                        const isNextDateDisabledArrowUp =\n                            !!item &&\n                            hasDisabledArrowKey({\n                                refs: outerRefs,\n                                payload: [newRowIndex, newColumnIndex],\n                                key: 'up',\n                            });\n\n                        const [rowIndex, columnIndex] = getPreviousCorrectPosition({\n                            ...positionState,\n                            newRowIndex,\n                            newColumnIndex,\n                        });\n\n                        // Если индексы равны, значит мы остались на текущей дате по причине, того\n                        // что в следующем(-их)/предыдущем(-их) месяце нет доступных дат\n                        const haseCurrentPosition = rowIndex === currentRowIndex && currentColumnIndex === columnIndex;\n\n                        setIsOutOfMinMaxRange(isNextDateDisabledArrowUp || haseCurrentPosition);\n\n                        newRowIndex = rowIndex;\n                        newColumnIndex = columnIndex;\n                    }\n\n                    if (isVisible(outerRefs, newRowIndex, newColumnIndex)) {\n                        break;\n                    }\n\n                    if (!isDouble || getDoubleCalendarSide(currentRowIndex) === 'first') {\n                        if (isCurrentDateDisabledArrowUp) {\n                            newRowIndex = currentRowIndex;\n                            newColumnIndex = currentColumnIndex;\n\n                            break;\n                        }\n\n                        onPrev();\n                    }\n\n                    newRowIndex = minRowIndex - 1;\n\n                    break;\n                }\n\n                case Keys.right: {\n                    newRowIndex = nextColumnIndex > columnSize ? nextRowIndex : currentRowIndex;\n                    newColumnIndex = nextColumnIndex > columnSize ? minColumnIndex : nextColumnIndex;\n\n                    withShiftState.current = withShift;\n\n                    const isCurrentDateDisabledArrowRight = hasDisabledArrowKey({\n                        refs: outerRefs,\n                        payload: [currentRowIndex, currentColumnIndex],\n                        key: 'right',\n                    });\n\n                    setIsOutOfMinMaxRange(isCurrentDateDisabledArrowRight);\n\n                    if (isCurrentDateDisabledArrowRight) {\n                        newRowIndex = currentRowIndex;\n                        newColumnIndex = currentColumnIndex;\n\n                        break;\n                    }\n\n                    if (withShift) {\n                        const [rowIndex, columnIndex] = getNextCorrectPosition({\n                            ...positionState,\n                            newRowIndex,\n                            newColumnIndex,\n                        });\n\n                        // Если индексы равны, значит мы остались на текущей дате по причине, того\n                        // что в следующем(-их)/предыдущем(-их) месяце нет доступных дат\n                        setIsOutOfMinMaxRange(rowIndex === currentRowIndex && currentColumnIndex === columnIndex);\n\n                        newRowIndex = rowIndex;\n                        newColumnIndex = columnIndex;\n                    }\n\n                    if (isVisible(outerRefs, newRowIndex, newColumnIndex)) {\n                        break;\n                    }\n\n                    if (!isDouble || getDoubleCalendarSide(currentRowIndex) === 'second') {\n                        if (isCurrentDateDisabledArrowRight) {\n                            newRowIndex = currentRowIndex;\n                            newColumnIndex = currentColumnIndex;\n\n                            break;\n                        }\n\n                        onNext();\n                    }\n\n                    newRowIndex = rowSize + 1;\n\n                    break;\n                }\n                case Keys.down: {\n                    newRowIndex = nextRowIndex > rowSize ? minRowIndex : nextRowIndex;\n\n                    withShiftState.current = withShift;\n\n                    const isCurrentDateDisabledArrowDown = hasDisabledArrowKey({\n                        refs: outerRefs,\n                        payload: [currentRowIndex, currentColumnIndex],\n                        key: 'down',\n                    });\n\n                    setIsOutOfMinMaxRange(isCurrentDateDisabledArrowDown);\n\n                    if (isCurrentDateDisabledArrowDown) {\n                        newRowIndex = currentRowIndex;\n                        newColumnIndex = currentColumnIndex;\n\n                        break;\n                    }\n\n                    if (withShift) {\n                        const item = outerRefs.current[newRowIndex][newColumnIndex];\n\n                        const isNextDateDisabledArrowUp =\n                            !!item &&\n                            hasDisabledArrowKey({\n                                refs: outerRefs,\n                                payload: [newRowIndex, newColumnIndex],\n                                key: 'down',\n                            });\n\n                        const [rowIndex, columnIndex] = getNextCorrectPosition({\n                            ...positionState,\n                            newRowIndex,\n                            newColumnIndex,\n                        });\n\n                        // Если индексы равны, значит мы остались на текущей дате по причине, того\n                        // что в следующем(-их)/предыдущем(-их) месяце нет доступных дат\n                        const haseCurrentPosition = rowIndex === currentRowIndex && currentColumnIndex === columnIndex;\n\n                        setIsOutOfMinMaxRange(isNextDateDisabledArrowUp || haseCurrentPosition);\n\n                        newRowIndex = rowIndex;\n                        newColumnIndex = columnIndex;\n                    }\n\n                    if (isVisible(outerRefs, newRowIndex, newColumnIndex)) {\n                        break;\n                    }\n\n                    if (!isDouble || getDoubleCalendarSide(currentRowIndex) === 'second') {\n                        if (isCurrentDateDisabledArrowDown) {\n                            newRowIndex = currentRowIndex;\n                            newColumnIndex = currentColumnIndex;\n\n                            break;\n                        }\n\n                        onNext();\n                    }\n\n                    newRowIndex = rowSize + 1;\n\n                    break;\n                }\n                case Keys.enter:\n                case Keys.space: {\n                    outerRefs.current?.[newRowIndex]?.[newColumnIndex].click();\n                    break;\n                }\n\n                default:\n                    return;\n            }\n\n            setSelectIndexes([newRowIndex, newColumnIndex]);\n        },\n        [selectIndexes, outerRefs, rowSize, columnSize, onNext, onPrev, isDouble],\n    );\n\n    return [selectIndexes, onKeyDown, setSelectIndexes, outerRefs, isOutOfMinMaxRange] as const;\n};\n"],"names":["getDoubleCalendarSide","currentIndexWeek","ROW_STEP","isOutOfBound","_ref","rowSize","columnSize","_ref2","_slicedToArray","rowIndex","columnIndex","isVisible","refs","row","column","_refs$current","current","isAriaDisableItem","item","getAttribute","hasDisabledArrowKey","_ref3","_refs$current2","payload","key","_payload","previousRowIndex","previousColumnIndex","disabledArrowKey","dataset","Boolean","includes","hasDisabledMonths","_ref4","_item$dataset","_item$dataset2","disabledMonths","getNextCorrectPosition","_ref5","_refs$current3","newRowIndex","newColumnIndex","minColumnIndex","_ref5$defaultState","defaultState","_refs$current4","isDisabledArrowDown","isDisabledArrowRight","getPreviousCorrectPosition","_ref6","_refs$current5","_ref6$defaultState","_refs$current6","day","isDisabledArrowUp","isDisabledArrowLeft","getCorrectColumnIndex","_ref7","isNext","index","filter","length","findIndex","getCorrectIndexes","_ref8","withShift","_refs$current7","_ref9","minRowIndex","maxRowIndex","maxColumnIndex","isPrevious","state","useKeyNavigation","_ref10","_ref10$isDouble","isDouble","size","onPrev","onNext","_size","_useState","useState","_useState2","selectIndexes","setSelectIndexes","_useState3","_useState4","isOutOfMinMaxRange","setIsOutOfMinMaxRange","withShiftState","useRef","currentIndexes","outerRefs","Array","fill","map","useLayoutEffect","_refs","isSecond","isFirst","slice","refsList","flatMap","items","hasSomeEnabledDay","some","isDisabledNextMonth","isDisabledPreviousMonth","inverseHandle","handle","startColumnIndex","_getCorrectIndexes","_getCorrectIndexes2","_outerRefs$current","_selectIndexes","focus","onKeyDown","useCallback","event","keyCode","shiftKey","_selectIndexes2","currentRowIndex","currentColumnIndex","prevRowIndex","nextRowIndex","prevColumnIndex","nextColumnIndex","positionState","Keys","pageUp","pageDown","home","end","left","isCurrentDateDisabledArrowLeft","_getPreviousCorrectPo","_objectSpread","_getPreviousCorrectPo2","up","isCurrentDateDisabledArrowUp","isNextDateDisabledArrowUp","_getPreviousCorrectPo3","_getPreviousCorrectPo4","haseCurrentPosition","right","isCurrentDateDisabledArrowRight","_getNextCorrectPositi","_getNextCorrectPositi2","down","isCurrentDateDisabledArrowDown","_getNextCorrectPositi3","_getNextCorrectPositi4","enter","space","_outerRefs$current2","click"],"mappings":"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"}
{"version":3,"file":"useDays.js","sources":["../../../../src/components/Calendar/hooks/useDays.ts"],"sourcesContent":["import { useMemo } from 'react';\n\nimport {\n    getDateFromValue,\n    getDaysInMonth,\n    getMatrix,\n    getNextDate,\n    getOffsetDayInWeek,\n    getPrevDate,\n    IsCurrentDay,\n    isDayInRange,\n    isSelectedDay,\n} from '../utils';\nimport type { CalendarValueType, DateItem, DateObject, DisabledDay, EventDay } from '../Calendar.types';\n\n/**\n * Метод возвращающий массив дней в предыдущем месяце.\n */\nconst getDaysInPrevMonth = (date: DateObject, offsetDayInWeek: number, value: CalendarValueType) => {\n    const [prevYear, prevMonth] = getPrevDate(date.year, date.monthIndex);\n    const daysInPrevMonth = getDaysInMonth(prevMonth, prevYear);\n\n    return Array.from(Array(offsetDayInWeek), (_, i) => ({\n        isCurrent: false,\n        isSelected: false,\n        isDayInCurrentMonth: false,\n        inRange: Array.isArray(value)\n            ? isDayInRange(prevYear, prevMonth, daysInPrevMonth - (offsetDayInWeek - i) + 1, value)\n            : false,\n        date: {\n            day: daysInPrevMonth - (offsetDayInWeek - i) + 1,\n            monthIndex: prevMonth,\n            year: prevYear,\n        },\n    }));\n};\n\n/**\n * Метод возвращающий массив дней в текущем месяце.\n */\nconst getDaysInCurrentMonth = (date: DateObject, daysInMonth: number, value: CalendarValueType) => {\n    return Array.from(Array(daysInMonth), (_, i) => ({\n        isCurrent: IsCurrentDay(date, i + 1),\n        isSelected: Array.isArray(value)\n            ? Boolean(value.find((v) => isSelectedDay(date, i + 1, v)))\n            : isSelectedDay(date, i + 1, value),\n        isDayInCurrentMonth: true,\n        inRange: Array.isArray(value) ? isDayInRange(date.year, date.monthIndex, i + 1, value) : false,\n        date: {\n            day: i + 1,\n            monthIndex: date.monthIndex,\n            year: date.year,\n        },\n    }));\n};\n\n/**\n * Метод возвращающий массив дней в следующем месяце.\n */\nconst getDaysInNextMonth = (\n    date: DateObject,\n    daysInMonth: number,\n    offsetDayInWeek: number,\n    value: CalendarValueType,\n) => {\n    const [nextYear, nextMonthIndex] = getNextDate(date.year, date.monthIndex);\n    const visibleDayCount = 42;\n    const restDaysInCalendar = visibleDayCount - (daysInMonth + offsetDayInWeek);\n\n    return Array.from(Array(restDaysInCalendar), (_, i) => ({\n        isCurrent: false,\n        isSelected: false,\n        isDayInCurrentMonth: false,\n        inRange: Array.isArray(value) ? isDayInRange(nextYear, nextMonthIndex, i + 1, value) : false,\n        date: {\n            day: i + 1,\n            monthIndex: nextMonthIndex,\n            year: nextYear,\n        },\n    }));\n};\n\nconst isDisabledArrowLeft = (date: Date, min?: Date) => {\n    const currentDate = new Date(date);\n\n    currentDate.setDate(currentDate.getDate() - 1);\n\n    return (min && min >= currentDate) || (min && min >= date);\n};\n\nconst isDisabledArrowRight = (date: Date, max?: Date) => {\n    const currentDate = new Date(date);\n\n    currentDate.setDate(currentDate.getDate() + 1);\n\n    return (max && max <= currentDate) || (max && max <= date);\n};\n\nconst isDisabledArrowUp = (date: Date, min?: Date) => {\n    const currentDate = new Date(date);\n\n    currentDate.setDate(date.getDate() - 7);\n\n    return min && min >= currentDate;\n};\n\nconst isDisabledArrowDown = (date: Date, max?: Date) => {\n    const currentDate = new Date(date);\n\n    currentDate.setDate(date.getDate() + 7);\n\n    return max && max <= currentDate;\n};\n\nconst isDisabledNextMonth = ({ year, monthIndex, day }: DateObject, max?: Date) => {\n    if (!max) {\n        return false;\n    }\n\n    const currentDate = new Date(year, monthIndex, day);\n\n    currentDate.setDate(currentDate.getDate() + 1);\n\n    let isOut = true;\n\n    while (isOut && currentDate <= max) {\n        isOut = max <= currentDate;\n\n        currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    return isOut;\n};\n\nconst isDisabledPreviousMonth = ({ year, monthIndex, day }: DateObject, min?: Date) => {\n    if (!min) {\n        return false;\n    }\n\n    const currentDate = new Date(year, monthIndex, day);\n\n    currentDate.setDate(currentDate.getDate() - 1);\n\n    let isOut = true;\n\n    while (isOut && currentDate >= min) {\n        isOut = min >= currentDate;\n\n        currentDate.setDate(currentDate.getDate() - 1);\n    }\n\n    return isOut;\n};\n\nconst getDisabledArrowKey = (currentDate: Date, min?: Date, max?: Date) => {\n    const disabledArrowKey = [];\n\n    if (isDisabledArrowLeft(currentDate, min)) {\n        disabledArrowKey.push('left');\n    }\n\n    if (isDisabledArrowRight(currentDate, max)) {\n        disabledArrowKey.push('right');\n    }\n\n    if (isDisabledArrowDown(currentDate, max)) {\n        disabledArrowKey.push('down');\n    }\n\n    if (isDisabledArrowUp(currentDate, min)) {\n        disabledArrowKey.push('up');\n    }\n\n    return disabledArrowKey.join(',');\n};\n\nconst getDisabledMonths = (list: DateObject[], min?: Date, max?: Date) => {\n    const disabledMonth = [];\n\n    if (isDisabledPreviousMonth(list[0], min)) {\n        disabledMonth.push('previous');\n    }\n\n    if (isDisabledNextMonth(list[list.length - 1], max)) {\n        disabledMonth.push('next');\n    }\n\n    return disabledMonth.join(',');\n};\n\n/**\n * Метод для получения набора неповторяющихся дат.\n */\nconst getPropsMap = <T extends EventDay | DisabledDay>(props: T[]) =>\n    props.reduce((acc, prop) => {\n        const { year, monthIndex, day } = getDateFromValue(prop.date);\n\n        const key = `${year}-${monthIndex}-${day}`;\n\n        const propList = acc.get(key) || [];\n        propList.push(prop);\n\n        return acc.set(key, propList);\n    }, new Map<string, T[]>());\n\n/**\n * Метод модифицирующий дни (добавляющий свойства events и disabled).\n */\nconst getDaysWithModifications = (\n    days: DateItem[],\n    eventList: EventDay[] = [],\n    disabledList: DisabledDay[] = [],\n    min?: Date,\n    max?: Date,\n    includeEdgeDates?: boolean,\n) => {\n    const eventsMap = getPropsMap(eventList);\n    const disabledDaysMap = getPropsMap(disabledList);\n\n    const daysList = days.filter(({ isDayInCurrentMonth }) => isDayInCurrentMonth).map(({ date }) => date);\n\n    const disabledMonths = getDisabledMonths(daysList, min, max);\n\n    return days.map((dayItem) => {\n        const { date } = dayItem;\n        const { year, monthIndex, day } = date;\n\n        const keyDay = `${year}-${monthIndex}-${day}`;\n        const currentDate = new Date(year, monthIndex, day);\n\n        const minValue = min && (includeEdgeDates ? min > currentDate : min >= currentDate);\n        const maxValue = max && (includeEdgeDates ? max < currentDate : max <= currentDate);\n        const isOutOfMinMaxRange = minValue || maxValue;\n\n        dayItem.events = eventsMap.get(keyDay);\n        dayItem.disabled = disabledDaysMap.has(keyDay) || isOutOfMinMaxRange;\n\n        dayItem.isOutOfMinMaxRange = isOutOfMinMaxRange;\n        dayItem.disabledArrowKey = getDisabledArrowKey(currentDate, min, max);\n        dayItem.disabledMonths = disabledMonths;\n\n        return dayItem;\n    });\n};\n\n/**\n * Хук для получения списка дней.\n */\nexport const useDays = (\n    date: DateObject,\n    value: CalendarValueType,\n    eventList?: EventDay[],\n    disabledList?: DisabledDay[],\n    min?: Date,\n    max?: Date,\n    includeEdgeDates?: boolean,\n) =>\n    useMemo(() => {\n        const { monthIndex, year } = date;\n        const daysInMonth = getDaysInMonth(monthIndex, year);\n        const offsetDayInWeek = getOffsetDayInWeek(monthIndex, year);\n\n        const days = [\n            ...getDaysInPrevMonth(date, offsetDayInWeek, value),\n            ...getDaysInCurrentMonth(date, daysInMonth, value),\n            ...getDaysInNextMonth(date, daysInMonth, offsetDayInWeek, value),\n        ];\n\n        if (eventList?.length || disabledList?.length || max || min) {\n            const modifiedDays = getDaysWithModifications(days, eventList, disabledList, min, max, includeEdgeDates);\n            return getMatrix<DateItem>(modifiedDays);\n        }\n\n        return getMatrix<DateItem>(days);\n    }, [date, value, eventList, disabledList, max, min]);\n"],"names":["getDaysInPrevMonth","date","offsetDayInWeek","value","_getPrevDate","getPrevDate","year","monthIndex","_getPrevDate2","_slicedToArray","prevYear","prevMonth","daysInPrevMonth","getDaysInMonth","Array","from","_","i","isCurrent","isSelected","isDayInCurrentMonth","inRange","isArray","isDayInRange","day","getDaysInCurrentMonth","daysInMonth","IsCurrentDay","Boolean","find","v","isSelectedDay","getDaysInNextMonth","_getNextDate","getNextDate","_getNextDate2","nextYear","nextMonthIndex","visibleDayCount","restDaysInCalendar","isDisabledArrowLeft","min","currentDate","Date","setDate","getDate","isDisabledArrowRight","max","isDisabledArrowUp","isDisabledArrowDown","isDisabledNextMonth","_ref","isOut","isDisabledPreviousMonth","_ref2","getDisabledArrowKey","disabledArrowKey","push","join","getDisabledMonths","list","disabledMonth","length","getPropsMap","props","reduce","acc","prop","_getDateFromValue","getDateFromValue","key","concat","propList","get","set","Map","getDaysWithModifications","days","eventList","arguments","undefined","disabledList","includeEdgeDates","eventsMap","disabledDaysMap","daysList","filter","_ref3","map","_ref4","disabledMonths","dayItem","keyDay","minValue","maxValue","isOutOfMinMaxRange","events","disabled","has","useDays","useMemo","getOffsetDayInWeek","_toConsumableArray","modifiedDays","getMatrix"],"mappings":"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"}
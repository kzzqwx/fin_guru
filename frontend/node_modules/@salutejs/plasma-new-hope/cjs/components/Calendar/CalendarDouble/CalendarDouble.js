'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index = require('../utils/index.js');
var useKeyNavigation = require('../hooks/useKeyNavigation.js');
var CalendarHeader = require('../ui/CalendarHeader/CalendarHeader.js');
var CalendarDays = require('../ui/CalendarDays/CalendarDays.js');
require('../../../utils/react.js');
require('@linaria/react');
var base = require('./variations/_view/base.js');
var CalendarDouble_styles = require('./CalendarDouble.styles.js');

var _StyledSeparator;
var _excluded = ["value", "min", "max", "includeEdgeDates", "eventList", "disabledList", "onChangeValue"];
/**
 * Компонент двойного календаря.
 */
var calendarDoubleRoot = function calendarDoubleRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (_ref, outerRootRef) {
    var externalValue = _ref.value,
      min = _ref.min,
      max = _ref.max,
      includeEdgeDates = _ref.includeEdgeDates,
      eventList = _ref.eventList,
      disabledList = _ref.disabledList,
      onChangeValue = _ref.onChangeValue,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
    var _useMemo = React.useMemo(function () {
        return Array.isArray(externalValue) ? externalValue : [externalValue];
      }, [externalValue]),
      _useMemo2 = _rollupPluginBabelHelpers.slicedToArray(_useMemo, 2),
      firstValue = _useMemo2[0],
      secondValue = _useMemo2[1];
    var value = secondValue || firstValue;
    var _useState = React.useState(),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      hoveredDay = _useState2[0],
      setHoveredDay = _useState2[1];
    var _useState3 = React.useState(index.getDateFromValue(value)),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      date = _useState4[0],
      setDate = _useState4[1];
    var _useState5 = React.useState(value),
      _useState6 = _rollupPluginBabelHelpers.slicedToArray(_useState5, 2),
      prevValue = _useState6[0],
      setPrevValue = _useState6[1];
    var _useState7 = React.useState(function () {
        var nextDate = index.getDateFromValue(firstValue);
        var _getNextDate = index.getNextDate(nextDate.year, nextDate.monthIndex),
          _getNextDate2 = _rollupPluginBabelHelpers.slicedToArray(_getNextDate, 2),
          initialYear = _getNextDate2[0],
          initialMonth = _getNextDate2[1];
        return {
          monthIndex: [nextDate.monthIndex, initialMonth],
          year: [nextDate.year, initialYear]
        };
      }),
      _useState8 = _rollupPluginBabelHelpers.slicedToArray(_useState7, 2),
      doubleDate = _useState8[0],
      setMonths = _useState8[1];
    var handleMonth = React.useCallback(function (getDate) {
      var _getDate = getDate(doubleDate.year[0], doubleDate.monthIndex[0]),
        _getDate2 = _rollupPluginBabelHelpers.slicedToArray(_getDate, 2),
        newCurrentYear = _getDate2[0],
        newCurrentMonth = _getDate2[1];
      var _getDate3 = getDate(doubleDate.year[1], doubleDate.monthIndex[1]),
        _getDate4 = _rollupPluginBabelHelpers.slicedToArray(_getDate3, 2),
        newNextYear = _getDate4[0],
        newNextMonth = _getDate4[1];
      setMonths({
        monthIndex: [newCurrentMonth, newNextMonth],
        year: [newCurrentYear, newNextYear]
      });
    }, [doubleDate]);
    var handlePrev = React.useCallback(function () {
      handleMonth(index.getPrevDate);
    }, [handleMonth]);
    var handleNext = React.useCallback(function () {
      handleMonth(index.getNextDate);
    }, [handleMonth]);
    var _useKeyNavigation = useKeyNavigation.useKeyNavigation({
        isDouble: true,
        size: [11, 6],
        onNext: handleNext,
        onPrev: handlePrev
      }),
      _useKeyNavigation2 = _rollupPluginBabelHelpers.slicedToArray(_useKeyNavigation, 4),
      selectIndexes = _useKeyNavigation2[0],
      onKeyDown = _useKeyNavigation2[1],
      onSelectIndexes = _useKeyNavigation2[2],
      outerRefs = _useKeyNavigation2[3];
    var handleOnChangeDay = React.useCallback(function (newDate, coord) {
      var newDay = new Date(newDate.year, newDate.monthIndex, newDate.day);
      onChangeValue === null || onChangeValue === void 0 || onChangeValue(newDay);
      onSelectIndexes(coord);
    }, [onChangeValue, onSelectIndexes]);
    var firstDate = React.useMemo(function () {
      return {
        day: date.day,
        year: doubleDate.year[0],
        monthIndex: doubleDate.monthIndex[0]
      };
    }, [date, doubleDate]);
    var secondDate = React.useMemo(function () {
      return {
        day: date.day,
        year: doubleDate.year[1],
        monthIndex: doubleDate.monthIndex[1]
      };
    }, [date, doubleDate]);
    if (value && prevValue && index.isValueUpdate(value, prevValue)) {
      var newDate = index.getDateFromValue(value);
      var year = newDate.year,
        monthIndex = newDate.monthIndex;
      var _doubleDate$monthInde = _rollupPluginBabelHelpers.slicedToArray(doubleDate.monthIndex, 2),
        prevMonthIndex = _doubleDate$monthInde[1],
        _doubleDate$year = _rollupPluginBabelHelpers.slicedToArray(doubleDate.year, 2),
        prevYear = _doubleDate$year[1];
      if (prevMonthIndex !== monthIndex || prevYear !== year) {
        var _getNextDate3 = index.getNextDate(year, monthIndex),
          _getNextDate4 = _rollupPluginBabelHelpers.slicedToArray(_getNextDate3, 2),
          nextYear = _getNextDate4[0],
          nextMonthIndex = _getNextDate4[1];
        setDate(newDate);
        setMonths({
          monthIndex: [monthIndex, nextMonthIndex],
          year: [year, nextYear]
        });
      }
      setPrevValue(value);
    }
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      ref: outerRootRef,
      "aria-label": "\u0412\u044B\u0431\u043E\u0440 \u0434\u0430\u0442\u044B"
    }, rest), /*#__PURE__*/React.createElement(CalendarHeader.CalendarHeader, {
      isDouble: true,
      firstDate: firstDate,
      secondDate: secondDate,
      onPrev: handlePrev,
      onNext: handleNext
    }), /*#__PURE__*/React.createElement(CalendarDouble_styles.StyledWrapper, null, /*#__PURE__*/React.createElement(CalendarDays.CalendarDays, {
      isDouble: true,
      eventList: eventList,
      disabledList: disabledList,
      min: min,
      max: max,
      includeEdgeDates: includeEdgeDates,
      value: externalValue,
      date: firstDate,
      hoveredDay: hoveredDay,
      selectIndexes: selectIndexes,
      onChangeDay: handleOnChangeDay,
      onHoverDay: setHoveredDay,
      onSetSelected: onSelectIndexes,
      onKeyDown: onKeyDown,
      outerRefs: outerRefs
    }), _StyledSeparator || (_StyledSeparator = /*#__PURE__*/React.createElement(CalendarDouble_styles.StyledSeparator, null)), /*#__PURE__*/React.createElement(CalendarDays.CalendarDays, {
      isDouble: true,
      isSecond: true,
      eventList: eventList,
      disabledList: disabledList,
      min: min,
      max: max,
      includeEdgeDates: includeEdgeDates,
      value: externalValue,
      date: secondDate,
      hoveredDay: hoveredDay,
      selectIndexes: selectIndexes,
      onChangeDay: handleOnChangeDay,
      onHoverDay: setHoveredDay,
      onSetSelected: onSelectIndexes,
      onKeyDown: onKeyDown,
      outerRefs: outerRefs
    })));
  });
};
var calendarDoubleConfig = {
  name: 'CalendarDouble',
  tag: 'div',
  layout: calendarDoubleRoot,
  base: CalendarDouble_styles.StyledCalendar,
  variations: {
    view: {
      css: base.base
    }
  },
  defaults: {
    view: 'primary',
    size: 'm'
  }
};

exports.calendarDoubleConfig = calendarDoubleConfig;
exports.calendarDoubleRoot = calendarDoubleRoot;
//# sourceMappingURL=CalendarDouble.js.map

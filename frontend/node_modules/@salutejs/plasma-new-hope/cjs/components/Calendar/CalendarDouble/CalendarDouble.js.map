{"version":3,"file":"CalendarDouble.js","sources":["../../../../src/components/Calendar/CalendarDouble/CalendarDouble.tsx"],"sourcesContent":["import React, { useState, useCallback, useMemo, forwardRef, HTMLAttributes } from 'react';\n\nimport type { Calendar, DateObject } from '../Calendar.types';\nimport { getDateFromValue, getNextDate, getPrevDate, isValueUpdate } from '../utils';\nimport { useKeyNavigation } from '../hooks';\nimport { CalendarDays, CalendarHeader } from '../ui';\nimport { RootProps } from '../../../engines/types';\n\nimport { base as viewCSS } from './variations/_view/base';\nimport { StyledCalendar, StyledSeparator, StyledWrapper } from './CalendarDouble.styles';\n\nexport type CalendarDoubleProps = HTMLAttributes<HTMLDivElement> & Calendar;\n\n/**\n * Компонент двойного календаря.\n */\nexport const calendarDoubleRoot = (Root: RootProps<HTMLDivElement, HTMLAttributes<HTMLDivElement>>) =>\n    forwardRef<HTMLDivElement, CalendarDoubleProps>(\n        (\n            { value: externalValue, min, max, includeEdgeDates, eventList, disabledList, onChangeValue, ...rest },\n            outerRootRef,\n        ) => {\n            const [firstValue, secondValue] = useMemo(\n                () => (Array.isArray(externalValue) ? externalValue : [externalValue]),\n                [externalValue],\n            );\n            const value = secondValue || firstValue;\n            const [hoveredDay, setHoveredDay] = useState<DateObject | undefined>();\n\n            const [date, setDate] = useState<DateObject>(getDateFromValue(value));\n            const [prevValue, setPrevValue] = useState(value);\n            const [doubleDate, setMonths] = useState(() => {\n                const nextDate = getDateFromValue(firstValue);\n                const [initialYear, initialMonth] = getNextDate(nextDate.year, nextDate.monthIndex);\n\n                return {\n                    monthIndex: [nextDate.monthIndex, initialMonth],\n                    year: [nextDate.year, initialYear],\n                };\n            });\n\n            const handleMonth = useCallback(\n                (getDate: (currentYear: number, currentMonth: number) => number[]) => {\n                    const [newCurrentYear, newCurrentMonth] = getDate(doubleDate.year[0], doubleDate.monthIndex[0]);\n                    const [newNextYear, newNextMonth] = getDate(doubleDate.year[1], doubleDate.monthIndex[1]);\n\n                    setMonths({\n                        monthIndex: [newCurrentMonth, newNextMonth],\n                        year: [newCurrentYear, newNextYear],\n                    });\n                },\n                [doubleDate],\n            );\n\n            const handlePrev = useCallback(() => {\n                handleMonth(getPrevDate);\n            }, [handleMonth]);\n\n            const handleNext = useCallback(() => {\n                handleMonth(getNextDate);\n            }, [handleMonth]);\n\n            const [selectIndexes, onKeyDown, onSelectIndexes, outerRefs] = useKeyNavigation({\n                isDouble: true,\n                size: [11, 6],\n                onNext: handleNext,\n                onPrev: handlePrev,\n            });\n\n            const handleOnChangeDay = useCallback(\n                (newDate: DateObject, coord: number[]) => {\n                    const newDay = new Date(newDate.year, newDate.monthIndex, newDate.day);\n                    onChangeValue?.(newDay);\n\n                    onSelectIndexes(coord);\n                },\n                [onChangeValue, onSelectIndexes],\n            );\n\n            const firstDate = useMemo(\n                () => ({\n                    day: date.day,\n                    year: doubleDate.year[0],\n                    monthIndex: doubleDate.monthIndex[0],\n                }),\n                [date, doubleDate],\n            );\n\n            const secondDate = useMemo(\n                () => ({\n                    day: date.day,\n                    year: doubleDate.year[1],\n                    monthIndex: doubleDate.monthIndex[1],\n                }),\n                [date, doubleDate],\n            );\n\n            if (value && prevValue && isValueUpdate(value, prevValue)) {\n                const newDate = getDateFromValue(value);\n\n                const { year, monthIndex } = newDate;\n\n                const {\n                    monthIndex: [, prevMonthIndex],\n                    year: [, prevYear],\n                } = doubleDate;\n\n                if (prevMonthIndex !== monthIndex || prevYear !== year) {\n                    const [nextYear, nextMonthIndex] = getNextDate(year, monthIndex);\n\n                    setDate(newDate);\n\n                    setMonths({\n                        monthIndex: [monthIndex, nextMonthIndex],\n                        year: [year, nextYear],\n                    });\n                }\n\n                setPrevValue(value);\n            }\n\n            return (\n                <Root ref={outerRootRef} aria-label=\"Выбор даты\" {...rest}>\n                    <CalendarHeader\n                        isDouble\n                        firstDate={firstDate}\n                        secondDate={secondDate}\n                        onPrev={handlePrev}\n                        onNext={handleNext}\n                    />\n\n                    <StyledWrapper>\n                        <CalendarDays\n                            isDouble\n                            eventList={eventList}\n                            disabledList={disabledList}\n                            min={min}\n                            max={max}\n                            includeEdgeDates={includeEdgeDates}\n                            value={externalValue}\n                            date={firstDate}\n                            hoveredDay={hoveredDay}\n                            selectIndexes={selectIndexes}\n                            onChangeDay={handleOnChangeDay}\n                            onHoverDay={setHoveredDay}\n                            onSetSelected={onSelectIndexes}\n                            onKeyDown={onKeyDown}\n                            outerRefs={outerRefs}\n                        />\n                        <StyledSeparator />\n                        <CalendarDays\n                            isDouble\n                            isSecond\n                            eventList={eventList}\n                            disabledList={disabledList}\n                            min={min}\n                            max={max}\n                            includeEdgeDates={includeEdgeDates}\n                            value={externalValue}\n                            date={secondDate}\n                            hoveredDay={hoveredDay}\n                            selectIndexes={selectIndexes}\n                            onChangeDay={handleOnChangeDay}\n                            onHoverDay={setHoveredDay}\n                            onSetSelected={onSelectIndexes}\n                            onKeyDown={onKeyDown}\n                            outerRefs={outerRefs}\n                        />\n                    </StyledWrapper>\n                </Root>\n            );\n        },\n    );\n\nexport const calendarDoubleConfig = {\n    name: 'CalendarDouble',\n    tag: 'div',\n    layout: calendarDoubleRoot,\n    base: StyledCalendar,\n    variations: {\n        view: {\n            css: viewCSS,\n        },\n    },\n    defaults: {\n        view: 'primary',\n        size: 'm',\n    },\n};\n"],"names":["calendarDoubleRoot","Root","forwardRef","_ref","outerRootRef","externalValue","value","min","max","includeEdgeDates","eventList","disabledList","onChangeValue","rest","_objectWithoutProperties","_excluded","_useMemo","useMemo","Array","isArray","_useMemo2","_slicedToArray","firstValue","secondValue","_useState","useState","_useState2","hoveredDay","setHoveredDay","_useState3","getDateFromValue","_useState4","date","setDate","_useState5","_useState6","prevValue","setPrevValue","_useState7","nextDate","_getNextDate","getNextDate","year","monthIndex","_getNextDate2","initialYear","initialMonth","_useState8","doubleDate","setMonths","handleMonth","useCallback","getDate","_getDate","_getDate2","newCurrentYear","newCurrentMonth","_getDate3","_getDate4","newNextYear","newNextMonth","handlePrev","getPrevDate","handleNext","_useKeyNavigation","useKeyNavigation","isDouble","size","onNext","onPrev","_useKeyNavigation2","selectIndexes","onKeyDown","onSelectIndexes","outerRefs","handleOnChangeDay","newDate","coord","newDay","Date","day","firstDate","secondDate","isValueUpdate","_doubleDate$monthInde","prevMonthIndex","_doubleDate$year","prevYear","_getNextDate3","_getNextDate4","nextYear","nextMonthIndex","React","createElement","_extends","ref","CalendarHeader","StyledWrapper","CalendarDays","onChangeDay","onHoverDay","onSetSelected","_StyledSeparator","StyledSeparator","isSecond","calendarDoubleConfig","name","tag","layout","base","StyledCalendar","variations","view","css","viewCSS","defaults"],"mappings":"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"}
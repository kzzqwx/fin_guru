'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var index = require('../../../../utils/index.js');
var useYears = require('../../hooks/useYears.js');
var Calendar_tokens = require('../../Calendar.tokens.js');
var CalendarYears_styles = require('./CalendarYears.styles.js');

/**
 * Компонент годов в календаре.
 */
var CalendarYears = function CalendarYears(_ref) {
  var currentDate = _ref.date,
    startYear = _ref.startYear,
    selectIndexes = _ref.selectIndexes,
    outerRefs = _ref.outerRefs,
    onChangeYear = _ref.onChangeYear,
    onSetSelected = _ref.onSetSelected,
    onKeyDown = _ref.onKeyDown;
  var _useYears = useYears.useYears(currentDate, startYear),
    _useYears2 = _rollupPluginBabelHelpers.slicedToArray(_useYears, 2),
    years = _useYears2[0],
    selected = _useYears2[1];
  var selectedRef = React.useRef(selected);
  var onSetSelectedRef = React.useRef(onSetSelected);
  var handleOnChangeYear = React.useCallback(function (event) {
    /**
     * нужно вызвать stopImmediatePropagation для случаев, когда
     * обработчик события onClick навешивается снаружи.
     * Как, например, в компоненте Popup
     */
    event.nativeEvent.stopImmediatePropagation();
    var year = event.currentTarget.dataset.year;
    onChangeYear(Number(year));
  }, [onChangeYear]);
  var getRefs = React.useCallback(function (element, i, j) {
    outerRefs.current[i][j] = element;
  }, [outerRefs]);
  React.useEffect(function () {
    if (selectedRef.current) {
      var _onSetSelectedRef$cur;
      (_onSetSelectedRef$cur = onSetSelectedRef.current) === null || _onSetSelectedRef$cur === void 0 || _onSetSelectedRef$cur.call(onSetSelectedRef, selectedRef.current);
    }
  }, []);
  return /*#__PURE__*/React.createElement(CalendarYears_styles.StyledCalendarYears, {
    role: "grid",
    "aria-labelledby": "id-grid-label",
    onKeyDown: onKeyDown
  }, years.map(function (year, i) {
    return /*#__PURE__*/React.createElement(CalendarYears_styles.StyledFlex, {
      role: "row",
      key: i
    }, year.map(function (_ref2, j) {
      var yearValue = _ref2.yearValue,
        isSelected = _ref2.isSelected,
        isCurrent = _ref2.isCurrent;
      var selectedClass = isSelected ? Calendar_tokens.classes.selectedItem : undefined;
      var currentClass = !isSelected && isCurrent ? Calendar_tokens.classes.currentItem : undefined;
      return /*#__PURE__*/React.createElement(CalendarYears_styles.StyledYearRoot, {
        className: index.cx(selectedClass, currentClass, Calendar_tokens.classes.selectableItem),
        ref: function ref(element) {
          return getRefs(element, i, j);
        },
        tabIndex: i === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[0]) && j === (selectIndexes === null || selectIndexes === void 0 ? void 0 : selectIndexes[1]) ? 0 : -1,
        onClick: handleOnChangeYear,
        "data-year": yearValue,
        "aria-selected": isSelected,
        role: "gridcell",
        key: "StyledYear-".concat(i, "-").concat(j),
        "aria-label": String(yearValue)
      }, /*#__PURE__*/React.createElement(CalendarYears_styles.StyledYear, null, yearValue));
    }));
  }));
};

exports.CalendarYears = CalendarYears;
//# sourceMappingURL=CalendarYears.js.map

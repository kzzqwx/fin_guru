'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var IconDisclosureLeft = require('../../../_Icon/Icons/IconDisclosureLeft.js');
var IconDisclosureRight = require('../../../_Icon/Icons/IconDisclosureRight.js');
require('@linaria/react');
var types = require('../../store/types.js');
var index = require('../../utils/index.js');
var CalendarHeader_styles = require('./CalendarHeader.styles.js');

var _IconDisclosureLeft, _IconDisclosureRight;

/**
 * Компонент шапки календаря.
 */
var CalendarHeader = function CalendarHeader(_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'Days' : _ref$type,
    _ref$startYear = _ref.startYear,
    startYear = _ref$startYear === void 0 ? 0 : _ref$startYear,
    firstDate = _ref.firstDate,
    secondDate = _ref.secondDate,
    isDouble = _ref.isDouble,
    onPrev = _ref.onPrev,
    onNext = _ref.onNext,
    onUpdateCalendarState = _ref.onUpdateCalendarState;
  var handleCalendarState = React.useCallback(function () {
    if (type === types.CalendarState.Days) {
      onUpdateCalendarState === null || onUpdateCalendarState === void 0 || onUpdateCalendarState(types.CalendarState.Months, [3, 2]);
    }
    if (type === types.CalendarState.Months) {
      onUpdateCalendarState === null || onUpdateCalendarState === void 0 || onUpdateCalendarState(types.CalendarState.Years, [3, 2]);
    }
  }, [type, onUpdateCalendarState]);
  var getHeaderContent = React.useCallback(function (date) {
    if (!date) {
      return '';
    }
    if (type === types.CalendarState.Days) {
      return "".concat(index.MONTH_NAMES[date.monthIndex], " ").concat(date.year);
    }
    if (type === types.CalendarState.Months) {
      return "".concat(date.year);
    }
    if (type === types.CalendarState.Years) {
      return "".concat(startYear, "\u2014").concat(startYear + index.YEAR_RENDER_COUNT - 1);
    }
    return '';
  }, [type, startYear]);
  var currentCalendarType = index.getCalendarType(isDouble ? types.CalendarState.Days : type);
  var PreviousButton = React.useMemo(function () {
    return /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledArrow, {
      type: "button",
      "aria-label": "\u041F\u0440\u0435\u0434\u044B\u0434\u0443\u0449\u0438\u0439 ".concat(currentCalendarType),
      tabIndex: 0,
      onClick: function onClick() {
        return onPrev();
      }
    }, _IconDisclosureLeft || (_IconDisclosureLeft = /*#__PURE__*/React.createElement(IconDisclosureLeft.IconDisclosureLeft, null)));
  }, [currentCalendarType, onPrev]);
  var NextButton = React.useMemo(function () {
    return /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledArrow, {
      type: "button",
      "aria-label": "\u0421\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 ".concat(currentCalendarType),
      tabIndex: 0,
      onClick: function onClick() {
        return onNext();
      }
    }, _IconDisclosureRight || (_IconDisclosureRight = /*#__PURE__*/React.createElement(IconDisclosureRight.IconDisclosureRight, null)));
  }, [currentCalendarType, onNext]);
  return /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledCalendarHeader, null, isDouble ? /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledNavigation, null, PreviousButton, /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledHeaderDouble, {
    "aria-live": "polite"
  }, getHeaderContent(firstDate)), /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledHeaderDouble, {
    "aria-live": "polite"
  }, getHeaderContent(secondDate)), NextButton) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledHeader, {
    type: "button",
    "aria-live": "polite",
    id: "id-grid-label",
    onClick: handleCalendarState,
    tabIndex: 0
  }, getHeaderContent(firstDate)), /*#__PURE__*/React.createElement(CalendarHeader_styles.StyledArrows, null, PreviousButton, NextButton)));
};

exports.CalendarHeader = CalendarHeader;
//# sourceMappingURL=CalendarHeader.js.map

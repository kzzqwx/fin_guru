{"version":3,"file":"index.js","sources":["../../../../src/components/Calendar/utils/index.ts"],"sourcesContent":["import type { CalendarStateType } from '../store/types';\nimport type { CalendarValueType, DateObject, DisabledDay, ItemProps } from '../Calendar.types';\n\nexport const ROW_STEP = 6;\n\nexport const YEAR_RENDER_COUNT = 12;\n\nexport const SHORT_DAY_NAMES = ['Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс'] as const;\n\nexport const FULL_DAY_NAMES: Record<typeof SHORT_DAY_NAMES[number], string> = {\n    Пн: 'Понедельник',\n    Вт: 'Вторник',\n    Ср: 'Среда',\n    Чт: 'Четверг',\n    Пт: 'Пятница',\n    Сб: 'Суббота',\n    Вс: 'Воскресенье',\n};\n\nexport const SHORT_MONTH_NAME = ['Янв', 'Фев', 'Март', 'Апр', 'Май', 'Июнь', 'Июль', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'];\n\nexport const MONTH_NAMES = [\n    'Январь',\n    'Февраль',\n    'Март',\n    'Апрель',\n    'Май',\n    'Июнь',\n    'Июль',\n    'Август',\n    'Сентябрь',\n    'Октябрь',\n    'Ноябрь',\n    'Декабрь',\n];\n\nexport const getDaysInMonth = (monthIndex: number, year: number) => new Date(year, monthIndex + 1, 0).getDate();\n\nexport const getOffsetDayInWeek = (monthIndex: number, year: number) => (new Date(year, monthIndex).getDay() || 7) - 1;\n\nexport const getStartYear = (year: number) => Math.trunc((year - 1) * 0.1) * 10 - 1;\n\nexport const getNextDate = (currentYear: number, currentMonth: number) =>\n    currentMonth + 1 === MONTH_NAMES.length ? [currentYear + 1, 0] : [currentYear, currentMonth + 1];\n\nexport const getPrevDate = (currentYear: number, currentMonth: number) =>\n    currentMonth - 1 < 0 ? [currentYear - 1, 11] : [currentYear, currentMonth - 1];\n\nexport const getDateFromValue = (date: Date | undefined): DateObject => {\n    const state = date || new Date();\n\n    return {\n        day: date !== undefined ? state.getDate() : 0,\n        monthIndex: state.getMonth(),\n        year: state.getFullYear(),\n    };\n};\n\nexport const getDateFromNow = (): DateObject => {\n    const nowDate = new Date();\n\n    return {\n        day: nowDate.getDate(),\n        monthIndex: nowDate.getMonth(),\n        year: nowDate.getFullYear(),\n    };\n};\n\nexport const IsCurrentDay = (date: DateObject, currentDay: number) => {\n    const { day, monthIndex: currentMonthIndex, year: currentYear } = getDateFromNow();\n    return day === currentDay && date.monthIndex === currentMonthIndex && date.year === currentYear;\n};\n\nexport const isSelectedDay = (date: DateObject, currentDay: number, value?: Date) => {\n    if (!value) {\n        return false;\n    }\n\n    const { day, monthIndex, year } = getDateFromValue(value);\n    return day === currentDay && date.monthIndex === monthIndex && date.year === year;\n};\n\nexport const isCurrentMonth = (date: DateObject, monthIndex: number) => {\n    const { monthIndex: currentMonthIndex, year: currentYear } = getDateFromNow();\n    return monthIndex === currentMonthIndex && date.year === currentYear;\n};\n\nexport const isSelectedMonth = (date: DateObject, monthIndex: number) => date.monthIndex === monthIndex;\n\nexport const isCurrentYear = (year: number) => {\n    const { year: currentYear } = getDateFromNow();\n    return year === currentYear;\n};\n\nexport const isSelectedYear = (date: DateObject, year: number) => date.year === year;\n\nexport const getSortedValues = (values: [Date | undefined, (Date | undefined)?]) =>\n    values.sort((start, end) => {\n        if (!start || !end) {\n            return -1;\n        }\n\n        return start.getTime() - end.getTime();\n    });\n\nexport const isDayInRange = (\n    year: number,\n    monthIndex: number,\n    currentDay: number,\n    values: [Date | undefined, Date?],\n) => {\n    const [startValue, endValue] = getSortedValues(values);\n\n    if (!endValue || !startValue) {\n        return false;\n    }\n\n    const day = new Date(year, monthIndex, currentDay);\n    return startValue < day && day <= endValue;\n};\n\nexport const isSameDay = (firstDate: DateObject, secondDate?: DateObject) =>\n    secondDate &&\n    firstDate.day === secondDate.day &&\n    firstDate.monthIndex === secondDate.monthIndex &&\n    firstDate.year === secondDate.year;\n\nexport const isValueUpdate = (value: Date | [Date, Date?], prevValue: Date | [Date, Date?]) => {\n    if (!Array.isArray(value) && !Array.isArray(prevValue)) {\n        return prevValue?.getTime() !== value?.getTime();\n    }\n\n    if (Array.isArray(value) && Array.isArray(prevValue)) {\n        return prevValue[0]?.getTime() !== value[0]?.getTime() || prevValue[1]?.getTime() !== value[1]?.getTime();\n    }\n\n    return false;\n};\n\n/**\n * Метод проверяет, находится ли календарь в режиме выбора второго значения.\n */\nexport const isSelectProcess = (array: unknown | unknown[]): array is [Date, Date?] =>\n    Array.isArray(array) && !array[1];\n\n/**\n * Метод возвращает сторону, когда выбор второго значения диапазона завершён.\n */\nexport const getSideForSelected = (date: DateObject, startValue: Date, endValue: Date) => {\n    const currentDateTime = new Date(date.year, date.monthIndex, date.day).getTime();\n    const startValueTime = startValue.getTime();\n    const endValueTime = endValue.getTime();\n\n    if (currentDateTime === startValueTime) {\n        return 'right';\n    }\n\n    if (currentDateTime === endValueTime) {\n        return 'left';\n    }\n\n    return undefined;\n};\n\n/**\n * Метод возвращает сторону, во время выбора второго значения диапазона.\n */\nexport const getSideForHovered = (date: DateObject, hoveredDay: DateObject, startValue: Date, isSelected?: boolean) => {\n    const dateHover = new Date(hoveredDay.year, hoveredDay.monthIndex, hoveredDay.day);\n    const isHovered = isSameDay(date, hoveredDay);\n\n    if ((isSelected && startValue > dateHover) || (isHovered && startValue < dateHover)) {\n        return 'left';\n    }\n\n    if ((isSelected && startValue < dateHover) || (isHovered && startValue > dateHover)) {\n        return 'right';\n    }\n\n    return undefined;\n};\n\n/**\n * Метод возвращает сторону, с которой нужно отрисовать направление полоски диапазона.\n */\nexport const getSideInRange = (\n    value: CalendarValueType,\n    date: DateObject,\n    hoveredDay?: DateObject,\n    isSelected?: boolean,\n) => {\n    if (!Array.isArray(value)) {\n        return undefined;\n    }\n\n    const [startValue, endValue] = value;\n\n    if (startValue && isSelected && endValue) {\n        return getSideForSelected(date, startValue, endValue);\n    }\n\n    if (startValue && hoveredDay) {\n        return getSideForHovered(date, hoveredDay, startValue, isSelected);\n    }\n\n    return undefined;\n};\n\n/**\n * Метод проверяет, находится ли выбранный день в диапазоне.\n */\nexport const getInRange = (value: CalendarValueType, date: DateObject, hoveredDay?: DateObject, inRange?: boolean) => {\n    if (!isSelectProcess(value) || !hoveredDay) {\n        return inRange;\n    }\n\n    const dateSelected = value[0];\n    const dateHover = new Date(hoveredDay.year, hoveredDay.monthIndex, hoveredDay.day);\n    const dateCurrent = new Date(date.year, date.monthIndex, date.day);\n\n    if (\n        (dateSelected < dateCurrent && dateCurrent < dateHover) ||\n        (dateSelected > dateCurrent && dateCurrent > dateHover)\n    ) {\n        return true;\n    }\n\n    return inRange;\n};\n\n/**\n * Метод проверяет, можно ли выбрать день.\n */\nexport const canSelectDate = (\n    { year, monthIndex, day }: DateObject,\n    value: CalendarValueType,\n    disabledList?: DisabledDay[],\n) => {\n    if (!isSelectProcess(value)) {\n        return true;\n    }\n\n    const hoverDate = new Date(year, monthIndex, day);\n    const [startDate] = value;\n\n    if (!disabledList?.length) {\n        return true;\n    }\n\n    const offDisabledRange = disabledList.some(\n        ({ date }) => (startDate < date && date < hoverDate) || (startDate > date && date > hoverDate),\n    );\n\n    return !offDisabledRange;\n};\n\n/**\n * Метод для получения двумерного массива и возвращения выбранного элемента.\n */\nexport const getMatrix = <T extends ItemProps>(items: T[], rowSize = 7): readonly [T[][], number[] | undefined] => {\n    const newItems = [...items];\n\n    let selected: [number, number] | undefined;\n\n    const result = newItems.reduce((acc: T[][], item, index) => {\n        if (index % rowSize === 0) {\n            acc.push([]);\n        }\n\n        acc[acc.length - 1].push(item);\n\n        if (item.isSelected) {\n            selected = [acc.length - 1, index % rowSize];\n        }\n\n        return acc;\n    }, []);\n\n    return [result, selected] as const;\n};\n\nexport const getCalendarType = (type: CalendarStateType) => {\n    switch (type) {\n        case 'Months':\n            return 'год';\n        case 'Years':\n            return 'период';\n        default:\n            return 'месяц';\n    }\n};\n"],"names":["ROW_STEP","YEAR_RENDER_COUNT","SHORT_DAY_NAMES","FULL_DAY_NAMES","Пн","Вт","Ср","Чт","Пт","Сб","Вс","SHORT_MONTH_NAME","MONTH_NAMES","getDaysInMonth","monthIndex","year","Date","getDate","getOffsetDayInWeek","getDay","getStartYear","Math","trunc","getNextDate","currentYear","currentMonth","length","getPrevDate","getDateFromValue","date","state","day","undefined","getMonth","getFullYear","getDateFromNow","nowDate","IsCurrentDay","currentDay","_getDateFromNow","currentMonthIndex","isSelectedDay","value","_getDateFromValue","isCurrentMonth","_getDateFromNow2","isSelectedMonth","isCurrentYear","_getDateFromNow3","isSelectedYear","getSortedValues","values","sort","start","end","getTime","isDayInRange","_getSortedValues","_getSortedValues2","_slicedToArray","startValue","endValue","isSameDay","firstDate","secondDate","isValueUpdate","prevValue","Array","isArray","_prevValue$","_value$","_prevValue$2","_value$2","isSelectProcess","array","getSideForSelected","currentDateTime","startValueTime","endValueTime","getSideForHovered","hoveredDay","isSelected","dateHover","isHovered","getSideInRange","_value","getInRange","inRange","dateSelected","dateCurrent","canSelectDate","_ref","disabledList","hoverDate","_value2","startDate","offDisabledRange","some","_ref2","getMatrix","items","rowSize","arguments","newItems","_toConsumableArray","selected","result","reduce","acc","item","index","push","getCalendarType","type"],"mappings":"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"}
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var IconClose = require('../_Icon/Icons/IconClose.js');
var index = require('../../utils/index.js');
var base = require('./variations/_view/base.js');
var base$1 = require('./variations/_size/base.js');
var base$2 = require('./variations/_disabled/base.js');
var base$3 = require('./variations/_readonly/base.js');
var base$4 = require('./variations/_focused/base.js');
var base$5 = require('./variations/_pilled/base.js');
var Chip_styles = require('./Chip.styles.js');
var Chip_tokens = require('./Chip.tokens.js');

var _excluded = ["children", "text", "contentLeft", "contentRight", "contentClearButton", "size", "className", "onClear", "onClick", "pilled", "readOnly", "disabled"];
var chipRoot = function chipRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    var children = props.children,
      text = props.text,
      contentLeft = props.contentLeft,
      contentRight = props.contentRight,
      contentClearButton = props.contentClearButton,
      size = props.size,
      className = props.className,
      onClear = props.onClear,
      onClick = props.onClick,
      _props$pilled = props.pilled,
      pilled = _props$pilled === void 0 ? false : _props$pilled,
      _props$readOnly = props.readOnly,
      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);
    var txt = !text && typeof children === 'string' ? children : text;
    var pilledClass = pilled ? Chip_tokens.classes.pilled : undefined;
    var handleClick = function handleClick(event) {
      if (disabled || readOnly) {
        return;
      }
      onClick === null || onClick === void 0 || onClick(event);
      onClear === null || onClear === void 0 || onClear();
    };
    var ClearContent = React.useMemo(function () {
      return contentClearButton || /*#__PURE__*/React.createElement(Chip_styles.StyledContentClear, null, /*#__PURE__*/React.createElement(IconClose.IconClose, {
        sizeCustomProperty: Chip_tokens.tokens.closeIconSize,
        color: "inherit"
      }));
    }, [contentClearButton, Chip_tokens.tokens.closeIconSize]);
    return /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      type: "button",
      ref: ref,
      className: index.cx(pilledClass, className),
      tabIndex: readOnly ? -1 : 0,
      onClick: handleClick,
      disabled: disabled,
      pilled: pilled,
      readOnly: !disabled && readOnly,
      size: size
    }, rest), contentLeft && /*#__PURE__*/React.createElement(Chip_styles.StyledContentLeft, null, contentLeft), txt ? /*#__PURE__*/React.createElement(Chip_styles.StyledContentMain, null, txt) : children, contentRight && /*#__PURE__*/React.createElement(Chip_styles.StyledContentRight, null, contentRight), ClearContent);
  });
};
var chipConfig = {
  name: 'Chip',
  tag: 'button',
  layout: chipRoot,
  base: Chip_styles.base,
  variations: {
    view: {
      css: base.base
    },
    size: {
      css: base$1.base
    },
    disabled: {
      css: base$2.base,
      attrs: true
    },
    readOnly: {
      css: base$3.base,
      attrs: true
    },
    focused: {
      css: base$4.base
    },
    pilled: {
      css: base$5.base,
      attrs: true
    }
  },
  defaults: {
    view: 'default',
    size: 'm'
  }
};

exports.chipConfig = chipConfig;
exports.chipRoot = chipRoot;
//# sourceMappingURL=Chip.js.map

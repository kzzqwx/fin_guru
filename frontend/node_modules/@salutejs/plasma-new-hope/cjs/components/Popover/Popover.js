'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var ReactDOM = require('react-dom');
var reactPopper = require('react-popper');
var plasmaCore = require('@salutejs/plasma-core');
var index = require('../../utils/index.js');
var base = require('./variations/_view/base.js');
var Popover_styles = require('./Popover.styles.js');
var Popover_tokens = require('./Popover.tokens.js');

var _excluded = ["target", "children", "isOpen", "trigger", "hasArrow", "frame", "className", "placement", "offset", "zIndex", "isFocusTrapped", "closeOnEsc", "preventOverflow", "usePortal", "view", "onToggle", "closeOnOverlayClick"];
var ESCAPE_KEYCODE = 27;
var POPOVER_PORTAL_ID = 'plasma-popover-root';

/**
 * Всплывающее окно с возможностью позиционирования
 * и вызова по клику либо ховеру.
 */
var popoverRoot = function popoverRoot(Root) {
  return /*#__PURE__*/React.forwardRef(function (_ref, outerRootRef) {
    var _placement$;
    var target = _ref.target,
      children = _ref.children,
      isOpen = _ref.isOpen,
      _ref$trigger = _ref.trigger,
      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,
      hasArrow = _ref.hasArrow,
      _ref$frame = _ref.frame,
      frame = _ref$frame === void 0 ? 'document' : _ref$frame,
      className = _ref.className,
      _ref$placement = _ref.placement,
      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,
      _ref$offset = _ref.offset,
      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,
      zIndex = _ref.zIndex,
      _ref$isFocusTrapped = _ref.isFocusTrapped,
      isFocusTrapped = _ref$isFocusTrapped === void 0 ? true : _ref$isFocusTrapped,
      _ref$closeOnEsc = _ref.closeOnEsc,
      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,
      _ref$preventOverflow = _ref.preventOverflow,
      preventOverflow = _ref$preventOverflow === void 0 ? true : _ref$preventOverflow,
      _ref$usePortal = _ref.usePortal,
      usePortal = _ref$usePortal === void 0 ? false : _ref$usePortal,
      view = _ref.view,
      onToggle = _ref.onToggle,
      closeOnOverlayClick = _ref.closeOnOverlayClick,
      rest = _rollupPluginBabelHelpers.objectWithoutProperties(_ref, _excluded);
    var rootRef = React.useRef(null);
    var popoverRef = React.useRef(null);
    var handleRef = plasmaCore.useForkRef(rootRef, outerRootRef);
    var portalRef = React.useRef(null);
    var trapRef = plasmaCore.useFocusTrap(isOpen && isFocusTrapped);
    var popoverForkRef = plasmaCore.useForkRef(popoverRef, trapRef);
    var _useState = React.useState(null),
      _useState2 = _rollupPluginBabelHelpers.slicedToArray(_useState, 2),
      arrowElement = _useState2[0],
      setArrowElement = _useState2[1];
    var _useState3 = React.useState(false),
      _useState4 = _rollupPluginBabelHelpers.slicedToArray(_useState3, 2),
      forceRender = _useState4[1];
    var isAutoArray = Array.isArray(placement);
    var isAuto = isAutoArray || placement.startsWith('auto');
    var initialStyles = {
      visibility: isOpen ? 'visible' : 'hidden',
      opacity: isOpen ? 1 : 0
    };
    var _usePopper = reactPopper.usePopper(rootRef.current, popoverRef.current, {
        // TODO: #1121
        // eslint-disable-next-line no-nested-ternary
        placement: isAutoArray ? (_placement$ = placement[0]) !== null && _placement$ !== void 0 && _placement$.endsWith('start') ? 'auto-start' : 'auto' : placement,
        modifiers: [{
          name: 'preventOverflow',
          options: {
            mainAxis: preventOverflow
          }
        }, {
          name: 'offset',
          options: {
            offset: [offset[0], offset[1]]
          }
        }, {
          name: 'flip',
          enabled: isAuto,
          options: {
            allowedAutoPlacements: isAutoArray ? placement : []
          }
        }, {
          name: 'arrow',
          options: {
            element: arrowElement
          }
        }]
      }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      forceUpdate = _usePopper.forceUpdate;
    var onEscape = React.useCallback(function (event) {
      if (isOpen && closeOnEsc && event.keyCode === ESCAPE_KEYCODE) {
        onToggle === null || onToggle === void 0 || onToggle(false, event);
      }
    }, [closeOnEsc, isOpen, onToggle]);
    var onDocumentClick = React.useCallback(function (event) {
      if (isOpen && closeOnOverlayClick && onToggle) {
        var _rootRef$current;
        var targetIsRoot = event.target === rootRef.current;
        var rootHasTarget = (_rootRef$current = rootRef.current) === null || _rootRef$current === void 0 ? void 0 : _rootRef$current.contains(event.target);
        if (!targetIsRoot && !rootHasTarget) {
          onToggle(false, event);
        }
      }
    }, [closeOnOverlayClick, isOpen, onToggle]);
    var onClick = React.useCallback(function (event) {
      if (trigger === 'click') {
        var _popoverRef$current;
        var targetIsPopover = event.target === popoverRef.current;
        var rootHasTarget = (_popoverRef$current = popoverRef.current) === null || _popoverRef$current === void 0 ? void 0 : _popoverRef$current.contains(event.target);
        if (!targetIsPopover && !rootHasTarget) {
          onToggle === null || onToggle === void 0 || onToggle(!isOpen, event);
        }
      }
    }, [trigger, isOpen, onToggle]);
    var onMouseEnter = React.useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(true, event);
      }
    }, [trigger, onToggle]);
    var onMouseLeave = React.useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(false, event);
      }
    }, [trigger, onToggle]);
    var onFocus = React.useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(true, event);
      }
    }, [trigger, onToggle]);
    var onBlur = React.useCallback(function (event) {
      if (trigger === 'hover') {
        onToggle === null || onToggle === void 0 || onToggle(false, event);
      }
    }, [trigger, onToggle]);
    React.useEffect(function () {
      document.addEventListener('click', onDocumentClick);
      return function () {
        return document.removeEventListener('click', onDocumentClick);
      };
    }, [isOpen, onToggle]);
    React.useEffect(function () {
      window.addEventListener('keydown', onEscape);
      return function () {
        return window.removeEventListener('keydown', onEscape);
      };
    }, [closeOnEsc, isOpen, onToggle]);
    React.useEffect(function () {
      var portal = document.getElementById(POPOVER_PORTAL_ID);
      if (typeof frame !== 'string' && frame && frame.current) {
        portal = frame.current;
      }
      if (!usePortal) {
        portal = rootRef.current;
      }
      if (!portal) {
        portal = document.createElement('div');
        portal.setAttribute('id', POPOVER_PORTAL_ID);
        if (typeof frame === 'string' && frame !== 'document') {
          var _document$getElementB;
          (_document$getElementB = document.getElementById(frame)) === null || _document$getElementB === void 0 || _document$getElementB.appendChild(portal);
        } else {
          document.body.appendChild(portal);
        }
      }
      portalRef.current = portal;

      /**
       * Изменение стейта нужно для того, чтобы Popup
       * отобразился после записи DOM элемента в portalRef.current
       */
      forceRender(true);
    }, []);
    React.useEffect(function () {
      if (!isOpen || !forceUpdate) {
        return;
      }

      /*
       * INFO: Метод forceUpdate содержит в себе flushSync и приводит
       * к повторному рендеру компонента, который уже находится в процессе рендера.
       * Данный хак, нужен для того, чтобы это поведение избежать и перенаправить
       * вызов метода в очередь микрозадач.
       */
      Promise.resolve().then(forceUpdate);
    }, [isOpen, children, forceUpdate]);
    return /*#__PURE__*/React.createElement(Popover_styles.StyledWrapper, {
      className: Popover_tokens.classes.wrapper,
      onMouseEnter: onMouseEnter,
      onMouseLeave: onMouseLeave
    }, /*#__PURE__*/React.createElement(Popover_styles.StyledRoot, {
      ref: handleRef,
      onClick: onClick,
      onFocus: onFocus,
      onBlur: onBlur,
      className: index.cx(className, Popover_tokens.classes.target)
    }, target), children && portalRef.current && /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(Root, _rollupPluginBabelHelpers.extends({
      view: view,
      className: className
    }, rest), /*#__PURE__*/React.createElement(Popover_styles.StyledPopover, _rollupPluginBabelHelpers.extends({}, attributes.popper, {
      className: Popover_tokens.classes.root,
      ref: popoverForkRef,
      style: _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, styles.popper), {
        display: isOpen ? 'block' : 'none'
      }), initialStyles),
      zIndex: zIndex
    }), hasArrow && /*#__PURE__*/React.createElement(Popover_styles.StyledArrow, _rollupPluginBabelHelpers.extends({
      className: Popover_tokens.classes.arrow,
      ref: setArrowElement,
      style: styles.arrow
    }, attributes.arrow)), children)), portalRef.current));
  });
};
var popoverConfig = {
  name: 'Popover',
  tag: 'div',
  layout: popoverRoot,
  base: '',
  variations: {
    view: {
      css: base.base
    }
  },
  defaults: {
    view: 'default'
  }
};

exports.ESCAPE_KEYCODE = ESCAPE_KEYCODE;
exports.POPOVER_PORTAL_ID = POPOVER_PORTAL_ID;
exports.popoverConfig = popoverConfig;
exports.popoverRoot = popoverRoot;
//# sourceMappingURL=Popover.js.map

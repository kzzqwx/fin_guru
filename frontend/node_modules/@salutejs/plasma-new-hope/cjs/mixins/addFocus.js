'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('focus-visible');

/**
 * Миксин для добавления фокусной рамки к элементу через псевдоэлемент before
 * @param {FocusProps} props
 * @example
 * // Выведет фокусную рамку размером 2em, скруглением 5em, отступом 2em и цветом 'rebeccapurple'.
 * addFocus({
 *  outlineSize: '2em',
 *  outlineOffset: '2em',
 *  outlineRadius: '5em',
 *  outlineColor: 'rebeccapurple',
 * });
 * @example
 * // Выведет outline размером 4em, скруглением 10px 1px, без отступа и цветом 'greenyellow'.
 * addFocus({
 *  outlineSize: '4em',
 *  outlineOffset: '0',
 *  outlineRadius: '10em 1em',
 *  outlineColor: 'greenyellow',
 * });
 */
var addFocus = function addFocus(args) {
  var customFocusRules = args.customFocusRules,
    _args$outlineSize = args.outlineSize,
    outlineSize = _args$outlineSize === void 0 ? '0.125rem' : _args$outlineSize,
    _args$outlineOffset = args.outlineOffset,
    outlineOffset = _args$outlineOffset === void 0 ? '-0.125rem' : _args$outlineOffset,
    _args$outlineColor = args.outlineColor,
    outlineColor = _args$outlineColor === void 0 ? 'var(--plasma-colors-button-focused, var(--text-accent))' : _args$outlineColor,
    _args$outlineRadius = args.outlineRadius,
    outlineRadius = _args$outlineRadius === void 0 ? '30px' : _args$outlineRadius,
    _args$hasTransition = args.hasTransition,
    hasTransition = _args$hasTransition === void 0 ? true : _args$hasTransition;
  return "\n        position: relative;\n\n        &::before {\n            content: '';\n\n            position: absolute;\n            top: ".concat(outlineOffset, ";\n            left: ").concat(outlineOffset, ";\n            right: ").concat(outlineOffset, ";\n            bottom: ").concat(outlineOffset, ";\n            z-index: 1;\n\n            display: block;\n            box-sizing: content-box;\n\n            border: ").concat(outlineSize, " solid transparent;\n            border-radius: ").concat(outlineRadius, ";\n\n            transition: ").concat(hasTransition ? 'box-shadow 0.2s ease-in-out' : 'none', ";\n\n            pointer-events: none;\n        }\n\n        ").concat(getCustomFocusStyle(outlineSize, outlineColor, customFocusRules), "\n    ");
};
var getCustomFocusStyle = function getCustomFocusStyle(outlineSize, outlineColor, customFocusRules) {
  if (!customFocusRules) {
    return "\n            &.focus-visible:focus,\n            &[data-focus-visible-added] {\n                &::before {\n                    outline: none;\n                    box-shadow: 0 0 0 ".concat(outlineSize, " ").concat(outlineColor, ";\n                }\n            }\n        ");
  }
  return customFocusRules;
};

exports.addFocus = addFocus;
//# sourceMappingURL=addFocus.js.map

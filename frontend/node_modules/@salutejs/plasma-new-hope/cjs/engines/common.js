'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var linaria = require('./linaria.js');

//
// Тип HTMLAttributesOmitOnChange требуется чтобы использовать компонент с кастомным пропсом onChange
//

var getStaticVariants = function getStaticVariants(config) {
  if (!config.variations) {
    return [];
  }
  var res = [];
  var variations = config.variations;

  // eslint-disable-next-line guard-for-in
  for (var key in variations) {
    var css = variations[key].css;
    css && res.push(css);
  }
  return res;
};
var getDynamicVariants = function getDynamicVariants(config) {
  return function (props) {
    var res = [];

    // eslint-disable-next-line guard-for-in
    for (var key in config.variations) {
      if (key in props) {
        var variant = config.variations[key];
        var css = variant[props[key]];
        // no css for { modifier: true }
        css && Array.isArray(css) ? res.push.apply(res, _rollupPluginBabelHelpers.toConsumableArray(css)) : res.push(css);
      }
    }
    return res;
  };
};
var mergeConfig = function mergeConfig(baseConfig, userConfig) {
  var res = _rollupPluginBabelHelpers.objectSpread2(_rollupPluginBabelHelpers.objectSpread2({}, baseConfig), userConfig);
  if (res.variations) {
    // copy variations base css
    // eslint-disable-next-line guard-for-in
    for (var key in res.variations) {
      var variant = baseConfig.variations[key];
      res.variations[key].css = variant === null || variant === void 0 ? void 0 : variant.css;
      /* start of bad decision */
      if (!res.variations[key]["true"] && variant !== null && variant !== void 0 && variant["true"]) {
        res.variations[key]["true"] = variant["true"];
      }
      /* end of bad decision */
      if (variant !== null && variant !== void 0 && variant.attrs) {
        res.variations[key].attrs = variant.attrs;
      }
    }
  }

  // eslint-disable-next-line guard-for-in
  for (var _key in baseConfig.defaults || {}) {
    if (!(_key in res.defaults)) {
      res.defaults[_key] = baseConfig.defaults[_key];
    }
  }
  return res;
};
function component(config) {
  var Comp = config.layout(linaria._component(config));
  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    return /*#__PURE__*/React.createElement(Comp, _rollupPluginBabelHelpers.extends({}, config === null || config === void 0 ? void 0 : config.defaults, props, {
      ref: ref
    }));
  });
}

exports.component = component;
exports.getDynamicVariants = getDynamicVariants;
exports.getStaticVariants = getStaticVariants;
exports.mergeConfig = mergeConfig;
//# sourceMappingURL=common.js.map

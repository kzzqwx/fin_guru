"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeviceThemeProvider = void 0;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _styledComponents = /*#__PURE__*/require("styled-components");
var _plasmaTokens = /*#__PURE__*/require("@salutejs/plasma-tokens");
var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");
var _plasmaTypo = /*#__PURE__*/require("@salutejs/plasma-typo");
var _utils = /*#__PURE__*/require("../../utils");
var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");
var _CompatibleTypo;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } /* stylelint-disable */
(0, _collectPackageInfo.collectPackageInfo)('Device/DeviceDetection');
var transformWithRoot = function transformWithRoot(typo) {
  return "\n:root {\n    ".concat((0, _plasmaCore.transformStyles)(typo[':root']), "\n}");
};
var typoSizes = {
  sberBox: /*#__PURE__*/(0, _styledComponents.createGlobalStyle)(["", ""], /*#__PURE__*/transformWithRoot(_plasmaTokens.sberBox)),
  sberPortal: /*#__PURE__*/(0, _styledComponents.createGlobalStyle)(["", ""], /*#__PURE__*/transformWithRoot(_plasmaTokens.sberPortal)),
  mobile: /*#__PURE__*/(0, _styledComponents.createGlobalStyle)(["", ""], /*#__PURE__*/transformWithRoot(_plasmaTokens.mobile))
};
/* stylelint-enable */

var StandardTypo = /*#__PURE__*/(0, _styledComponents.createGlobalStyle)(_plasmaTypo.standard);
var CompatibleTypo = /*#__PURE__*/(0, _styledComponents.createGlobalStyle)(_plasmaTypo.compatible);
/**
 * Провайдер обязателен для использования, необходимо обернуть в него все приложение.
 *
 * Назначение - определяет, на какой *поверхности* (**устройстве**) запущено приложение.
 *
 * В зависимости от поверхности, применяет глобальные стили типографики,
 * подходящие данной платформе, ко всему приложению.
 *
 * Функцией определения по умолчанию тип поверхности определяется на основании `userAgent`,
 * при отсутствии `navigator` или `userAgent`, поверхность будет определен как `sberBox`.
 *
 * Имеется возможность передать провайдеру собственную логику определения девайса
 * с помощью пропса `detectDeviceCallback`.
 * При этом стоит помнить, что разрешены только 3 стандартных значения.
 */
var DeviceThemeProvider = exports.DeviceThemeProvider = function DeviceThemeProvider(_ref) {
  var theme = _ref.theme,
    children = _ref.children,
    _ref$detectDeviceCall = _ref.detectDeviceCallback,
    detectDeviceCallback = _ref$detectDeviceCall === void 0 ? _utils.detectDevice : _ref$detectDeviceCall,
    _ref$responsiveTypo = _ref.responsiveTypo,
    responsiveTypo = _ref$responsiveTypo === void 0 ? false : _ref$responsiveTypo,
    _ref$lowPerformance = _ref.lowPerformance,
    lowPerformance = _ref$lowPerformance === void 0 ? false : _ref$lowPerformance,
    _ref$breakWord = _ref.breakWord,
    breakWord = _ref$breakWord === void 0 ? true : _ref$breakWord;
  var deviceKind = detectDeviceCallback();
  var deviceScale = _utils.deviceScales[deviceKind] || _plasmaTokens.sberPortalScale;
  var Typo = _react["default"].useMemo(function () {
    return typoSizes[deviceKind];
  }, [deviceKind]);
  return /*#__PURE__*/_react["default"].createElement(_styledComponents.ThemeProvider, {
    theme: _objectSpread(_objectSpread({}, theme), {}, {
      deviceScale: deviceScale,
      lowPerformance: lowPerformance,
      breakWord: breakWord,
      deviceKind: deviceKind
    })
  }, responsiveTypo ? /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(StandardTypo, {
    deviceScale: deviceScale,
    breakWord: breakWord
  }), _CompatibleTypo || (_CompatibleTypo = /*#__PURE__*/_react["default"].createElement(CompatibleTypo, null))) : /*#__PURE__*/_react["default"].createElement(Typo, null), children);
};
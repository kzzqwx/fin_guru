"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useRemoteHandlers = useRemoteHandlers;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _lodash = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("lodash.throttle"));
var _hooks = /*#__PURE__*/require("../../hooks");
var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
(0, _collectPackageInfo.collectPackageInfo)('Carousel/Carousel.hooks');
var throttlingParamsDefault = {
  leading: true,
  trailing: false
};

/**
 * Хук для навигации. Слушает нажатие кнопок на пульте/клавиатуре.
 */
function useRemoteHandlers(_ref) {
  var _ref$initialIndex = _ref.initialIndex,
    initialIndex = _ref$initialIndex === void 0 ? 0 : _ref$initialIndex,
    axis = _ref.axis,
    delay = _ref.delay,
    longDelay = _ref.longDelay,
    min = _ref.min,
    max = _ref.max,
    _ref$count = _ref.count,
    count = _ref$count === void 0 ? 1 : _ref$count,
    _ref$longCount = _ref.longCount,
    longCount = _ref$longCount === void 0 ? 5 : _ref$longCount,
    _ref$throttlingParams = _ref.throttlingParams,
    throttlingParams = _ref$throttlingParams === void 0 ? throttlingParamsDefault : _ref$throttlingParams;
  var indexState = _react["default"].useState(initialIndex);
  var _indexState = _slicedToArray(indexState, 2),
    setIndex = _indexState[1];
  var step = _react["default"].useCallback((0, _lodash["default"])(function (cmd) {
    return setIndex(function (prevIndex) {
      if (cmd === '+') {
        return prevIndex + count <= max ? prevIndex + count : min;
      }
      return prevIndex - count >= min ? prevIndex - count : max;
    });
  }, delay, throttlingParams), [min, max]);
  var jump = _react["default"].useCallback((0, _lodash["default"])(function (cmd) {
    return setIndex(function (prevIndex) {
      if (cmd === '+') {
        return prevIndex + longCount <= max ? prevIndex + longCount : min;
      }
      return prevIndex - longCount >= min ? prevIndex - longCount : max;
    });
  }, longDelay, throttlingParams), [min, max]);
  (0, _hooks.useRemoteListener)(function (key, ev) {
    ev.preventDefault();
    if (axis === 'x') {
      switch (key) {
        case 'LEFT':
          step('-');
          break;
        case 'RIGHT':
          step('+');
          break;
        case 'LONG_LEFT':
          jump('-');
          break;
        case 'LONG_RIGHT':
          jump('+');
          break;
        default:
          break;
      }
    } else {
      switch (key) {
        case 'UP':
          step('-');
          break;
        case 'DOWN':
          step('+');
          break;
        case 'LONG_UP':
          jump('-');
          break;
        case 'LONG_DOWN':
          jump('+');
          break;
        default:
          break;
      }
    }
  });
  return indexState;
}
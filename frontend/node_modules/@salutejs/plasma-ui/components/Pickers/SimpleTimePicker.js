"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SimpleTimePicker = void 0;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _plasmaCore = /*#__PURE__*/require("@salutejs/plasma-core");
var _Picker = /*#__PURE__*/require("./Picker");
var _excluded = ["id", "type", "range"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var SimpleTimePicker = exports.SimpleTimePicker = /*#__PURE__*/_react["default"].memo(function (_ref) {
  var id = _ref.id,
    type = _ref.type,
    range = _ref.range,
    rest = _objectWithoutProperties(_ref, _excluded);
  var items = range.map(function (value) {
    return {
      label: (0, _plasmaCore.padZeroNumber)(value),
      value: value
    };
  });
  return /*#__PURE__*/_react["default"].createElement(_Picker.Picker, _extends({
    id: id ? "".concat(id, "-").concat(type) : undefined,
    items: items
  }, rest));
});
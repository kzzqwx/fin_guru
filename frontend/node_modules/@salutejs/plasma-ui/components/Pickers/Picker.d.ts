import type { HTMLAttributes } from 'react';
import { DisabledProps } from '@salutejs/plasma-core';
import { CarouselProps } from '../Carousel';
import type { PickerItem as PickerItemType, SizeProps, PickerVisibleItems } from './types';
export interface PickerProps extends SizeProps, DisabledProps, Omit<HTMLAttributes<HTMLDivElement>, 'onChange'>, Pick<CarouselProps, 'scrollSnapType'> {
    /**
     * Список опций
     */
    items: PickerItemType[];
    /**
     * Значение компонента
     */
    value: string | number | Date;
    /**
     * Отображать стрелки для переключения
     */
    controls?: boolean;
    /**
     * Отображаемое количество опций
     */
    visibleItems?: PickerVisibleItems;
    /**
     * Обработчик изменения значения
     */
    onChange?: (value: PickerItemType) => void;
    /**
     * Компонент в фокусе (визуально, независимо от tabIndex)
     */
    focused?: boolean;
    /**
     * Автофокус на компоненте.
     */
    autofocus?: boolean;
    /**
     * Добавляет нативный инпут для отправки в формах. Используется `input[type=hidden]`
     */
    enableNativeControl?: boolean;
    /**
     * Имя нативного инпута. Полезно при отправке uncontrolled-форм.
     * Используется вместе с пропом `enableNativeControl`.
     */
    name?: string;
    /**
     * Бесконечная прокрутка; выключена по умолчанию для lowPerformance Devices
     */
    infiniteScroll?: boolean;
    /**
     * Выключаем css свойства для указания стороны привязки в scroll-snap контейнере.
     * @default false
     */
    disableScrollSnapAlign?: boolean;
}
/**
 * Компонент для отображения барабана-пикера,
 * позволяющего визуально проскроллить опции вверх-вниз.
 */
export declare const Picker: ({ id, size, value, items, controls, autofocus, visibleItems, scrollSnapType, "aria-label": ariaLabel, onChange, disableScrollSnapAlign, ...rest }: PickerProps) => JSX.Element;

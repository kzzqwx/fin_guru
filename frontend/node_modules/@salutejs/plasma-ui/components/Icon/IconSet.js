"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconSet = void 0;
var _react = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("react"));
var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));
var _plasmaIcons = /*#__PURE__*/require("@salutejs/plasma-icons");
var _Cell = /*#__PURE__*/require("../Cell");
var _Grid = /*#__PURE__*/require("../Grid");
var _TextBox = /*#__PURE__*/require("../TextBox");
var _Typography = /*#__PURE__*/require("../Typography");
var _collectPackageInfo = /*#__PURE__*/require("../../collectPackageInfo");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
(0, _collectPackageInfo.collectPackageInfo)('Icon/IconSet');
var StyledRow = /*#__PURE__*/(0, _styledComponents["default"])(_Grid.Row).withConfig({
  componentId: "plasma-ui__sc-1littwk-0"
})(["flex-wrap:wrap;"]);
var StyledIcon = /*#__PURE__*/(0, _styledComponents["default"])(_plasmaIcons.Icon).withConfig({
  componentId: "plasma-ui__sc-1littwk-1"
})(["margin:0.125rem 0.75rem 0.125rem 0;"]);
var StyledHeading = /*#__PURE__*/(0, _styledComponents["default"])(_Typography.Headline3).withConfig({
  componentId: "plasma-ui__sc-1littwk-2"
})(["margin:2rem 0 1rem;color:", ";"], function (_ref) {
  var color = _ref.color;
  return color;
});
var IconSet = exports.IconSet = function IconSet(_ref2) {
  var size = _ref2.size,
    color = _ref2.color,
    exclude = _ref2.exclude,
    include = _ref2.include;
  return /*#__PURE__*/_react["default"].createElement(StyledRow, null, Object.entries(_plasmaIcons.iconSectionsSet).map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      sectionName = _ref4[0],
      section = _ref4[1];
    var filteredIcons = Object.keys(section).filter(function (icon) {
      if (exclude) {
        return !exclude.includes(icon);
      }
      return include ? include.includes(icon) : true;
    });
    return filteredIcons && filteredIcons.length > 0 && /*#__PURE__*/_react["default"].createElement(_Grid.Col, {
      key: sectionName,
      size: 2
    }, /*#__PURE__*/_react["default"].createElement(StyledHeading, null, sectionName), filteredIcons.map(function (icon) {
      return /*#__PURE__*/_react["default"].createElement(_Cell.Cell, {
        key: icon,
        contentLeft: /*#__PURE__*/_react["default"].createElement(StyledIcon, {
          icon: icon,
          size: size,
          color: color
        }),
        content: /*#__PURE__*/_react["default"].createElement(_TextBox.TextBox, {
          title: icon
        })
      });
    }));
  }));
};
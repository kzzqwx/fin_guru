var _excluded = ["initialValue", "minDate", "maxDate", "optionsYears", "optionsMonths", "optionsDays", "optionsShortMonthName"],
  _excluded2 = ["initialValue", "minDate", "maxDate", "optionsHours", "optionsMinutes", "optionsSeconds"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React from 'react';
import styled from 'styled-components';
import { DatePicker as DatePickerComponent } from './DatePicker';
import { TimePicker as TimePickerComponent } from './TimePicker';
var StyledWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-1uyi5d9-0"
})(["display:grid;gap:2rem;grid-template-columns:repeat(2,max-content);align-items:center;"]);
var parseDateTime = function parseDateTime(dateTime) {
  var _dateTime$split = dateTime.split(' '),
    _dateTime$split2 = _slicedToArray(_dateTime$split, 2),
    date = _dateTime$split2[0],
    time = _dateTime$split2[1];
  var dated = date.split('.').map(Number);
  var timed = time.split(':').map(Number);
  return new Date(dated[2], dated[1] - 1, dated[0], timed[0], timed[1], timed[2]);
};
var defaultComponentProps = {
  initialValue: '01.09.1980 00:28:59',
  minDate: '01.01.1975 01:15:29',
  maxDate: '31.12.1985 12:45:50',
  optionsYears: true,
  optionsMonths: true,
  optionsDays: true,
  optionsShortMonthName: false,
  optionsHours: true,
  optionsMinutes: true,
  optionsSeconds: true,
  disabled: false,
  controls: true,
  autofocus: true,
  scrollSnapType: 'none',
  DatePickerSize: 's',
  DatePickerVisibleItems: 3,
  TimePickerSize: 's',
  TimePickerStep: 1,
  TimePickerVisibleItems: 5,
  DatePickerNativeControl: false,
  TimePickerNativeControl: false
};
export var Default = function Default() {
  var args = defaultComponentProps;
  var _React$useState = React.useState(parseDateTime(args.initialValue)),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    value = _React$useState2[0],
    setValue = _React$useState2[1];
  var min = React.useMemo(function () {
    return parseDateTime(args.minDate);
  }, [args.minDate]);
  var max = React.useMemo(function () {
    return parseDateTime(args.maxDate);
  }, [args.maxDate]);
  var years = args.optionsYears;
  var months = args.optionsMonths;
  var days = args.optionsDays;
  var shortMonthName = args.optionsShortMonthName;
  var hours = args.optionsHours;
  var minutes = args.optionsMinutes;
  var seconds = args.optionsSeconds;
  var dateOptions = React.useMemo(function () {
    return {
      years: years,
      months: months,
      days: days,
      shortMonthName: shortMonthName
    };
  }, [years, months, days, shortMonthName]);
  var timeOptions = React.useMemo(function () {
    return {
      hours: hours,
      minutes: minutes,
      seconds: seconds
    };
  }, [hours, minutes, seconds]);
  return /*#__PURE__*/React.createElement(StyledWrapper, null, /*#__PURE__*/React.createElement(DatePickerComponent, {
    key: "date-".concat(args.DatePickerSize, "-").concat(args.DatePickerVisibleItems),
    id: "datepicker",
    value: value,
    min: min,
    max: max,
    size: args.DatePickerSize,
    visibleItems: args.DatePickerVisibleItems,
    scrollSnapType: args.scrollSnapType,
    options: dateOptions,
    disabled: args.disabled,
    controls: args.controls,
    autofocus: args.autofocus,
    onChange: setValue,
    enableNativeControl: args.DatePickerNativeControl,
    daysAriaLabel: "\u0434\u0435\u043D\u044C",
    monthsAriaLabel: "\u043C\u0435\u0441\u044F\u0446",
    yearsAriaLabel: "\u0433\u043E\u0434"
  }), /*#__PURE__*/React.createElement(TimePickerComponent, {
    key: "time-".concat(args.TimePickerSize, "-").concat(args.TimePickerVisibleItems),
    id: "timepicker",
    value: value,
    min: min,
    max: max,
    step: args.TimePickerStep,
    size: args.TimePickerSize,
    visibleItems: args.TimePickerVisibleItems,
    scrollSnapType: args.scrollSnapType,
    options: timeOptions,
    disabled: args.disabled,
    controls: args.controls,
    onChange: setValue,
    enableNativeControl: args.TimePickerNativeControl,
    secondsAriaLabel: "\u0441\u0435\u043A\u0443\u043D\u0434\u044B",
    minutesAriaLabel: "\u043C\u0438\u043D\u0443\u0442\u044B",
    hoursAriaLabel: "\u0447\u0430\u0441\u044B"
  }));
};
var datePickerProps = {
  initialValue: '01.09.1980 00:28:59',
  minDate: '01.02.1975 01:15:29',
  maxDate: '30.11.1985 12:45:50',
  optionsYears: true,
  optionsMonths: true,
  optionsDays: true,
  optionsShortMonthName: false,
  disabled: false,
  controls: true,
  autofocus: true,
  scrollSnapType: 'none',
  size: 's',
  visibleItems: 5,
  infiniteScroll: true
};
export var DatePicker = function DatePicker() {
  var initialValue = datePickerProps.initialValue,
    minDate = datePickerProps.minDate,
    maxDate = datePickerProps.maxDate,
    optionsYears = datePickerProps.optionsYears,
    optionsMonths = datePickerProps.optionsMonths,
    optionsDays = datePickerProps.optionsDays,
    optionsShortMonthName = datePickerProps.optionsShortMonthName,
    rest = _objectWithoutProperties(datePickerProps, _excluded);
  var _React$useState3 = React.useState(parseDateTime(initialValue)),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    value = _React$useState4[0],
    setValue = _React$useState4[1];
  var min = React.useMemo(function () {
    return parseDateTime(minDate);
  }, [minDate]);
  var max = React.useMemo(function () {
    return parseDateTime(maxDate);
  }, [maxDate]);
  var years = optionsYears;
  var months = optionsMonths;
  var days = optionsDays;
  var shortMonthName = optionsShortMonthName;
  var options = React.useMemo(function () {
    return {
      years: years,
      months: months,
      days: days,
      shortMonthName: shortMonthName
    };
  }, [years, months, days, shortMonthName]);
  return /*#__PURE__*/React.createElement(DatePickerComponent, _extends({
    key: "".concat(rest.size, "-").concat(rest.visibleItems),
    id: "picker",
    value: value,
    min: min,
    max: max,
    options: options,
    onChange: setValue,
    daysAriaLabel: "\u0434\u0435\u043D\u044C",
    monthsAriaLabel: "\u043C\u0435\u0441\u044F\u0446",
    yearsAriaLabel: "\u0433\u043E\u0434"
  }, rest));
};
var timePickerProps = {
  initialValue: '01.09.1980 00:28:59',
  minDate: '01.09.1980 00:15:29',
  maxDate: '01.09.1980 12:30:30',
  optionsHours: true,
  optionsMinutes: true,
  optionsSeconds: true,
  disabled: false,
  controls: true,
  autofocus: true,
  scrollSnapType: 'none',
  size: 'l',
  visibleItems: 3,
  step: 1,
  infiniteScroll: true
};
export var TimePicker = function TimePicker() {
  var initialValue = timePickerProps.initialValue,
    minDate = timePickerProps.minDate,
    maxDate = timePickerProps.maxDate,
    optionsHours = timePickerProps.optionsHours,
    optionsMinutes = timePickerProps.optionsMinutes,
    optionsSeconds = timePickerProps.optionsSeconds,
    rest = _objectWithoutProperties(timePickerProps, _excluded2);
  var _React$useState5 = React.useState(parseDateTime(initialValue)),
    _React$useState6 = _slicedToArray(_React$useState5, 2),
    value = _React$useState6[0],
    setValue = _React$useState6[1];
  var min = React.useMemo(function () {
    return parseDateTime(minDate);
  }, [minDate]);
  var max = React.useMemo(function () {
    return parseDateTime(maxDate);
  }, [maxDate]);
  var hours = optionsHours;
  var minutes = optionsMinutes;
  var seconds = optionsSeconds;
  var options = React.useMemo(function () {
    return {
      hours: hours,
      minutes: minutes,
      seconds: seconds
    };
  }, [hours, minutes, seconds]);
  return /*#__PURE__*/React.createElement(TimePickerComponent, _extends({
    key: "".concat(rest.size, "-").concat(rest.visibleItems),
    id: "picker",
    value: value,
    min: min,
    max: max,
    options: options,
    onChange: setValue,
    secondsAriaLabel: "\u0441\u0435\u043A\u0443\u043D\u0434\u044B",
    minutesAriaLabel: "\u043C\u0438\u043D\u0443\u0442\u044B",
    hoursAriaLabel: "\u0447\u0430\u0441\u044B"
  }, rest));
};
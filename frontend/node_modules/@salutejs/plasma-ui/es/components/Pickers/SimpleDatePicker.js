var _excluded = ["id", "type", "monthNameFormat", "range"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import { monthShortName, monthLongName } from '@salutejs/plasma-core';
import { Picker } from './Picker';
var labelFormatter = {
  day: function day(value) {
    return "".concat(value);
  },
  year: function year(value) {
    return "".concat(value);
  },
  month: monthLongName,
  monthShort: monthShortName
};
var getFormatterKey = function getFormatterKey(type, monthNameFormat) {
  var isMonth = type === 'month';
  var isShortFormat = monthNameFormat === 'short';
  if (isMonth && isShortFormat) {
    return 'monthShort';
  }
  return type;
};
export var SimpleDatePicker = /*#__PURE__*/React.memo(function (_ref) {
  var id = _ref.id,
    type = _ref.type,
    monthNameFormat = _ref.monthNameFormat,
    range = _ref.range,
    rest = _objectWithoutProperties(_ref, _excluded);
  var formatterKey = getFormatterKey(type, monthNameFormat);
  var formatter = labelFormatter[formatterKey];
  var from = range[0];
  var items = range.map(function (_, i) {
    return {
      label: formatter(from + i),
      value: from + i
    };
  });
  return /*#__PURE__*/React.createElement(Picker, _extends({
    id: id ? "".concat(id, "-").concat(type) : undefined,
    items: items
  }, rest));
});
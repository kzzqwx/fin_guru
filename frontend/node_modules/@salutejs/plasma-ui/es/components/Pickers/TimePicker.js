var _excluded = ["id", "options", "step", "size", "value", "min", "max", "disabled", "controls", "autofocus", "scrollSnapType", "visibleItems", "onChange", "name", "enableNativeControl", "secondsAriaLabel", "minutesAriaLabel", "hoursAriaLabel", "infiniteScroll", "disableScrollSnapAlign", "hoursLabel", "minutesLabel", "secondsLabel", "hasLabel"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React from 'react';
import styled from 'styled-components';
import { useIsomorphicLayoutEffect } from '@salutejs/plasma-core';
import { whiteTertiary, footnote1 } from '@salutejs/plasma-tokens';
import { PickerDots } from './PickerDots';
import { SimpleTimePicker } from './SimpleTimePicker';
import { getNewDate, getNormalizeValues, getRange, getTimeValues, getValuesInRange, isChanged } from './utils';
import { DEFAULT_PICKER_SIZE } from './types';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Pickers/TimePicker');
var StyledWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-1q5khb9-0"
})(["display:flex;width:max-content;align-items:stretch;"]);
var labelFontSize = {
  l: '0.875rem',
  s: '0.75rem',
  xs: '0.625rem'
};
var StyledSimpleTimePicker = /*#__PURE__*/styled(SimpleTimePicker).withConfig({
  componentId: "plasma-ui__sc-1q5khb9-1"
})(["&[data-label]{margin-top:2rem;}&[data-label]::before{content:attr(data-label);position:absolute;left:0;margin-top:", ";width:100%;color:", ";", ";font-weight:normal;font-size:", ";}&[data-label] + ", "{&::before,&::after{top:calc(50% + 1rem);}}"], function (_ref) {
  var controls = _ref.controls;
  return controls ? '-2.5rem' : '-1.5rem';
}, whiteTertiary, footnote1, function (_ref2) {
  var _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? DEFAULT_PICKER_SIZE : _ref2$size;
  return labelFontSize[size];
}, PickerDots);
var defaultOptions = {
  hours: true,
  minutes: true,
  seconds: true
};

/**
 * Вернёт секунды
 */
var getSeconds = function getSeconds(_ref3) {
  var _ref4 = _slicedToArray(_ref3, 3),
    hours = _ref4[0],
    minutes = _ref4[1],
    seconds = _ref4[2];
  return hours * 60 * 60 + minutes * 60 + seconds;
};
/**
 * Компонент для выбора времени.
 */
export var TimePicker = function TimePicker(_ref5) {
  var id = _ref5.id,
    _ref5$options = _ref5.options,
    options = _ref5$options === void 0 ? defaultOptions : _ref5$options,
    step = _ref5.step,
    size = _ref5.size,
    value = _ref5.value,
    min = _ref5.min,
    max = _ref5.max,
    disabled = _ref5.disabled,
    controls = _ref5.controls,
    autofocus = _ref5.autofocus,
    scrollSnapType = _ref5.scrollSnapType,
    visibleItems = _ref5.visibleItems,
    onChange = _ref5.onChange,
    name = _ref5.name,
    enableNativeControl = _ref5.enableNativeControl,
    secondsAriaLabel = _ref5.secondsAriaLabel,
    minutesAriaLabel = _ref5.minutesAriaLabel,
    hoursAriaLabel = _ref5.hoursAriaLabel,
    infiniteScroll = _ref5.infiniteScroll,
    _ref5$disableScrollSn = _ref5.disableScrollSnapAlign,
    disableScrollSnapAlign = _ref5$disableScrollSn === void 0 ? false : _ref5$disableScrollSn,
    hoursLabel = _ref5.hoursLabel,
    minutesLabel = _ref5.minutesLabel,
    secondsLabel = _ref5.secondsLabel,
    _ref5$hasLabel = _ref5.hasLabel,
    hasLabel = _ref5$hasLabel === void 0 ? false : _ref5$hasLabel,
    rest = _objectWithoutProperties(_ref5, _excluded);
  var normalizeValues = React.useMemo(function () {
    return getNormalizeValues(getTimeValues, getSeconds)(value, min, max);
  }, [value]);
  var _React$useState = React.useState(value),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    prevValue = _React$useState2[0],
    setPrevValue = _React$useState2[1];
  var _React$useState3 = React.useState(normalizeValues),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    _React$useState4$ = _slicedToArray(_React$useState4[0], 3),
    hours = _React$useState4$[0],
    minutes = _React$useState4$[1],
    seconds = _React$useState4$[2],
    setState = _React$useState4[1];
  var _getTimeValues = getTimeValues(min),
    _getTimeValues2 = _slicedToArray(_getTimeValues, 3),
    minHours = _getTimeValues2[0],
    minMinutes = _getTimeValues2[1],
    minSeconds = _getTimeValues2[2];
  var _getTimeValues3 = getTimeValues(max),
    _getTimeValues4 = _slicedToArray(_getTimeValues3, 3),
    maxHours = _getTimeValues4[0],
    maxMinutes = _getTimeValues4[1],
    maxSeconds = _getTimeValues4[2];
  var isFirstMounted = React.useRef(true);

  // Диапазоны для списков зависят от min и max,
  // при чем min и max принимаются как возможные предельные значения,
  // а не как контейнеры для компонент hours, minutes, seconds
  var _React$useMemo = React.useMemo(function () {
      var minMins = 0;
      var maxMins = 59;
      var minSecs = 0;
      var maxSecs = 59;
      if (hours === minHours) {
        minMins = minMinutes;
      }
      if (hours === maxHours) {
        maxMins = maxMinutes;
      }
      if (hours === minHours && minutes === minMinutes) {
        minSecs = minSeconds;
      }
      if (hours === maxHours && minutes === maxMinutes) {
        maxSecs = maxSeconds;
      }
      var hoursStep = 1;
      var minsStep = 1;
      var secsStep = 1;
      if (step) {
        var hoursMod = step % 3600;
        var minsMod = hoursMod % 60;
        hoursStep = (step - hoursMod) / 3600 || 1;
        minsStep = (hoursMod - minsMod) / 60 || 1;
        secsStep = minsMod || 1;
      }
      return [getRange(minHours, maxHours, hoursStep), getRange(minMins, maxMins, minsStep), getRange(minSecs, maxSecs, secsStep)];
    }, [minHours, maxHours, minMinutes, maxMinutes, minSeconds, maxSeconds, hours === maxHours || hours === minHours, minutes === minMinutes || minutes === maxMinutes, step]),
    _React$useMemo2 = _slicedToArray(_React$useMemo, 3),
    hoursRange = _React$useMemo2[0],
    minsRange = _React$useMemo2[1],
    secsRange = _React$useMemo2[2];
  var onHoursChange = React.useCallback(function (_ref6) {
    var h = _ref6.value;
    return setState(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 3),
        m = _ref8[1],
        s = _ref8[2];
      return [h, m, s];
    });
  }, []);
  var onMinutesChange = React.useCallback(function (_ref9) {
    var m = _ref9.value;
    return setState(function (_ref10) {
      var _ref11 = _slicedToArray(_ref10, 3),
        h = _ref11[0],
        s = _ref11[2];
      return [h, m, s];
    });
  }, []);
  var onSecondsChange = React.useCallback(function (_ref12) {
    var s = _ref12.value;
    return setState(function (_ref13) {
      var _ref14 = _slicedToArray(_ref13, 2),
        h = _ref14[0],
        m = _ref14[1];
      return [h, m, s];
    });
  }, []);

  /**
   * Если значение (value) обновилось извне, необходимо изменить стейт
   */
  if (prevValue.getTime() !== value.getTime()) {
    setPrevValue(value);
    setState(function (prevTime) {
      var _getValuesInRange = getValuesInRange([hoursRange, minsRange, secsRange], normalizeValues, value),
        _getValuesInRange2 = _slicedToArray(_getValuesInRange, 3),
        newHours = _getValuesInRange2[0],
        newMins = _getValuesInRange2[1],
        newSecs = _getValuesInRange2[2];
      if (!isChanged(prevTime, [newHours, newMins, newSecs])) {
        return prevTime;
      }
      return [newHours, newMins, newSecs];
    });
  }

  /**
   * Если обновился внутренний стейт, необходимо проверить условия
   * и вызвать событие изменения, создав новый экземпляр Date
   */
  useIsomorphicLayoutEffect(function () {
    var prevTime = [value.getHours(), value.getMinutes(), value.getSeconds()];
    if (!isFirstMounted.current || isChanged(prevTime, [hours, minutes, seconds])) {
      onChange === null || onChange === void 0 || onChange(getNewDate(value, [hours, minutes, seconds]));
    }
    isFirstMounted.current = false;
  }, [hours, minutes, seconds]);

  /**
   * Если значение (value) выпадает из диапазона в зависимости от шага (step),
   * необходимо нормализовать значения, изменить стейт
   */
  var newTime = getValuesInRange([hoursRange, minsRange, secsRange], [hours, minutes, seconds], value);
  if (isChanged([hours, minutes, seconds], newTime)) {
    setState(newTime);
  }
  return /*#__PURE__*/React.createElement(StyledWrapper, _extends({
    id: id
  }, rest), options.hours && /*#__PURE__*/React.createElement(StyledSimpleTimePicker, {
    id: id,
    type: "hours",
    autofocus: autofocus,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    size: size,
    range: hoursRange,
    value: hours,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onHoursChange,
    "aria-label": hoursAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign,
    "data-label": hasLabel ? hoursLabel || 'часов' : null
  }), options.hours && options.minutes && /*#__PURE__*/React.createElement(PickerDots, {
    $size: size
  }), options.minutes && /*#__PURE__*/React.createElement(StyledSimpleTimePicker, {
    id: id,
    type: "minutes",
    autofocus: autofocus && !options.hours,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    size: size,
    range: minsRange,
    value: minutes,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onMinutesChange,
    "aria-label": minutesAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign,
    "data-label": hasLabel ? minutesLabel || 'минут' : null
  }), options.minutes && options.seconds && /*#__PURE__*/React.createElement(PickerDots, {
    $size: size
  }), options.seconds && /*#__PURE__*/React.createElement(StyledSimpleTimePicker, {
    id: id,
    type: "seconds",
    autofocus: autofocus && !options.hours && !options.minutes,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    size: size,
    range: secsRange,
    value: seconds,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onSecondsChange,
    "aria-label": secondsAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign,
    "data-label": hasLabel ? secondsLabel || 'секунд' : null
  }), enableNativeControl && /*#__PURE__*/React.createElement("input", {
    type: "hidden",
    value: value.toISOString(),
    name: name
  }));
};
var _excluded = ["id", "options", "size", "value", "max", "min", "disabled", "controls", "autofocus", "visibleItems", "scrollSnapType", "onChange", "name", "enableNativeControl", "daysAriaLabel", "monthsAriaLabel", "yearsAriaLabel", "infiniteScroll", "disableScrollSnapAlign"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _construct(t, e, r) { if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments); var o = [null]; o.push.apply(o, e); var p = new (t.bind.apply(t, o))(); return r && _setPrototypeOf(p, r.prototype), p; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React from 'react';
import styled from 'styled-components';
import { useIsomorphicLayoutEffect } from '@salutejs/plasma-core';
import { SimpleDatePicker } from './SimpleDatePicker';
import { getDateValues, getNormalizeValues, getRange, getTimeValues, getValuesInRange, isChanged } from './utils';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Pickers/DatePicker');
var defaultOptions = {
  years: true,
  months: true,
  days: true,
  shortMonthName: false
};

/**
 * Вернёт максимальное количество дней в месяце
 */
var getMaxDayInMonth = function getMaxDayInMonth(month, year) {
  return new Date(year, month + 1, 0).getDate();
};

/**
 * Вернёт секунды
 */
var getSeconds = function getSeconds(_ref) {
  var _ref2 = _slicedToArray(_ref, 3),
    year = _ref2[0],
    month = _ref2[1],
    day = _ref2[2];
  return new Date(year, month, day, 0, 0, 0).getTime();
};
var StyledWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-1fca412-0"
})(["display:flex;width:max-content;"]);
/**
 * Компонент для выбора даты.
 */
export var DatePicker = function DatePicker(_ref3) {
  var id = _ref3.id,
    _ref3$options = _ref3.options,
    options = _ref3$options === void 0 ? defaultOptions : _ref3$options,
    size = _ref3.size,
    value = _ref3.value,
    max = _ref3.max,
    min = _ref3.min,
    disabled = _ref3.disabled,
    controls = _ref3.controls,
    autofocus = _ref3.autofocus,
    visibleItems = _ref3.visibleItems,
    scrollSnapType = _ref3.scrollSnapType,
    onChange = _ref3.onChange,
    name = _ref3.name,
    enableNativeControl = _ref3.enableNativeControl,
    dayAriaLabel = _ref3.daysAriaLabel,
    monthAriaLabel = _ref3.monthsAriaLabel,
    yearAriaLabel = _ref3.yearsAriaLabel,
    infiniteScroll = _ref3.infiniteScroll,
    _ref3$disableScrollSn = _ref3.disableScrollSnapAlign,
    disableScrollSnapAlign = _ref3$disableScrollSn === void 0 ? false : _ref3$disableScrollSn,
    rest = _objectWithoutProperties(_ref3, _excluded);
  var normalizeValues = React.useMemo(function () {
    return getNormalizeValues(getDateValues, getSeconds)(value, min, max);
  }, [value]);
  var _React$useState = React.useState(normalizeValues),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    _React$useState2$ = _slicedToArray(_React$useState2[0], 3),
    year = _React$useState2$[0],
    month = _React$useState2$[1],
    day = _React$useState2$[2],
    setState = _React$useState2[1];
  var _getDateValues = getDateValues(min),
    _getDateValues2 = _slicedToArray(_getDateValues, 3),
    minYear = _getDateValues2[0],
    minMonth = _getDateValues2[1],
    minDay = _getDateValues2[2];
  var _getDateValues3 = getDateValues(max),
    _getDateValues4 = _slicedToArray(_getDateValues3, 3),
    maxYear = _getDateValues4[0],
    maxMonth = _getDateValues4[1],
    maxDay = _getDateValues4[2];
  var _React$useMemo = React.useMemo(function () {
      if (minYear === year && maxYear === year) {
        return [minMonth, maxMonth];
      }
      if (minYear >= year) {
        return [minMonth, 11];
      }
      if (maxYear <= year) {
        return [0, maxMonth];
      }
      return [0, 11];
    }, [minMonth, maxMonth, year, minYear, maxYear]),
    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),
    monthsFrom = _React$useMemo2[0],
    monthsTo = _React$useMemo2[1];
  var _React$useMemo3 = React.useMemo(function () {
      if (year >= maxYear && maxMonth === month) {
        return [1, maxDay];
      }
      var maxDayInMonth = getMaxDayInMonth(month, year);
      if (year <= minYear && minMonth === month) {
        return [minDay, maxDayInMonth];
      }
      return [1, maxDayInMonth];
    }, [minMonth, maxMonth, minDay, maxDay, year, month, minYear, maxYear]),
    _React$useMemo4 = _slicedToArray(_React$useMemo3, 2),
    daysFrom = _React$useMemo4[0],
    daysTo = _React$useMemo4[1];
  var _React$useMemo5 = React.useMemo(function () {
      return [getRange(daysFrom, daysTo)];
    }, [daysFrom, daysTo]),
    _React$useMemo6 = _slicedToArray(_React$useMemo5, 1),
    daysRange = _React$useMemo6[0];
  var _React$useMemo7 = React.useMemo(function () {
      return [getRange(monthsFrom, monthsTo)];
    }, [monthsFrom, monthsTo]),
    _React$useMemo8 = _slicedToArray(_React$useMemo7, 1),
    monthsRange = _React$useMemo8[0];
  var _React$useMemo9 = React.useMemo(function () {
      return [getRange(minYear, maxYear)];
    }, [minYear, maxYear]),
    _React$useMemo10 = _slicedToArray(_React$useMemo9, 1),
    yearRange = _React$useMemo10[0];
  var getNextMonth = React.useCallback(function (currentMonth, currentYear) {
    if (currentYear >= maxYear && currentMonth >= maxMonth) {
      return maxMonth;
    }
    if (currentYear <= minYear && currentMonth <= minMonth) {
      return minMonth;
    }
    return currentMonth;
  }, [minMonth, maxMonth, minYear, maxYear]);
  var getNextDay = React.useCallback(function (nextDay, nextMonth, nextYear) {
    if (nextYear >= maxYear && nextMonth >= maxMonth && nextDay >= maxDay) {
      return maxDay;
    }
    if (nextYear <= minYear && nextMonth <= maxMonth && nextDay <= minDay) {
      return minDay;
    }
    var possibleMaxDayInMonth = getMaxDayInMonth(nextMonth, nextYear);
    if (possibleMaxDayInMonth < nextDay) {
      return possibleMaxDayInMonth;
    }
    return nextDay;
  }, [minDay, maxDay, maxMonth, minYear, maxYear]);

  // TODO: https://github.com/salute-developers/plasma/issues/242
  var onYearChange = React.useCallback(function (_ref4) {
    var y = _ref4.value;
    setState(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 3),
        m = _ref6[1],
        d = _ref6[2];
      var nextMonth = getNextMonth(m, y);
      var nextDay = getNextDay(d, nextMonth, y);
      return [y, nextMonth, nextDay];
    });
  }, [getNextDay, getNextMonth]);

  // TODO: https://github.com/salute-developers/plasma/issues/242
  var onMonthChange = React.useCallback(function (_ref7) {
    var m = _ref7.value;
    setState(function (_ref8) {
      var _ref9 = _slicedToArray(_ref8, 3),
        y = _ref9[0],
        d = _ref9[2];
      var nextDay = getNextDay(d, m, y);
      return [y, m, nextDay];
    });
  }, [getNextDay]);
  // TODO: https://github.com/salute-developers/plasma/issues/242
  var onDayChange = React.useCallback(function (_ref10) {
    var d = _ref10.value;
    return setState(function (_ref11) {
      var _ref12 = _slicedToArray(_ref11, 2),
        y = _ref12[0],
        m = _ref12[1];
      return [y, m, d];
    });
  }, []);

  /**
   * При очередном прогоне, если значения year, month, day изменились,
   * необходимо вызвать событие изменения, создав новый экземпляр Date
   */
  useIsomorphicLayoutEffect(function () {
    var oldDate = normalizeValues;
    if (onChange && isChanged(oldDate, [year, month, day])) {
      onChange(_construct(Date, [year, month, day].concat(_toConsumableArray(getTimeValues(value)))));
    }
  }, [year, month, day]);

  /**
   * Если значение value обновилось извне, необходимо изменить стейт
   * и вызвать событие изменения, создав новый экземпляр Date
   */
  useIsomorphicLayoutEffect(function () {
    setState(function (prevDate) {
      var newDate = normalizeValues;
      if (!isChanged(prevDate, newDate)) {
        return prevDate;
      }
      if (onChange) {
        var _newDate = _slicedToArray(newDate, 3),
          newYear = _newDate[0],
          newMonth = _newDate[1],
          newDay = _newDate[2];
        onChange(_construct(Date, [newYear, newMonth, newDay].concat(_toConsumableArray(getTimeValues(value)))));
      }
      return newDate;
    });
  }, [value, normalizeValues]);
  var getOption = function getOption(key) {
    return key in options ? options[key] : defaultOptions[key];
  };
  var daysOption = getOption('days');
  var monthsOption = getOption('months');
  var yearsOption = getOption('years');
  var shortMonthNameOption = getOption('shortMonthName');
  var monthNameFormat = shortMonthNameOption ? 'short' : 'long';
  var newTime = getValuesInRange([yearRange, monthsRange, daysRange], [year, month, day], value);
  if (isChanged([year, month, day], newTime)) {
    setState(newTime);
  }
  return /*#__PURE__*/React.createElement(StyledWrapper, _extends({
    id: id
  }, rest), daysOption && /*#__PURE__*/React.createElement(SimpleDatePicker, {
    id: id,
    autofocus: autofocus,
    size: size,
    type: "day",
    value: day,
    range: daysRange,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onDayChange,
    "aria-label": dayAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign
  }), monthsOption && /*#__PURE__*/React.createElement(SimpleDatePicker, {
    id: id,
    autofocus: autofocus && !options.days,
    size: size,
    type: "month",
    monthNameFormat: monthNameFormat,
    value: month,
    range: monthsRange,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onMonthChange,
    "aria-label": monthAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign
  }), yearsOption && /*#__PURE__*/React.createElement(SimpleDatePicker, {
    id: id,
    autofocus: autofocus && !options.days && !options.months,
    size: size,
    type: "year",
    value: year,
    range: yearRange,
    disabled: disabled,
    controls: controls,
    visibleItems: visibleItems,
    scrollSnapType: scrollSnapType,
    infiniteScroll: infiniteScroll,
    onChange: onYearChange,
    "aria-label": yearAriaLabel,
    disableScrollSnapAlign: disableScrollSnapAlign
  }), enableNativeControl && /*#__PURE__*/React.createElement("input", {
    type: "hidden",
    value: value.toISOString(),
    name: name
  }));
};
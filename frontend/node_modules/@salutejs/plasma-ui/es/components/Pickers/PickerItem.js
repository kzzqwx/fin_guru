var _excluded = ["size", "item", "index", "activeIndex", "noScrollBehavior", "onItemClick", "autofocus", "disabled", "disableScrollSnapAlign"];
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import React, { useEffect } from 'react';
import styled, { css } from 'styled-components';
import { secondary, tertiary, display2, headline1, headline2 } from '@salutejs/plasma-tokens';
import { getStyles } from './utils';
var sizes = {
  l: /*#__PURE__*/_objectSpread( /*#__PURE__*/_objectSpread({}, display2), {}, {
    height: '5rem',
    padding: '0.5rem 0'
  }),
  s: /*#__PURE__*/_objectSpread( /*#__PURE__*/_objectSpread({}, headline1), {}, {
    fontWeight: 600,
    height: '2.25rem',
    padding: 0
  }),
  xs: /*#__PURE__*/_objectSpread( /*#__PURE__*/_objectSpread({}, headline2), {}, {
    height: '1.75rem',
    padding: 0
  })
};
export var StyledPickerItem = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-158n193-0"
})(["position:relative;box-sizing:border-box;display:flex;align-items:center;text-align:center;width:100%;color:", ";cursor:pointer;user-select:none;", " &:focus{outline:0 none;background:none;}", " ", ""], tertiary, function (_ref) {
  var $noScrollBehavior = _ref.$noScrollBehavior,
    $disableScrollSnapAlign = _ref.$disableScrollSnapAlign;
  return !$noScrollBehavior && css(["scroll-snap-align:", ";"], $disableScrollSnapAlign ? 'initial' : 'center');
}, function (_ref2) {
  var isSnapAlwaysStop = _ref2.isSnapAlwaysStop;
  return isSnapAlwaysStop && css(["scroll-snap-stop:always;"]);
}, function (_ref3) {
  var $size = _ref3.$size;
  return sizes[$size];
});

// TODO: https://github.com/salute-developers/plasma/issues/232
var StyledTransformable = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-158n193-1"
})(["width:100%;", " flex-direction:column;", ""], function (_ref4) {
  var $disableScrollSnapAlign = _ref4.$disableScrollSnapAlign;
  return !$disableScrollSnapAlign && css(["height:100%;"]);
}, function (_ref5) {
  var $noScrollBehavior = _ref5.$noScrollBehavior;
  return !$noScrollBehavior && css(["transition:", ";transform:translate3d(0,0,0);"], function (_ref6) {
    var theme = _ref6.theme;
    return theme.lowPerformance ? 'unset' : 'transform 0.1s ease';
  });
});
var StyledText = /*#__PURE__*/styled.span.withConfig({
  componentId: "plasma-ui__sc-158n193-2"
})(["transform:translate3d(0,0,0);"]);
export var StyledWhiteText = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-158n193-3"
})(["position:absolute;top:0;left:0;right:0;bottom:0;color:", ";"], secondary);
export var PickerItem = function PickerItem(_ref7) {
  var _ref7$size = _ref7.size,
    size = _ref7$size === void 0 ? 's' : _ref7$size,
    item = _ref7.item,
    index = _ref7.index,
    activeIndex = _ref7.activeIndex,
    noScrollBehavior = _ref7.noScrollBehavior,
    onItemClick = _ref7.onItemClick,
    autofocus = _ref7.autofocus,
    disabled = _ref7.disabled,
    disableScrollSnapAlign = _ref7.disableScrollSnapAlign,
    rest = _objectWithoutProperties(_ref7, _excluded);
  var itemRef = React.useRef(null);
  /*
   * Выведем стили еще до того, как отработает коллбек стилей.
   * Тут важно, что для `slot` идут целочисленные значения.
   */
  var styles = React.useMemo(function () {
    return getStyles(index - activeIndex, size);
  }, [index, activeIndex, size]);
  var onClick = React.useCallback(function () {
    if (disabled) {
      return;
    }
    onItemClick === null || onItemClick === void 0 || onItemClick(item);
  }, [item, disabled]);
  useEffect(function () {
    if (autofocus && itemRef.current) {
      itemRef.current.focus();
    }
  }, [autofocus]);
  return /*#__PURE__*/React.createElement(StyledPickerItem, _extends({
    $noScrollBehavior: noScrollBehavior,
    $disableScrollSnapAlign: disableScrollSnapAlign,
    ref: itemRef,
    $size: size,
    onClick: onClick
  }, rest), /*#__PURE__*/React.createElement(StyledTransformable, {
    $noScrollBehavior: noScrollBehavior,
    $disableScrollSnapAlign: disableScrollSnapAlign,
    $size: size,
    style: styles.wrapper
  }, /*#__PURE__*/React.createElement(StyledText, {
    style: styles.text
  }, item.label), /*#__PURE__*/React.createElement(StyledWhiteText, {
    style: styles.whiteText,
    "aria-hidden": "true"
  }, item.label)));
};
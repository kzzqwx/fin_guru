var _excluded = ["type", "theme", "size", "offset"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import styled, { css } from 'styled-components';
import { mediaQuery, gridSizes, gridColumns } from '../../utils';
import { sizes, offsets } from './types';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Grid/Col');
// TODO: https://github.com/salute-developers/plasma/issues/232
/**
 * Блок для размещения контента или строк (``Row``) внутри себя.
 *
 * ``<Col type="rel" />`` — предназначается для верстки с страниц. Поведение по умолчанию.
 * Ширина и отступ данного подтипа колонок имеют относительное значение, которое выражается в процентах.
 *
 * ``<Col type="calc" />`` — предназначается для верстки каруселей.
 * Ширина и отступ данного подтипа колонок рассчитываются на основе ширины контейнера и хранятся в ``CSS Variables``.
 * С примером использования можно ознакомиться в документации по [каруселям](/?path=/docs/controls-carousel--basic).
 */
export var Col = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-nqfuxs-0"
})(["box-sizing:border-box;padding-left:var(--plasma-grid-gutter);padding-right:var(--plasma-grid-gutter);", ""], function (_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? 'rel' : _ref$type,
    theme = _ref.theme,
    size = _ref.size,
    offset = _ref.offset,
    props = _objectWithoutProperties(_ref, _excluded);
  return gridSizes.map(function (breakpoint) {
    var bpSize = sizes[breakpoint];
    var bpOffset = offsets[breakpoint];
    var colSize = props[bpSize] || size;
    var colOffset = props[bpOffset] || offset;
    return mediaQuery(breakpoint, theme.deviceScale)(css(["", " ", " ", " ", ""], type === 'rel' && colSize && "width: ".concat(100 / gridColumns[breakpoint] * colSize, "%;"), type === 'rel' && colOffset && "margin-left: ".concat(100 / gridColumns[breakpoint] * colOffset, "%;"), type === 'calc' && colSize && "width: calc(var(--plasma-grid-column-width) * ".concat(colSize, ");"), type === 'calc' && colOffset && "margin-left: calc(var(--plasma-grid-column-width) * ".concat(colOffset, ");")));
  });
});
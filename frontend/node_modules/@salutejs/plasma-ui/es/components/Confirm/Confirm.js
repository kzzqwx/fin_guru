var _ModalOverlayVariable;
import React, { useCallback, useRef } from 'react';
import styled, { css, createGlobalStyle } from 'styled-components';
import { overlay, backgroundPrimary } from '@salutejs/plasma-tokens';
import { ButtonRoot, PopupBaseProvider, endTransitionClass, popupBaseRootClass, ModalBase, modalBaseOverlayClass } from '@salutejs/plasma-core';
import { mediaQuery } from '../../utils';
import { Button } from '../Button';
import { TextBox, TextBoxTitle, TextBoxSubTitle } from '../TextBox';
import { Cell } from '../Cell';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Confirm/Confirm');
var flexDirection = {
  horizontal: 'row',
  'horizontal-reverse': 'row-reverse',
  vertical: 'column',
  'vertical-reverse': 'column-reverse'
};
var marginByDirection = {
  horizontal: 'margin-right',
  'horizontal-reverse': 'margin-left',
  vertical: 'margin-bottom',
  'vertical-reverse': 'margin-top'
};
var ModalOverlayVariables = /*#__PURE__*/createGlobalStyle(["body{--plasma-modal-overlay-color:", ";}"], overlay);
var tvLayout = /*#__PURE__*/css(["display:flex;flex-direction:row;justify-content:space-between;align-items:center;"]);
var StyledButton = /*#__PURE__*/styled(Button).withConfig({
  componentId: "plasma-ui__sc-qi6do9-0"
})([""]);

// TODO: https://github.com/salute-developers/plasma/issues/232
var ConfirmRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-1"
})(["", ";"], function (_ref) {
  var stretch = _ref.stretch;
  return stretch && {
    width: '100vw'
  };
});
var ConfirmContainer = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-2"
})(["margin:1rem 1rem 0;padding:0.75rem;border-radius:1.25rem;background-color:", ";"], backgroundPrimary);
var ConfirmMain = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-3"
})(["", " ", "{white-space:pre-line;}", "{white-space:pre-line;}"], function (_ref2) {
  var theme = _ref2.theme;
  return css(["", " ", " ", ""], mediaQuery('M', theme.deviceScale)(tvLayout), mediaQuery('L', theme.deviceScale)(tvLayout), mediaQuery('XL', theme.deviceScale)(tvLayout));
}, TextBoxTitle, TextBoxSubTitle);
var ConfirmFooter = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-4"
})(["margin-left:1rem;margin-right:1rem;max-width:100%;"]);
var handleFlexDirection = function handleFlexDirection(_ref3) {
  var reverse = _ref3.reverse,
    direction = _ref3.direction;
  if (reverse) {
    return flexDirection['horizontal-reverse'];
  }
  return flexDirection[direction];
};
var handleMarginByDirection = function handleMarginByDirection(_ref4) {
  var direction = _ref4.direction,
    reverse = _ref4.reverse;
  var margin = reverse ? marginByDirection['horizontal-reverse'] : marginByDirection[direction];
  return css(["", ":0.5rem;"], margin);
};
var BtnWrap = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qi6do9-5"
})(["flex:1;display:flex;flex-direction:", ";", ":not(:last-child){", "}", "{min-width:0;}"], handleFlexDirection, StyledButton, handleMarginByDirection, ButtonRoot);

// TODO: https://github.com/salute-developers/plasma/issues/232
var StyledCell = /*#__PURE__*/styled(Cell).withConfig({
  componentId: "plasma-ui__sc-qi6do9-6"
})(["flex:1;", " & > div{padding:0;}"], function (_ref5) {
  var theme = _ref5.theme;
  return mediaQuery('S', theme.deviceScale)(css(["margin-bottom:0.75rem;"]));
});
var StyledModal = /*#__PURE__*/styled(ModalBase).withConfig({
  componentId: "plasma-ui__sc-qi6do9-7"
})(["& > .", ",.", "{opacity:1;transition:", ";}&.", " > .", "{opacity:0;}&.", " > .", "{opacity:0;}"], popupBaseRootClass, modalBaseOverlayClass, function (_ref6) {
  var theme = _ref6.theme;
  return theme.lowPerformance ? 'unset' : 'opacity 0.5s 0.1s';
}, endTransitionClass, popupBaseRootClass, endTransitionClass, modalBaseOverlayClass);

/**
 * Сообщение подтверждения действия пользователя.
 */
export var Confirm = function Confirm(props) {
  var title = props.title,
    subtitle = props.subtitle,
    visible = props.visible,
    _props$stretch = props.stretch,
    stretch = _props$stretch === void 0 ? true : _props$stretch,
    approveText = props.approveText,
    dismissText = props.dismissText,
    _props$view = props.view,
    view = _props$view === void 0 ? 'secondary' : _props$view,
    _props$reverseButtons = props.reverseButtons,
    reverseButtons = _props$reverseButtons === void 0 ? false : _props$reverseButtons,
    extraContent = props.extraContent,
    onApprove = props.onApprove,
    onDismiss = props.onDismiss,
    _props$buttonsDirecti = props.buttonsDirection,
    buttonsDirection = _props$buttonsDirecti === void 0 ? 'horizontal' : _props$buttonsDirecti,
    _props$placement = props.placement,
    placement = _props$placement === void 0 ? 'top' : _props$placement,
    _props$offset = props.offset,
    offset = _props$offset === void 0 ? [0, 0] : _props$offset;
  var onApproveClick = useCallback(function () {
    onApprove();
  }, [onApprove]);
  var onDismissClick = useCallback(function () {
    onDismiss && onDismiss();
  }, [onDismiss]);
  var btnRef = useRef(null);
  var approve = /*#__PURE__*/React.createElement(StyledButton, {
    size: "s",
    ref: btnRef,
    tabIndex: 0,
    stretch: true,
    view: view,
    text: approveText,
    onClick: onApproveClick
  });
  var dismiss = dismissText ? /*#__PURE__*/React.createElement(StyledButton, {
    size: "s",
    stretch: true,
    view: "secondary",
    text: dismissText,
    onClick: onDismissClick
  }) : null;
  var buttons = /*#__PURE__*/React.createElement(BtnWrap, {
    reverse: reverseButtons,
    direction: buttonsDirection
  }, dismiss, approve);
  return /*#__PURE__*/React.createElement(PopupBaseProvider, null, _ModalOverlayVariable || (_ModalOverlayVariable = /*#__PURE__*/React.createElement(ModalOverlayVariables, null)), /*#__PURE__*/React.createElement(StyledModal, {
    isOpen: visible,
    withAnimation: true,
    onOverlayClick: onDismissClick,
    zIndex: "1000",
    initialFocusRef: btnRef,
    placement: placement,
    offset: offset
  }, /*#__PURE__*/React.createElement(ConfirmRoot, {
    visible: true,
    stretch: stretch
  }, /*#__PURE__*/React.createElement(ConfirmContainer, null, /*#__PURE__*/React.createElement(ConfirmMain, null, /*#__PURE__*/React.createElement(StyledCell, {
    content: /*#__PURE__*/React.createElement(TextBox, {
      title: title,
      subTitle: subtitle
    })
  }), buttons)), /*#__PURE__*/React.createElement(ConfirmFooter, null, extraContent))));
};
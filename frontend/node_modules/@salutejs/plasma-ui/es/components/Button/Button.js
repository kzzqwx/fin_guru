function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { createButton, ButtonRoot, applyNoSelect } from '@salutejs/plasma-core';
import { applyInteraction } from '../../mixins';
import { useThemeContext } from '../../hooks';
import { spatnavClassNameAttrs } from '../../utils';
import { applySizes, applyViews } from './Button.mixins';
import { sizes } from './Button.sizes';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Button/Button');
var StyledButtonRoot = /*#__PURE__*/styled(ButtonRoot).attrs(spatnavClassNameAttrs).withConfig({
  componentId: "plasma-ui__sc-vm1boz-0"
})(["", " ", " ", " ", " ", ""], sizes, applySizes, applyViews, applyInteraction, applyNoSelect);

/**
 * Основной компонент для отображения кнопок.
 * Поддерживает несколько режимов отображения (`view`) и размеров (`size`).
 */
var ButtonBase = /*#__PURE__*/createButton(StyledButtonRoot);
export var Button = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useThemeContext = useThemeContext(),
    deviceScale = _useThemeContext.deviceScale;
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({}, props, {
    ref: ref,
    deviceScale: deviceScale
  }));
});
Button.defaultProps = {
  size: 'l',
  view: 'secondary',
  pin: 'square-square',
  outlined: true,
  scaleOnInteraction: true
};
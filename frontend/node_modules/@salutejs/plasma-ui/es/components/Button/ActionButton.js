function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { createButton, ButtonRoot, getButtonSizesMixin, buttonViews, applyNoSelect, button2, caption } from '@salutejs/plasma-core';
import { useThemeContext } from '../../hooks';
import { applyInteraction } from '../../mixins';
import { sizes } from './ActionButton.sizes';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Button/ActionButton'); // INFO: Omit 'onResize' | 'onResizeCapture' | 'nonce'
// because this types coming with @types/react@18 and breaks react@17.0.2 with @types/react@18
var buttonSizes = {
  l: {
    height: 'var(--plasma-actionbutton-l-height)',
    paddingY: 'var(--plasma-actionbutton-l-padding-y)',
    paddingX: 'var(--plasma-actionbutton-l-padding-x)',
    paddingContentX: 'var(--plasma-actionbutton-l-padding-content-x)',
    paddingStretchX: 'var(--plasma-actionbutton-l-padding-stretch-x)',
    radius: 'var(--plasma-actionbutton-l-radius)',
    radiusCircle: 'var(--plasma-actionbutton-l-radius-circle)'
  },
  m: {
    height: 'var(--plasma-actionbutton-m-height)',
    paddingY: 'var(--plasma-actionbutton-m-padding-y)',
    paddingX: 'var(--plasma-actionbutton-m-padding-x)',
    paddingContentX: 'var(--plasma-actionbutton-m-padding-content-x)',
    paddingStretchX: 'var(--plasma-actionbutton-m-padding-stretch-x)',
    radius: 'var(--plasma-actionbutton-m-radius)',
    radiusCircle: 'var(--plasma-actionbutton-m-radius-circle)'
  },
  s: {
    height: 'var(--plasma-actionbutton-s-height)',
    paddingY: 'var(--plasma-actionbutton-s-padding-y)',
    paddingX: 'var(--plasma-actionbutton-s-padding-x)',
    paddingContentX: 'var(--plasma-actionbutton-s-padding-content-x)',
    paddingStretchX: 'var(--plasma-actionbutton-s-padding-stretch-x)',
    radius: 'var(--plasma-actionbutton-s-radius)',
    radiusCircle: 'var(--plasma-actionbutton-s-radius-circle)'
  }
};
var buttonTypography = {
  xs: button2,
  xxs: caption,
  xxxs: caption
};
var applySizes = /*#__PURE__*/getButtonSizesMixin(buttonSizes, buttonTypography);
var applyViews = function applyViews(_ref) {
  var view = _ref.view;
  return buttonViews[view];
};
var StyledButtonRoot = /*#__PURE__*/styled(ButtonRoot).withConfig({
  componentId: "plasma-ui__sc-1cy29p1-0"
})(["", " ", " ", " ", " ", ""], sizes, applySizes, applyViews, applyInteraction, applyNoSelect);

/**
 * Кнопка для размещения внутри карточек.
 * Упрощенная версия ``Button`` для создания квадратных кнопок (с соотношением сторон 1:1).
 * Размеры ``ActionButton`` меньше размеров ``Button``.
 * Обладает теми же цветами, размерами и модификаторами, что и основная кнопка.
 */
var ButtonBase = /*#__PURE__*/createButton(StyledButtonRoot);
export var ActionButton = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useThemeContext = useThemeContext(),
    deviceScale = _useThemeContext.deviceScale;
  return /*#__PURE__*/React.createElement(ButtonBase, _extends({}, props, {
    ref: ref,
    deviceScale: deviceScale
  }));
});
ActionButton.defaultProps = {
  size: 'm',
  view: 'secondary',
  pin: 'square-square',
  square: true,
  outlined: true,
  scaleOnInteraction: true
};
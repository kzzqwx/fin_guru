function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import throttle from 'lodash.throttle';
import { useEffect, useRef, useState } from 'react';
var SWIPE_THRESHOLD = 0.2;
var THROTTLE_DEFAULT_MS = 0;
var isScrollable = function isScrollable(element) {
  if (!element) {
    return false;
  }
  var style = getComputedStyle(element);
  return style.overflow === 'scroll' || style.overflow === 'auto' || style.overflowY === 'scroll' || style.overflowY === 'auto';
};
export var useSheetSwipe = function useSheetSwipe(args) {
  var contentWrapperRef = args.contentWrapperRef,
    contentRef = args.contentRef,
    handleRef = args.handleRef,
    onClose = args.onClose,
    _args$throttleMs = args.throttleMs,
    throttleMs = _args$throttleMs === void 0 ? THROTTLE_DEFAULT_MS : _args$throttleMs;
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    isTopScroll = _useState2[0],
    setIsTopScroll = _useState2[1];
  var isOverscroll = useRef(false);
  var startY = useRef(0);
  var currentY = useRef(0);
  useEffect(function () {
    var contentWrapperEl = contentWrapperRef.current;
    var handleEl = handleRef.current;
    var contentEl = contentRef.current;
    var triggerElement = !isTopScroll ? handleEl : contentWrapperEl;
    if (!triggerElement || !contentEl || !contentWrapperEl) {
      return;
    }
    var nodes = Array.from(contentWrapperEl.querySelectorAll('*'));
    var scrollableElements = nodes.filter(isScrollable);
    contentWrapperEl.style.willChange = 'transform';
    var onTouchStart = function onTouchStart(event) {
      isOverscroll.current = false;
      startY.current = event.changedTouches[0].clientY;
      currentY.current = startY.current;
      contentWrapperEl.style.transition = 'none';
    };
    var onTouchMove = function onTouchMove(event) {
      var clientY = event.changedTouches[0].clientY;
      currentY.current = Math.max(startY.current, clientY);
      var offsetY = currentY.current - startY.current;
      if (isOverscroll.current) {
        startY.current = Infinity;
        return;
      }
      if (offsetY !== 0 && event.cancelable) {
        event.preventDefault();
      }
      contentWrapperEl.style.transform = "translateY(".concat(offsetY, "px)");
    };
    var onTouchEnd = function onTouchEnd(event) {
      isOverscroll.current = false;
      var curtainHeight = contentWrapperEl.offsetHeight;
      var endY = event.changedTouches[0].clientY;
      var offsetY = endY - startY.current;
      contentWrapperEl.style.transform = '';
      contentWrapperEl.style.transition = '';
      if (offsetY / curtainHeight > SWIPE_THRESHOLD) {
        onClose();
      }
    };
    var onScroll = throttle(function (event) {
      var onTop = event.target.scrollTop <= 0;
      if (!onTop) {
        isOverscroll.current = true;
      }
      setIsTopScroll(onTop);
    }, throttleMs);
    triggerElement.addEventListener('touchstart', onTouchStart);
    triggerElement.addEventListener('touchmove', onTouchMove);
    triggerElement.addEventListener('touchend', onTouchEnd);
    scrollableElements.forEach(function (element) {
      element.addEventListener('scroll', onScroll);
    });
    return function () {
      triggerElement.removeEventListener('touchstart', onTouchStart);
      triggerElement.removeEventListener('touchmove', onTouchMove);
      triggerElement.removeEventListener('touchend', onTouchEnd);
      scrollableElements.forEach(function (element) {
        element.removeEventListener('scroll', onScroll);
      });
    };
  }, [isTopScroll]);
};
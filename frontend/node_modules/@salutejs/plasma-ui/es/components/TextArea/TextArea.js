var _excluded = ["id", "disabled", "status", "label", "placeholder", "contentRight", "helperText", "style", "className"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useRef, useState } from 'react';
import styled from 'styled-components';
import { FieldRoot, FieldContent, TextArea as BaseArea } from '@salutejs/plasma-core';
import { FieldHelper, applyInputStyles } from '../Field';
import { spatnavClassNameAttrs } from '../../utils';
import { useForkRef, useResizeObserver } from '../../hooks';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('TextArea/TextArea');
var StyledTextArea = /*#__PURE__*/styled(BaseArea).attrs(spatnavClassNameAttrs).withConfig({
  componentId: "plasma-ui__sc-qulw5x-0"
})(["", " border-radius:1rem;"], applyInputStyles);
var StyledFieldHelperWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qulw5x-1"
})(["width:", "px;"], function (_ref) {
  var width = _ref.width;
  return width;
});
var StyledFieldContentWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-qulw5x-2"
})(["position:absolute;top:0;width:", "px;"], function (_ref2) {
  var width = _ref2.width;
  return width;
});
/**
 * Поле ввода многострочного текста.
 */
// eslint-disable-next-line prefer-arrow-callback
export var TextArea = /*#__PURE__*/forwardRef(function TextArea(_ref3, ref) {
  var id = _ref3.id,
    disabled = _ref3.disabled,
    status = _ref3.status,
    label = _ref3.label,
    placeholder = _ref3.placeholder,
    contentRight = _ref3.contentRight,
    helperText = _ref3.helperText,
    style = _ref3.style,
    className = _ref3.className,
    rest = _objectWithoutProperties(_ref3, _excluded);
  var inputRef = useRef(null);
  var forkRef = useForkRef(inputRef, ref);
  var placeLabel = label || placeholder;
  var _useState = useState(0),
    _useState2 = _slicedToArray(_useState, 2),
    helperWidth = _useState2[0],
    setHelperWidth = _useState2[1];
  useResizeObserver(inputRef, function (currentElement) {
    var _currentElement$getBo = currentElement.getBoundingClientRect(),
      elementWidth = _currentElement$getBo.width;
    setHelperWidth(elementWidth);
  });
  return /*#__PURE__*/React.createElement(FieldRoot, {
    $disabled: disabled,
    $isContentRight: Boolean(contentRight),
    $isHelper: Boolean(helperText),
    status: status,
    style: style,
    className: className,
    "aria-describedby": id ? "".concat(id, "-helpertext") : undefined
  }, /*#__PURE__*/React.createElement(StyledTextArea, _extends({
    ref: forkRef,
    id: id,
    placeholder: placeLabel,
    disabled: disabled,
    status: status
  }, rest)), contentRight && /*#__PURE__*/React.createElement(StyledFieldContentWrapper, {
    width: helperWidth
  }, /*#__PURE__*/React.createElement(FieldContent, {
    pos: "right"
  }, contentRight)), helperText && /*#__PURE__*/React.createElement(StyledFieldHelperWrapper, {
    width: helperWidth
  }, /*#__PURE__*/React.createElement(FieldHelper, {
    id: id ? "".concat(id, "-helpertext") : undefined
  }, helperText)));
});
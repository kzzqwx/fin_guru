var _excluded = ["isActive", "scrollSnapAlign", "item"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import styled from 'styled-components';
import { MusicCard } from '../Card/Card.examples';
import { CarouselCol } from '.';
var scaleDelta = 0.37;

// TODO: https://github.com/salute-developers/plasma/issues/232
var StyledColInner = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-g4m118-0"
})(["transition:", ";"], function (_ref) {
  var theme = _ref.theme;
  return theme.lowPerformance ? 'unset' : 'transform 0.1s ease 0s';
});
var StyledMusicCard = /*#__PURE__*/styled(MusicCard).withConfig({
  componentId: "plasma-ui__sc-g4m118-1"
})(["transition:", ";"], function (_ref2) {
  var theme = _ref2.theme;
  return theme.lowPerformance ? 'unset' : 'transform 0.1s ease 0s';
});

/**
 * Функция сброса стилей элементов вне вьюпорта
 */
export var scaleResetCallback = function scaleResetCallback(itemEl) {
  if (itemEl.children[0]) {
    var inner = itemEl.children[0];
    var card = inner.children[0];
    inner.style.transform = '';
    card.style.transform = '';
  }
};

/**
 * Функция увеличения центрального элемента
 */
export var scaleCallback = function scaleCallback(itemEl, slot) {
  var absSlot = Math.abs(slot);
  var scaleSlot = 1 - absSlot;
  /**
   * Чем ближе к центру - тем больше
   */
  var cardScale = absSlot <= 1 ? 1 + scaleDelta * scaleSlot : 1;
  var cardOffset = (absSlot <= 1 ? scaleDelta * scaleSlot : 0) * itemEl.offsetHeight / -3;
  /**
   * Чем дальше от центра - тем больше прозрачности
   */
  var innerOffset = scaleDelta * Math.min(absSlot, 1) * Math.sign(slot) * itemEl.offsetWidth / 2;
  if (itemEl.children[0]) {
    var inner = itemEl.children[0];
    var card = inner.children[0];
    inner.style.transform = "translate3d(".concat(innerOffset, "px,0,0)");
    card.style.transform = "scale(".concat(cardScale, ") translate3d(0,").concat(cardOffset, "px,0)");
  }
};
export var ScalingColCard = function ScalingColCard(_ref3) {
  var isActive = _ref3.isActive,
    scrollSnapAlign = _ref3.scrollSnapAlign,
    item = _ref3.item,
    rest = _objectWithoutProperties(_ref3, _excluded);
  return /*#__PURE__*/React.createElement(CarouselCol, _extends({
    size: 2,
    sizeM: 1.5,
    scrollSnapAlign: scrollSnapAlign
  }, rest), /*#__PURE__*/React.createElement(StyledColInner, null, /*#__PURE__*/React.createElement(StyledMusicCard, {
    title: item.title,
    focused: isActive,
    imageSrc: item.imageSrc,
    imageRatio: "1 / 1",
    textAlign: "center"
  })));
};
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { useRef, useCallback } from 'react';
import { CarouselItemVirtual } from '@salutejs/plasma-core';
import { useVirtual } from '@salutejs/use-virtual';
import { Row } from '../Grid';
import { CarouselGridWrapper, Carousel, CarouselLite, CarouselVirtual, CarouselItem, CarouselCol, useRemoteHandlers } from '.';
var items = /*#__PURE__*/Array(100).fill({
  title: 'Заголовок',
  subtitle: 'Описание уравнение времени, сублимиpуя с повеpхности ядpа кометы, вращает реликтовый ледник',
  imageSrc: '/images/320_320_n.jpg'
}).map(function (_ref, i) {
  var title = _ref.title,
    subtitle = _ref.subtitle,
    imageSrc = _ref.imageSrc;
  return {
    id: "slide_".concat(i),
    title: "".concat(title, " ").concat(i),
    subtitle: "".concat(subtitle, " ").concat(i),
    imageSrc: imageSrc.replace('n', i % 12)
  };
});
var basicCarouselStyle = {
  paddingTop: '1.25rem',
  paddingBottom: '1.25rem'
};
var basicProps = {
  displayGrid: true,
  animatedScrollByIndex: true,
  scrollAlign: 'start',
  scrollSnapType: 'mandatory',
  scrollSnapAlign: 'start',
  detectActive: true,
  detectThreshold: 0.5
};
export var Basic = function Basic() {
  var animatedScrollByIndex = basicProps.animatedScrollByIndex,
    scrollAlign = basicProps.scrollAlign,
    scrollSnapType = basicProps.scrollSnapType,
    scrollSnapAlign = basicProps.scrollSnapAlign,
    detectActive = basicProps.detectActive,
    detectThreshold = basicProps.detectThreshold;
  var axis = 'x';
  var delay = 30;
  var longDelay = 150;
  var _useRemoteHandlers = useRemoteHandlers({
      initialIndex: 0,
      axis: axis,
      delay: delay,
      longDelay: longDelay,
      min: 0,
      max: items.length - 1
    }),
    _useRemoteHandlers2 = _slicedToArray(_useRemoteHandlers, 2),
    index = _useRemoteHandlers2[0],
    setIndex = _useRemoteHandlers2[1];
  return /*#__PURE__*/React.createElement(CarouselGridWrapper, null, /*#__PURE__*/React.createElement(Carousel, {
    id: "carousel",
    as: Row,
    axis: axis,
    index: index,
    animatedScrollByIndex: animatedScrollByIndex,
    scrollAlign: scrollAlign,
    scrollSnapType: scrollSnapType,
    detectActive: detectActive,
    detectThreshold: detectThreshold,
    onIndexChange: setIndex,
    style: basicCarouselStyle
  }, items.map(function (_ref2, i) {
    var title = _ref2.title,
      subtitle = _ref2.subtitle;
    return /*#__PURE__*/React.createElement(CarouselCol, {
      key: "item:".concat(i),
      size: 3,
      sizeXL: 4,
      scrollSnapAlign: scrollSnapAlign,
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length),
      "aria-selected": i === index
    }, title, subtitle);
  })));
};
var carouselItemWidth = 450;
var carouselVirtualStyle = {
  paddingTop: '1.25rem',
  paddingBottom: '1.25rem',
  height: '22rem'
};
var carouselItemVirtualStyle = {
  width: /*#__PURE__*/"".concat(carouselItemWidth, "px")
};
export var CarouselVirtualBasic = function CarouselVirtualBasic() {
  // INFO: deviceScale = 1 (Mobile), deviceScale = 2 (Sberbox, TV, Portal)
  var parentRef = useRef(null);
  var axis = 'x';
  var gap = 40;
  var _useVirtual = useVirtual({
      itemCount: 100,
      parentRef: parentRef,
      axis: axis,
      // estimateSize должен возвращать значение в px.
      estimateSize: useCallback(function () {
        return carouselItemWidth + gap;
      }, [carouselItemWidth, gap]),
      overscan: 6
    }),
    visibleItems = _useVirtual.visibleItems,
    totalSize = _useVirtual.totalSize;
  return /*#__PURE__*/React.createElement(CarouselGridWrapper, null, /*#__PURE__*/React.createElement(CarouselVirtual, {
    ref: parentRef,
    as: Row,
    axis: axis,
    style: carouselVirtualStyle,
    virtualSize: totalSize
  }, visibleItems.map(function (_ref3) {
    var i = _ref3.index,
      start = _ref3.start;
    var _items$i = items[i],
      title = _items$i.title,
      subtitle = _items$i.subtitle;
    return /*#__PURE__*/React.createElement(CarouselItemVirtual, {
      key: "item:".concat(i),
      left: start,
      style: carouselItemVirtualStyle,
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length)
    }, title, subtitle);
  })));
};
var verticalStyle = {
  height: '100vh',
  maxHeight: '40rem',
  width: '100%',
  maxWidth: '22.5rem',
  margin: '0 auto',
  padding: '0.75rem'
};
var verticalCarouselItemStyle = {
  padding: '0.75rem 0'
};
export var Vertical = function Vertical() {
  var animatedScrollByIndex = basicProps.animatedScrollByIndex,
    scrollAlign = basicProps.scrollAlign,
    scrollSnapType = basicProps.scrollSnapType,
    scrollSnapAlign = basicProps.scrollSnapAlign,
    detectActive = basicProps.detectActive,
    detectThreshold = basicProps.detectThreshold;
  var axis = 'y';
  var _useRemoteHandlers3 = useRemoteHandlers({
      initialIndex: 0,
      axis: axis,
      delay: 30,
      longDelay: 150,
      min: 0,
      max: items.length - 1
    }),
    _useRemoteHandlers4 = _slicedToArray(_useRemoteHandlers3, 2),
    index = _useRemoteHandlers4[0],
    setIndex = _useRemoteHandlers4[1];
  return /*#__PURE__*/React.createElement(Carousel, {
    id: "carousel",
    axis: axis,
    index: index,
    animatedScrollByIndex: animatedScrollByIndex,
    scrollAlign: scrollAlign,
    scrollSnapType: scrollSnapType,
    detectActive: detectActive,
    detectThreshold: detectThreshold,
    onIndexChange: setIndex,
    paddingStart: "50%",
    paddingEnd: "50%",
    style: verticalStyle
  }, items.map(function (_ref4, i) {
    var title = _ref4.title,
      subtitle = _ref4.subtitle;
    return /*#__PURE__*/React.createElement(CarouselItem, {
      key: "item:".concat(i),
      scrollSnapAlign: scrollSnapAlign,
      style: verticalCarouselItemStyle,
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length),
      "aria-selected": i === index
    }, title, subtitle);
  }));
};
var carouselLiteBasicProps = {
  displayGrid: true,
  scrollAlign: 'start',
  scrollSnapType: 'mandatory',
  scrollSnapAlign: 'start'
};
export var CarouselLiteBasic = function CarouselLiteBasic() {
  var scrollAlign = carouselLiteBasicProps.scrollAlign,
    scrollSnapType = carouselLiteBasicProps.scrollSnapType,
    scrollSnapAlign = carouselLiteBasicProps.scrollSnapAlign;
  var axis = 'x';
  var delay = 30;
  var longDelay = 150;
  var _useRemoteHandlers5 = useRemoteHandlers({
      initialIndex: 40,
      axis: axis,
      delay: delay,
      longDelay: longDelay,
      min: 0,
      max: items.length - 1
    }),
    _useRemoteHandlers6 = _slicedToArray(_useRemoteHandlers5, 1),
    index = _useRemoteHandlers6[0];
  return /*#__PURE__*/React.createElement(CarouselGridWrapper, null, /*#__PURE__*/React.createElement(CarouselLite, {
    id: "carousel-lite",
    as: Row,
    axis: axis,
    index: index,
    scrollAlign: scrollAlign,
    scrollSnapType: scrollSnapType,
    style: basicCarouselStyle
  }, items.map(function (_ref5, i) {
    var title = _ref5.title,
      subtitle = _ref5.subtitle;
    return /*#__PURE__*/React.createElement(CarouselCol, {
      key: "item:".concat(i),
      size: 3,
      sizeXL: 4,
      scrollSnapAlign: scrollSnapAlign,
      "aria-label": "".concat(i + 1, " \u0438\u0437 ").concat(items.length),
      "aria-selected": i === index
    }, title, subtitle);
  })));
};
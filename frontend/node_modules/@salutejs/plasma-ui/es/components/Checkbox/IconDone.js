var _path;
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React from 'react';
import styled, { css } from 'styled-components';

/**
 * Локальная копия иконки Done, полная сборка
 */

var sizeMap = {
  xs: 1,
  // 16px
  s: 1.5 // 24px
};
var Done = function Done(props) {
  return /*#__PURE__*/React.createElement("svg", _extends({
    width: "100%",
    viewBox: "0 0 24 24",
    fill: "none"
  }, props), _path || (_path = /*#__PURE__*/React.createElement("path", {
    d: "M9 16.2l-3.5-3.5a.984.984 0 00-1.4 0 .984.984 0 000 1.4l4.19 4.19c.39.39 1.02.39 1.41 0L20.3 7.7a.984.984 0 000-1.4.984.984 0 00-1.4 0L9 16.2z",
    fill: "currentColor"
  })));
};
var StyledRoot = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-8sgmmk-0"
})(["display:inline-flex;", ""], function (_ref) {
  var w = _ref.w;
  return css(["width:", ";height:", ";"], w, w);
});
export var IconDone = function IconDone(_ref2) {
  var _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? 's' : _ref2$size,
    color = _ref2.color,
    className = _ref2.className;
  return /*#__PURE__*/React.createElement(StyledRoot, {
    w: "".concat(sizeMap[size], "rem"),
    className: className
  }, /*#__PURE__*/React.createElement(Done, {
    color: color,
    size: size
  }));
};
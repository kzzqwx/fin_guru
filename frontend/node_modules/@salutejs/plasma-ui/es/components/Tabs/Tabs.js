var _excluded = ["children"],
  _excluded2 = ["index"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useMemo } from 'react';
import { TabsView } from './TabsView';
import { TabItemRefs, TabsAnimationContext } from './TabsAnimationContext';
import { TabsSlider } from './TabsSlider';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Tabs/Tabs');
var isAnimatedProps = function isAnimatedProps(props) {
  return props.animated === true;
};

/**
 * Контейнер вкладок со слайдером
 */
// eslint-disable-next-line prefer-arrow-callback
export var Tabs = /*#__PURE__*/forwardRef(function Tabs(_ref, ref) {
  var children = _ref.children,
    props = _objectWithoutProperties(_ref, _excluded);
  var refs = useMemo(function () {
    return new TabItemRefs();
  }, []);
  if (!isAnimatedProps(props)) {
    return /*#__PURE__*/React.createElement(TabsView, _extends({
      ref: ref
    }, props), children);
  }
  var index = props.index,
    rest = _objectWithoutProperties(props, _excluded2);
  var childrenArray = React.Children.toArray(children);
  var animatedChildren = childrenArray.map(function (child) {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      return /*#__PURE__*/React.cloneElement(child, {
        disabled: rest.disabled,
        animated: true
      });
    }
    return child;
  });
  return /*#__PURE__*/React.createElement(TabsAnimationContext.Provider, {
    value: refs
  }, /*#__PURE__*/React.createElement(TabsView, _extends({
    ref: ref
  }, rest), animatedChildren, /*#__PURE__*/React.createElement(TabsSlider, {
    index: index,
    disabled: rest.disabled
  })));
});
var _excluded = ["index"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useState } from 'react';
import styled, { css } from 'styled-components';
import { surfaceCard } from '@salutejs/plasma-core';
import { useTabsAnimationContext } from './TabsAnimationContext';
export var activeItemStyle = /*#__PURE__*/css(["background-color:", ";box-shadow:0 0.0625rem 0.25rem rgba(0,0,0,0.05);"], surfaceCard);

// https://github.com/salute-developers/plasma/issues/232
export var StyledSlider = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-1kvn87y-0"
})(["position:absolute;z-index:-1;min-width:0%;border-radius:var(--tab-item-border-radius);transition:", ";", ";pointer-events:none;"], function (_ref) {
  var disabled = _ref.disabled,
    theme = _ref.theme;
  return disabled || theme.lowPerformance ? 'unset' : 'left 0.2s ease-in-out, width 0.2s ease-in-out';
}, activeItemStyle);

/**
 * Слайдер переключения табов
 */
export var TabsSlider = function TabsSlider(_ref2) {
  var index = _ref2.index,
    rest = _objectWithoutProperties(_ref2, _excluded);
  var _useState = useState({
      left: 0,
      width: 0,
      height: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    dimensions = _useState2[0],
    setDimensions = _useState2[1];
  var refs = useTabsAnimationContext();
  useEffect(function () {
    if (!refs || index === undefined) {
      return;
    }
    var activeTab = refs.items[index].current;
    if (!activeTab) {
      return;
    }
    var resizeObserver = new window.ResizeObserver(function () {
      var style = getComputedStyle(activeTab);
      setDimensions({
        width: activeTab.offsetWidth,
        left: activeTab.offsetLeft - parseInt(style.marginLeft, 10),
        height: activeTab.offsetHeight
      });
    });
    resizeObserver.observe(activeTab, {
      box: 'border-box'
    });
    return function () {
      resizeObserver.unobserve(activeTab);
    };
  }, [index]);
  return /*#__PURE__*/React.createElement(StyledSlider, _extends({
    style: dimensions
  }, rest));
};
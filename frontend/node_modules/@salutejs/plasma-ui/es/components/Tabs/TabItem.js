function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useRef, useEffect, forwardRef } from 'react';
import styled, { css } from 'styled-components';
import { TabItem as BaseTabItem, button2, buttonFocused, useForkRef } from '@salutejs/plasma-core';
import { useTabsAnimationContext } from './TabsAnimationContext';
import { StyledSlider, activeItemStyle } from './TabsSlider';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Tabs/TabItem');
// TODO: https://github.com/salute-developers/plasma/issues/232
/**
 * Элемент списка, недопустимо использовать вне компонента Tabs.
 */
export var StyledTabItem = /*#__PURE__*/styled(BaseTabItem).withConfig({
  componentId: "plasma-ui__sc-1ndbynx-0"
})(["", ";position:relative;height:var(--tab-item-height);padding:var(--tab-item-padding-y) var(--tab-item-padding-x);border-radius:var(--tab-item-border-radius);transition:", ";&:active ~ ", "{transform:", ";}", " &::before{content:'';position:absolute;top:calc(var(--tab-focus-border-size) * -1);left:calc(var(--tab-focus-border-size) * -1);right:calc(var(--tab-focus-border-size) * -1);bottom:calc(var(--tab-focus-border-size) * -1);display:block;box-sizing:content-box;border:var(--tab-focus-border-size) solid transparent;border-radius:var(--tab-item-outline-radius);transition:", ";pointer-events:none;}&.focus-visible,&[data-focus-visible-added]{&::before{box-shadow:0 0 0 var(--tab-focus-border-size) ", ";}}"], button2, function (_ref) {
  var theme = _ref.theme;
  return theme.lowPerformance ? 'unset' : 'background-color 0.3s ease-in-out, transform 0.1s ease-in-out';
}, StyledSlider, function (_ref2) {
  var disabled = _ref2.disabled;
  return disabled ? 'none' : 'scale(0.96)';
}, function (_ref3) {
  var animated = _ref3.animated,
    isActive = _ref3.isActive;
  return !animated && isActive && css(["", ""], activeItemStyle);
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.lowPerformance ? 'unset' : 'box-shadow 0.2s ease-in-out';
}, buttonFocused);
export var StyledTabItemMemo = /*#__PURE__*/React.memo(StyledTabItem);

/**
 * Элемент списка вкладок, недопустимо использовать вне компонента Tabs.
 */
export var TabItem = /*#__PURE__*/forwardRef(function (props, outerRef) {
  var innerRef = useRef(null);
  var ref = useForkRef(outerRef, innerRef);
  var refs = useTabsAnimationContext();
  useEffect(function () {
    if (!refs) {
      return;
    }
    refs.register(innerRef);
    return function () {
      return refs.unregister(innerRef);
    };
  }, [ref, refs]);
  return /*#__PURE__*/React.createElement(StyledTabItemMemo, _extends({
    ref: ref
  }, props));
});
var _excluded = ["arrow", "onArrowClick", "logo", "logoAlt", "title", "subTitle", "hideSubtitleOnMobile", "children"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { HeaderRoot } from './HeaderRoot';
import { HeaderArrow } from './HeaderArrow';
import { HeaderLogo } from './HeaderLogo';
import { HeaderSubtitle } from './HeaderSubtitle';
import { HeaderTitle } from './HeaderTitle';
import { HeaderTitleWrapper } from './HeaderTitleWrapper';
import { HeaderContent } from './HeaderContent';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('Header/NeuHeader');
/**
 * Сборный компонент для отрисовки шапки страницы.
 * Уже включает в себя все составные части шапки.
 * Компонент реализован для упрощения работы с шапкой при разработке проекта на Typescript.
 * Изменения в свойствах:
 * * Имеет упрощенный интерфейс - свойства `back` и `minimize` заменены на свойство `arrow`;
 * * Обработчики клика по стрелке `onBackClick` и `onMinimizeClick` заменены на обработчик `onArrowClick`;
 * * Свойство `subtitle` переименовано в `subTitle`.
 * `NeuHeader` заменит собой исходный `Header` в будущих версиях.
 */
export var NeuHeader = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var arrow = _ref.arrow,
    onArrowClick = _ref.onArrowClick,
    logo = _ref.logo,
    logoAlt = _ref.logoAlt,
    title = _ref.title,
    subTitle = _ref.subTitle,
    _ref$hideSubtitleOnMo = _ref.hideSubtitleOnMobile,
    hideSubtitleOnMobile = _ref$hideSubtitleOnMo === void 0 ? true : _ref$hideSubtitleOnMo,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(HeaderRoot, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(HeaderArrow, {
    onClick: onArrowClick,
    arrow: arrow
  }), logo && /*#__PURE__*/React.createElement(HeaderLogo, {
    src: logo,
    alt: logoAlt
  }), title && /*#__PURE__*/React.createElement(HeaderTitleWrapper, null, /*#__PURE__*/React.createElement(HeaderTitle, null, title), subTitle && /*#__PURE__*/React.createElement(HeaderSubtitle, {
    hideOnMobile: hideSubtitleOnMobile
  }, subTitle)), children && /*#__PURE__*/React.createElement(HeaderContent, null, children));
});
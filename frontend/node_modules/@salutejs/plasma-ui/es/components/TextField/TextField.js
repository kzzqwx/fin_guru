var _excluded = ["id", "size", "disabled", "status", "label", "placeholder", "contentLeft", "contentRight", "helperText", "style", "className", "onChange", "onSearch", "rightTrailingSymbols", "value"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef, useCallback, useRef } from 'react';
import styled, { css } from 'styled-components';
import { FieldRoot, FieldPlaceholder, FieldContent, Input, secondary, useForkRef } from '@salutejs/plasma-core';
import { FieldHelper, applyInputStyles } from '../Field';
import { spatnavClassNameAttrs } from '../../utils';
import { useThemeContext } from '../../hooks';
import { HiddenDiv } from './HiddenDiv';
import { useTrailingSymbol } from './useTrailingSymbol';
import { collectPackageInfo } from '../../collectPackageInfo';
collectPackageInfo('TextField/TextField');
var positionTopMap = {
  l: '1.7rem',
  m: '0.875rem'
};
var StyledInput = /*#__PURE__*/styled(Input).attrs(spatnavClassNameAttrs).withConfig({
  componentId: "plasma-ui__sc-1o5gwii-0"
})(["", ";border-radius:1rem;&::placeholder{opacity:0;}&:placeholder-shown + ", "{color:", ";}"], applyInputStyles, FieldPlaceholder, function (_ref) {
  var status = _ref.status;
  return status ? null : secondary;
});
export var RightTrailingSymbols = /*#__PURE__*/styled.div.withConfig({
  componentId: "plasma-ui__sc-1o5gwii-1"
})(["position:absolute;z-index:-1;font-family:inherit;line-height:inherit;letter-spacing:inherit;"]);
var Field = /*#__PURE__*/styled(FieldRoot).withConfig({
  componentId: "plasma-ui__sc-1o5gwii-2"
})(["", ""], function (_ref2) {
  var $isContentRight = _ref2.$isContentRight,
    _ref2$$size = _ref2.$size,
    $size = _ref2$$size === void 0 ? 'l' : _ref2$$size,
    _ref2$$rightTrailingS = _ref2.$rightTrailingSymbolsPosition,
    $rightTrailingSymbolsPosition = _ref2$$rightTrailingS === void 0 ? 0 : _ref2$$rightTrailingS,
    _ref2$$rightTrailingS2 = _ref2.$rightTrailingSymbolsWidth,
    $rightTrailingSymbolsWidth = _ref2$$rightTrailingS2 === void 0 ? 0 : _ref2$$rightTrailingS2,
    _ref2$$rightTrailingS3 = _ref2.$rightTrailingSymbols,
    $rightTrailingSymbols = _ref2$$rightTrailingS3 === void 0 ? '' : _ref2$$rightTrailingS3,
    _ref2$$deviceScale = _ref2.$deviceScale,
    $deviceScale = _ref2$$deviceScale === void 0 ? 1 : _ref2$$deviceScale;
  var paddingRightBase = $isContentRight ? '4rem' : '2rem';
  var isSingle = $rightTrailingSymbols.length === 1;
  var rightTrailingSymbolsWidth = isSingle ? 0 : $rightTrailingSymbolsWidth;

  // INFO: Высчитываем значения для увеличения отступа справа.
  // INFO: 12 - база для множителя "на глаз".
  var offsetByDeviceScale = isSingle ? $deviceScale * 12 : rightTrailingSymbolsWidth;

  // INFO: Если у нас есть висящие символы, необходимо увеличить отступ справа.
  var paddingRight = $rightTrailingSymbols ? "calc(".concat(paddingRightBase, " + ").concat(offsetByDeviceScale, "px)") : null;

  // INFO: Расчитываем значение для позиции left с учетом deviceScale.
  // INFO: 8 - база для множителя "на глаз" для более равмномерного отступа как для 1 символа, так и текста.
  var rightTrailingSymbolsPosition = $rightTrailingSymbolsPosition + $deviceScale * 8;
  return css(["& > ", "{padding-right:", ";}", "{top:", ";left:", "px;}", "{white-space:", ";}"], StyledInput, paddingRight, RightTrailingSymbols, positionTopMap[$size], rightTrailingSymbolsPosition, FieldPlaceholder, $rightTrailingSymbols ? 'pre' : null);
});

/**
 * Поле ввода текста.
 */
// eslint-disable-next-line prefer-arrow-callback
export var TextField = /*#__PURE__*/forwardRef(function TextField(_ref3, ref) {
  var _rightTrailingSymbols;
  var id = _ref3.id,
    _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? 'l' : _ref3$size,
    disabled = _ref3.disabled,
    status = _ref3.status,
    label = _ref3.label,
    placeholder = _ref3.placeholder,
    contentLeft = _ref3.contentLeft,
    contentRight = _ref3.contentRight,
    helperText = _ref3.helperText,
    style = _ref3.style,
    className = _ref3.className,
    onChange = _ref3.onChange,
    onSearch = _ref3.onSearch,
    rightTrailingSymbols = _ref3.rightTrailingSymbols,
    value = _ref3.value,
    rest = _objectWithoutProperties(_ref3, _excluded);
  var rightTrailingSymbolsRef = useRef(null);
  var placeLabel = label || placeholder;
  var _useThemeContext = useThemeContext(),
    deviceScale = _useThemeContext.deviceScale;
  var handleChange = useCallback(function (event) {
    var maxLength = event.target.maxLength;
    if (!onChange || maxLength !== -1 && event.target.value.length > maxLength) {
      return;
    }
    onChange(event);
  }, [onChange]);
  var handleSearch = useCallback(function (event) {
    if (event.keyCode === 13 && onSearch) {
      onSearch(event.target.value, event);
    }
  }, [onSearch]);
  var rightTrailingSymbolsWidth = (rightTrailingSymbolsRef === null || rightTrailingSymbolsRef === void 0 || (_rightTrailingSymbols = rightTrailingSymbolsRef.current) === null || _rightTrailingSymbols === void 0 ? void 0 : _rightTrailingSymbols.clientWidth) || 0;
  var _useTrailingSymbol = useTrailingSymbol({
      size: size,
      contentRight: contentRight,
      contentLeft: contentLeft,
      rightTrailingSymbols: rightTrailingSymbols,
      value: value,
      rightTrailingSymbolsWidth: rightTrailingSymbolsWidth,
      deviceScale: deviceScale
    }),
    inputRef = _useTrailingSymbol.inputRef,
    hiddenDivRef = _useTrailingSymbol.hiddenDivRef,
    rightTrailingSymbolsPosition = _useTrailingSymbol.rightTrailingSymbolsPosition;
  var forkRef = useForkRef(inputRef, ref);
  var placeholderText = rightTrailingSymbols && !value ? "".concat(placeLabel, "  ").concat(rightTrailingSymbols) : placeLabel;
  return /*#__PURE__*/React.createElement(Field, {
    $size: size,
    $disabled: disabled,
    $isContentLeft: Boolean(contentLeft),
    $isContentRight: Boolean(contentRight),
    $isHelper: Boolean(helperText),
    status: status,
    style: style,
    className: className,
    $rightTrailingSymbolsPosition: rightTrailingSymbolsPosition,
    $rightTrailingSymbolsWidth: rightTrailingSymbolsWidth,
    $rightTrailingSymbols: rightTrailingSymbols,
    $deviceScale: deviceScale
  }, contentLeft && /*#__PURE__*/React.createElement(FieldContent, {
    pos: "left"
  }, contentLeft), /*#__PURE__*/React.createElement(StyledInput, _extends({
    $size: size,
    ref: forkRef,
    id: id,
    placeholder: placeLabel,
    disabled: disabled,
    status: status,
    "aria-describedby": id ? "".concat(id, "-helpertext") : undefined,
    onChange: handleChange,
    onKeyUp: onSearch && handleSearch,
    value: value
  }, rest)), placeLabel && size === 'l' && /*#__PURE__*/React.createElement(FieldPlaceholder, {
    htmlFor: id
  }, placeholderText), contentRight && /*#__PURE__*/React.createElement(FieldContent, {
    pos: "right"
  }, contentRight), helperText && /*#__PURE__*/React.createElement(FieldHelper, {
    id: id ? "".concat(id, "-helpertext") : undefined
  }, helperText), value && /*#__PURE__*/React.createElement(RightTrailingSymbols, {
    ref: rightTrailingSymbolsRef
  }, rightTrailingSymbols), /*#__PURE__*/React.createElement(HiddenDiv, {
    ref: hiddenDivRef
  }, value));
});
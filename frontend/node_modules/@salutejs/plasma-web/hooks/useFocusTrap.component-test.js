"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _react = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("react"));
var _styledComponents = /*#__PURE__*/_interopRequireDefault( /*#__PURE__*/require("styled-components"));
var _plasmaCyUtils = /*#__PURE__*/require("@salutejs/plasma-cy-utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var StyledWrapper = /*#__PURE__*/_styledComponents["default"].div.withConfig({
  componentId: "plasma-web__sc-1m9jnbs-0"
})(["margin:1rem 0;display:flex;justify-content:space-around;align-items:center;"]);
describe('plasma-web: useFocusTrap', function () {
  var _Button, _Button2, _Button3, _Button4, _CypressTestDecorator, _CypressTestDecorator2, _CypressTestDecorator3, _CypressTestDecorator4;
  var ModalsProvider = (0, _plasmaCyUtils.getComponent)('ModalsProvider');
  var Modal = (0, _plasmaCyUtils.getComponent)('Modal');
  var Button = (0, _plasmaCyUtils.getComponent)('Button');
  var P1 = (0, _plasmaCyUtils.getComponent)('P1');
  var useFocusTrap = (0, _plasmaCyUtils.getComponent)('useFocusTrap');
  function Demo() {
    var ref = useFocusTrap(true, '#focus-first');
    var _useState = (0, _react.useState)(false),
      _useState2 = _slicedToArray(_useState, 2),
      showButtons = _useState2[0],
      setShowButtons = _useState2[1];
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(Button, {
      onClick: function onClick() {
        return setShowButtons(true);
      }
    }, "Show buttons"), showButtons && /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      ref: ref
    }, /*#__PURE__*/_react["default"].createElement(Button, {
      style: {
        visibility: 'hidden'
      }
    }, "Btn"), _Button || (_Button = /*#__PURE__*/_react["default"].createElement(Button, null, "Button")), _Button2 || (_Button2 = /*#__PURE__*/_react["default"].createElement(Button, {
      id: "focus-first"
    }, "First")), /*#__PURE__*/_react["default"].createElement(Button, {
      style: {
        display: 'none'
      }
    }, "Not displayed"), /*#__PURE__*/_react["default"].createElement(Button, {
      onClick: function onClick() {
        return setShowButtons(false);
      }
    }, "Close"), /*#__PURE__*/_react["default"].createElement(Button, {
      style: {
        opacity: '0'
      }
    }, "Btn")));
  }
  function OneNode() {
    var ref = useFocusTrap();
    var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      showButtons = _useState4[0],
      setShowButtons = _useState4[1];
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(Button, {
      onClick: function onClick() {
        return setShowButtons(true);
      }
    }, "Show"), showButtons && /*#__PURE__*/_react["default"].createElement(Button, {
      ref: ref
    }, "Trapped button"));
  }
  function Double() {
    var refA = useFocusTrap();
    var refB = useFocusTrap();
    var _useState5 = (0, _react.useState)(false),
      _useState6 = _slicedToArray(_useState5, 2),
      showButtonsA = _useState6[0],
      setShowButtonsA = _useState6[1];
    var _useState7 = (0, _react.useState)(false),
      _useState8 = _slicedToArray(_useState7, 2),
      showButtonsB = _useState8[0],
      setShowButtonsB = _useState8[1];
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(Button, {
      onClick: function onClick() {
        return setShowButtonsA(true);
      }
    }, "Show buttons A"), showButtonsA && /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      ref: refA
    }, _Button3 || (_Button3 = /*#__PURE__*/_react["default"].createElement(Button, null, "Button A")), /*#__PURE__*/_react["default"].createElement(Button, {
      onClick: function onClick() {
        return setShowButtonsB(true);
      }
    }, "Show buttons B"), showButtonsB && /*#__PURE__*/_react["default"].createElement(StyledWrapper, {
      ref: refB
    }, _Button4 || (_Button4 = /*#__PURE__*/_react["default"].createElement(Button, null, "Button B")), /*#__PURE__*/_react["default"].createElement(Button, {
      onClick: function onClick() {
        return setShowButtonsB(false);
      }
    }, "Close B")), /*#__PURE__*/_react["default"].createElement(Button, {
      onClick: function onClick() {
        return setShowButtonsA(false);
      }
    }, "Close A")));
  }
  it('check first focus', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator || (_CypressTestDecorator = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(ModalsProvider, null, /*#__PURE__*/_react["default"].createElement(Demo, null)))));
    cy.get('button').contains('Show buttons').type('{enter}');
    cy.focused().should(function ($p) {
      expect($p).to.contain('First');
    });
  });
  it('check tab cicle', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator2 || (_CypressTestDecorator2 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(ModalsProvider, null, /*#__PURE__*/_react["default"].createElement(Demo, null)))));
    cy.get('button').contains('Show buttons').type('{enter}');
    cy.focused().tab();
    cy.focused().tab();
    cy.focused().tab();
    cy.focused().should(function ($p) {
      expect($p).to.contain('First');
    });
  });
  it('check one node', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator3 || (_CypressTestDecorator3 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(ModalsProvider, null, /*#__PURE__*/_react["default"].createElement(OneNode, null)))));
    cy.get('button').contains('Show').type('{enter}');
    cy.focused().should(function ($p) {
      expect($p).to.contain('Trapped button');
    });
    cy.focused().tab();
    cy.focused().should(function ($p) {
      expect($p).to.contain('Trapped button');
    });
  });
  it('check blur and focus', function () {
    (0, _plasmaCyUtils.mount)(_CypressTestDecorator4 || (_CypressTestDecorator4 = /*#__PURE__*/_react["default"].createElement(_plasmaCyUtils.CypressTestDecorator, null, /*#__PURE__*/_react["default"].createElement(ModalsProvider, null, /*#__PURE__*/_react["default"].createElement(Double, null)))));
    cy.get('button').contains('Show buttons A').type('{enter}');

    // что выделяется после blur при открытым A
    cy.focused().blur();
    cy.get('body').tab();
    cy.focused().should(function ($p) {
      expect($p).to.contain('Button A');
    });

    // проверка первых элементов
    cy.get('button').contains('Show buttons B').type('{enter}');
    cy.focused().should(function ($p) {
      expect($p).to.contain('Button B');
    });
    cy.focused().tab();

    // что выделяется после blur при открытом B
    cy.focused().blur();
    cy.get('body').tab();
    cy.focused().should(function ($p) {
      expect($p).to.contain('Button B');
    });

    // проверка элемента при закрытии
    cy.get('button').contains('Close B').type('{enter}');
    cy.focused().should(function ($p) {
      expect($p).to.contain('Show buttons B');
    });

    // что выделяется после blur при закрытом B/открытом A
    cy.focused().blur();
    cy.get('body').tab();
    cy.focused().should(function ($p) {
      expect($p).to.contain('Button A');
    });
  });
});
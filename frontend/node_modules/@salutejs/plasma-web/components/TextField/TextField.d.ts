import React from 'react';
import type { TextFieldProps } from '@salutejs/plasma-hope';
declare const TextFieldComponent: React.FunctionComponent<import("@salutejs/plasma-new-hope/types/engines/types").PropsType<{
    view: {
        default: string;
        positive: string;
        warning: string;
        negative: string;
    };
    size: {
        l: string;
        m: string;
        s: string;
        xs: string;
    };
    labelPlacement: {
        inner: string[];
        outer: string[];
    };
    disabled: {
        true: string;
    };
    readOnly: {
        true: string;
    };
}> & (({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    contentRight?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: React.KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    chips?: undefined;
    onChangeChips?: undefined;
    enumerationType?: "plain" | undefined;
    onSearch?: ((value: string, event?: React.KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "size"> & React.RefAttributes<HTMLInputElement>) | ({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    contentRight?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: React.KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    enumerationType: "chip";
    onSearch?: undefined;
    chips?: import("@salutejs/plasma-new-hope/types/components/TextField/TextField.types").TextFieldPrimitiveValue[] | undefined;
    onChangeChips?: ((value: import("@salutejs/plasma-new-hope/types/components/TextField/TextField.types").TextFieldPrimitiveValue[]) => void) | undefined;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "size"> & React.RefAttributes<HTMLInputElement>))>;
declare type newHopeTextFieldProps = React.ComponentProps<typeof TextFieldComponent>;
export declare type CustomTextFieldProps = TextFieldProps & Pick<newHopeTextFieldProps, 'enumerationType' | 'chips' | 'onChangeChips'>;
/**
 * Поле ввода текста.
 */
export declare const TextField: React.ForwardRefExoticComponent<TextFieldProps & Pick<import("@salutejs/plasma-new-hope/types/engines/types").PropsType<{
    view: {
        default: string;
        positive: string;
        warning: string;
        negative: string;
    };
    size: {
        l: string;
        m: string;
        s: string;
        xs: string;
    };
    labelPlacement: {
        inner: string[];
        outer: string[];
    };
    disabled: {
        true: string;
    };
    readOnly: {
        true: string;
    };
}> & (({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    contentRight?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: React.KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    chips?: undefined;
    onChangeChips?: undefined;
    enumerationType?: "plain" | undefined;
    onSearch?: ((value: string, event?: React.KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "size"> & React.RefAttributes<HTMLInputElement>) | ({
    size?: string | undefined;
    view?: string | undefined;
    readOnly?: boolean | undefined;
    disabled?: boolean | undefined;
} & {
    label?: string | undefined;
    labelPlacement?: "inner" | "outer" | undefined;
    leftHelper?: string | undefined;
    contentLeft?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    contentRight?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
    textBefore?: string | undefined;
    textAfter?: string | undefined;
    onSearch?: ((value: string, event?: React.KeyboardEvent<HTMLInputElement> | undefined) => void) | undefined;
} & {
    enumerationType: "chip";
    onSearch?: undefined;
    chips?: import("@salutejs/plasma-new-hope/types/components/TextField/TextField.types").TextFieldPrimitiveValue[] | undefined;
    onChangeChips?: ((value: import("@salutejs/plasma-new-hope/types/components/TextField/TextField.types").TextFieldPrimitiveValue[]) => void) | undefined;
} & Omit<React.InputHTMLAttributes<HTMLInputElement>, "size"> & React.RefAttributes<HTMLInputElement>)), "enumerationType" | "chips" | "onChangeChips"> & React.RefAttributes<HTMLInputElement>>;
export {};

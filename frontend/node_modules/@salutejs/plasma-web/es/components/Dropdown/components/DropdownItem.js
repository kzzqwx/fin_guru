function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _StyledCheck;
var _excluded = ["value", "label", "color", "contentLeft", "isActive", "isHovered", "index", "onClick", "onHover", "onFocus", "items", "isDisabled", "style"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { component, dropdownItemOldConfig, mergeConfig } from '@salutejs/plasma-new-hope/styled-components';
import styled from 'styled-components';
import { IconDone } from '@salutejs/plasma-icons';
import { accent } from '@salutejs/plasma-core';
var mergedItemConfig = /*#__PURE__*/mergeConfig(dropdownItemOldConfig);
export var DropdownNewHopeItem = /*#__PURE__*/component(mergedItemConfig);
var StyledCheck = /*#__PURE__*/styled(IconDone).withConfig({
  componentId: "plasma-web__sc-10m1uqm-0"
})(["margin-left:auto;pointer-events:none;margin-right:-0.5rem;"]);
export var DropdownItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var value = props.value,
    label = props.label,
    color = props.color,
    contentLeft = props.contentLeft,
    isActive = props.isActive,
    isHovered = props.isHovered,
    index = props.index,
    onClick = props.onClick,
    onHover = props.onHover,
    onFocus = props.onFocus,
    items = props.items,
    isDisabled = props.isDisabled,
    style = props.style,
    rest = _objectWithoutProperties(props, _excluded);
  var handleClick = function handleClick(e) {
    if (onClick) {
      onClick({
        value: value,
        label: label,
        color: color,
        contentLeft: contentLeft
      }, e);
    }
  };
  var handleHover = function handleHover() {
    if (onHover) {
      onHover(index);
    }
  };
  return /*#__PURE__*/React.createElement(DropdownNewHopeItem, _extends({}, rest, {
    value: value,
    text: label,
    ref: ref,
    style: _objectSpread(_objectSpread({}, style), {}, {
      color: color
    }),
    contentLeft: contentLeft,
    contentRight: isActive ? _StyledCheck || (_StyledCheck = /*#__PURE__*/React.createElement(StyledCheck, {
      size: "s",
      color: accent
    })) : undefined,
    onClick: handleClick,
    onMouseOver: handleHover,
    onFocus: onFocus,
    disabled: isDisabled
  }));
});
var _excluded = ["trigger", "children", "isOpen", "disclosure", "onToggle", "placement", "offsetTop"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { component, dropdownOldConfig, mergeConfig } from '@salutejs/plasma-new-hope/styled-components';
import { config } from './DropdownOld.config';
var mergedConfig = /*#__PURE__*/mergeConfig(dropdownOldConfig, config);
var DropdownNewHope = /*#__PURE__*/component(mergedConfig);
export var DropdownPopup = /*#__PURE__*/forwardRef(function (props, ref) {
  var trigger = props.trigger,
    children = props.children,
    isOpen = props.isOpen,
    disclosure = props.disclosure,
    onToggle = props.onToggle,
    placement = props.placement,
    offsetTop = props.offsetTop,
    rest = _objectWithoutProperties(props, _excluded);
  var offsetAtTop = typeof offsetTop === 'number' ? offsetTop : 0;
  return /*#__PURE__*/React.createElement(DropdownNewHope, _extends({}, rest, {
    ref: ref,
    onToggle: onToggle,
    target: disclosure,
    isOpen: isOpen,
    trigger: trigger,
    placement: placement,
    offset: [offsetAtTop, 0]
  }), children);
});
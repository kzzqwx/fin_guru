var _excluded = ["status", "label", "placeholder", "animatedHint", "helperText", "enumerationType", "chips", "onSearch", "onChangeChips", "size"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { forwardRef } from 'react';
import { textFieldConfig, component, mergeConfig } from '@salutejs/plasma-new-hope/styled-components';
import { config } from './TextField.config';
var mergedConfig = /*#__PURE__*/mergeConfig(textFieldConfig, config);
var TextFieldComponent = /*#__PURE__*/component(mergedConfig);
var statusToView = {
  success: 'positive',
  warning: 'warning',
  error: 'negative'
};
var animatedHintToLabelPlacement = {
  placeholder: 'outer',
  label: 'inner'
};

/**
 * Поле ввода текста.
 */
export var TextField = /*#__PURE__*/forwardRef(function (props, ref) {
  var status = props.status,
    label = props.label,
    placeholder = props.placeholder,
    animatedHint = props.animatedHint,
    helperText = props.helperText,
    enumerationType = props.enumerationType,
    chips = props.chips,
    onSearch = props.onSearch,
    onChangeChips = props.onChangeChips,
    _props$size = props.size,
    size = _props$size === void 0 ? 'l' : _props$size,
    rest = _objectWithoutProperties(props, _excluded);

  /** TODO: #1064 Remove In plasma-2.0 */
  /* eslint-disable no-underscore-dangle */
  var _view = status ? statusToView[status] : 'default';
  var _labelPlacement = animatedHint ? animatedHintToLabelPlacement[animatedHint] : 'outer';
  var _label = label ? String(label) : undefined;
  if (size !== 'l' && _labelPlacement === 'inner') {
    _label = undefined;
    _labelPlacement = 'outer';
  }
  if (size === 'l' && animatedHint === 'placeholder' && !label) {
    _label = placeholder;
    _labelPlacement = 'inner';
  }
  var _size = size === 'xs' ? 's' : size;
  if (enumerationType === 'chip') {
    return /*#__PURE__*/React.createElement(TextFieldComponent, _extends({}, rest, {
      view: _view,
      size: _size,
      labelPlacement: _labelPlacement,
      label: _label,
      placeholder: placeholder,
      leftHelper: helperText,
      ref: ref,
      enumerationType: "chip",
      chips: chips,
      onChangeChips: onChangeChips
    }));
  }
  return /*#__PURE__*/React.createElement(TextFieldComponent, _extends({}, rest, {
    view: _view,
    size: _size,
    labelPlacement: _labelPlacement,
    label: _label,
    placeholder: placeholder,
    leftHelper: helperText,
    ref: ref,
    enumerationType: "plain",
    onSearch: onSearch
  }));
});
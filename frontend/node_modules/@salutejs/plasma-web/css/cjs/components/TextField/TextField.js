'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var plasmaNewHope = require('@salutejs/plasma-new-hope');
var TextField_config = require('./TextField.config.js');

var _excluded = ["status", "label", "placeholder", "animatedHint", "helperText", "enumerationType", "chips", "onSearch", "onChangeChips", "size"];
var mergedConfig = /*#__PURE__*/plasmaNewHope.mergeConfig(plasmaNewHope.textFieldConfig, TextField_config.config);
var TextFieldComponent = /*#__PURE__*/plasmaNewHope.component(mergedConfig);
var statusToView = {
  success: 'positive',
  warning: 'warning',
  error: 'negative'
};
var animatedHintToLabelPlacement = {
  placeholder: 'outer',
  label: 'inner'
};

/**
 * Поле ввода текста.
 */
var TextField = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var status = props.status,
    label = props.label,
    placeholder = props.placeholder,
    animatedHint = props.animatedHint,
    helperText = props.helperText,
    enumerationType = props.enumerationType,
    chips = props.chips,
    onSearch = props.onSearch,
    onChangeChips = props.onChangeChips,
    _props$size = props.size,
    size = _props$size === void 0 ? 'l' : _props$size,
    rest = _rollupPluginBabelHelpers.objectWithoutProperties(props, _excluded);

  /** TODO: #1064 Remove In plasma-2.0 */
  /* eslint-disable no-underscore-dangle */
  var _view = status ? statusToView[status] : 'default';
  var _labelPlacement = animatedHint ? animatedHintToLabelPlacement[animatedHint] : 'outer';
  var _label = label ? String(label) : undefined;
  if (size !== 'l' && _labelPlacement === 'inner') {
    _label = undefined;
    _labelPlacement = 'outer';
  }
  if (size === 'l' && animatedHint === 'placeholder' && !label) {
    _label = placeholder;
    _labelPlacement = 'inner';
  }
  var _size = size === 'xs' ? 's' : size;
  if (enumerationType === 'chip') {
    return /*#__PURE__*/React.createElement(TextFieldComponent, _rollupPluginBabelHelpers.extends({}, rest, {
      view: _view,
      size: _size,
      labelPlacement: _labelPlacement,
      label: _label,
      placeholder: placeholder,
      leftHelper: helperText,
      ref: ref,
      enumerationType: "chip",
      chips: chips,
      onChangeChips: onChangeChips
    }));
  }
  return /*#__PURE__*/React.createElement(TextFieldComponent, _rollupPluginBabelHelpers.extends({}, rest, {
    view: _view,
    size: _size,
    labelPlacement: _labelPlacement,
    label: _label,
    placeholder: placeholder,
    leftHelper: helperText,
    ref: ref,
    enumerationType: "plain",
    onSearch: onSearch
  }));
});

exports.TextField = TextField;
//# sourceMappingURL=TextField.js.map

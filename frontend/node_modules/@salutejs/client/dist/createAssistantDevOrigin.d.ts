import { AssistantDev, AssistantSettings, AssistantSmartAppData, Surface } from './typings';
import { initializeNativeSDKEmulatorParams } from './dev';
import { CreateAssistantParams } from './createAssistant';
export declare type Channel = 'B2C' | 'COMPANION_B2C' | 'SBOL';
export declare type CreateAssistantDevParams = CreateAssistantParams & {
    surface?: Surface | string;
    userChannel?: Channel | string;
} & Pick<initializeNativeSDKEmulatorParams, 'initPhrase' | 'url' | 'userId' | 'token' | 'surfaceVersion' | 'nativePanel' | 'sdkVersion' | 'enableRecord' | 'recordParams' | 'fakeVps' | 'settings' | 'getMeta' | 'features'>;
export declare const createAssistantDev: <A extends AssistantSmartAppData<any>>({ getState, getRecoveryState, ready, surface, userChannel, ...sdkParams }: CreateAssistantDevParams) => AssistantDev<A>;
export declare const createSmartappDebugger: <A extends AssistantSmartAppData<any>>({ token, getState, getRecoveryState, ready, settings, nativePanel, ...sdkParams }: {
    token: string;
    settings?: Pick<AssistantSettings, "dubbing"> | undefined;
} & CreateAssistantParams & Pick<CreateAssistantDevParams, "userChannel" | "surface" | "getMeta" | "initPhrase" | "nativePanel" | "enableRecord" | "recordParams">) => AssistantDev<A>;
export { NativePanelParams } from './NativePanel/NativePanel';
//# sourceMappingURL=createAssistantDevOrigin.d.ts.map
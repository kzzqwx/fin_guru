export declare type VoiceListenerStatus = 'listen' | 'started' | 'stopped';
export declare type VoiceHandler = (data: Uint8Array, analyserArray: Uint8Array | null, last: boolean) => void;
declare type VoiceStreamEvents = {
    status: (status: VoiceListenerStatus) => void;
    hypotesis: (text: string, last: boolean) => void;
};
/**
 * Возвращает объект, позволяющий получать запись голоса пользователя и управлять ею.
 * @param createAudioProvider Источник голоса
 * @returns Api для запуска и остановки слушания
 */
export declare const createVoiceListener: (createAudioProvider?: (cb: (buffer: ArrayBuffer, analyserArray: Uint8Array | null, last: boolean) => void, useAnalyser?: boolean | undefined) => Promise<() => void>) => {
    listen: (handleVoice: VoiceHandler) => Promise<void>;
    stop: () => void;
    on: <K extends keyof VoiceStreamEvents>(event: K, cb: VoiceStreamEvents[K]) => () => void;
    readonly status: VoiceListenerStatus;
};
export {};
//# sourceMappingURL=voiceListener.d.ts.map
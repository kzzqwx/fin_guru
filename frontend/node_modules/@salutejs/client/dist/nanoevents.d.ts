interface EventsMap {
    [event: string]: any;
}
interface DefaultEvents extends EventsMap {
    [event: string]: (...args: any) => void;
}
export declare const createNanoEvents: <Events extends EventsMap = DefaultEvents>() => {
    events: Partial<{ [E in keyof Events]: Events[E][]; }>;
    emit: <K extends keyof Events>(event: K, ...args: Parameters<Events[K]>) => void;
    on: <K_1 extends keyof Events>(event: K_1, cb: Events[K_1]) => (() => void);
    once: <K_2 extends keyof Events>(event: K_2, cb: Events[K_2]) => (() => void);
    clear: () => void;
};
export {};
//# sourceMappingURL=nanoevents.d.ts.map
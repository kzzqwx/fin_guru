import { CreateAssistantDevOptions } from './assistantSdk/assistant';
import { NativePanelParams } from './NativePanel/NativePanel';
import { ClientLogger, AssistantSettings, FakeVpsParams } from './typings';
import { Recorder } from './record/recorder';
export interface RecordParams<R extends Recorder = Recorder> {
    defaultActive?: boolean;
    logger?: ClientLogger;
    recorder?: R;
}
export declare type InitializeAssistantSDKParams = {
    initPhrase: string;
    url: string;
    /** канал (влияет на навыки) */
    userChannel: string;
    /** поверхность (влияет на навыки) */
    surface: string;
    userId?: string;
    token?: string;
    /** версия хост-приложения (может влиять на навыки) */
    surfaceVersion?: string;
    deviceId?: string;
    locale?: string;
    nativePanel?: NativePanelParams | null;
    /** версия sdk (может влиять на навыки) */
    sdkVersion?: string;
    /** показать управление записью лога сообщений */
    enableRecord?: boolean;
    recordParams?: RecordParams;
    fakeVps?: FakeVpsParams;
    settings?: AssistantSettings;
    vpsVersion?: number;
    features?: string;
    capabilities?: string;
} & CreateAssistantDevOptions;
export declare const initializeAssistantSDK: ({ initPhrase, url, userChannel, surface, userId, token, surfaceVersion, deviceId, locale, nativePanel, sdkVersion, enableRecord, recordParams, fakeVps, settings, vpsVersion, features, capabilities, getMeta, }: InitializeAssistantSDKParams) => {
    sendText: (messasge: string) => void;
    nativePanel: {
        hide: () => void;
        show: () => void;
    };
};
//# sourceMappingURL=dev.d.ts.map
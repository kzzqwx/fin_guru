import { AssistantClientCommand, AssistantClientCustomizedCommand, AssistantSmartAppCommand } from './typings';
export declare const appInitialData: {
    /**
     * Прочитать appInitialData
     * @returns Массив комманд
     */
    pull: () => AssistantClientCustomizedCommand<AssistantSmartAppCommand>[];
    /**
     * Зафиксировать текущее состояние appInitialData
     */
    commit: () => void;
    /**
     * Возвращает диф appInitialData между pull и commit
     * @returns Массив комманд
     */
    diff: () => AssistantClientCustomizedCommand<AssistantSmartAppCommand>[];
    /**
     * Возвращает флаг наличия command в appInitialData на момент commit
     * @param command Команда, которую нужно проверить на наличие в appInitialData
     * @returns true - если команда была в appInitialData
     */
    isCommitted: (command: AssistantClientCommand) => boolean;
    /**
     * Возвращает первое сообщение из appInitialData, подходящее под фильтры param
     * @param param Параметры: тип сообщения (например, smart_app_data)
     * и тип команды (значение поля smart_app_data.type)
     * @returns Первое сообщение, соответствующее параметрам или undefined
     */
    find: <T>({ type, command }: {
        type?: string | undefined;
        command?: string | undefined;
    }) => T | undefined;
};
//# sourceMappingURL=appInitialData.d.ts.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMatchers = exports.compare = void 0;
var compare = function (expected, actual) {
    if (typeof expected !== typeof actual)
        return false;
    if (typeof expected !== 'object' || expected === null) {
        return expected === actual;
    }
    if (Array.isArray(expected)) {
        return expected.every(function (exp) { return [].some.call(actual, function (act) { return exports.compare(exp, act); }); });
    }
    return Object.keys(expected).every(function (key) {
        var ao = actual[key];
        var eo = expected[key];
        if (typeof eo === 'object' && eo !== null && ao !== null) {
            return exports.compare(eo, ao);
        }
        if (typeof eo === 'boolean') {
            return eo !== (ao == null);
        }
        return ao === eo;
    });
};
exports.compare = compare;
function createMatchers() {
    var intent = function (expected, _a) {
        var _b = _a === void 0 ? { confidence: 0.7 } : _a, confidence = _b.confidence;
        return function (req) {
            var _a, _b;
            if (!((_a = req.inference) === null || _a === void 0 ? void 0 : _a.variants.length))
                return false;
            var variant = (_b = req.inference) === null || _b === void 0 ? void 0 : _b.variants.find(function (v) { return v.intent.path === expected && v.confidence >= confidence; });
            if (variant) {
                req.setVariant(variant);
                return true;
            }
            return false;
        };
    };
    var text = function (expected, _a) {
        var _b = _a === void 0 ? { normalized: false } : _a, _c = _b.normalized, normalized = _c === void 0 ? false : _c;
        return function (req) {
            var _a, _b;
            var testText = normalized ? (_a = req.message) === null || _a === void 0 ? void 0 : _a.human_normalized_text : (_b = req.message) === null || _b === void 0 ? void 0 : _b.original_text;
            return expected === testText;
        };
    };
    var state = function (expected) { return function (req) { return exports.compare(expected, req.state); }; };
    var action = function (expected) { return function (req) { var _a; return ((_a = req.serverAction) === null || _a === void 0 ? void 0 : _a.type) === expected; }; };
    var selectItems = function (expected) { return function (req) { var _a, _b, _c; return (_c = (_b = (_a = req.state) === null || _a === void 0 ? void 0 : _a.item_selector) === null || _b === void 0 ? void 0 : _b.items) === null || _c === void 0 ? void 0 : _c.filter(function (i) { return exports.compare(expected, i); }); }; };
    var selectItem = function (expected) { return function (req) {
        var items = selectItems(expected)(req);
        if (items)
            return items[0];
    }; };
    var regexp = function (re, _a) {
        var _b = _a === void 0 ? { normalized: true } : _a, _c = _b.normalized, normalized = _c === void 0 ? true : _c;
        return function (req) {
            var _a, _b;
            var testText = normalized ? (_a = req.message) === null || _a === void 0 ? void 0 : _a.human_normalized_text : (_b = req.message) === null || _b === void 0 ? void 0 : _b.original_text;
            var result = re.exec(testText);
            if (result === null) {
                return false;
            }
            if (result.groups) {
                Object.assign(req.variables, result.groups);
            }
            return true;
        };
    };
    var match = function () {
        var matchers = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            matchers[_i] = arguments[_i];
        }
        return function (req) {
            for (var i = 0; i < matchers.length; i++) {
                if (!matchers[i](req))
                    return false;
            }
            return true;
        };
    };
    return { match: match, intent: intent, text: text, state: state, selectItem: selectItem, selectItems: selectItems, action: action, regexp: regexp };
}
exports.createMatchers = createMatchers;

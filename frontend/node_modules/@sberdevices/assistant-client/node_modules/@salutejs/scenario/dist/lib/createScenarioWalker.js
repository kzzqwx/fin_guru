"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createScenarioWalker = void 0;
var missingVariables_1 = require("./missingVariables");
var createScenarioWalker = function (_a) {
    var intents = _a.intents, recognizer = _a.recognizer, systemScenario = _a.systemScenario, userScenario = _a.userScenario, _b = _a.slotFillingConfidence, slotFillingConfidence = _b === void 0 ? 0 : _b;
    return function (_a) {
        var req = _a.req, res = _a.res, session = _a.session;
        return __awaiter(void 0, void 0, void 0, function () {
            var dispatch, saluteHandlerOpts, scenarioState, missingVars;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        dispatch = function (path) { return __awaiter(void 0, void 0, void 0, function () {
                            var state, currentIntent, connected, currentIntentPath_1, missingVars, _a, question, name;
                            var _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        if (!userScenario)
                                            return [2 /*return*/];
                                        state = userScenario.getByPath(path);
                                        if (!state) return [3 /*break*/, 2];
                                        session.path = path;
                                        req.currentState = {
                                            path: session.path,
                                            state: state,
                                        };
                                        if (req.variant && intents) {
                                            currentIntent = req.variant;
                                            if (session.path.length > 0 && session.slotFilling) {
                                                connected = (((_b = req.inference) === null || _b === void 0 ? void 0 : _b.variants) || []).find(function (v) { return v.confidence >= slotFillingConfidence && v.intent.path === session.currentIntent; });
                                                currentIntent = connected || req.variant;
                                            }
                                            currentIntentPath_1 = currentIntent.intent.path;
                                            session.currentIntent = currentIntentPath_1;
                                            // Here we substitue some variables even if their name is different
                                            // it is important for slot filling since smart app brain can't tell
                                            // a variable name if there are multiple slots with the same entity type
                                            // in a single intent.
                                            currentIntent.slots.forEach(function (slot) {
                                                var _a, _b, _c, _d;
                                                if (slot.array) {
                                                    if (typeof req.variables[slot.name] === 'undefined') {
                                                        req.setVariable(slot.name, []);
                                                    }
                                                    req.variables[slot.name].push(slot.value);
                                                    return;
                                                }
                                                if (slot.name in req.variables && session.missingVariableName) {
                                                    var variableName = slot.name;
                                                    var areSlotTypesEqual = ((_b = (_a = intents[currentIntentPath_1]) === null || _a === void 0 ? void 0 : _a.variables) === null || _b === void 0 ? void 0 : _b[session.missingVariableName].entity) === ((_d = (_c = intents[currentIntentPath_1]) === null || _c === void 0 ? void 0 : _c.variables) === null || _d === void 0 ? void 0 : _d[variableName].entity);
                                                    if (areSlotTypesEqual) {
                                                        req.setVariable(session.missingVariableName, slot.value);
                                                        delete session.missingVariableName;
                                                    }
                                                }
                                                else {
                                                    req.setVariable(slot.name, slot.value);
                                                }
                                            });
                                            missingVars = missingVariables_1.lookupMissingVariables(currentIntentPath_1, intents, req.variables);
                                            if (missingVars.length > 0) {
                                                // сохраняем состояние в сессии
                                                Object.keys(req.variables).forEach(function (name) {
                                                    session.variables[name] = req.variables[name];
                                                });
                                                _a = missingVars[0], question = _a.question, name = _a.name;
                                                session.missingVariableName = name;
                                                res.appendBubble(question);
                                                res.setPronounceText(question);
                                                // устанавливаем флаг слотфиллинга, на него будем смотреть при следующем запросе пользователя
                                                session.slotFilling = true;
                                                return [2 /*return*/];
                                            }
                                            // SLOTFILING LOGIC END
                                        }
                                        return [4 /*yield*/, state.handle({ req: req, res: res, session: session.state, history: {} }, dispatch)];
                                    case 1:
                                        _c.sent();
                                        _c.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); };
                        saluteHandlerOpts = { req: req, res: res, session: session.state, history: {} };
                        if (req.systemIntent === 'run_app') {
                            if (((_b = req.serverAction) === null || _b === void 0 ? void 0 : _b.action_id) === 'PAY_DIALOG_FINISHED') {
                                if (typeof systemScenario.PAY_DIALOG_FINISHED === 'undefined') {
                                    res.appendError({
                                        code: 404,
                                        description: 'Missing handler for action: "PAY_DIALOG_FINISHED"',
                                    });
                                    return [2 /*return*/];
                                }
                                systemScenario.PAY_DIALOG_FINISHED(saluteHandlerOpts, dispatch);
                                return [2 /*return*/];
                            }
                            systemScenario.RUN_APP(saluteHandlerOpts, dispatch);
                            return [2 /*return*/];
                        }
                        if (req.systemIntent === 'close_app') {
                            systemScenario.CLOSE_APP(saluteHandlerOpts, dispatch);
                            return [2 /*return*/];
                        }
                        // restore request from session
                        Object.keys(session.variables).forEach(function (name) {
                            req.setVariable(name, session.variables[name]);
                        });
                        if (!(typeof intents !== undefined && userScenario)) return [3 /*break*/, 4];
                        // restore request from server_action payload
                        if (req.serverAction) {
                            Object.keys((req.serverAction.payload || {})).forEach(function (key) {
                                var _a;
                                req.setVariable(key, ((_a = req.serverAction) === null || _a === void 0 ? void 0 : _a.payload)[key]);
                            });
                        }
                        if (!(req.voiceAction && typeof recognizer !== 'undefined')) return [3 /*break*/, 2];
                        return [4 /*yield*/, recognizer.inference({ req: req, res: res, session: session })];
                    case 1:
                        _c.sent();
                        _c.label = 2;
                    case 2:
                        scenarioState = userScenario.resolve(session.path, req);
                        if (req.serverAction && typeof intents !== 'undefined') {
                            if (!scenarioState) {
                                res.appendError({
                                    code: 404,
                                    description: "Missing handler for action: \"" + req.serverAction.type + "\"",
                                });
                                return [2 /*return*/];
                            }
                            missingVars = missingVariables_1.lookupMissingVariables(req.serverAction.type, intents, req.variables);
                            if (missingVars.length) {
                                res.appendError({
                                    code: 500,
                                    description: "Missing required variables: " + missingVars.map(function (_a) {
                                        var name = _a.name;
                                        return "\"" + name + "\"";
                                    }).join(', '),
                                });
                                return [2 /*return*/];
                            }
                        }
                        if (!scenarioState) return [3 /*break*/, 4];
                        req.currentState = scenarioState;
                        return [4 /*yield*/, dispatch(scenarioState.path)];
                    case 3:
                        _c.sent();
                        if (!req.currentState.state.children && !session.slotFilling) {
                            session.path = [];
                            session.variables = {};
                            session.currentIntent = undefined;
                        }
                        return [2 /*return*/];
                    case 4:
                        systemScenario.NO_MATCH(saluteHandlerOpts, dispatch);
                        return [2 /*return*/];
                }
            });
        });
    };
};
exports.createScenarioWalker = createScenarioWalker;

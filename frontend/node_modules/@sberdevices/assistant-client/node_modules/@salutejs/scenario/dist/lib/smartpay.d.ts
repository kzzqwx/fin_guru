import { PaymentInvoiceQuery, PaymentInvoiceAnswer, PaymentResponse, PaymentStatus } from './types/payment';
/**
 * Регистрирует платеж
 * @param invoice объект счета
 * @returns объект-статус регистрации платежа
 */
export declare const createInvoice: (invoice: PaymentInvoiceQuery) => Promise<PaymentInvoiceAnswer>;
/**
 * Возвращает статус платежа по идентификатору счета
 * @param invoiceId идентификатор счета
 * @param params объект с параметрами запроса - статусом счета и временем ожидания результата
 * @returns объект-статус платежа
 */
export declare const findInvoiceById: (invoiceId: string, params: {
    invStatus?: string;
    wait: number;
}) => Promise<PaymentStatus>;
/**
 * Возвращает статус платежа по идентификатору сервиса и заказа
 * @param serviceId Идентификатор сервиса, полученный при выдаче токена для авторизации запроса
 * @param orderId Идентификатор заказа для сервиса платежей
 * @param params объект с параметрами запроса - статусом счета и временем ожидания результата
 * @returns объект-статус платежа
 */
export declare const findInvoiceByServiceIdOrderId: (serviceId: string, orderId: string, params?: {
    invStatus?: string;
    wait?: number;
}) => Promise<PaymentStatus>;
/**
 * Завершает платеж
 * @param invoiceId идентификатор счета
 * @returns объект-результат запроса
 */
export declare const completeInvoice: (invoiceId: string) => Promise<PaymentResponse>;
/**
 * Отменяет платеж
 * @param invoiceId идентификатор счета
 * @returns объект-результат запроса
 */
export declare const reverseInvoice: (invoiceId: string) => Promise<PaymentResponse>;
/**
 * Возвращает платеж
 * @param invoiceId идентификатор счета
 * @returns объект-результат запроса
 */
export declare const refundInvoice: (invoiceId: string) => Promise<PaymentResponse>;
//# sourceMappingURL=smartpay.d.ts.map
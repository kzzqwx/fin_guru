"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUserScenario = void 0;
function createUserScenario(scenarioSchema) {
    /**
     * Возвращает вложенные обработчики для указанного пути в дереве диалогов
     * @param path путь в дереве диалога
     * @returns undefined или потомки
     */
    var getByPath = function (path) {
        var obj = scenarioSchema[path[0]];
        for (var _i = 0, _a = path.slice(1); _i < _a.length; _i++) {
            var p = _a[_i];
            if (obj.children) {
                obj = obj.children[p];
            }
            else {
                return undefined;
            }
        }
        return obj;
    };
    /**
     * Возвращает обработчик запроса для указанного пути в дереве диалогов
     * @param path путь в дереве диалога, поиск будет выполнен среди вложенных обработчиков
     * @param req объект запроса
     * @returns Возвращает объект вида { path, state }, где state - обработчик, path - путь из дерева диалогов
     */
    var resolve = function (path, req) {
        var matchedState = null;
        if (path.length > 0) {
            var state = getByPath(path);
            if (state === null || state === void 0 ? void 0 : state.children) {
                for (var _i = 0, _a = Object.keys(state === null || state === void 0 ? void 0 : state.children); _i < _a.length; _i++) {
                    var el = _a[_i];
                    var nextState = state === null || state === void 0 ? void 0 : state.children[el];
                    if (nextState.match(req)) {
                        matchedState = { state: nextState, path: __spreadArrays(path, [el]) };
                        break;
                    }
                }
            }
        }
        if (!matchedState) {
            for (var _b = 0, _c = Object.keys(scenarioSchema); _b < _c.length; _b++) {
                var el = _c[_b];
                var nextState = scenarioSchema[el];
                if (nextState.match(req)) {
                    matchedState = { state: nextState, path: [el] };
                    break;
                }
            }
        }
        return matchedState;
    };
    return {
        getByPath: getByPath,
        resolve: resolve,
    };
}
exports.createUserScenario = createUserScenario;

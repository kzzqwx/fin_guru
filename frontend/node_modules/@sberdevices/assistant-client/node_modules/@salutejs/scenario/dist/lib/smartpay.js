"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.refundInvoice = exports.reverseInvoice = exports.completeInvoice = exports.findInvoiceByServiceIdOrderId = exports.findInvoiceById = exports.createInvoice = void 0;
var node_fetch_1 = __importDefault(require("node-fetch"));
var API_URL = 'https://smartmarket.online.sberbank.ru/smartpay/v1';
var callApi = function (url, _a) {
    var _b = _a === void 0 ? {} : _a, method = _b.method, body = _b.body;
    return node_fetch_1.default(url, {
        headers: {
            accept: 'application/json',
            'Content-Type': 'application/json',
            Authorization: "Bearer " + process.env.SMARTPAY_TOKEN,
        },
        method: method || 'get',
        body: body ? JSON.stringify(body) : undefined,
    }).then(function (response) { return response.json(); });
};
/**
 * Регистрирует платеж
 * @param invoice объект счета
 * @returns объект-статус регистрации платежа
 */
var createInvoice = function (invoice) {
    return callApi(API_URL + "/invoices", {
        method: 'post',
        body: invoice,
    });
};
exports.createInvoice = createInvoice;
/**
 * Возвращает статус платежа по идентификатору счета
 * @param invoiceId идентификатор счета
 * @param params объект с параметрами запроса - статусом счета и временем ожидания результата
 * @returns объект-статус платежа
 */
var findInvoiceById = function (invoiceId, params) {
    var _a, _b, _c;
    return callApi(API_URL + "/invoices/" + encodeURIComponent(invoiceId) + (params && (params.invStatus || typeof params.wait !== 'undefined')
        ? "?" + ((_a = params.invStatus) !== null && _a !== void 0 ? _a : "inv_status=" + encodeURIComponent(!params.invStatus)) + ((_b = params.wait) !== null && _b !== void 0 ? _b : ((_c = params.invStatus) !== null && _c !== void 0 ? _c : '&') + "wait=" + encodeURIComponent(params.wait))
        : ''));
};
exports.findInvoiceById = findInvoiceById;
/**
 * Возвращает статус платежа по идентификатору сервиса и заказа
 * @param serviceId Идентификатор сервиса, полученный при выдаче токена для авторизации запроса
 * @param orderId Идентификатор заказа для сервиса платежей
 * @param params объект с параметрами запроса - статусом счета и временем ожидания результата
 * @returns объект-статус платежа
 */
var findInvoiceByServiceIdOrderId = function (serviceId, orderId, params) {
    var _a, _b;
    if (params === void 0) { params = {}; }
    return callApi(API_URL + "/invoices/0?service_id=" + encodeURIComponent(serviceId) + "&order_id=" + encodeURIComponent(orderId) + ((_a = params.invStatus) !== null && _a !== void 0 ? _a : "&inv_status=" + encodeURIComponent(!params.invStatus) + ((_b = params.wait) !== null && _b !== void 0 ? _b : "&wait=" + encodeURIComponent(!params.wait))));
};
exports.findInvoiceByServiceIdOrderId = findInvoiceByServiceIdOrderId;
/**
 * Завершает платеж
 * @param invoiceId идентификатор счета
 * @returns объект-результат запроса
 */
var completeInvoice = function (invoiceId) {
    return callApi(API_URL + "/invoice/" + encodeURIComponent(invoiceId), {
        method: 'put',
    });
};
exports.completeInvoice = completeInvoice;
/**
 * Отменяет платеж
 * @param invoiceId идентификатор счета
 * @returns объект-результат запроса
 */
var reverseInvoice = function (invoiceId) {
    return callApi(API_URL + "/invoice/" + encodeURIComponent(invoiceId), {
        method: 'delete',
    });
};
exports.reverseInvoice = reverseInvoice;
/**
 * Возвращает платеж
 * @param invoiceId идентификатор счета
 * @returns объект-результат запроса
 */
var refundInvoice = function (invoiceId) {
    return callApi(API_URL + "/invoice/" + encodeURIComponent(invoiceId), {
        method: 'patch',
    });
};
exports.refundInvoice = refundInvoice;

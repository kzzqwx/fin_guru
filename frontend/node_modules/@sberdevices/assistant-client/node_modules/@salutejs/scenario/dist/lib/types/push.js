"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartPushStatusCode = void 0;
var SmartPushStatusCode;
(function (SmartPushStatusCode) {
    /** Успешно */
    SmartPushStatusCode[SmartPushStatusCode["success"] = 0] = "success";
    /** Ошибка при нарушении правил proto (нарушены тип поля, его размерность или обязательность) */
    SmartPushStatusCode[SmartPushStatusCode["schemaValidationError"] = 1000] = "schemaValidationError";
    /** Ошибка в целостности данных входящего запроса (в одном пуше указаны блоки PushContent и TemplateContent,
     * destination пустой, неправильные времена в start_time и finish_time или неправильный message_name) */
    SmartPushStatusCode[SmartPushStatusCode["messageValidationError"] = 1001] = "messageValidationError";
    /** Указан недопустимый тип client Id */
    SmartPushStatusCode[SmartPushStatusCode["clientIdTypeInvalid"] = 1002] = "clientIdTypeInvalid";
    /** Ошибка в параметрах типа отправки */
    SmartPushStatusCode[SmartPushStatusCode["deliveryTypeError"] = 1003] = "deliveryTypeError";
    /** Указанного channel/origin_channel или указанного surface/origin_surface нет */
    SmartPushStatusCode[SmartPushStatusCode["unknownSurfaceOfChannel"] = 1004] = "unknownSurfaceOfChannel";
    /** Указанная поверхность отправки не определена */
    SmartPushStatusCode[SmartPushStatusCode["surfaceNotDefined"] = 1005] = "surfaceNotDefined";
    /** В блоке destination одновременно указаны блоки для мобильных поверхностей и устройств */
    SmartPushStatusCode[SmartPushStatusCode["destinationHasBothMobileAppAndDeviceParameters"] = 1006] = "destinationHasBothMobileAppAndDeviceParameters";
    /** Origin_surface из запроса не определена */
    SmartPushStatusCode[SmartPushStatusCode["unknownOriginSurface"] = 1007] = "unknownOriginSurface";
    /** Указано невалидное время */
    SmartPushStatusCode[SmartPushStatusCode["specifiedTimeValidationError"] = 1008] = "specifiedTimeValidationError";
    /** Для отправки на мобильное приложение переданы параметры для устройства или наоборот */
    SmartPushStatusCode[SmartPushStatusCode["surfaceParametersError"] = 1009] = "surfaceParametersError";
    /** В запросе указан sub не по формату */
    SmartPushStatusCode[SmartPushStatusCode["subFormatInvalid"] = 1012] = "subFormatInvalid";
    /** Для данного навыка не включена возможность отправлять Push-уведомления */
    SmartPushStatusCode[SmartPushStatusCode["sendingNotificationsForThisProjectOrAppForbidden"] = 1013] = "sendingNotificationsForThisProjectOrAppForbidden";
    /** Превышен лимит на отправку push-уведомлений (минутный, часовой или суточный) */
    SmartPushStatusCode[SmartPushStatusCode["sendingLimitExceeded"] = 1014] = "sendingLimitExceeded";
    /** В запросе на устройство одновременно заполнены deviceSerialFilter и productFilter */
    SmartPushStatusCode[SmartPushStatusCode["deviceFiltersHaveBothDeviceSerialFilterAndProductFilter"] = 1015] = "deviceFiltersHaveBothDeviceSerialFilterAndProductFilter";
    /** Указанный шаблон для данного projectId не существует */
    SmartPushStatusCode[SmartPushStatusCode["specifiedTemplateForSpecifiedProjectNotExist"] = 1016] = "specifiedTemplateForSpecifiedProjectNotExist";
    /** Параметры в запросе не указаны в шаблоне или указаны поля, которые в шаблоне не определены */
    SmartPushStatusCode[SmartPushStatusCode["specifiedTemplateParamsInvalid"] = 1017] = "specifiedTemplateParamsInvalid";
    /** Достигнут лимит на отправку push-уведомлений этому клиенту */
    SmartPushStatusCode[SmartPushStatusCode["clientSendingLimitExceeded"] = 1018] = "clientSendingLimitExceeded";
})(SmartPushStatusCode = exports.SmartPushStatusCode || (exports.SmartPushStatusCode = {}));

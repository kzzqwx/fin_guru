"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSaluteResponse = void 0;
var createSaluteResponse = function (req) {
    var messageId = req.messageId, sessionId = req.sessionId, uuid = req.uuid, payload = req.payload;
    var message = {
        messageName: 'ANSWER_TO_USER',
        messageId: messageId,
        sessionId: sessionId,
        uuid: uuid,
        payload: {
            device: payload.device,
            projectName: payload.projectName,
            items: [],
            finished: false,
            intent: 'scenario',
        },
    };
    var runApp = function (server_action) {
        message = {
            messageId: messageId,
            sessionId: sessionId,
            uuid: uuid,
            messageName: 'POLICY_RUN_APP',
            payload: {
                projectName: payload.projectName,
                device: payload.device,
                server_action: server_action,
            },
        };
    };
    var getProfileData = function () {
        message = {
            messageId: messageId,
            sessionId: sessionId,
            uuid: uuid,
            messageName: 'GET_PROFILE_DATA',
            payload: {
                projectName: payload.projectName,
                device: payload.device,
            },
        };
    };
    var chooseProfileData = function (fields) {
        message = {
            messageId: messageId,
            sessionId: sessionId,
            uuid: uuid,
            messageName: 'CHOOSE_PROFILE_DATA',
            payload: {
                fields: fields,
            },
        };
    };
    var getDetailedProfileData = function () {
        message = {
            messageId: messageId,
            sessionId: sessionId,
            uuid: uuid,
            messageName: 'DETAILED_PROFILE_DATA',
            payload: {
                fields: ['address'],
            },
        };
    };
    return {
        appendBubble: function (bubble, options) {
            if (options === void 0) { options = {}; }
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            var expand_policy = options.expand_policy, markdown = options.markdown;
            message.payload.items.push({
                bubble: {
                    text: bubble,
                    expand_policy: expand_policy || 'auto_expand',
                    markdown: typeof markdown === 'undefined' ? false : markdown,
                },
            });
        },
        appendCard: function (card) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.items.push({ card: card });
        },
        appendCommand: function (command) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.items.push({ command: { type: 'smart_app_data', smart_app_data: __assign({}, command) } });
        },
        openDeepLink: function (deepLink) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.items.push({
                command: { type: 'action', action: { type: 'deep_link', deep_link: deepLink } },
            });
        },
        appendItem: function (item) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.items.push(item);
        },
        appendError: function (error) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.items.push({ command: { type: 'smart_app_error', smart_app_error: error } });
        },
        appendSuggestions: function (suggestions) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            if (message.payload.suggestions == null) {
                message.payload.suggestions = { buttons: [] };
            }
            for (var i = 0; i < suggestions.length; i++) {
                var suggest = suggestions[i];
                if (typeof suggest === 'string') {
                    message.payload.suggestions.buttons.push({
                        title: suggest,
                        action: { type: 'text', text: suggest, should_send_to_backend: true },
                    });
                }
                else {
                    message.payload.suggestions.buttons.push(suggest);
                }
            }
            message.payload.suggestions.buttons;
        },
        askPayment: function (invoiceId) {
            runApp({
                app_info: { systemName: 'payment_app' },
                parameters: {
                    invoice_id: invoiceId.toString(),
                    app_info: {
                        projectId: req.payload.app_info.projectId,
                    },
                },
            });
        },
        finish: function () {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.finished = true;
        },
        runApp: runApp,
        getProfileData: getProfileData,
        chooseProfileData: chooseProfileData,
        getDetailedProfileData: getDetailedProfileData,
        setIntent: function (intent) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.intent = intent;
        },
        setPronounceText: function (text, options) {
            if (options === void 0) { options = { ssml: false }; }
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            if (options.ssml) {
                if (!/^<speak>.*<\/speak>$/gi.test(text)) {
                    text = "<speak>" + text + "</speak>";
                }
                message.payload.pronounceTextType = 'application/ssml';
            }
            message.payload.pronounceText = text;
        },
        setEmotion: function (emotion) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.emotion = {
                emotionId: emotion,
            };
        },
        setAutoListening: function (value) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.auto_listening = value;
        },
        setASRHints: function (hints) {
            if (message.messageName !== 'ANSWER_TO_USER') {
                throw new Error('Wrong message type');
            }
            message.payload.asr_hints = hints;
        },
        get message() {
            return message;
        },
    };
};
exports.createSaluteResponse = createSaluteResponse;

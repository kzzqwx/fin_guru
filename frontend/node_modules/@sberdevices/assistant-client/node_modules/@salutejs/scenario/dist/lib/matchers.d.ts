import { IntentsDict, SaluteRequest } from './types/salute';
import { AppState } from './types/systemMessage';
export declare const compare: (expected: any, actual: any) => any;
export declare function createMatchers<R extends SaluteRequest = SaluteRequest, I extends IntentsDict = IntentsDict>(): {
    match: (...matchers: ((req: R) => boolean)[]) => (req: R) => boolean;
    intent: (expected: keyof I, { confidence }?: {
        confidence: number;
    }) => (req: R) => boolean;
    text: (expected: string, { normalized }?: {
        normalized: boolean;
    }) => (req: R) => boolean;
    state: (expected: Partial<R['state']>) => (req: R) => any;
    selectItem: (expected: AppState) => (req: R) => {
        [k: string]: unknown;
        number?: number | undefined;
        id?: string | undefined;
        title?: string | undefined;
        aliases?: string[] | undefined;
        server_action?: unknown;
        action?: unknown;
    } | undefined;
    selectItems: (expected: AppState) => (req: R) => {
        [k: string]: unknown;
        number?: number | undefined;
        id?: string | undefined;
        title?: string | undefined;
        aliases?: string[] | undefined;
        server_action?: unknown;
        action?: unknown;
    }[] | undefined;
    action: (expected: string) => (req: R) => boolean;
    regexp: (re: RegExp, { normalized }?: {
        normalized: boolean;
    }) => (req: R) => boolean;
};
//# sourceMappingURL=matchers.d.ts.map
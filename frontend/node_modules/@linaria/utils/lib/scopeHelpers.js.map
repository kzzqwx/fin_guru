{"version":3,"file":"scopeHelpers.js","names":["_types","require","_findIdentifiers","_interopRequireWildcard","_getScope","_isNotNull","_interopRequireDefault","_isRemoved","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","validateField","node","val","field","validate","optional","getBinding","path","binding","getScope","name","undefined","reference","referencePath","force","isReferencedIdentifier","referencePaths","includes","referenced","push","references","length","isReferenced","kind","isFunctionExpression","parentPath","isVariableDeclarator","id","isIdentifier","idBinding","every","i","find","ancestor","isTSType","isFlowType","isReferencedConstantViolation","p","isAssignmentExpression","isExpressionStatement","dereference","isReference","referencesInConstantViolations","constantViolations","filter","isConstantViolation","nonTypeReferences","nonType","dereferenceAll","findIdentifiers","map","identifierPath","isNotNull","referenceAll","forEach","deletingNodes","WeakSet","isEmptyList","list","getPathFromAction","action","Array","isArray","Error","isPrototypeAssignment","left","type","object","property","canFunctionBeDelete","fnPath","fnScope","scope","parentScope","parent","listKey","findActionForNode","isRemoved","add","isProgram","isClassDeclaration","isClassExpression","body","isFunction","isBlockStatement","async","directives","generator","params","isConditionalExpression","alternate","isLogicalExpression","operator","value","right","isObjectProperty","maybeDefineProperty","isCallExpression","matchesPattern","isTemplateLiteral","isForInStatement","isFunctionDeclaration","isObjectMethod","isClassMethod","prevStatement","isIfStatement","isReturnStatement","slice","statement","isExportNamedDeclaration","declaration","isTryStatement","NODE_FIELDS","referenceEnums","program","traverse","ExpressionStatement","expressionStatement","expression","callee","args","arg","fixed","removeUnreferenced","items","Set","item","hasReferences","forDeleting","identifier","removeWithRelated","result","sort","a","b","_a$node","_b$node","localeCompare","getNodeForValue","staticEvaluate","evaluated","evaluate","confident","applyAction","test","isBooleanLiteral","consequent","mutate","remove","replaceWith","paths","rootPath","getProgramParent","actions","affectedPaths","referencedIdentifiers","_a$node2","_b$node2","referencesOfBinding","_ref","reduce","acc","ref","isExportDefaultDeclaration","clean","_i$node","join","_i$node2","fn","dereferenced","mutated","dead","assignments","assignment","declared","values","getOuterBindingIdentifiers","init","_assignment$parentPat","_scope$getBinding","Identifier","isArrayPattern","elements"],"sources":["../src/scopeHelpers.ts"],"sourcesContent":["/* eslint-disable no-restricted-syntax */\n/* eslint @typescript-eslint/no-use-before-define: [\"error\", { \"functions\": false }] */\n\nimport type { Binding, NodePath } from '@babel/traverse';\nimport type {\n  FieldOptions,\n  Function as FunctionNode,\n  Identifier,\n  JSXIdentifier,\n  Node,\n  Program,\n} from '@babel/types';\nimport { NODE_FIELDS } from '@babel/types';\n\nimport findIdentifiers, { nonType } from './findIdentifiers';\nimport { getScope } from './getScope';\nimport isNotNull from './isNotNull';\nimport isRemoved from './isRemoved';\n\nfunction validateField(\n  node: Node,\n  key: string,\n  val: unknown,\n  field: FieldOptions\n) {\n  if (!(field != null && field.validate)) return true;\n  if (field.optional && val == null) return true;\n  try {\n    field.validate(node, key, val);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction getBinding(path: NodePath<Identifier | JSXIdentifier>) {\n  const binding = getScope(path).getBinding(path.node.name);\n  if (!binding) {\n    return undefined;\n  }\n\n  return binding;\n}\n\nexport function reference(\n  path: NodePath<Identifier | JSXIdentifier>,\n  referencePath: NodePath = path,\n  force = false\n): void {\n  if (!force && !path.isReferencedIdentifier()) return;\n\n  const binding = getBinding(path);\n  if (!binding) return;\n\n  if (binding.referencePaths.includes(referencePath)) {\n    return;\n  }\n\n  binding.referenced = true;\n  binding.referencePaths.push(referencePath ?? path);\n  binding.references = binding.referencePaths.length;\n}\n\nfunction isReferenced(binding: Binding): boolean {\n  const { kind, referenced, referencePaths, path } = binding;\n\n  if (\n    path.isFunctionExpression() &&\n    path.key === 'init' &&\n    path.parentPath.isVariableDeclarator()\n  ) {\n    // It is a function expression in a variable declarator\n    const id = path.parentPath.get('id');\n    if (id.isIdentifier()) {\n      const idBinding = getBinding(id);\n      return idBinding ? isReferenced(idBinding) : true;\n    }\n\n    return true;\n  }\n\n  if (!referenced) {\n    return false;\n  }\n\n  // If it's a param binding, we can't just remove it\n  // because it brakes the function signature. Keep it alive for now.\n  if ((kind as string) === 'param') {\n    return true;\n  }\n\n  // If all remaining references are in TS/Flow types, binding is unreferenced\n  return (\n    referencePaths.length > 0 ||\n    referencePaths.every((i) =>\n      i.find((ancestor) => ancestor.isTSType() || ancestor.isFlowType())\n    )\n  );\n}\n\nfunction isReferencedConstantViolation(path: NodePath, binding: Binding) {\n  if (path.find((p) => p === binding.path)) {\n    // function a(flag) { return (a = function(flag) { flag ? 1 : 2 }) }\n    // ^ Looks crazy, yeh? Welcome to the wonderful world of transpilers!\n    // `a = â€¦` here isn't a reference.\n    return false;\n  }\n\n  if (!path.isReferenced()) {\n    return false;\n  }\n\n  if (\n    path.isAssignmentExpression() &&\n    path.parentPath.isExpressionStatement()\n  ) {\n    // A root assignment without a parent expression statement is not a reference\n    return false;\n  }\n\n  return true;\n}\n\nexport function dereference(\n  path: NodePath<Identifier | JSXIdentifier>\n): Binding | null {\n  const binding = getBinding(path);\n  if (!binding) return null;\n\n  const isReference = binding.referencePaths.includes(path);\n  let referencesInConstantViolations = binding.constantViolations.filter((i) =>\n    isReferencedConstantViolation(i, binding)\n  );\n\n  const isConstantViolation = referencesInConstantViolations.includes(path);\n\n  if (!isReference && !isConstantViolation) {\n    return null;\n  }\n\n  if (isReference) {\n    binding.referencePaths = binding.referencePaths.filter((i) => i !== path);\n    binding.references -= 1;\n  } else {\n    referencesInConstantViolations = referencesInConstantViolations.filter(\n      (i) => i !== path\n    );\n  }\n\n  const nonTypeReferences = binding.referencePaths.filter(nonType);\n  binding.referenced =\n    nonTypeReferences.length + referencesInConstantViolations.length > 0;\n\n  return binding;\n}\n\nfunction dereferenceAll(path: NodePath): Binding[] {\n  return findIdentifiers([path])\n    .map((identifierPath) => dereference(identifierPath))\n    .filter(isNotNull);\n}\n\nexport function referenceAll(path: NodePath): void {\n  findIdentifiers([path]).forEach((identifierPath) =>\n    reference(identifierPath)\n  );\n}\n\nconst deletingNodes = new WeakSet<NodePath>();\n\nconst isEmptyList = (list: NodePath[]) =>\n  list.length === 0 || list.every((i) => deletingNodes.has(i));\n\ntype ReplaceAction = [action: 'replace', what: NodePath, by: Node];\ntype RemoveAction = [action: 'remove', what: NodePath];\n\nconst getPathFromAction = (action: RemoveAction | ReplaceAction) => {\n  if (!Array.isArray(action)) {\n    return action;\n  }\n\n  if (action[0] === 'replace' || action[0] === 'remove') {\n    return action[1];\n  }\n\n  throw new Error(`Unknown action type: ${action[0]}`);\n};\n\nfunction isPrototypeAssignment(path: NodePath) {\n  if (!path.isAssignmentExpression()) {\n    return false;\n  }\n\n  const { left } = path.node;\n  if (!left) {\n    return false;\n  }\n\n  if (left.type !== 'MemberExpression') {\n    return false;\n  }\n\n  const { object, property } = left;\n  if (!object || !property) {\n    return false;\n  }\n\n  return (\n    object.type === 'MemberExpression' &&\n    object.property.type === 'Identifier' &&\n    object.property.name === 'prototype'\n  );\n}\n\nfunction canFunctionBeDelete(fnPath: NodePath<FunctionNode>) {\n  if (isPrototypeAssignment(fnPath.parentPath)) {\n    // It is a prototype assignment, we can't delete it since we can't find all usages\n    return false;\n  }\n\n  const fnScope = fnPath.scope;\n  const parentScope = fnScope.parent;\n  if (parentScope.parent) {\n    // It isn't a top-level function, so we can't delete it\n    return true;\n  }\n\n  if (fnPath.listKey === 'arguments') {\n    // It is passed as an argument to another function, we can't delete it\n    return true;\n  }\n\n  return false;\n}\n\nexport function findActionForNode(\n  path: NodePath\n): RemoveAction | ReplaceAction | null {\n  if (isRemoved(path)) return null;\n\n  deletingNodes.add(path);\n\n  const parent = path.parentPath;\n\n  if (!parent) return ['remove', path];\n\n  if (parent.isProgram()) {\n    // Do not delete Program node\n    return ['remove', path];\n  }\n\n  if (parent.isClassDeclaration() || parent.isClassExpression()) {\n    if (path.key === 'body') {\n      return ['replace', path, { type: 'ClassBody', body: [] }];\n    }\n  }\n\n  if (parent.isFunction()) {\n    if (path.listKey === 'params') {\n      // Do not remove params of functions\n      return null;\n    }\n\n    if (\n      (path.isBlockStatement() && isEmptyList(path.get('body'))) ||\n      path === parent.get('body')\n    ) {\n      if (!canFunctionBeDelete(parent)) {\n        return [\n          'replace',\n          parent,\n          {\n            ...parent.node,\n            async: false,\n            body: {\n              type: 'BlockStatement',\n              body: [],\n              directives: [],\n            },\n            generator: false,\n            params: [],\n          },\n        ];\n      }\n    }\n  }\n\n  if (parent.isConditionalExpression()) {\n    if (path.key === 'test') {\n      return ['replace', parent, parent.node.alternate];\n    }\n\n    if (path.key === 'consequent') {\n      return ['replace', path, { type: 'Identifier', name: 'undefined' }];\n    }\n\n    if (path.key === 'alternate') {\n      return ['replace', path, { type: 'Identifier', name: 'undefined' }];\n    }\n  }\n\n  if (parent.isLogicalExpression({ operator: '&&' })) {\n    return [\n      'replace',\n      parent,\n      {\n        type: 'BooleanLiteral',\n        value: false,\n      },\n    ];\n  }\n\n  if (parent.isLogicalExpression({ operator: '||' })) {\n    return [\n      'replace',\n      parent,\n      path.key === 'left' ? parent.node.right : parent.node.left,\n    ];\n  }\n\n  if (parent.isObjectProperty()) {\n    // let's check if it is a special case with Object.defineProperty\n    const key = parent.get('key');\n    if (key.isIdentifier({ name: 'get' })) {\n      const maybeDefineProperty = parent.parentPath.parentPath;\n      if (\n        maybeDefineProperty?.isCallExpression() &&\n        maybeDefineProperty\n          .get('callee')\n          .matchesPattern('Object.defineProperty')\n      ) {\n        return findActionForNode(maybeDefineProperty);\n      }\n    }\n\n    return findActionForNode(parent);\n  }\n\n  if (parent.isTemplateLiteral()) {\n    return [\n      'replace',\n      path,\n      {\n        type: 'StringLiteral',\n        value: '',\n      },\n    ];\n  }\n\n  if (parent.isAssignmentExpression()) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isCallExpression()) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isForInStatement({ left: path.node })) {\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isFunctionExpression({ body: path.node }) ||\n    parent.isFunctionDeclaration() ||\n    parent.isObjectMethod() ||\n    parent.isClassMethod()\n  ) {\n    return findActionForNode(parent);\n  }\n\n  if (parent.isBlockStatement()) {\n    const body = parent.get('body');\n    if (isEmptyList(body)) {\n      return findActionForNode(parent);\n    }\n\n    if (path.listKey === 'body' && typeof path.key === 'number') {\n      if (path.key > 0) {\n        // We can check whether the previous one can be removed\n        const prevStatement = body[path.key - 1];\n        if (\n          prevStatement.isIfStatement() &&\n          prevStatement.get('consequent').isReturnStatement()\n        ) {\n          // It's `if (â€¦) return â€¦`, we can remove it.\n          return findActionForNode(prevStatement);\n        }\n      } else if (\n        body.slice(1).every((statement) => deletingNodes.has(statement))\n      ) {\n        // If it is the first statement and all other statements\n        // are marked for deletion, we can remove the whole block.\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isVariableDeclarator()) {\n    return findActionForNode(parent);\n  }\n\n  if (\n    parent.isExportNamedDeclaration() &&\n    ((path.key === 'specifiers' && isEmptyList(parent.get('specifiers'))) ||\n      (path.key === 'declaration' && parent.node.declaration === path.node))\n  ) {\n    return findActionForNode(parent);\n  }\n\n  for (const key of ['body', 'declarations', 'specifiers']) {\n    if (path.listKey === key && typeof path.key === 'number') {\n      const list = parent.get(key) as NodePath[];\n      if (isEmptyList(list)) {\n        return findActionForNode(parent);\n      }\n    }\n  }\n\n  if (parent.isTryStatement()) {\n    return findActionForNode(parent);\n  }\n\n  if (!path.listKey && path.key) {\n    const field = NODE_FIELDS[parent.type][path.key];\n    if (!validateField(parent.node, path.key as string, null, field)) {\n      // The parent node isn't valid without this field, so we should remove it also.\n      return findActionForNode(parent);\n    }\n  }\n\n  for (const key of [\n    'argument',\n    'block',\n    'body',\n    'callee',\n    'discriminant',\n    'expression',\n    'id',\n    'left',\n    'object',\n    'property',\n    'right',\n    'test',\n  ]) {\n    if (path.key === key && parent.get(key) === path) {\n      return findActionForNode(parent);\n    }\n  }\n\n  return ['remove', path];\n}\n\n// @babel/preset-typescript transpiles enums, but doesn't reference used identifiers.\nfunction referenceEnums(program: NodePath<Program>) {\n  /*\n   * We are looking for transpiled enums.\n   *   (function (Colors) {\n   *     Colors[\"BLUE\"] = \"#27509A\";\n   *   })(Colors || (Colors = {}));\n   */\n  program.traverse({\n    ExpressionStatement(expressionStatement) {\n      const expression = expressionStatement.get('expression');\n      if (!expression.isCallExpression()) return;\n\n      const callee = expression.get('callee');\n      const args = expression.get('arguments');\n      if (!callee.isFunctionExpression() || args.length !== 1) return;\n      const [arg] = args;\n      if (arg.isLogicalExpression({ operator: '||' })) {\n        referenceAll(arg);\n      }\n    },\n  });\n}\n\nconst fixed = new WeakSet<NodePath<Program>>();\n\nfunction removeUnreferenced(items: NodePath<Identifier | JSXIdentifier>[]) {\n  const referenced = new Set<NodePath<Identifier | JSXIdentifier>>();\n  items.forEach((item) => {\n    if (!item.node || isRemoved(item)) return;\n    const binding = getScope(item).getBinding(item.node.name);\n    if (!binding) return;\n    const hasReferences =\n      binding.referencePaths.filter((i) => !isRemoved(i)).length > 0;\n    if (hasReferences) {\n      referenced.add(item);\n      return;\n    }\n\n    const forDeleting = [binding.path, ...binding.constantViolations]\n      .map(findActionForNode)\n      .filter(isNotNull)\n      .map(getPathFromAction);\n\n    if (forDeleting.length === 0) return;\n\n    findIdentifiers(forDeleting).forEach((identifier) => {\n      referenced.add(identifier);\n    });\n\n    removeWithRelated(forDeleting);\n  });\n\n  const result = [...referenced];\n  result.sort((a, b) => a.node?.name.localeCompare(b.node?.name));\n\n  return result;\n}\n\nfunction getNodeForValue(value: unknown): Node | undefined {\n  if (typeof value === 'string') {\n    return {\n      type: 'StringLiteral',\n      value,\n    };\n  }\n\n  if (typeof value === 'number') {\n    return {\n      type: 'NumericLiteral',\n      value,\n    };\n  }\n\n  if (typeof value === 'boolean') {\n    return {\n      type: 'BooleanLiteral',\n      value,\n    };\n  }\n\n  if (value === null) {\n    return {\n      type: 'NullLiteral',\n    };\n  }\n\n  if (value === undefined) {\n    return {\n      type: 'Identifier',\n      name: 'undefined',\n    };\n  }\n\n  return undefined;\n}\n\nfunction staticEvaluate(path: NodePath | null | undefined): void {\n  if (!path) return;\n  const evaluated = path.evaluate();\n  if (evaluated.confident) {\n    const node = getNodeForValue(evaluated.value);\n    if (node) {\n      applyAction(['replace', path, node]);\n      return;\n    }\n  }\n\n  if (path.isIfStatement()) {\n    const test = path.get('test');\n    if (!test.isBooleanLiteral()) {\n      return;\n    }\n\n    const { consequent, alternate } = path.node;\n    if (test.node.value) {\n      applyAction(['replace', path, consequent]);\n    } else if (alternate) {\n      applyAction(['replace', path, alternate]);\n    } else {\n      applyAction(['remove', path]);\n    }\n  }\n}\n\nfunction applyAction(action: ReplaceAction | RemoveAction) {\n  mutate(action[1], (p) => {\n    if (isRemoved(p)) return;\n\n    const parent = p.parentPath;\n\n    if (action[0] === 'remove') {\n      p.remove();\n    }\n\n    if (action[0] === 'replace') {\n      p.replaceWith(action[2]);\n    }\n\n    staticEvaluate(parent);\n  });\n}\n\nfunction removeWithRelated(paths: NodePath[]) {\n  if (paths.length === 0) return;\n\n  const rootPath = getScope(paths[0]).getProgramParent()\n    .path as NodePath<Program>;\n\n  if (!fixed.has(rootPath)) {\n    // Some libraries don't care about bindings, references, and other staff\n    // So we have to fix the scope before we can detect unused code\n    referenceEnums(rootPath);\n    fixed.add(rootPath);\n  }\n\n  const actions: (ReplaceAction | RemoveAction)[] = paths\n    .map(findActionForNode)\n    .filter(isNotNull);\n\n  const affectedPaths = actions.map(getPathFromAction);\n\n  let referencedIdentifiers = findIdentifiers(affectedPaths, 'reference');\n  referencedIdentifiers.sort(\n    (a, b) => a.node?.name.localeCompare(b.node?.name)\n  );\n\n  const referencesOfBinding = findIdentifiers(affectedPaths, 'declaration')\n    .map((i) => (i.node && getScope(i).getBinding(i.node.name)) ?? null)\n    .filter(isNotNull)\n    .reduce(\n      (acc, i) => [...acc, ...i.referencePaths.filter(nonType)],\n      [] as NodePath[]\n    )\n    .filter(\n      (ref) =>\n        // Do not remove `export default function`\n        !ref.isExportDefaultDeclaration() ||\n        !ref.get('declaration').isFunctionDeclaration()\n    );\n\n  actions.forEach(applyAction);\n\n  removeWithRelated(referencesOfBinding);\n\n  let clean = false;\n  while (!clean && referencedIdentifiers.length > 0) {\n    const referenced = removeUnreferenced(referencedIdentifiers);\n    clean =\n      referenced.map((i) => i.node?.name).join('|') ===\n      referencedIdentifiers.map((i) => i.node?.name).join('|');\n    referencedIdentifiers = referenced;\n  }\n}\n\nfunction mutate<T extends NodePath>(path: T, fn: (p: T) => NodePath[] | void) {\n  const dereferenced = dereferenceAll(path);\n\n  const mutated = fn(path);\n\n  referenceAll(path);\n  mutated?.forEach((p) => referenceAll(p));\n\n  const dead = dereferenced.filter((p) => !isReferenced(p));\n\n  const forDeleting: NodePath[] = [];\n  dead.forEach((binding) => {\n    const assignments = [binding.path, ...binding.constantViolations];\n    assignments.forEach((assignment) => {\n      const { scope } = assignment;\n      const declared = Object.values(\n        assignment.getOuterBindingIdentifiers(false)\n      );\n      if (\n        declared.length === 1 &&\n        'name' in declared[0] &&\n        declared[0].name === binding.identifier.name\n      ) {\n        const init = assignment.get('init');\n        if (!Array.isArray(init) && init?.isAssignmentExpression()) {\n          // `const a = b = 1` â†’ `b = 1`\n          assignment.parentPath?.replaceWith({\n            type: 'ExpressionStatement',\n            expression: init.node,\n          });\n\n          const left = init.get('left');\n          if (left.isIdentifier()) {\n            // If it was forcefully referenced in the shaker\n            dereference(left);\n          }\n\n          return;\n        }\n        // Only one identifier is declared, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      if (\n        declared.every(\n          (identifier) =>\n            identifier.type === 'Identifier' &&\n            !scope.getBinding(identifier.name)?.referenced\n        )\n      ) {\n        // No other identifier is referenced, so we can remove the whole declaration\n        forDeleting.push(assignment);\n        return;\n      }\n\n      // We can't remove the binding, but we can remove the part of it\n      assignment.traverse({\n        Identifier(identifier) {\n          if (identifier.node.name === binding.identifier.name) {\n            const parent = identifier.parentPath;\n            if (\n              parent.isArrayPattern() &&\n              identifier.listKey === 'elements' &&\n              typeof identifier.key === 'number'\n            ) {\n              parent.node.elements[identifier.key] = null;\n            } else if (parent.isObjectProperty()) {\n              forDeleting.push(parent);\n            }\n          }\n        },\n      });\n    });\n  });\n\n  removeWithRelated(forDeleting);\n}\n\nexport { applyAction, mutate, removeWithRelated };\n"],"mappings":"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"}
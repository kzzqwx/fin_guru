{"ast":null,"code":"var _excluded = [\"value\", \"items\", \"separator\", \"onChange\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useCallback, useMemo } from 'react';\nimport { flattenItemsRecursive, setActiveRecursive } from './Select.utils';\n/**\n * Выпадающий список с возможностью выбора нескольких значений.\n */\nexport var withMultiSelect = function withMultiSelect(View) {\n  return /*#__PURE__*/forwardRef(function (_ref, ref) {\n    var value = _ref.value,\n      _ref$items = _ref.items,\n      items = _ref$items === void 0 ? [] : _ref$items,\n      _ref$separator = _ref.separator,\n      separator = _ref$separator === void 0 ? ', ' : _ref$separator,\n      onChange = _ref.onChange,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var isActive = useCallback(function (item) {\n      return Boolean(value && value.includes(item.value));\n    }, [value]);\n    var viewValue = useMemo(function () {\n      return flattenItemsRecursive(items).filter(isActive).map(function (item) {\n        return item.label;\n      }).join(separator);\n    }, [value, items, isActive]);\n    var viewItems = useMemo(function () {\n      return setActiveRecursive(items, isActive);\n    }, [value, items, isActive]);\n    var onItemSelect = useCallback(function (item) {\n      var set = new Set(value);\n      if (set.has(item.value)) {\n        set[\"delete\"](item.value);\n      } else {\n        set.add(item.value);\n      }\n      onChange === null || onChange === void 0 || onChange(Array.from(set));\n    }, [value, onChange]);\n    return /*#__PURE__*/React.createElement(View, _extends({}, rest, {\n      ref: ref,\n      value: viewValue,\n      items: viewItems,\n      onItemSelect: onItemSelect\n    }));\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
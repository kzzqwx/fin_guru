{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { useCallback, useEffect, useRef } from 'react';\nimport { getIdLastModal, hasModals } from '../ModalContext';\nimport { usePopupContext } from '../../Popup';\nvar ESCAPE_KEYCODE = 27;\nexport var useModal = function useModal(_ref) {\n  var id = _ref.id,\n    isOpen = _ref.isOpen,\n    popupInfo = _ref.popupInfo,\n    onEscKeyDown = _ref.onEscKeyDown,\n    onClose = _ref.onClose,\n    _ref$closeOnEsc = _ref.closeOnEsc,\n    closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc;\n  var popupController = usePopupContext();\n  var overflow = useRef(document.body.style.overflowY);\n\n  // При ESC закрывает текущее окно, если это возможно\n  var onKeyDown = useCallback(function (event) {\n    if (!closeOnEsc) {\n      return;\n    }\n    if (event.keyCode === ESCAPE_KEYCODE && getIdLastModal(popupController.items) === id) {\n      if (onEscKeyDown) {\n        onEscKeyDown(event);\n        return;\n      }\n      if (onClose) {\n        onClose();\n      }\n    }\n  }, [onClose, onEscKeyDown, popupController.items, closeOnEsc]);\n  useEffect(function () {\n    window.addEventListener('keydown', onKeyDown);\n    return function () {\n      window.removeEventListener('keydown', onKeyDown);\n    };\n  }, [onClose, onEscKeyDown, popupController.items, closeOnEsc]);\n\n  // linaria не поддерживает динамический global\n  useEffect(function () {\n    if (isOpen) {\n      overflow.current = document.body.style.overflowY;\n      document.body.style.overflowY = 'hidden';\n    }\n  }, [isOpen]);\n  useEffect(function () {\n    if (!isOpen && !hasModals(popupController.items)) {\n      document.body.style.overflowY = overflow.current;\n    }\n  }, [isOpen, overflow.current, popupController.items]);\n  var modalInfo = _objectSpread({\n    id: id,\n    info: {\n      isModal: true\n    }\n  }, popupInfo);\n  return {\n    modalInfo: modalInfo\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { a as createRecordOfflinePlayer } from './record-f3e17bf4.js';\nimport './common-ba25e019.js';\nimport './sdk-0b376395.js';\n\n// сначала создаем mock, затем вызываем createAssistant\nvar createAssistantHostMock = function (_a) {\n  var _b = _a === void 0 ? {} : _a,\n    _c = _b.context,\n    context = _c === void 0 ? window : _c;\n  /* eslint-disable-next-line no-spaced-func, func-call-spacing, @typescript-eslint/no-explicit-any */\n  var handlers = new Map();\n  var currentResolve = null;\n  var onReady;\n  var handleAction = function (action, name, requestId) {\n    if (!context.AssistantClient || !context.AssistantClient.onRequestState || !context.AssistantClient.onData) {\n      throw new Error('Assistant not initialized');\n    }\n    if (currentResolve) {\n      var resolve = currentResolve;\n      currentResolve = null;\n      resolve({\n        state: context.AssistantClient.onRequestState(),\n        name: name,\n        action: action,\n        requestId: requestId\n      });\n      return;\n    }\n    if ('action_id' in action) {\n      var actionType = action.action_id.toLowerCase();\n      var handler = handlers.has(actionType) ? handlers.get(actionType) : undefined;\n      if (handler != null) {\n        handler(action);\n      }\n    }\n  };\n  context.AssistantHost = {\n    close: function () {\n      // ничего не делаем\n    },\n    ready: function () {\n      var _a, _b;\n      ((_a = window.AssistantClient) === null || _a === void 0 ? void 0 : _a.onStart) && ((_b = window.AssistantClient) === null || _b === void 0 ? void 0 : _b.onStart());\n      onReady && onReady();\n    },\n    sendData: function (action, message) {\n      handleAction(JSON.parse(action), message);\n    },\n    sendDataContainer: function (container) {\n      var _a = JSON.parse(container),\n        action = _a.data,\n        name = _a.message_name,\n        requestId = _a.requestId;\n      handleAction(action, name, requestId);\n    },\n    setSuggests: function () {\n      throw new Error('Not implemented method');\n    },\n    setHints: function () {\n      throw new Error('Not implemented method');\n    },\n    sendText: function () {\n      throw new Error('Not implemented method');\n    },\n    setHeaderButtons: function () {\n      throw new Error('Not implemented method');\n    }\n  };\n  /** Добавить обработчик клиентского экшена */\n  var addActionHandler = function (actionType, handler) {\n    var type = actionType.toLowerCase();\n    if (handlers.has(type)) {\n      throw new Error('Action-handler already exists');\n    }\n    handlers.set(type, handler);\n  };\n  /** Удалить обработчик клиентского экшена */\n  var removeActionHandler = function (actionType) {\n    var type = actionType.toLowerCase();\n    if (handlers.has(type)) {\n      handlers.delete(type);\n    }\n  };\n  /** Вызвать обработчик команды бека */\n  var receiveCommand = function (command) {\n    if (!context.AssistantClient || !context.AssistantClient.onData) {\n      throw new Error('Assistant not initialized');\n    }\n    context.AssistantClient.onData(command);\n    return new Promise(function (resolve) {\n      return setTimeout(resolve);\n    });\n  };\n  /** Дождаться и вернуть клиентский экшен и его контекст */\n  var waitAction = function (onAction) {\n    return new Promise(function (resolve) {\n      currentResolve = resolve;\n      onAction && onAction();\n    });\n  };\n  return {\n    addActionHandler: addActionHandler,\n    removeActionHandler: removeActionHandler,\n    receiveCommand: receiveCommand,\n    waitAction: waitAction,\n    onReady: function (cb) {\n      onReady = cb;\n    }\n  };\n};\nvar createAssistantHostMockWithRecord = function (_a) {\n  var _b = _a.context,\n    context = _b === void 0 ? window : _b,\n    record = _a.record;\n  var mock = createAssistantHostMock({\n    context: context\n  });\n  var player = createRecordOfflinePlayer(record, {\n    context: context\n  });\n  var hasNext = true;\n  var next = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      onRequest = _b.onRequest,\n      _c = _b.waitRequest,\n      waitRequest = _c === void 0 ? false : _c;\n    return new Promise(function (resolve) {\n      hasNext = player.continue(function (command) {\n        if (!waitRequest && onRequest == null) {\n          resolve(mock.receiveCommand(command));\n          return;\n        }\n        return mock.waitAction(onRequest).then(function (result) {\n          // на будущее - неплохо было бы иметь эталон из записи\n          mock.receiveCommand(command);\n          resolve(result);\n        });\n      });\n    });\n  };\n  return {\n    get hasNext() {\n      return hasNext;\n    },\n    onReady: mock.onReady,\n    next: next,\n    receiveCommand: mock.receiveCommand\n  };\n};\nexport { createAssistantHostMock, createAssistantHostMockWithRecord };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
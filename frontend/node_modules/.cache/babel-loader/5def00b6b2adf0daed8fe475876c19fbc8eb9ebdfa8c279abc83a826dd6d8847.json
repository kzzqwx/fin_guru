{"ast":null,"code":"import { useMemo, useContext, useState, useLayoutEffect, useEffect, createContext, createElement, forwardRef } from 'react';\nlet StoreContext = createContext();\nlet useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nlet customContext = context => (...keys) => {\n  let store = useContext(context);\n  if (true && !store) {\n    throw new Error('Could not find storeon context value.' + 'Please ensure the component is wrapped in a <StoreContext.Provider>');\n  }\n  let rerender = useState({});\n  useIsomorphicLayoutEffect(() => {\n    return store.on('@changed', (_, changed) => {\n      let changesInKeys = keys.some(key => key in changed);\n      if (changesInKeys) rerender[1]({});\n    });\n  }, []);\n  return useMemo(() => {\n    let state = store.get();\n    let data = {};\n    keys.forEach(key => {\n      data[key] = state[key];\n    });\n    data.dispatch = store.dispatch;\n    return data;\n  }, [rerender[0]]);\n};\nlet useStoreon = customContext(StoreContext);\nlet connectStoreon = (...keys) => {\n  let Component = keys.pop();\n  return forwardRef((originProps, ref) => {\n    let props = {\n      ...originProps,\n      ...useStoreon(...keys),\n      ref\n    };\n    return createElement(Component, props);\n  });\n};\nexport { useStoreon, StoreContext, connectStoreon, customContext };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nexport function focusedPathReducer(state, action) {\n  switch (action.type) {\n    case 'reset':\n      {\n        return [];\n      }\n    case 'set_initial_focus':\n      {\n        return [0];\n      }\n    case 'change_last_focus':\n      {\n        return [].concat(_toConsumableArray(state.slice(0, -1)), [action.value]);\n      }\n    case 'add_focus':\n      {\n        return [].concat(_toConsumableArray(state), [action.value]);\n      }\n    case 'return_prev_focus':\n      {\n        return _toConsumableArray(state.slice(0, -1));\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
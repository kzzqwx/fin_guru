{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useCallback, useEffect, useState } from 'react';\nexport var Keys = {\n  Enter: 'Enter',\n  Space: 'Space',\n  Tab: 'Tab',\n  Escape: 'Escape',\n  ArrowLeft: 'ArrowLeft',\n  ArrowRight: 'ArrowRight',\n  ArrowUp: 'ArrowUp',\n  ArrowDown: 'ArrowDown',\n  Backspace: 'Backspace',\n  ShiftLeft: 'ShiftLeft',\n  ShiftRight: 'ShiftRight'\n};\nexport var useKeyNavigation = function useKeyNavigation(_ref) {\n  var _ref$controlledRefs = _ref.controlledRefs,\n    targetRef = _ref$controlledRefs.targetRef,\n    chipsRefs = _ref$controlledRefs.chipsRefs,\n    selectRef = _ref$controlledRefs.selectRef,\n    itemsRefs = _ref$controlledRefs.itemsRefs,\n    inputRef = _ref$controlledRefs.inputRef,\n    opened = _ref.opened,\n    enumerationType = _ref.enumerationType,\n    valueType = _ref.valueType,\n    _ref$componentType = _ref.componentType,\n    componentType = _ref$componentType === void 0 ? 'select' : _ref$componentType,\n    value = _ref.value,\n    search = _ref.search,\n    updateValue = _ref.updateValue,\n    updateOpened = _ref.updateOpened;\n  var _useState = useState(-1),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectItemIndex = _useState2[0],\n    setSelectItemIndex = _useState2[1];\n  var _useState3 = useState(-1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    selectChipIndex = _useState4[0],\n    setSelectChipIndex = _useState4[1];\n  useEffect(function () {\n    var _itemsRefs$current;\n    if (!opened) {\n      setSelectItemIndex(-1);\n      setSelectChipIndex(-1);\n      return;\n    }\n    itemsRefs === null || itemsRefs === void 0 || (_itemsRefs$current = itemsRefs.current) === null || _itemsRefs$current === void 0 || (_itemsRefs$current = _itemsRefs$current[selectItemIndex]) === null || _itemsRefs$current === void 0 || _itemsRefs$current.focus();\n  }, [opened]);\n  useEffect(function () {\n    var _itemsRefs$current2;\n    itemsRefs === null || itemsRefs === void 0 || (_itemsRefs$current2 = itemsRefs.current) === null || _itemsRefs$current2 === void 0 || (_itemsRefs$current2 = _itemsRefs$current2[selectItemIndex]) === null || _itemsRefs$current2 === void 0 || _itemsRefs$current2.focus();\n  }, [value, search]);\n  var onKeyDownTarget = useCallback(function (event) {\n    var _focusedItem;\n    var code = event.code;\n    var chipsRefsCount = chipsRefs.current.length;\n    var scrollIntoView = false;\n    var newOpened = opened;\n    var newSelectItemIndex = selectItemIndex;\n    var newSelectChipIndex = selectChipIndex;\n    var focusedItem = null;\n    if (code === Keys.Enter || code === Keys.Space && componentType !== 'combobox') {\n      event.preventDefault();\n    }\n    if (code === Keys.Escape) {\n      newOpened = false;\n      newSelectItemIndex = -1;\n      newSelectChipIndex = -1;\n      focusedItem = targetRef.current;\n    }\n    if (code === Keys.ArrowLeft && valueType === 'multiple' && enumerationType === 'chip') {\n      var _chipsRefs$current;\n      var index = selectChipIndex - 1 <= 0 ? 0 : selectChipIndex - 1;\n      newSelectChipIndex = document.activeElement === targetRef.current ? 0 : index;\n      newSelectChipIndex = document.activeElement === (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) ? chipsRefsCount - 1 : newSelectChipIndex;\n      focusedItem = (_chipsRefs$current = chipsRefs.current) === null || _chipsRefs$current === void 0 ? void 0 : _chipsRefs$current[newSelectChipIndex];\n      scrollIntoView = true;\n    }\n    if (code === Keys.ArrowRight && valueType === 'multiple' && enumerationType === 'chip') {\n      var _chipsRefs$current2;\n      var _index = selectChipIndex + 1 === chipsRefsCount ? selectChipIndex : selectChipIndex + 1;\n      newSelectChipIndex = document.activeElement === targetRef.current ? 0 : _index;\n      focusedItem = _index === selectChipIndex ? inputRef === null || inputRef === void 0 ? void 0 : inputRef.current : (_chipsRefs$current2 = chipsRefs.current) === null || _chipsRefs$current2 === void 0 ? void 0 : _chipsRefs$current2[newSelectChipIndex];\n      scrollIntoView = true;\n    }\n    if (code === Keys.Backspace && document.activeElement !== (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current)) {\n      var _ref2, _chipsRefs$current3;\n      var _index2 = selectChipIndex - 1 <= 0 ? 0 : selectChipIndex - 1;\n      newSelectChipIndex = chipsRefsCount === 0 ? -1 : _index2;\n      focusedItem = chipsRefsCount === 0 ? (_ref2 = inputRef || targetRef) === null || _ref2 === void 0 ? void 0 : _ref2.current : chipsRefs === null || chipsRefs === void 0 || (_chipsRefs$current3 = chipsRefs.current) === null || _chipsRefs$current3 === void 0 ? void 0 : _chipsRefs$current3[_index2];\n      scrollIntoView = true;\n    }\n    if (code === Keys.ArrowUp || code === Keys.ArrowDown || code === Keys.Enter && componentType !== 'combobox' || code === Keys.Space && componentType !== 'combobox') {\n      var _itemsRefs$current3;\n      newOpened = true;\n      newSelectItemIndex = selectItemIndex === -1 ? 0 : selectItemIndex;\n      focusedItem = (_itemsRefs$current3 = itemsRefs.current) === null || _itemsRefs$current3 === void 0 ? void 0 : _itemsRefs$current3[newSelectItemIndex];\n    }\n\n    // INFO: Для кейсов, когда поведение закрытия может контролироваться снаружи\n    if (code !== Keys.Enter || componentType !== 'combobox') {\n      updateOpened(newOpened, event);\n    }\n    setSelectItemIndex(newSelectItemIndex);\n    setSelectChipIndex(newSelectChipIndex);\n    (_focusedItem = focusedItem) === null || _focusedItem === void 0 || _focusedItem.focus();\n    if (scrollIntoView) {\n      var _focusedItem2;\n      (_focusedItem2 = focusedItem) === null || _focusedItem2 === void 0 || _focusedItem2.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'center'\n      });\n    }\n  }, [opened, selectItemIndex, selectChipIndex, valueType, enumerationType, componentType, updateOpened]);\n  var onKeyDownSelect = useCallback(function (event) {\n    var _focusedItem3;\n    var code = event.code,\n      shiftKey = event.shiftKey;\n    var itemsRefsCount = itemsRefs.current.length;\n    var chipsRefsCount = chipsRefs.current.length;\n    var scrollIntoView = false;\n    var newOpened = opened;\n    var newSelectItemIndex = selectItemIndex;\n    var newSelectChipIndex = selectChipIndex;\n    var focusedItem = null;\n    if (code === Keys.Enter || code === Keys.Tab) {\n      event.preventDefault();\n    }\n    if (code === Keys.Escape) {\n      newOpened = false;\n      newSelectItemIndex = -1;\n      newSelectChipIndex = -1;\n      focusedItem = (inputRef || targetRef).current;\n    }\n    if (code === Keys.Tab) {\n      var _selectRef$current, _selectRef$current2;\n      newOpened = false;\n      newSelectItemIndex = -1;\n      newSelectChipIndex = -1;\n      focusedItem = shiftKey ? (_selectRef$current = selectRef.current) === null || _selectRef$current === void 0 ? void 0 : _selectRef$current.previousSibling : (_selectRef$current2 = selectRef.current) === null || _selectRef$current2 === void 0 ? void 0 : _selectRef$current2.nextSibling;\n    }\n    if (code === Keys.ArrowUp) {\n      var _itemsRefs$current4;\n      newSelectItemIndex = newSelectItemIndex - 1 === -1 ? itemsRefsCount - 1 : newSelectItemIndex - 1;\n      focusedItem = itemsRefs === null || itemsRefs === void 0 || (_itemsRefs$current4 = itemsRefs.current) === null || _itemsRefs$current4 === void 0 ? void 0 : _itemsRefs$current4[newSelectItemIndex];\n    }\n    if (code === Keys.ArrowDown) {\n      var _itemsRefs$current5;\n      newSelectItemIndex = newSelectItemIndex + 1 === itemsRefsCount ? 0 : newSelectItemIndex + 1;\n      focusedItem = itemsRefs === null || itemsRefs === void 0 || (_itemsRefs$current5 = itemsRefs.current) === null || _itemsRefs$current5 === void 0 ? void 0 : _itemsRefs$current5[newSelectItemIndex];\n    }\n    if ((code === Keys.ArrowRight || code === Keys.ArrowLeft) && valueType === 'multiple' && enumerationType === 'chip' && chipsRefsCount) {\n      var _chipsRefs$current4;\n      newSelectChipIndex = chipsRefsCount - 1;\n      newSelectItemIndex = -1;\n      focusedItem = chipsRefs === null || chipsRefs === void 0 || (_chipsRefs$current4 = chipsRefs.current) === null || _chipsRefs$current4 === void 0 ? void 0 : _chipsRefs$current4[newSelectChipIndex];\n      scrollIntoView = true;\n    }\n    if (code === Keys.Enter || code === Keys.Space && componentType !== 'combobox') {\n      var item = itemsRefs.current[newSelectItemIndex];\n\n      // TODO: #1016\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      if (item.ariaDisabled) {\n        return;\n      }\n      updateValue(item, event);\n      newOpened = valueType === 'single' ? false : opened;\n      focusedItem = valueType === 'single' ? targetRef.current : focusedItem;\n    }\n    var isValidKeyCode = [Keys.ShiftLeft, Keys.ShiftRight, Keys.ArrowDown, Keys.ArrowLeft, Keys.ArrowRight, Keys.ArrowUp, Keys.Enter, Keys.Escape, Keys.Tab].includes(code);\n    if (componentType === 'combobox' && !isValidKeyCode) {\n      event.stopPropagation();\n      focusedItem = inputRef === null || inputRef === void 0 ? void 0 : inputRef.current;\n      newSelectItemIndex = -1;\n      newSelectChipIndex = -1;\n    }\n    updateOpened(newOpened, event);\n    setSelectItemIndex(newSelectItemIndex);\n    setSelectChipIndex(newSelectChipIndex);\n    (_focusedItem3 = focusedItem) === null || _focusedItem3 === void 0 || _focusedItem3.focus();\n    if (scrollIntoView) {\n      var _focusedItem4;\n      (_focusedItem4 = focusedItem) === null || _focusedItem4 === void 0 || _focusedItem4.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'center'\n      });\n    }\n  }, [opened, selectItemIndex, selectChipIndex, valueType, enumerationType, componentType, updateOpened, updateValue]);\n  return {\n    onKeyDownTarget: onKeyDownTarget,\n    onKeyDownSelect: onKeyDownSelect\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
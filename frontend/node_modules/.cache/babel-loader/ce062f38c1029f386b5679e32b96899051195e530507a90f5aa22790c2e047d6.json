{"ast":null,"code":"var _excluded = [\"id\", \"size\", \"color\", \"deviceScale\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { accent } from '../../tokens';\nimport { useUniqId } from '../../hooks';\nimport { SpinnerSvg } from './SpinnerSvg';\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Spinner/Spinner');\nvar rotateAnimation = /*#__PURE__*/keyframes([\"from{transform:rotate(0);}to{transform:rotate(360deg);}\"]);\nvar StyledRoot = /*#__PURE__*/styled.div.withConfig({\n  componentId: \"plasma__sc-3zbofp-0\"\n})([\"display:flex;box-sizing:border-box;\", \" animation:\", \" 1s linear infinite;\"], function (_ref) {\n  var $size = _ref.$size;\n  return css([\"width:\", \";height:\", \";\"], $size, $size);\n}, rotateAnimation);\nvar scalingPixelBasis = 16;\nvar sizeFormatting = function sizeFormatting(size) {\n  var deviceScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (typeof size === 'number' || !size.endsWith('rem') && !size.endsWith('px')) {\n    return \"\".concat(Number(size) / (scalingPixelBasis * deviceScale), \"rem\");\n  }\n  return size;\n};\n\n/**\n * Компонент для отображения индикатора загрузки.\n */\nexport var Spinner = function Spinner(props) {\n  var id = props.id,\n    _props$size = props.size,\n    size = _props$size === void 0 ? 56 : _props$size,\n    _props$color = props.color,\n    color = _props$color === void 0 ? accent : _props$color,\n    deviceScale = props.deviceScale,\n    rest = _objectWithoutProperties(props, _excluded);\n  var uniqId = useUniqId();\n  var innerId = id || uniqId;\n  var currentSize = sizeFormatting(size, deviceScale);\n  return /*#__PURE__*/React.createElement(StyledRoot, _extends({\n    id: innerId,\n    $size: currentSize\n  }, rest), /*#__PURE__*/React.createElement(SpinnerSvg, {\n    id: innerId,\n    width: size,\n    height: size,\n    color: color\n  }));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
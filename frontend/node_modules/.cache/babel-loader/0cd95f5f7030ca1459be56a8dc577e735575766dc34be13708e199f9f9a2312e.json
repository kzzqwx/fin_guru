{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { classes, tokens } from '../Grid.tokens';\nexport var gridSizes = ['smallXXS', 'smallXS', 'smallS', 'smallM', 'smallL', 'smallXL', 'smallXXL', 'mediumXXS', 'mediumXS', 'mediumS', 'mediumM', 'mediumL', 'mediumXL', 'mediumXXL', 'largeXXS', 'largeXS', 'largeS', 'largeM', 'largeL', 'largeXL', 'largeXXL'];\n\n// TODO удалить после отказа от старой сетки\nvar legacyGridSizesMap = {\n  S: 'smallM',\n  M: 'mediumS',\n  L: 'mediumM',\n  XL: 'largeS',\n  XXL: 'largeM'\n};\nvar tokenPrefix = '--plasma-grid-';\nvar initialGridViewStyle = \"\\n    max-width: var(--plasma_private-grid-max-width, unset);\\n\";\nexport var getGridViewClass = function getGridViewClass(view) {\n  return \"plasma-grid-\".concat(view, \"-view\");\n};\n\n/**\n * Генерирует набор медиа-запросов под различную ширину вьюпорта\n *\n * @param {GridToken} cssTokens - объект view с набором токенов ширины вьюпорта\n * @return {string} сгенерированный набор медиа-запросов\n */\nvar gridMediaQueryTemplate = function gridMediaQueryTemplate(breakpoints) {\n  return gridSizes.map(function (size) {\n    if (!String(breakpoints[\"\".concat(tokenPrefix).concat(size, \"-min-width\")])) {\n      return;\n    }\n    var minWidth = breakpoints[\"\".concat(tokenPrefix).concat(size, \"-min-width\")];\n    var gap = tokens[\"\".concat(size, \"Gap\")];\n    var colsCount = tokens[\"\".concat(size, \"ColsCount\")];\n    var margin = tokens[\"\".concat(size, \"Margin\")];\n    return \"\\n                @media (min-width: \".concat(minWidth, \") {\\n                    --plasma_private-grid-cols-count: var(\").concat(colsCount, \");\\n                    --plasma_private-grid-gap: calc(var(\").concat(gap, \") / 2);\\n                    --plasma_private-grid-margin: var(\").concat(margin, \");\\n                    \\n                    padding: 0 var(--plasma_private-grid-margin);\\n\\n                    .\").concat(classes.col, \" {\\n                        --plasma_private-col-width: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-\").concat(size, \"-size, var(--plasma_private-grid-col-default-size)));\\n                        --plasma_private-col-offset: calc(100% / var(--plasma_private-grid-cols-count) * var(--plasma_private-grid-col-\").concat(size, \"-offset, var(--plasma_private-grid-col-default-offset)));\\n\\n                        width: var(--plasma_private-col-width, auto);\\n                        margin-left: var(--plasma_private-col-offset, initial);\\n                    }\\n                }\\n            \");\n  }).filter(function (style) {\n    return style;\n  }).join('\\n');\n};\n\n/**\n * Генерирует строку со стилями для обертки Grid и набором медиа-запросов\n *\n * @param {BreakpointToken} breakponts - объект view с набором токенов ширины вьюпорта\n * @param {string} viewName - название view из конфига\n * @return {string} стили для обертки Grid\n */\nexport var getBaseGridView = function getBaseGridView(breakponts, viewName) {\n  return \"\\n        \".concat(initialGridViewStyle, \"\\n\\n        &.\").concat(getGridViewClass(viewName), \" {\\n            \").concat(gridMediaQueryTemplate(breakponts), \"\\n        }\\n    \");\n};\n\n/**\n * Используется для получения токенов для view=\"legacy\"\n */\n// TODO удалить после отказа от старой сетки\nvar getColLegacyTokens = function getColLegacyTokens(props) {\n  return Object.entries(legacyGridSizesMap).reduce(function (acc, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      legacyGridSize = _ref2[0],\n      gridSize = _ref2[1];\n    var offset = props[\"offset\".concat(legacyGridSize)];\n    var size = props[\"size\".concat(legacyGridSize)];\n    if (!offset && !size) {\n      return acc;\n    }\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty(_defineProperty({}, \"--plasma_private-grid-col-\".concat(gridSize, \"-size\"), size), \"--plasma_private-grid-col-\".concat(gridSize, \"-offset\"), offset));\n  }, {});\n};\n\n/**\n * Используется в Col.tsx для получения токенов для view=\"default\"\n */\nexport var getColTokens = function getColTokens(props) {\n  // TODO удалить после отказа от старой сетки\n  var legacyTokens = getColLegacyTokens(props);\n  if (Object.keys(legacyTokens).length) {\n    return legacyTokens;\n  }\n  return gridSizes.reduce(function (acc, size) {\n    var _props$size, _props$size2;\n    if (!props[size]) {\n      return acc;\n    }\n    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty(_defineProperty({}, \"--plasma_private-grid-col-\".concat(size, \"-size\"), (_props$size = props[size]) === null || _props$size === void 0 ? void 0 : _props$size.size), \"--plasma_private-grid-col-\".concat(size, \"-offset\"), (_props$size2 = props[size]) === null || _props$size2 === void 0 ? void 0 : _props$size2.offset));\n  }, {});\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _excluded = [\"onChangeCommitted\", \"stepSize\", \"xPosition\", \"min\", \"max\", \"value\", \"bounds\", \"ariaValueMin\", \"ariaLabel\", \"multipleStepSize\", \"thumb\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { getSliderThumbValue } from './utils';\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Slider/ThumbBase');\nvar KeyboardSupport = {\n  PageUp: 33,\n  PageDown: 34,\n  End: 35,\n  Home: 36,\n  ArrowLeft: 37,\n  ArrowUp: 38,\n  ArrowRight: 39,\n  ArrowDown: 40\n};\nexport var ThumbBase = /*#__PURE__*/styled.div.withConfig({\n  componentId: \"plasma__sc-1clcpkv-0\"\n})([\"border-radius:50%;background-clip:content-box;box-sizing:content-box;transition:transform 0.1s ease-in-out;&:focus{outline:none;}&:not([disabled]){&.focus-visible,&[data-focus-visible-added]{border-color:currentColor;}}\"]);\nexport var Thumb = function Thumb(_ref) {\n  var onChangeCommitted = _ref.onChangeCommitted,\n    stepSize = _ref.stepSize,\n    _ref$xPosition = _ref.xPosition,\n    xPosition = _ref$xPosition === void 0 ? 0 : _ref$xPosition,\n    min = _ref.min,\n    max = _ref.max,\n    value = _ref.value,\n    bounds = _ref.bounds,\n    _ref$ariaValueMin = _ref.ariaValueMin,\n    ariaValueMin = _ref$ariaValueMin === void 0 ? min : _ref$ariaValueMin,\n    ariaLabel = _ref.ariaLabel,\n    multipleStepSize = _ref.multipleStepSize,\n    ThumbAbstract = _ref.thumb,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var onKeyPress = useCallback(function (event) {\n    event.persist();\n    var keyCode = event.keyCode,\n      target = event.target;\n    if (!Object.values(KeyboardSupport).includes(keyCode)) {\n      return;\n    }\n    var ArrowUp = KeyboardSupport.ArrowUp,\n      ArrowRight = KeyboardSupport.ArrowRight,\n      ArrowDown = KeyboardSupport.ArrowDown,\n      ArrowLeft = KeyboardSupport.ArrowLeft,\n      Home = KeyboardSupport.Home,\n      End = KeyboardSupport.End,\n      PageDown = KeyboardSupport.PageDown,\n      PageUp = KeyboardSupport.PageUp;\n    var computedMultipleSteps = stepSize * (multipleStepSize / 100 * max);\n    var data = {\n      x: 0,\n      deltaX: stepSize,\n      lastX: xPosition,\n      y: 0,\n      deltaY: 0,\n      lastY: 0,\n      node: target\n    };\n    switch (keyCode) {\n      case ArrowUp:\n      case ArrowRight:\n        data.x = xPosition + stepSize;\n        break;\n      case ArrowDown:\n      case ArrowLeft:\n        data.x = xPosition - stepSize;\n        data.deltaX = -stepSize;\n        break;\n      case PageUp:\n        data.x = xPosition + computedMultipleSteps;\n        data.deltaX = computedMultipleSteps;\n        break;\n      case PageDown:\n        data.x = xPosition - computedMultipleSteps;\n        data.deltaX = -computedMultipleSteps;\n        break;\n      case End:\n        data.x = max * stepSize;\n        break;\n      case Home:\n        data.x = 0;\n        break;\n      default:\n        data.x = 0;\n    }\n    var left = bounds.left,\n      right = bounds.right;\n\n    /*\n     * INFO:Находим значение в диапазоне между указанными левой и правой границами.\n     * Необходимо для правильного расчета положения SliderThumb.\n     * см. функция clamp\n     */\n    var boundedValue = Math.max(Math.min(right, data.x), left);\n    var computedValue = getSliderThumbValue(boundedValue, stepSize, min, max);\n    onChangeCommitted(computedValue, data);\n  }, [onChangeCommitted, bounds, stepSize, multipleStepSize, min, max, xPosition]);\n  return /*#__PURE__*/React.createElement(ThumbAbstract, _extends({\n    role: \"slider\",\n    \"aria-label\": ariaLabel,\n    \"aria-valuemin\": ariaValueMin,\n    \"aria-valuemax\": max,\n    \"aria-valuenow\": value,\n    \"aria-orientation\": \"horizontal\",\n    onKeyDown: onKeyPress\n  }, rest));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
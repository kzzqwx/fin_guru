{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nvar _excluded = [\"lines\", \"width\", \"roundness\", \"customGradientColor\", \"lighter\", \"size\"];\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useEffect, useState } from 'react';\nimport { StyledTextSkeleton } from './TextSkeleton.styles';\nvar variousWidth = [7.58, 5.27, 13.54, 6.63, 0.28, 14.8, 0.33, 11.26, 14.1, 10.59, 3.38, 13.5, 7.71, 3.34, 7.96];\n\n/**\n * Хок для создания компонента плейсхолдера нескольких строк текста.\n * Размеры компонента задаются с помощью констант и соответствуют размерам [типографических элементов](/?path=/docs/).\n */\nexport var textSkeleton = function textSkeleton(Component) {\n  return function (_ref) {\n    var lines = _ref.lines,\n      width = _ref.width,\n      roundness = _ref.roundness,\n      customGradientColor = _ref.customGradientColor,\n      lighter = _ref.lighter,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'body1' : _ref$size,\n      props = _objectWithoutProperties(_ref, _excluded);\n    var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      fixedWidth = _useState2[0],\n      setFixedWidth = _useState2[1];\n    var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      linesWidth = _useState4[0],\n      setLinesWidth = _useState4[1];\n    useEffect(function () {\n      if (!width) {\n        setFixedWidth(null);\n        var computedLengths = Array(lines).fill(0).reduce(function (acc, _, i) {\n          var w;\n          // Последняя строка\n          if (i === lines - 1 && lines !== 1) {\n            w = 45 - variousWidth[i % variousWidth.length];\n          } else if (lines === 1 || lines === 2) {\n            // Единственная или первая из двух\n            w = 100;\n          } else {\n            w = 100 - variousWidth[i % variousWidth.length];\n          }\n          return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, i, w));\n        }, {});\n        setLinesWidth(Object.values(computedLengths));\n        return;\n      }\n      if (!Number.isNaN(Number(width))) {\n        setFixedWidth(\"\".concat(width, \"%\"));\n      } else {\n        setFixedWidth(String(width));\n      }\n    }, [width, lines]);\n    return /*#__PURE__*/React.createElement(StyledTextSkeleton, props, Array.from(Array(lines), function (_, i) {\n      return /*#__PURE__*/React.createElement(Component, {\n        key: \"line:\".concat(i),\n        size: size,\n        roundness: roundness,\n        customGradientColor: customGradientColor,\n        lighter: lighter,\n        style: {\n          width: fixedWidth || \"\".concat(linesWidth[i], \"%\")\n        }\n      });\n    }));\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
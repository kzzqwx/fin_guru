{"ast":null,"code":"var _StyledDivider;\nvar _excluded = [\"label\", \"leftHelper\", \"contentLeft\", \"contentRight\", \"view\", \"size\", \"readOnly\", \"disabled\", \"dividerVariant\", \"dividerIcon\", \"firstValue\", \"secondValue\", \"firstValueError\", \"secondValueError\", \"firstValueSuccess\", \"secondValueSuccess\", \"firstPlaceholder\", \"secondPlaceholder\", \"firstTextfieldContentLeft\", \"firstTextfieldContentRight\", \"secondTextfieldContentLeft\", \"secondTextfieldContentRight\", \"firstTextfieldTextBefore\", \"secondTextfieldTextBefore\", \"firstTextfieldTextAfter\", \"secondTextfieldTextAfter\", \"onChangeFirstValue\", \"onChangeSecondValue\", \"onSearchFirstValue\", \"onSearchSecondValue\", \"onFocusFirstTextfield\", \"onFocusSecondTextfield\", \"onBlurFirstTextfield\", \"onBlurSecondTextfield\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useMemo } from 'react';\nimport { cx } from '../../utils';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as disabledCSS } from './variations/_disabled/base';\nimport { base as readOnlyCSS } from './variations/_readonly/base';\nimport { getChangeHandler, getSearchHandler } from './utils';\nimport { ContentWrapper, LeftHelper, StyledContentLeft, StyledContentRight, StyledDivider, StyledInput, StyledLabel, base } from './Range.styles';\nimport { classes } from './Range.tokens';\nexport var rangeRoot = function rangeRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (_ref, ref) {\n    var _StyledDivider2;\n    var label = _ref.label,\n      leftHelper = _ref.leftHelper,\n      contentLeft = _ref.contentLeft,\n      contentRight = _ref.contentRight,\n      view = _ref.view,\n      size = _ref.size,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$dividerVariant = _ref.dividerVariant,\n      dividerVariant = _ref$dividerVariant === void 0 ? 'dash' : _ref$dividerVariant,\n      dividerIcon = _ref.dividerIcon,\n      firstValue = _ref.firstValue,\n      secondValue = _ref.secondValue,\n      firstValueError = _ref.firstValueError,\n      secondValueError = _ref.secondValueError,\n      firstValueSuccess = _ref.firstValueSuccess,\n      secondValueSuccess = _ref.secondValueSuccess,\n      firstPlaceholder = _ref.firstPlaceholder,\n      secondPlaceholder = _ref.secondPlaceholder,\n      firstTextfieldContentLeft = _ref.firstTextfieldContentLeft,\n      firstTextfieldContentRight = _ref.firstTextfieldContentRight,\n      secondTextfieldContentLeft = _ref.secondTextfieldContentLeft,\n      secondTextfieldContentRight = _ref.secondTextfieldContentRight,\n      firstTextfieldTextBefore = _ref.firstTextfieldTextBefore,\n      secondTextfieldTextBefore = _ref.secondTextfieldTextBefore,\n      firstTextfieldTextAfter = _ref.firstTextfieldTextAfter,\n      secondTextfieldTextAfter = _ref.secondTextfieldTextAfter,\n      onChangeFirstValue = _ref.onChangeFirstValue,\n      onChangeSecondValue = _ref.onChangeSecondValue,\n      onSearchFirstValue = _ref.onSearchFirstValue,\n      onSearchSecondValue = _ref.onSearchSecondValue,\n      onFocusFirstTextfield = _ref.onFocusFirstTextfield,\n      onFocusSecondTextfield = _ref.onFocusSecondTextfield,\n      onBlurFirstTextfield = _ref.onBlurFirstTextfield,\n      onBlurSecondTextfield = _ref.onBlurSecondTextfield,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var rangeErrorClass = firstValueError && secondValueError ? classes.rangeError : undefined;\n    var firstValueErrorClass = !rangeErrorClass && firstValueError ? classes.rangeValueError : undefined;\n    var secondValueErrorClass = !rangeErrorClass && secondValueError ? classes.rangeValueError : undefined;\n    var rangeSuccessClass = firstValueSuccess && secondValueSuccess ? classes.rangeSuccess : undefined;\n    var firstValueSuccessClass = !rangeSuccessClass && firstValueSuccess ? classes.rangeValueSuccess : undefined;\n    var secondValueSuccessClass = !rangeSuccessClass && secondValueSuccess ? classes.rangeValueSuccess : undefined;\n    var handleChangeFirstValue = getChangeHandler(onChangeFirstValue, disabled, readOnly);\n    var handleChangeSecondValue = getChangeHandler(onChangeSecondValue, disabled, readOnly);\n    var handleSearchFirstValue = getSearchHandler(onSearchFirstValue, disabled, readOnly);\n    var handleSearchSecondValue = getSearchHandler(onSearchSecondValue, disabled, readOnly);\n    var Divider = useMemo(function () {\n      if (dividerVariant === 'none') {\n        return null;\n      }\n      if (dividerVariant === 'dash') {\n        return _StyledDivider || (_StyledDivider = /*#__PURE__*/React.createElement(StyledDivider, null, \"\\u2013\"));\n      }\n      return _StyledDivider2 || (_StyledDivider2 = /*#__PURE__*/React.createElement(StyledDivider, null, dividerIcon));\n    }, [dividerVariant, dividerIcon]);\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      view: view,\n      size: size,\n      disabled: disabled,\n      readOnly: !disabled && readOnly,\n      ref: ref\n    }, rest), label && /*#__PURE__*/React.createElement(StyledLabel, null, label), /*#__PURE__*/React.createElement(ContentWrapper, {\n      className: cx(rangeErrorClass, rangeSuccessClass)\n    }, contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), /*#__PURE__*/React.createElement(StyledInput, {\n      className: cx(firstValueErrorClass, firstValueSuccessClass),\n      value: firstValue,\n      readOnly: readOnly,\n      disabled: disabled,\n      placeholder: firstPlaceholder,\n      contentLeft: firstTextfieldContentLeft,\n      contentRight: firstTextfieldContentRight,\n      textBefore: firstTextfieldTextBefore,\n      textAfter: firstTextfieldTextAfter,\n      onChange: handleChangeFirstValue,\n      onSearch: handleSearchFirstValue,\n      onFocus: onFocusFirstTextfield,\n      onBlur: onBlurFirstTextfield\n    }), Divider, /*#__PURE__*/React.createElement(StyledInput, {\n      className: cx(secondValueErrorClass, secondValueSuccessClass),\n      value: secondValue,\n      readOnly: readOnly,\n      disabled: disabled,\n      placeholder: secondPlaceholder,\n      contentLeft: secondTextfieldContentLeft,\n      contentRight: secondTextfieldContentRight,\n      textBefore: secondTextfieldTextBefore,\n      textAfter: secondTextfieldTextAfter,\n      onChange: handleChangeSecondValue,\n      onSearch: handleSearchSecondValue,\n      onFocus: onFocusSecondTextfield,\n      onBlur: onBlurSecondTextfield\n    }), contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight)), leftHelper && /*#__PURE__*/React.createElement(LeftHelper, null, leftHelper));\n  });\n};\nexport var rangeConfig = {\n  name: 'Range',\n  tag: 'div',\n  layout: rangeRoot,\n  base: base,\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    },\n    disabled: {\n      css: disabledCSS,\n      attrs: true\n    },\n    readOnly: {\n      css: readOnlyCSS,\n      attrs: true\n    }\n  },\n  defaults: {\n    size: 'm',\n    view: 'default'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
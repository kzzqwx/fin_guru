{"ast":null,"code":"var _excluded = [\"id\", \"target\", \"children\", \"hasArrow\", \"role\", \"view\", \"size\", \"frame\", \"onToggle\", \"isFocusTrapped\", \"isOpen\", \"placement\", \"trigger\", \"offset\", \"preventOverflow\", \"closeOnOverlayClick\", \"closeOnEsc\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useRef } from 'react';\nimport { useFocusTrap, useForkRef, useUniqId } from '@salutejs/plasma-core';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { StyledDropdown, StyledPopover } from './Dropdown.styles';\nimport { getPlacements } from './utils';\n/**\n * Выпадающий список без внешнего контроля видимости.\n */\nexport var dropdownOldRoot = function dropdownOldRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {\n    var id = _ref.id,\n      target = _ref.target,\n      children = _ref.children,\n      hasArrow = _ref.hasArrow,\n      role = _ref.role,\n      view = _ref.view,\n      size = _ref.size,\n      frame = _ref.frame,\n      _onToggle = _ref.onToggle,\n      _ref$isFocusTrapped = _ref.isFocusTrapped,\n      isFocusTrapped = _ref$isFocusTrapped === void 0 ? true : _ref$isFocusTrapped,\n      _ref$isOpen = _ref.isOpen,\n      isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'auto' : _ref$placement,\n      _ref$trigger = _ref.trigger,\n      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? [0, 6] : _ref$offset,\n      _ref$preventOverflow = _ref.preventOverflow,\n      preventOverflow = _ref$preventOverflow === void 0 ? false : _ref$preventOverflow,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? false : _ref$closeOnOverlayCl,\n      _ref$closeOnEsc = _ref.closeOnEsc,\n      closeOnEsc = _ref$closeOnEsc === void 0 ? false : _ref$closeOnEsc,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var uniqId = useUniqId();\n    var innerId = id || uniqId;\n    var rootRef = useRef(null);\n    var dropdownRef = useRef(null);\n    var handleRef = useForkRef(rootRef, outerRootRef);\n    var trapRef = useFocusTrap(isOpen && isFocusTrapped);\n    var dropdownForkRef = useForkRef(dropdownRef, trapRef);\n    return /*#__PURE__*/React.createElement(StyledPopover, {\n      role: role,\n      isOpen: isOpen,\n      usePortal: false,\n      onToggle: function onToggle(is, event) {\n        return _onToggle === null || _onToggle === void 0 ? void 0 : _onToggle(is, event);\n      },\n      id: innerId,\n      ref: dropdownForkRef,\n      target: target,\n      offset: offset,\n      preventOverflow: preventOverflow,\n      hasArrow: hasArrow,\n      placement: getPlacements(placement),\n      trigger: trigger,\n      closeOnOverlayClick: closeOnOverlayClick,\n      closeOnEsc: closeOnEsc,\n      isFocusTrapped: isFocusTrapped,\n      frame: frame\n    }, /*#__PURE__*/React.createElement(Root, _extends({\n      ref: handleRef,\n      view: view,\n      size: size\n    }, rest), /*#__PURE__*/React.createElement(StyledDropdown, null, children)));\n  });\n};\nexport var dropdownOldConfig = {\n  name: 'Dropdown',\n  tag: 'div',\n  layout: dropdownOldRoot,\n  base: '',\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    }\n  },\n  defaults: {\n    view: 'default',\n    size: 'm'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _excluded = [\"children\", \"text\", \"contentLeft\", \"contentRight\", \"square\", \"deviceScale\", \"loader\", \"disabled\", \"isLoading\", \"type\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { ButtonContentWrapper, ButtonLoader, ButtonRoot, ButtonText, StyledSpinner } from './Button';\n/**\n * Функция для создания компонента Button,\n * что дает возможность кастомизировать вид, пропсы и т.п.,\n * при этом сохраняя в базе общий интерфейс.\n */\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Button/createButton');\nexport function createButton() {\n  var Root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ButtonRoot;\n  // eslint-disable-next-line prefer-arrow-callback\n  return /*#__PURE__*/forwardRef(function Button(_ref, ref) {\n    var children = _ref.children,\n      text = _ref.text,\n      contentLeft = _ref.contentLeft,\n      contentRight = _ref.contentRight,\n      square = _ref.square,\n      deviceScale = _ref.deviceScale,\n      _ref$loader = _ref.loader,\n      loader = _ref$loader === void 0 ? /*#__PURE__*/React.createElement(StyledSpinner, {\n        color: \"currentColor\",\n        size: 56,\n        deviceScale: deviceScale\n      }) : _ref$loader,\n      disabled = _ref.disabled,\n      isLoading = _ref.isLoading,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'button' : _ref$type,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var isContentLeft = Boolean(contentLeft);\n    var isContentRight = Boolean(contentRight);\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      ref: ref,\n      type: type,\n      $isContentLeft: isContentLeft,\n      $isContentRight: isContentRight,\n      $isLoading: isLoading,\n      disabled: isLoading || disabled,\n      square: square !== undefined ? square : !text && !children\n    }, rest), isLoading && /*#__PURE__*/React.createElement(ButtonLoader, null, loader), /*#__PURE__*/React.createElement(ButtonContentWrapper, {\n      $isLoading: isLoading\n    }, children, !children && contentLeft, !children && text && /*#__PURE__*/React.createElement(ButtonText, {\n      $isContentLeft: isContentLeft,\n      $isContentRight: isContentRight\n    }, text), !children && contentRight));\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { useEffect } from 'react';\n\n/**\n * Отслеживает изменение размеров переданного элемента\n * @param {React.Ref<T>} ref - реф элемента, за которым нужно следить\n * @callback callback - функция, которая вызывается при изменении элемента\n * @param {Element} element - элемент, размер которого изменился\n */\nexport var useResizeObserver = function useResizeObserver(ref, callback) {\n  useEffect(function () {\n    /* istanbul ignore if: убираем проверку на рефы из покрытия */\n    if (!(ref !== null && ref !== void 0 && ref.current)) {\n      return;\n    }\n    var current = ref.current;\n    var resizeObserver = new window.ResizeObserver(function () {\n      window.requestAnimationFrame(function () {\n        callback(current);\n      });\n    });\n    resizeObserver.observe(ref.current);\n    return function () {\n      /* istanbul ignore if: убираем проверку на рефы из покрытия */\n      if (!(ref !== null && ref !== void 0 && ref.current)) {\n        return;\n      }\n      resizeObserver.unobserve(ref.current);\n    };\n  }, [ref]);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
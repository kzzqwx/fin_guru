{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { Children, cloneElement, isValidElement } from 'react';\nexport var getNewSelected = function getNewSelected(selected, newValue, type) {\n  if (newValue === undefined || newValue === null) {\n    return newValue;\n  }\n  if ((type === 'single' || type === 'native') && (typeof newValue === 'string' || typeof newValue === 'number' || typeof newValue === 'boolean')) {\n    return newValue;\n  }\n  var newSelected = selected || [];\n  var set = new Set(newSelected);\n  if (set.has(newValue)) {\n    set[\"delete\"](newValue);\n  } else {\n    set.add(newValue);\n  }\n  return Array.from(set);\n};\nvar getChildrenInnerText = function getChildrenInnerText(children) {\n  if (!children || typeof children === 'string') {\n    return children;\n  }\n  return getChildrenInnerText(children.props.children);\n};\nexport var getValues = function getValues(items, value) {\n  var result = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  items.forEach(function (item) {\n    if (item.props === undefined) {\n      return result;\n    }\n    var newValue = item.props.value;\n    if (item.props.children && Array.isArray(item.props.children)) {\n      return getValues(item.props.children, value, result);\n    }\n    if (!Array.isArray(value) && newValue === value || Array.isArray(value) && value !== null && value !== void 0 && value.find(function (v) {\n      return newValue === v;\n    })) {\n      var index = Array.isArray(value) && (value === null || value === void 0 ? void 0 : value.findIndex(function (v) {\n        return newValue === v;\n      })) || 0;\n      if (item.props.text) {\n        var _newText = item.props.text;\n        result[index] = [newValue, _newText];\n        return;\n      }\n      var newText = getChildrenInnerText(item.props.children);\n      result[index] = [newValue, newText];\n    }\n    return result;\n  });\n  return result;\n};\nvar getChildrenItemChecked = function getChildrenItemChecked(value, child) {\n  return !Array.isArray(value) && (child === null || child === void 0 ? void 0 : child.props.value) === value || Array.isArray(value) && Boolean(value === null || value === void 0 ? void 0 : value.find(function (v) {\n    return (child === null || child === void 0 ? void 0 : child.props.value) === v;\n  }));\n};\n\n// INFO: Функция для рекурсивного обновления пропсов\nexport var updatePropsRecursively = function updatePropsRecursively(children, externalProps, value, search, filterFunction) {\n  return Children.map(children || [], function (child) {\n    if (! /*#__PURE__*/isValidElement(child)) {\n      return child;\n    }\n    var hasValue = ('value' in (child === null || child === void 0 ? void 0 : child.props));\n    var props = _objectSpread({\n      key: \"\".concat(value, \"$\"),\n      checked: getChildrenItemChecked(value, child)\n    }, hasValue && {\n      ref: function ref(element) {\n        var _externalProps$childr;\n        if (externalProps !== null && externalProps !== void 0 && (_externalProps$childr = externalProps.childrenRefs) !== null && _externalProps$childr !== void 0 && _externalProps$childr.current && element) {\n          externalProps.childrenRefs.current.push(element);\n        }\n      },\n      onClick: function onClick(event) {\n        var _child$props$onClick, _child$props, _externalProps$onClic;\n        (_child$props$onClick = (_child$props = child.props).onClick) === null || _child$props$onClick === void 0 || _child$props$onClick.call(_child$props, event);\n        externalProps === null || externalProps === void 0 || (_externalProps$onClic = externalProps.onClick) === null || _externalProps$onClic === void 0 || _externalProps$onClic.call(externalProps, event);\n      }\n    });\n    var updatedChild = updatePropsRecursively(child.props.children, externalProps, value, search, filterFunction);\n    if (filterFunction) {\n      var _child$props2;\n      var text = ((_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.text) || '';\n      return filterFunction(text, search) ? /*#__PURE__*/cloneElement(child, props, updatedChild) : null;\n    }\n    return /*#__PURE__*/cloneElement(child, props, updatedChild);\n  });\n};\nvar defaultFilterFunction = function defaultFilterFunction(text) {\n  var filterValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return text.includes(filterValue);\n};\nexport var getChildren = function getChildren(children, externalProps, value, search) {\n  var filterFunction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultFilterFunction;\n  if (externalProps.childrenRefs) {\n    externalProps.childrenRefs.current = [];\n  }\n  return updatePropsRecursively(children, externalProps, value, search, filterFunction);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useEffect, useRef, useState } from 'react';\nimport { useDebouncedFunction, useResizeObserver } from '@salutejs/plasma-core';\nvar trimPx = function trimPx(str) {\n  return str.replace('px', '');\n};\nvar getInputOffset = function getInputOffset(inputRef) {\n  if (!inputRef || !inputRef.current) {\n    return [0, 0];\n  }\n  var _getComputedStyle = getComputedStyle(inputRef === null || inputRef === void 0 ? void 0 : inputRef.current),\n    paddingLeft = _getComputedStyle.paddingLeft,\n    paddingRight = _getComputedStyle.paddingRight;\n  var left = parseInt(trimPx(paddingLeft), 10);\n  var right = parseInt(trimPx(paddingRight), 10);\n  return [left, right];\n};\nexport var useTrailingSymbol = function useTrailingSymbol(_ref) {\n  var size = _ref.size,\n    contentLeft = _ref.contentLeft,\n    contentRight = _ref.contentRight,\n    _ref$rightTrailingSym = _ref.rightTrailingSymbols,\n    rightTrailingSymbols = _ref$rightTrailingSym === void 0 ? '' : _ref$rightTrailingSym,\n    value = _ref.value,\n    _ref$rightTrailingSym2 = _ref.rightTrailingSymbolsWidth,\n    rightTrailingSymbolsWidth = _ref$rightTrailingSym2 === void 0 ? 0 : _ref$rightTrailingSym2,\n    deviceScale = _ref.deviceScale;\n  var hiddenDivRef = useRef(null);\n  var inputRef = useRef(null);\n  var _useState = useState([0, 0]),\n    _useState2 = _slicedToArray(_useState, 2),\n    inputOffset = _useState2[0],\n    setInputOffset = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    rightTrailingSymbolsPosition = _useState4[0],\n    setRightTrailingSymbolsPosition = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    inputWidth = _useState6[0],\n    setInputWidth = _useState6[1];\n  var currentTrailingSymbolsWidth = rightTrailingSymbols.length === 1 ? 0 : rightTrailingSymbolsWidth;\n  var debouncedResize = useDebouncedFunction(function (width) {\n    return setInputWidth(width);\n  }, 100);\n  useResizeObserver(inputRef, function (currentElement) {\n    var _currentElement$getBo = currentElement.getBoundingClientRect(),\n      width = _currentElement$getBo.width;\n    debouncedResize(width);\n  });\n  useEffect(function () {\n    if (!rightTrailingSymbols) {\n      return;\n    }\n    setInputOffset(getInputOffset(inputRef));\n  }, [size, Boolean(contentLeft), Boolean(contentRight), rightTrailingSymbols, currentTrailingSymbolsWidth, deviceScale]);\n  useEffect(function () {\n    var _hiddenDivRef$current;\n    if (!rightTrailingSymbols) {\n      return;\n    }\n    var _inputOffset = _slicedToArray(inputOffset, 2),\n      inputOffsetLeft = _inputOffset[0],\n      inputOffsetRight = _inputOffset[1];\n    var inputWidthBase = inputWidth - inputOffsetLeft - inputOffsetRight;\n    var hiddenDivWidth = (hiddenDivRef === null || hiddenDivRef === void 0 || (_hiddenDivRef$current = hiddenDivRef.current) === null || _hiddenDivRef$current === void 0 ? void 0 : _hiddenDivRef$current.clientWidth) || 0;\n    var position = hiddenDivWidth > inputWidthBase ? inputWidth - inputOffsetRight : hiddenDivWidth + inputOffsetLeft;\n    setRightTrailingSymbolsPosition(position);\n  }, [value, inputOffset, rightTrailingSymbols, size, Boolean(contentLeft), Boolean(contentRight), deviceScale, inputWidth]);\n  return {\n    inputRef: inputRef,\n    hiddenDivRef: hiddenDivRef,\n    rightTrailingSymbolsPosition: rightTrailingSymbolsPosition\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { Popup } from '../Popup';\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Dropdown/DropdownPopup');\n/**\n * Popup с внешним контролем над видимостью через props: `isOpen` и `onToggle`.\n */\nexport var DropdownPopup = /*#__PURE__*/styled(Popup).withConfig({\n  componentId: \"plasma-web-core__sc-psgcp9-0\"\n})([\"& &{width:100%;--plasma-popup-width:var(--plasma-popup-nested-width);--plasma-popup-padding:var(--plasma-popup-nested-padding);--plasma-popup-margin:var(--plasma-popup-nested-margin);}\", \"\"], function (_ref) {\n  var offsetTop = _ref.offsetTop;\n  return offsetTop !== undefined && css([\"--plasma-popup-padding:\", \" 0 0;\"], offsetTop);\n});\n\n/**\n * Popup, не требующий внешнего контроля над видимостью.\n */\nexport var DropdownSelfControlledPopup = function DropdownSelfControlledPopup(_ref2) {\n  var rest = _extends({}, (_objectDestructuringEmpty(_ref2), _ref2));\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isOpen = _useState2[0],\n    setIsOpen = _useState2[1];\n  return /*#__PURE__*/React.createElement(DropdownPopup, _extends({}, rest, {\n    isOpen: isOpen,\n    onToggle: function onToggle(is) {\n      return setIsOpen(is);\n    }\n  }));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
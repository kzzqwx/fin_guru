{"ast":null,"code":"var _excluded = [\"id\", \"className\", \"style\", \"contentLeft\", \"contentRight\", \"label\", \"labelPlacement\", \"textBefore\", \"textAfter\", \"placeholder\", \"leftHelper\", \"enumerationType\", \"view\", \"size\", \"readOnly\", \"disabled\", \"chips\", \"onChange\", \"onChangeChips\", \"onSearch\", \"onKeyDown\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useEffect, useRef, useState } from 'react';\nimport { safeUseId, useForkRef } from '@salutejs/plasma-core';\nimport { css } from 'styled-components';\nimport { cx } from '../../utils';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as disabledCSS } from './variations/_disabled/base';\nimport { base as readOnlyCSS } from './variations/_read-only/base';\nimport { base as labelPlacementCSS } from './variations/_label-placement/base';\nimport { Input, LeftHelper, Label, InputWrapper, InputLabelWrapper, StyledContentLeft, StyledContentRight, StyledChips, StyledTextBefore, StyledTextAfter } from './TextField.styles';\nimport { classes } from './TextField.tokens';\nimport { TextFieldChip } from './ui';\nimport { useKeyNavigation } from './hooks';\nexport var base = /*#__PURE__*/css([\"display:block;overflow:hidden;\"]);\nexport var textFieldRoot = function textFieldRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (_ref, ref) {\n    var id = _ref.id,\n      className = _ref.className,\n      style = _ref.style,\n      contentLeft = _ref.contentLeft,\n      contentRight = _ref.contentRight,\n      label = _ref.label,\n      labelPlacement = _ref.labelPlacement,\n      textBefore = _ref.textBefore,\n      textAfter = _ref.textAfter,\n      placeholder = _ref.placeholder,\n      leftHelper = _ref.leftHelper,\n      _ref$enumerationType = _ref.enumerationType,\n      enumerationType = _ref$enumerationType === void 0 ? 'plain' : _ref$enumerationType,\n      view = _ref.view,\n      size = _ref.size,\n      _ref$readOnly = _ref.readOnly,\n      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      values = _ref.chips,\n      onChange = _ref.onChange,\n      onChangeChips = _ref.onChangeChips,\n      onSearch = _ref.onSearch,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var contentRef = useRef(null);\n    var inputRef = useRef(null);\n    var inputForkRef = useForkRef(inputRef, ref);\n    var chipsRefs = useRef([]);\n    var controlledRefs = {\n      contentRef: contentRef,\n      inputRef: inputRef,\n      chipsRefs: chipsRefs\n    };\n    var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      chips = _useState2[0],\n      setChips = _useState2[1];\n    var uniqId = safeUseId();\n    var innerId = id || uniqId;\n    var labelId = safeUseId();\n    var helperTextId = safeUseId();\n    var isChipEnumeration = enumerationType === 'chip';\n    var hideLabel = (size === 'xs' || isChipEnumeration) && labelPlacement === 'inner';\n    var labelInside = size !== 'xs' && labelPlacement === 'inner';\n    var innerLabelPlacementValue = hideLabel ? 'outer' : labelPlacement;\n    var innerPlaceholderValue = hideLabel ? label : placeholder;\n    var innerLabelValue = hideLabel ? undefined : label;\n    var isChipsVisible = isChipEnumeration && (chips === null || chips === void 0 ? void 0 : chips.length);\n    var withHasChips = isChipsVisible ? classes.hasChips : undefined;\n    var wrapperWithoutLeftContent = !contentLeft && isChipsVisible ? classes.hasEmptyContentLeft : undefined;\n    var wrapperWithoutRightContent = !contentRight && isChipsVisible ? classes.hasEmptyContentRight : undefined;\n    var handleChange = function handleChange(event) {\n      if (disabled || readOnly) {\n        return;\n      }\n      var _event$target = event.target,\n        maxLength = _event$target.maxLength,\n        value = _event$target.value;\n      if (maxLength !== -1 && value.length > maxLength) {\n        return;\n      }\n      onChange === null || onChange === void 0 || onChange(event);\n    };\n    var updateChips = function updateChips(newChips, newValues) {\n      setChips(newChips);\n      onChangeChips === null || onChangeChips === void 0 || onChangeChips(newValues);\n    };\n    var _useKeyNavigation = useKeyNavigation({\n        controlledRefs: controlledRefs,\n        disabled: disabled,\n        readOnly: readOnly,\n        chips: chips,\n        enumerationType: enumerationType,\n        updateChips: updateChips,\n        onSearch: onSearch,\n        onChange: onChange\n      }),\n      handleInputKeydown = _useKeyNavigation.handleInputKeydown,\n      handleChipKeyDown = _useKeyNavigation.handleChipKeyDown,\n      onChipClear = _useKeyNavigation.onChipClear,\n      handleContentKeyDown = _useKeyNavigation.handleContentKeyDown;\n    var onChipClick = function onChipClick(event) {\n      return event.stopPropagation();\n    };\n    var handleInputFocus = function handleInputFocus() {\n      if (readOnly || disabled || !(inputRef !== null && inputRef !== void 0 && inputRef.current)) {\n        return;\n      }\n      inputRef.current.scrollTo({\n        top: 0,\n        left: inputRef.current.offsetLeft,\n        behavior: 'smooth'\n      });\n      inputRef.current.focus();\n    };\n    var getRef = function getRef(element, index) {\n      if (element && chipsRefs !== null && chipsRefs !== void 0 && chipsRefs.current) {\n        chipsRefs.current[index] = element;\n      }\n    };\n    var handleOnKeyDown = function handleOnKeyDown(event) {\n      handleInputKeydown(event);\n      onKeyDown && onKeyDown(event);\n    };\n    useEffect(function () {\n      if (!isChipEnumeration && !(values !== null && values !== void 0 && values.length)) {\n        return;\n      }\n      var newChips = (values === null || values === void 0 ? void 0 : values.map(function (value, index) {\n        return {\n          id: \"\".concat(index, \"_\").concat(value),\n          text: value\n        };\n      })) || [];\n      setChips(newChips);\n    }, [isChipEnumeration, values]);\n    return /*#__PURE__*/React.createElement(Root, {\n      view: view,\n      size: size,\n      disabled: disabled,\n      readOnly: !disabled && readOnly,\n      labelPlacement: innerLabelPlacementValue,\n      onClick: handleInputFocus,\n      className: className,\n      style: style\n    }, labelInside || innerLabelValue && /*#__PURE__*/React.createElement(Label, {\n      id: labelId,\n      htmlFor: id\n    }, innerLabelValue), /*#__PURE__*/React.createElement(InputWrapper, {\n      className: cx(withHasChips, wrapperWithoutLeftContent, wrapperWithoutRightContent)\n    }, contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), /*#__PURE__*/React.createElement(InputLabelWrapper, {\n      tabIndex: -1,\n      ref: contentRef,\n      onKeyDown: handleContentKeyDown,\n      className: withHasChips\n    }, textBefore && /*#__PURE__*/React.createElement(StyledTextBefore, null, textBefore), isChipEnumeration && Boolean(chips === null || chips === void 0 ? void 0 : chips.length) && /*#__PURE__*/React.createElement(StyledChips, null, chips === null || chips === void 0 ? void 0 : chips.map(function (_ref2, index) {\n      var chipId = _ref2.id,\n        text = _ref2.text;\n      return /*#__PURE__*/React.createElement(TextFieldChip, {\n        id: chipId,\n        ref: function ref(element) {\n          return getRef(element, index);\n        },\n        key: \"\".concat(chipId, \"_\").concat(index),\n        disabled: disabled,\n        readOnly: readOnly,\n        value: text,\n        text: text,\n        onKeyDown: function onKeyDown(event) {\n          return handleChipKeyDown(event, chipId, index);\n        },\n        onClear: function onClear() {\n          return onChipClear(chipId, index);\n        },\n        onClick: onChipClick\n      });\n    })), /*#__PURE__*/React.createElement(Input, _extends({}, rest, {\n      ref: inputForkRef,\n      id: innerId,\n      \"aria-labelledby\": labelId,\n      \"aria-describedby\": helperTextId,\n      placeholder: innerPlaceholderValue,\n      disabled: disabled,\n      readOnly: !disabled && readOnly,\n      onChange: handleChange,\n      onKeyDown: handleOnKeyDown\n    })), labelInside && /*#__PURE__*/React.createElement(Label, {\n      id: labelId,\n      htmlFor: innerId\n    }, innerLabelValue), textAfter && /*#__PURE__*/React.createElement(StyledTextAfter, null, textAfter)), contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight)), leftHelper && /*#__PURE__*/React.createElement(LeftHelper, {\n      id: helperTextId\n    }, leftHelper));\n  });\n};\nexport var textFieldConfig = {\n  name: 'TextField',\n  tag: 'div',\n  layout: textFieldRoot,\n  base: base,\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    },\n    disabled: {\n      css: disabledCSS,\n      attrs: true\n    },\n    readOnly: {\n      css: readOnlyCSS,\n      attrs: true\n    },\n    labelPlacement: {\n      css: labelPlacementCSS\n    }\n  },\n  defaults: {\n    size: 'm',\n    view: 'default'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
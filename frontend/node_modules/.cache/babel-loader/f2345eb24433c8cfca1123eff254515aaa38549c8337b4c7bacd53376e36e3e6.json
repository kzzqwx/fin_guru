{"ast":null,"code":"var _excluded = [\"view\", \"status\", \"value\", \"displayValue\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { StyledProgress, StyledTrack, StyledValue, base } from './Progress.styles';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nexport var progressRoot = function progressRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (_ref, ref) {\n    var view = _ref.view,\n      status = _ref.status,\n      value = _ref.value,\n      _ref$displayValue = _ref.displayValue,\n      displayValue = _ref$displayValue === void 0 ? true : _ref$displayValue,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var min = 0;\n    var max = 100;\n    var normalizedValue = Math.max(Math.min(value, max), min);\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      ref: ref,\n      view: status || view,\n      value: normalizedValue\n    }, rest), /*#__PURE__*/React.createElement(StyledTrack, null, /*#__PURE__*/React.createElement(StyledProgress, {\n      value: normalizedValue\n    })), displayValue && /*#__PURE__*/React.createElement(StyledValue, null, normalizedValue, \"%\"));\n  });\n};\nexport var progressConfig = {\n  name: 'Progress',\n  tag: 'div',\n  layout: progressRoot,\n  base: base,\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    }\n  },\n  defaults: {\n    view: 'default',\n    size: 'm'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
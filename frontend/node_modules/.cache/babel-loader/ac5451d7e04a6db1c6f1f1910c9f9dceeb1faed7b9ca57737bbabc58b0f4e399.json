{"ast":null,"code":"var _excluded = [\"children\", \"text\", \"contentLeft\", \"contentRight\", \"contentClearButton\", \"size\", \"className\", \"onClear\", \"onClick\", \"pilled\", \"readOnly\", \"disabled\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useMemo } from 'react';\nimport { IconClose } from '../_Icon/Icons/IconClose';\nimport { cx } from '../../utils';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as disabledCSS } from './variations/_disabled/base';\nimport { base as readonlyCSS } from './variations/_readonly/base';\nimport { base as focusedCSS } from './variations/_focused/base';\nimport { base as pilledCSS } from './variations/_pilled/base';\nimport { StyledContentClear, StyledContentLeft, StyledContentMain, StyledContentRight, base } from './Chip.styles';\nimport { classes, tokens } from './Chip.tokens';\nexport var chipRoot = function chipRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    var children = props.children,\n      text = props.text,\n      contentLeft = props.contentLeft,\n      contentRight = props.contentRight,\n      contentClearButton = props.contentClearButton,\n      size = props.size,\n      className = props.className,\n      onClear = props.onClear,\n      onClick = props.onClick,\n      _props$pilled = props.pilled,\n      pilled = _props$pilled === void 0 ? false : _props$pilled,\n      _props$readOnly = props.readOnly,\n      readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      rest = _objectWithoutProperties(props, _excluded);\n    var txt = !text && typeof children === 'string' ? children : text;\n    var pilledClass = pilled ? classes.pilled : undefined;\n    var handleClick = function handleClick(event) {\n      if (disabled || readOnly) {\n        return;\n      }\n      onClick === null || onClick === void 0 || onClick(event);\n      onClear === null || onClear === void 0 || onClear();\n    };\n    var ClearContent = useMemo(function () {\n      return contentClearButton || /*#__PURE__*/React.createElement(StyledContentClear, null, /*#__PURE__*/React.createElement(IconClose, {\n        sizeCustomProperty: tokens.closeIconSize,\n        color: \"inherit\"\n      }));\n    }, [contentClearButton, tokens.closeIconSize]);\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      type: \"button\",\n      ref: ref,\n      className: cx(pilledClass, className),\n      tabIndex: readOnly ? -1 : 0,\n      onClick: handleClick,\n      disabled: disabled,\n      pilled: pilled,\n      readOnly: !disabled && readOnly,\n      size: size\n    }, rest), contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), txt ? /*#__PURE__*/React.createElement(StyledContentMain, null, txt) : children, contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight), ClearContent);\n  });\n};\nexport var chipConfig = {\n  name: 'Chip',\n  tag: 'button',\n  layout: chipRoot,\n  base: base,\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    },\n    disabled: {\n      css: disabledCSS,\n      attrs: true\n    },\n    readOnly: {\n      css: readonlyCSS,\n      attrs: true\n    },\n    focused: {\n      css: focusedCSS\n    },\n    pilled: {\n      css: pilledCSS,\n      attrs: true\n    }\n  },\n  defaults: {\n    view: 'default',\n    size: 'm'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
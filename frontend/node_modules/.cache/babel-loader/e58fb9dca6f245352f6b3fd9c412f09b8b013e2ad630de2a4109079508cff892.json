{"ast":null,"code":"var _excluded = [\"values\", \"target\", \"label\", \"opened\", \"readOnly\", \"disabled\", \"enumerationType\", \"size\", \"id\", \"chipsRefs\", \"onChange\", \"onKeyDown\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useCallback, useRef } from 'react';\nimport { classes } from '../../Select.tokens';\nimport { cx } from '../../../../utils';\nimport { SelectChip } from '../SelectChip/SelectChip';\nimport { Keys } from '../../hooks/useKeyNavigation';\nimport { StyledArrow, StyledChips, StyledChipsWrapper, StyledLabel, StyledSelectTarget, StyledText } from './SelectTarget.styles';\nvar hasNoFocus = classes.hasNoFocus,\n  hasChips = classes.hasChips,\n  innerLabelUp = classes.innerLabelUp,\n  arrowInverse = classes.arrowInverse,\n  selectTarget = classes.selectTarget,\n  selectTargetArrow = classes.selectTargetArrow,\n  selectTargeText = classes.selectTargeText,\n  selectTargetLabel = classes.selectTargetLabel;\n\n/**\n * Элемент для выпадающего списка\n */\nexport var SelectTarget = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var values = _ref.values,\n    _ref$target = _ref.target,\n    target = _ref$target === void 0 ? 'textField-like' : _ref$target,\n    label = _ref.label,\n    opened = _ref.opened,\n    readOnly = _ref.readOnly,\n    disabled = _ref.disabled,\n    enumerationType = _ref.enumerationType,\n    size = _ref.size,\n    id = _ref.id,\n    chipsRefs = _ref.chipsRefs,\n    onChange = _ref.onChange,\n    onKeyDown = _ref.onKeyDown,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var hasText = Boolean(values === null || values === void 0 ? void 0 : values.some(function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 1),\n      value = _ref3[0];\n    return value;\n  }));\n  var hasLabel = label && size !== 'xs' && target === 'textField-like';\n  var textContent = values === null || values === void 0 ? void 0 : values.map(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      text = _ref5[1];\n    return text;\n  }).join(', ');\n  var contentRef = useRef(null);\n  var withArrowInverse = opened ? arrowInverse : undefined;\n  var withInnerLabelUp = hasLabel && hasText ? innerLabelUp : undefined;\n  var withHasChips = hasText && enumerationType === 'chip' && target === 'textField-like' ? hasChips : undefined;\n  var withNoFocus = target === 'textField-like' ? hasNoFocus : undefined;\n  var isLabelVisible = !hasText || hasLabel && enumerationType === 'comma';\n  var onChipClick = useCallback(function (event) {\n    event.stopPropagation();\n  }, []);\n  var onChipClear = useCallback(function (value, text, index) {\n    var newValue = values === null || values === void 0 ? void 0 : values.filter(function (_ref6) {\n      var _ref7 = _slicedToArray(_ref6, 2),\n        itemValue = _ref7[0],\n        itemText = _ref7[1];\n      return !(itemValue === value && itemText === text);\n    }).map(function (_ref8) {\n      var _ref9 = _slicedToArray(_ref8, 1),\n        itemValue = _ref9[0];\n      return itemValue;\n    });\n    chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.splice(index, 1);\n    onChange === null || onChange === void 0 || onChange(newValue);\n  }, [values, onChange]);\n  var onChipKeyDown = useCallback(function (value, text, index, event) {\n    var code = event.code,\n      shiftKey = event.shiftKey;\n    if (code === Keys.Tab || code === Keys.Tab && shiftKey) {\n      event.preventDefault();\n    }\n    if (code === Keys.Backspace) {\n      onChipClear(value, text, index);\n    }\n  }, [onChipClear]);\n  var onWheel = useCallback(function (event) {\n    var deltaY = event.deltaY;\n    if (contentRef.current) {\n      contentRef.current.scrollLeft += Math.round(deltaY);\n    }\n  }, []);\n  var getRef = useCallback(function (element, index) {\n    if (element && chipsRefs && chipsRefs.current) {\n      chipsRefs.current[index] = element;\n    }\n  }, []);\n\n  // INFO: Нужно очищать на каждый ререндер компонента для актуализации состояния рефов\n  if (chipsRefs) {\n    chipsRefs.current = [];\n  }\n  return /*#__PURE__*/React.createElement(StyledSelectTarget, _extends({}, rest, {\n    ref: ref,\n    opened: opened,\n    target: target,\n    readOnly: readOnly,\n    disabled: disabled,\n    title: textContent,\n    \"aria-label\": label,\n    className: cx(withInnerLabelUp, withHasChips, withNoFocus, selectTarget),\n    onWheel: onWheel,\n    onKeyDown: onKeyDown,\n    stretching: \"filled\"\n  }), hasText && (enumerationType === 'comma' || target === 'button-like' ? /*#__PURE__*/React.createElement(StyledText, {\n    className: selectTargeText\n  }, textContent) : /*#__PURE__*/React.createElement(StyledChipsWrapper, {\n    ref: contentRef\n  }, /*#__PURE__*/React.createElement(StyledChips, null, values === null || values === void 0 ? void 0 : values.map(function (_ref10, index) {\n    var _ref11 = _slicedToArray(_ref10, 2),\n      value = _ref11[0],\n      text = _ref11[1];\n    return /*#__PURE__*/React.createElement(SelectChip, {\n      index: index,\n      ref: function ref(element) {\n        return getRef(element, index);\n      },\n      key: \"\".concat(value, \"_\").concat(text),\n      disabled: disabled,\n      readOnly: readOnly,\n      value: value,\n      text: text,\n      onClear: function onClear(v, t) {\n        return onChipClear(v, t, index);\n      },\n      onClick: onChipClick,\n      onKeyDown: onChipKeyDown\n    });\n  })))), isLabelVisible && /*#__PURE__*/React.createElement(StyledLabel, {\n    className: selectTargetLabel,\n    htmlFor: id\n  }, label), /*#__PURE__*/React.createElement(StyledArrow, {\n    size: \"s\",\n    color: \"inherit\",\n    className: cx(selectTargetArrow, withArrowInverse)\n  }));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
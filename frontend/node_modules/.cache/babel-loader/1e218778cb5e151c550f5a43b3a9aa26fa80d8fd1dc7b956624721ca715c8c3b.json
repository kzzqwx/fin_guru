{"ast":null,"code":"var _excluded = [\"id\", \"zIndex\", \"popupInfo\", \"withBlur\", \"children\", \"view\", \"size\", \"width\", \"height\", \"isOpen\", \"initialFocusRef\", \"focusAfterRef\", \"className\", \"onClose\", \"onOverlayClick\", \"onEscKeyDown\", \"offset\", \"frame\", \"borderRadius\", \"placement\", \"closeOnEsc\", \"closeOnOverlayClick\", \"asModal\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useMemo } from 'react';\nimport { useFocusTrap, useForkRef, safeUseId } from '@salutejs/plasma-core';\nimport { component, mergeConfig } from '../../engines';\nimport { usePopupContext } from '../Popup';\nimport { Overlay } from '../Overlay';\nimport { DEFAULT_Z_INDEX } from '../Popup/utils';\nimport { panelConfig } from '../Panel';\nimport { getSizeValueFromProp } from '../../utils';\nimport { classes, tokens } from './Drawer.tokens';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as borderRadiusCSS } from './variations/_borderRadius/base';\nimport { StyledPopup } from './Drawer.styles';\nimport { getIdLastDrawer } from './DrawerContext';\nimport { useDrawer } from './hooks';\n\n// issue #823\nvar mergedPanelConfig = /*#__PURE__*/mergeConfig(panelConfig);\nvar Panel = /*#__PURE__*/component(mergedPanelConfig);\nexport var drawerRoot = function drawerRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (_ref, outerRef) {\n    var id = _ref.id,\n      zIndex = _ref.zIndex,\n      popupInfo = _ref.popupInfo,\n      withBlur = _ref.withBlur,\n      children = _ref.children,\n      view = _ref.view,\n      size = _ref.size,\n      width = _ref.width,\n      height = _ref.height,\n      isOpen = _ref.isOpen,\n      initialFocusRef = _ref.initialFocusRef,\n      focusAfterRef = _ref.focusAfterRef,\n      className = _ref.className,\n      onClose = _ref.onClose,\n      onOverlayClick = _ref.onOverlayClick,\n      onEscKeyDown = _ref.onEscKeyDown,\n      offset = _ref.offset,\n      frame = _ref.frame,\n      _ref$borderRadius = _ref.borderRadius,\n      borderRadius = _ref$borderRadius === void 0 ? 'none' : _ref$borderRadius,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'right' : _ref$placement,\n      _ref$closeOnEsc = _ref.closeOnEsc,\n      closeOnEsc = _ref$closeOnEsc === void 0 ? true : _ref$closeOnEsc,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n      _ref$asModal = _ref.asModal,\n      asModal = _ref$asModal === void 0 ? true : _ref$asModal,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var trapRef = useFocusTrap(true, initialFocusRef, focusAfterRef);\n    var popupController = usePopupContext();\n    var innerRef = useForkRef(trapRef, outerRef);\n    var uniqId = safeUseId();\n    var innerId = id || uniqId;\n    var overlayBackgroundToken = withBlur ? \"var(\".concat(tokens.drawerOverlayWithBlurColor, \")\") : \"var(\".concat(tokens.drawerOverlayColor, \")\");\n    var innerWidth = width ? getSizeValueFromProp(width) : '100%';\n    var innerHeight = height ? getSizeValueFromProp(height) : '100%';\n    var _useDrawer = useDrawer({\n        id: innerId,\n        isOpen: isOpen,\n        closeOnEsc: closeOnEsc,\n        onEscKeyDown: onEscKeyDown,\n        onClose: onClose,\n        popupInfo: popupInfo,\n        disableScroll: asModal\n      }),\n      drawerInfo = _useDrawer.drawerInfo;\n    var transparent = useMemo(function () {\n      return getIdLastDrawer(popupController.items) !== innerId;\n    }, [innerId, popupController.items]);\n    var onDrawerOverlayKeyDown = function onDrawerOverlayKeyDown(event) {\n      if (onOverlayClick) {\n        onOverlayClick(event);\n        return;\n      }\n      if (onClose) {\n        onClose();\n      }\n    };\n    return /*#__PURE__*/React.createElement(StyledPopup, _extends({\n      id: innerId,\n      ref: asModal ? innerRef : outerRef,\n      isOpen: isOpen,\n      zIndex: zIndex,\n      placement: placement,\n      popupInfo: drawerInfo,\n      frame: frame,\n      width: innerWidth,\n      height: innerHeight,\n      offset: offset,\n      withAnimation: true,\n      overlay: asModal && /*#__PURE__*/React.createElement(Root, {\n        view: view\n      }, /*#__PURE__*/React.createElement(Overlay, {\n        className: classes.overlay,\n        zIndex: zIndex || DEFAULT_Z_INDEX,\n        backgroundColorProperty: overlayBackgroundToken,\n        withBlur: withBlur,\n        transparent: transparent,\n        isClickable: closeOnOverlayClick,\n        onOverlayClick: onDrawerOverlayKeyDown\n      }))\n    }, rest), /*#__PURE__*/React.createElement(Root, {\n      view: view,\n      size: size,\n      style: {\n        width: innerWidth,\n        height: innerHeight\n      },\n      borderRadius: borderRadius\n    }, /*#__PURE__*/React.createElement(Panel, {\n      width: innerWidth,\n      height: innerHeight,\n      className: className\n    }, children)));\n  });\n};\nexport var drawerConfig = {\n  name: 'Drawer',\n  tag: 'div',\n  layout: drawerRoot,\n  base: '',\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    },\n    borderRadius: {\n      css: borderRadiusCSS\n    }\n  },\n  defaults: {\n    view: 'default',\n    size: 'm',\n    borderRadius: 'none'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
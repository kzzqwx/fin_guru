{"ast":null,"code":"var _excluded = [\"trigger\", \"children\", \"isOpen\", \"disclosure\", \"onToggle\", \"placement\", \"offsetTop\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { component, dropdownOldConfig, mergeConfig } from '@salutejs/plasma-new-hope/styled-components';\nimport { config } from './DropdownOld.config';\nvar mergedConfig = /*#__PURE__*/mergeConfig(dropdownOldConfig, config);\nvar DropdownNewHope = /*#__PURE__*/component(mergedConfig);\nexport var DropdownPopup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var trigger = props.trigger,\n    children = props.children,\n    isOpen = props.isOpen,\n    disclosure = props.disclosure,\n    onToggle = props.onToggle,\n    placement = props.placement,\n    offsetTop = props.offsetTop,\n    rest = _objectWithoutProperties(props, _excluded);\n  var offsetAtTop = typeof offsetTop === 'number' ? offsetTop : 0;\n  return /*#__PURE__*/React.createElement(DropdownNewHope, _extends({}, rest, {\n    ref: ref,\n    onToggle: onToggle,\n    target: disclosure,\n    isOpen: isOpen,\n    trigger: trigger,\n    placement: placement,\n    offset: [offsetAtTop, 0]\n  }), children);\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n// import React, { forwardRef, CSSProperties, Ref } from 'react';\n// import type { SelectProps, SelectRefElement } from '@salutejs/plasma-hope';\n// import {\n//     selectConfig,\n//     component,\n//     mergeConfig,\n//     selectItemConfig,\n//     cx,\n//     popoverClasses,\n// } from '@salutejs/plasma-new-hope/styled-components';\n// import { IconDone } from '@salutejs/plasma-icons';\n// import styled from 'styled-components';\n//\n// import { Checkbox } from '../Checkbox';\n//\n// import { config } from './Select.config';\n\n// const mergedConfig = mergeConfig(selectConfig, config);\n// export const SelectComponent = component(mergedConfig);\n//\n// const mergedItemConfig = mergeConfig(selectItemConfig);\n// export const SelectItem = component(mergedItemConfig);\n//\n// const getColor = (status?: SelectProps['status']): string => {\n//     switch (status) {\n//         case 'success':\n//             return '--text-positive';\n//         case 'warning':\n//             return '--text-warning';\n//         case 'error':\n//             return '--text-negative';\n//         default:\n//             return '--text-secondary';\n//     }\n// };\n//\n// const HelperText = styled.div<{ status?: SelectProps['status'] }>`\n//     color: ${({ status }) => `var(${getColor(status)})`};\n//     margin-top: 0.25rem;\n//     font-family: var(--plasma-typo-body-xs-font-family), sans-serif;\n//     font-size: var(--plasma-typo-body-xs-font-size);\n//     font-style: var(--plasma-typo-body-xs-font-style);\n//     font-weight: var(--plasma-typo-body-xs-font-weight);\n//     letter-spacing: var(--plasma-typo-body-xs-letter-spacing);\n//     line-height: var(--plasma-typo-body-xs-line-height);\n// `;\n//\n// const SelectWrapper = styled.div<{\n//     listHeight?: number | CSSProperties['height'];\n// }>`\n//     width: 100%;\n//\n//     & .select-height {\n//         --plasma-select-height: ${({ listHeight }) =>\n//             Number.isNaN(Number(listHeight)) ? listHeight : `${listHeight}rem`};\n//     }\n// `;\n//\n// /**\n//  * Выпадающий список для использования в формах.\n//  * Поддерживает выбор одного или нескольких значений.\n//  */\n// export const Select = forwardRef<SelectRefElement, SelectProps>(\n//     (\n//         {\n//             value,\n//             items,\n//             onChange,\n//             multiselect,\n//             separator,\n//             status,\n//             placeholder,\n//             helperText,\n//             disabled,\n//             onItemSelect,\n//             isOpen,\n//             listHeight,\n//             listOverflow,\n//             className,\n//             ...rest\n//         },\n//         ref,\n//     ) => {\n//         const handleItemSelect: SelectProps['onItemSelect'] = (item, e) => {\n//             if (onItemSelect) {\n//                 onItemSelect(item, e);\n//             }\n//         };\n//\n//         return (\n//             <SelectWrapper listHeight={listHeight}>\n//                 <SelectComponent\n//                     {...(rest as any)}\n//                     frame=\"theme-root\"\n//                     value={value}\n//                     valueType={multiselect ? 'multiple' : 'single'}\n//                     placement=\"bottom\"\n//                     target=\"button-like\"\n//                     disabled={disabled}\n//                     onChangeValue={onChange}\n//                     label={placeholder}\n//                     opened={isOpen}\n//                     ref={ref as Ref<HTMLSelectElement>}\n//                     className={cx(className, 'select-height')}\n//                 >\n//                     {items.map((item) => (\n//                         <SelectItem\n//                             key={item.value}\n//                             value={item.value}\n//                             text={item.label}\n//                             onClick={(e) => handleItemSelect(item, e)}\n//                             disabled={item.isDisabled}\n//                             contentLeft={\n//                                 // eslint-disable-next-line no-nested-ternary\n//                                 multiselect ? (\n//                                     <Checkbox size=\"m\" />\n//                                 ) : item.value === value ? (\n//                                     <IconDone size=\"s\" color=\"inherit\" />\n//                                 ) : undefined\n//                             }\n//                         />\n//                     ))}\n//                 </SelectComponent>\n//\n//                 {/* TODO: #1153 */}\n//                 {helperText && <HelperText status={status}>{helperText}</HelperText>}\n//             </SelectWrapper>\n//         );\n//     },\n// );\n\nimport React, { forwardRef } from 'react';\nimport { Select as SelectHope } from '@salutejs/plasma-hope';\n// TODO: Удалить Select из hope с внедрением компонента SelectNested в new-hope\n\nvar SelectBase = /*#__PURE__*/SelectHope({\n  design: 'web'\n});\n\n/**\n * Выпадающий список для использования в формах.\n * Поддерживает выбор одного или нескольких значений.\n */\nexport var Select = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SelectBase, _extends({}, props, {\n    ref: ref\n  }));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n/**\n * Метод-заглушка\n */\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('PreviewGallery/utils');\nexport var noop = function noop() {};\n\n/**\n * Метод для смены элементов в массиве по индексам\n * @param {Array<PreviewGalleryItemProps>} oldItems массив в предыдущем состоянии\n * @param {number} oldIndex старое значение индекса\n * @param {number} newIndex новое значение индекса\n * @returns {Array<PreviewGalleryItemProps>} новый массив с новым порядком элементов\n */\nexport var arrayItemSwapping = function arrayItemSwapping(oldItems, oldIndex, newIndex) {\n  if (!(oldItems !== null && oldItems !== void 0 && oldItems.length)) {\n    return [];\n  }\n  var newItems = _toConsumableArray(oldItems);\n  newItems.splice(newIndex < 0 ? newItems.length + newIndex : newIndex, 0, newItems.splice(oldIndex, 1)[0]);\n  return newItems;\n};\n\n/**\n * Метод для удаления элемента из массива по индексу\n * @param {Array<PreviewGalleryItemProps>} oldItems массив в предыдущем состоянии\n * @param {number | string} id старое значение индекса\n * @returns {Array<PreviewGalleryItemProps>} новый массив без удалённого элемента\n */\nexport var arrayItemRemoving = function arrayItemRemoving(oldItems, id) {\n  if (!(oldItems !== null && oldItems !== void 0 && oldItems.length)) {\n    return [];\n  }\n  var newItems = _toConsumableArray(oldItems);\n  var idIndex = newItems.findIndex(function (item) {\n    return item.id === id;\n  });\n  if (idIndex === -1) {\n    return oldItems;\n  }\n  newItems.splice(idIndex, 1);\n  return newItems;\n};\n\n/**\n * Метод для выделения элемента из массива по индексу\n * @param {Array<PreviewGalleryItemProps>} oldItems массив в предыдущем состоянии\n * @param {number | string} id старое значение индекса\n * @param {boolean | undefined} multipleSelect флаг множественного выбора\n * @returns {Array<PreviewGalleryItemProps>} новый массив с выделенными элементами\n */\nexport var arrayItemSelecting = function arrayItemSelecting(oldItems, id) {\n  var multipleSelect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!(oldItems !== null && oldItems !== void 0 && oldItems.length)) {\n    return [];\n  }\n\n  // Метод для предотвращения лишних re-render\n  var getRemovedSelectionItems = function getRemovedSelectionItems(items) {\n    return items.map(function (item) {\n      return _objectSpread(_objectSpread({}, item), {}, {\n        isSelected: item.isSelected === undefined ? undefined : false\n      });\n    });\n  };\n  var newItems = multipleSelect ? _toConsumableArray(oldItems) : getRemovedSelectionItems(oldItems);\n  var idIndex = newItems.findIndex(function (item) {\n    return item.id === id;\n  });\n  if (idIndex === -1) {\n    return oldItems;\n  }\n  newItems[idIndex].isSelected = Boolean(!newItems[idIndex].isSelected);\n  return newItems;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
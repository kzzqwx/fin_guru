{"ast":null,"code":"var _DisclosureIconWrappe;\nimport React, { useEffect, useRef } from 'react';\nimport { classes } from '../../Dropdown.tokens';\nimport { cx } from '../../../../utils';\nimport { IconDisclosureRight } from '../../../_Icon';\nimport { StyledContentLeft, StyledContentRight, StyledText, Wrapper, DisclosureIconWrapper } from './DropdownItem.styles';\nexport var DropdownItem = function DropdownItem(_ref) {\n  var item = _ref.item,\n    path = _ref.path,\n    focusedPath = _ref.focusedPath,\n    currentLevel = _ref.currentLevel,\n    index = _ref.index,\n    itemRole = _ref.itemRole,\n    closeOnSelect = _ref.closeOnSelect,\n    handleGlobalToggle = _ref.handleGlobalToggle,\n    onHover = _ref.onHover,\n    onItemSelect = _ref.onItemSelect,\n    onItemClick = _ref.onItemClick,\n    ariaControls = _ref.ariaControls,\n    ariaExpanded = _ref.ariaExpanded,\n    ariaHasPopup = _ref.ariaHasPopup,\n    ariaLevel = _ref.ariaLevel,\n    ariaLabel = _ref.ariaLabel,\n    variant = _ref.variant,\n    hasArrow = _ref.hasArrow;\n  var value = item.value,\n    label = item.label,\n    disabled = item.disabled,\n    isDisabled = item.isDisabled,\n    contentLeft = item.contentLeft,\n    contentRight = item.contentRight;\n  var ref = useRef(null);\n  var isDisabledClassName = disabled || isDisabled ? classes.dropdownItemIsDisabled : undefined;\n  var focusedClass = currentLevel === focusedPath.length - 1 && index === (focusedPath === null || focusedPath === void 0 ? void 0 : focusedPath[currentLevel]) ? classes.dropdownItemIsFocused : undefined;\n  var activeClass = value === (path === null || path === void 0 ? void 0 : path[currentLevel + 1]) ? classes.dropdownItemIsActive : undefined;\n  useEffect(function () {\n    if (focusedClass && ref !== null && ref !== void 0 && ref.current) {\n      ref.current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'center',\n        inline: 'center'\n      });\n    }\n  }, [focusedClass]);\n  var handleClick = function handleClick(event) {\n    if (disabled || isDisabled) {\n      return;\n    }\n    if (onItemSelect) {\n      onItemSelect(item, event);\n    }\n    if (onItemClick) {\n      onItemClick(item, event);\n    }\n    if (handleGlobalToggle && closeOnSelect) {\n      handleGlobalToggle(false, event);\n    }\n  };\n  var handleHover = function handleHover() {\n    if (onHover) {\n      onHover(index);\n    }\n  };\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    className: cx(isDisabledClassName, focusedClass, activeClass),\n    id: value.toString(),\n    role: itemRole,\n    ref: ref,\n    \"aria-disabled\": disabled || isDisabled,\n    onClick: handleClick,\n    onMouseEnter: handleHover,\n    variant: variant,\n    \"aria-controls\": ariaControls,\n    \"aria-expanded\": ariaExpanded,\n    \"aria-haspopup\": ariaHasPopup,\n    \"aria-level\": ariaLevel,\n    \"aria-label\": ariaLabel\n  }, contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), /*#__PURE__*/React.createElement(StyledText, null, label), contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight), item.items && hasArrow && (_DisclosureIconWrappe || (_DisclosureIconWrappe = /*#__PURE__*/React.createElement(DisclosureIconWrapper, null, /*#__PURE__*/React.createElement(IconDisclosureRight, {\n    size: \"xs\",\n    color: \"inherit\"\n  })))));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
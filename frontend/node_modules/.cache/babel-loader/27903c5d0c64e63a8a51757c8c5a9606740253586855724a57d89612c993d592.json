{"ast":null,"code":"var JUMP_SIZE = 10;\nexport var keys = {\n  Enter: 'Enter',\n  Space: 'Space',\n  Tab: 'Tab',\n  Escape: 'Escape',\n  ArrowLeft: 'ArrowLeft',\n  ArrowRight: 'ArrowRight',\n  ArrowUp: 'ArrowUp',\n  ArrowDown: 'ArrowDown',\n  Home: 'Home',\n  End: 'End',\n  PageUp: 'PageUp',\n  PageDown: 'PageDown'\n};\nvar getFurtherPath = function getFurtherPath(focusedPath, focusedToValueMap) {\n  var focusedPathAsString = focusedPath.reduce(function (acc, n) {\n    return \"\".concat(acc, \"/\").concat(n);\n  }, '').replace(/^(\\/)/, '');\n  return focusedToValueMap.get(focusedPathAsString);\n};\nexport var useKeyNavigation = function useKeyNavigation(_ref) {\n  var focusedPath = _ref.focusedPath,\n    dispatchFocusedPath = _ref.dispatchFocusedPath,\n    path = _ref.path,\n    dispatchPath = _ref.dispatchPath,\n    pathMap = _ref.pathMap,\n    focusedToValueMap = _ref.focusedToValueMap,\n    handleGlobalToggle = _ref.handleGlobalToggle,\n    closeOnSelect = _ref.closeOnSelect,\n    onItemSelect = _ref.onItemSelect,\n    onItemClick = _ref.onItemClick;\n  var currentLength = pathMap.get(path === null || path === void 0 ? void 0 : path[path.length - 1]) || 0;\n  var currentIndex = (focusedPath === null || focusedPath === void 0 ? void 0 : focusedPath[focusedPath.length - 1]) || 0;\n  var onKeyDown = function onKeyDown(event) {\n    switch (event.code) {\n      case keys.ArrowUp:\n        {\n          if (focusedPath.length) {\n            if (currentIndex > 0) {\n              dispatchFocusedPath({\n                type: 'change_last_focus',\n                value: currentIndex - 1\n              });\n            }\n          } else {\n            dispatchPath({\n              type: 'opened_first_level'\n            });\n            dispatchFocusedPath({\n              type: 'set_initial_focus'\n            });\n            handleGlobalToggle(true, event);\n          }\n          break;\n        }\n      case keys.ArrowDown:\n        {\n          if (focusedPath.length) {\n            if (currentIndex + 1 < currentLength) {\n              dispatchFocusedPath({\n                type: 'change_last_focus',\n                value: currentIndex + 1\n              });\n            }\n          } else {\n            dispatchPath({\n              type: 'opened_first_level'\n            });\n            dispatchFocusedPath({\n              type: 'set_initial_focus'\n            });\n            handleGlobalToggle(true, event);\n          }\n          break;\n        }\n      case keys.ArrowLeft:\n        {\n          if (focusedPath.length) {\n            dispatchPath({\n              type: 'removed_last_level'\n            });\n            dispatchFocusedPath({\n              type: 'return_prev_focus'\n            });\n          }\n          if (focusedPath.length === 1) {\n            handleGlobalToggle(false, event);\n          }\n          break;\n        }\n      case keys.ArrowRight:\n        {\n          if (!focusedPath.length) {\n            break;\n          }\n          var currentItem = getFurtherPath(focusedPath, focusedToValueMap);\n          if (currentItem !== null && currentItem !== void 0 && currentItem.items) {\n            dispatchPath({\n              type: 'added_next_level',\n              value: currentItem.value.toString()\n            });\n            dispatchFocusedPath({\n              type: 'add_focus',\n              value: 0\n            });\n          }\n          break;\n        }\n      case keys.Enter:\n      case keys.Space:\n        {\n          event.preventDefault();\n          if (!path[0]) {\n            dispatchPath({\n              type: 'opened_first_level'\n            });\n            dispatchFocusedPath({\n              type: 'set_initial_focus'\n            });\n            break;\n          }\n          var _currentItem = getFurtherPath(focusedPath, focusedToValueMap);\n          if (_currentItem !== null && _currentItem !== void 0 && _currentItem.disabled || _currentItem !== null && _currentItem !== void 0 && _currentItem.isDisabled) {\n            break;\n          }\n          if (_currentItem !== null && _currentItem !== void 0 && _currentItem.items) {\n            dispatchPath({\n              type: 'added_next_level',\n              value: _currentItem.value.toString()\n            });\n            dispatchFocusedPath({\n              type: 'add_focus',\n              value: 0\n            });\n          } else {\n            if (closeOnSelect) {\n              handleGlobalToggle(false, event);\n            }\n            if (onItemSelect && _currentItem) {\n              onItemSelect(_currentItem, event);\n            }\n            if (onItemClick && _currentItem) {\n              onItemClick(_currentItem, event);\n            }\n          }\n          break;\n        }\n      case keys.Tab:\n      case keys.Escape:\n        {\n          dispatchFocusedPath({\n            type: 'reset'\n          });\n          dispatchPath({\n            type: 'reset'\n          });\n          handleGlobalToggle(false, event);\n          break;\n        }\n      case keys.Home:\n        {\n          if (path[0]) {\n            dispatchFocusedPath({\n              type: 'change_last_focus',\n              value: 0\n            });\n          } else {\n            dispatchPath({\n              type: 'opened_first_level'\n            });\n            dispatchFocusedPath({\n              type: 'set_initial_focus'\n            });\n            handleGlobalToggle(true, event);\n          }\n          break;\n        }\n      case keys.End:\n        {\n          if (path[0]) {\n            dispatchFocusedPath({\n              type: 'change_last_focus',\n              value: currentLength - 1\n            });\n          } else {\n            dispatchPath({\n              type: 'opened_first_level'\n            });\n            dispatchFocusedPath({\n              type: 'change_last_focus',\n              value: (pathMap.get('root') || 0) - 1\n            });\n            handleGlobalToggle(true, event);\n          }\n          break;\n        }\n      case keys.PageUp:\n        {\n          if (!path[0]) {\n            break;\n          }\n          if (currentIndex <= JUMP_SIZE) {\n            dispatchFocusedPath({\n              type: 'change_last_focus',\n              value: 0\n            });\n          } else {\n            dispatchFocusedPath({\n              type: 'change_last_focus',\n              value: currentIndex - JUMP_SIZE\n            });\n          }\n          break;\n        }\n      case keys.PageDown:\n        {\n          if (!path[0]) {\n            break;\n          }\n          if (currentLength - currentIndex <= JUMP_SIZE) {\n            dispatchFocusedPath({\n              type: 'change_last_focus',\n              value: currentLength - 1\n            });\n          } else {\n            dispatchFocusedPath({\n              type: 'change_last_focus',\n              value: currentIndex + JUMP_SIZE\n            });\n          }\n          break;\n        }\n      default:\n        {\n          break;\n        }\n    }\n  };\n  return {\n    onKeyDown: onKeyDown\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
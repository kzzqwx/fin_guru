{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { css } from 'styled-components';\nimport { addFocus } from '../../mixins';\nimport { convertRoundnessMatrix } from '../../utils';\n/**\n * Создание специализированного миксина со своими размерами и типографикой.\n * @param {Record<string, object>} sizes\n * @param {Record<string, object>} typos\n */\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Button/Button.mixins');\nexport var getButtonSizesMixin = function getButtonSizesMixin(sizes, typos) {\n  return function (_ref) {\n    var size = _ref.size,\n      pin = _ref.pin,\n      outlined = _ref.outlined,\n      focused = _ref.focused,\n      isContentLeft = _ref.$isContentLeft,\n      isContentRight = _ref.$isContentRight,\n      shiftLeft = _ref.shiftLeft,\n      shiftRight = _ref.shiftRight,\n      square = _ref.square,\n      stretch = _ref.stretch,\n      theme = _ref.theme;\n    var paddingX = sizes[size].paddingX;\n    if (square) {\n      paddingX = sizes[size].paddingY;\n    } else if (stretch) {\n      paddingX = sizes[size].paddingStretchX;\n    } else if (isContentLeft || isContentRight) {\n      paddingX = sizes[size].paddingContentX;\n    }\n    return css([\"height:\", \";padding:\", \" \", \";border-radius:\", \";\", \" \", \" \", \" \", \" \", \" \", \"\"], sizes[size].height, sizes[size].paddingY, paddingX, convertRoundnessMatrix(pin, sizes[size].radius, sizes[size].radiusCircle), stretch && 'width: 100%;', square && \" width: \".concat(sizes[size].height, \";\"), shiftLeft && \"margin-left: calc(-1 * \".concat(paddingX, \");\"), shiftRight && \"margin-right: calc(-1 * \".concat(paddingX, \");\"), typos[size], addFocus(_objectSpread(_objectSpread({}, theme), {}, {\n      focused: focused,\n      outlined: outlined,\n      outlineRadius: convertRoundnessMatrix(pin, \"calc(\".concat(sizes[size].radius, \" + var(--plasma-outline-size))\"), \"calc(\".concat(sizes[size].radiusCircle, \" + var(--plasma-outline-size))\"))\n    })));\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
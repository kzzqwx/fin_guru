{"ast":null,"code":"var _excluded = [\"id\", \"isHidden\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useMemo } from 'react';\nimport { useStoreon } from 'storeon/react';\nimport { PopupProvider, popupConfig } from '../Popup';\nimport { component } from '../../engines';\nimport { cx } from '../../utils';\nimport { closeNotification } from './NotificationsStore';\nimport { StyledItemWrapper, StyledRoot } from './Notification.styles';\nimport { classes } from './Notification.tokens';\n\n// issue #823\nvar Popup = /*#__PURE__*/component(popupConfig);\n\n/**\n * Обертка для визуального представления уведомлений.\n */\nexport var NotificationsPortal = function NotificationsPortal(_ref) {\n  var config = _ref.config,\n    frame = _ref.frame;\n  var _useStoreon = useStoreon('notifications'),\n    notifications = _useStoreon.notifications;\n  var Notification = useMemo(function () {\n    return component(config);\n  }, []);\n  return /*#__PURE__*/React.createElement(PopupProvider, null, notifications.length > 0 && /*#__PURE__*/React.createElement(Popup, {\n    isOpen: true,\n    frame: frame,\n    placement: \"bottom-right\",\n    zIndex: \"9100\"\n  }, /*#__PURE__*/React.createElement(StyledRoot, null, notifications.map(function (_ref2) {\n    var id = _ref2.id,\n      isHidden = _ref2.isHidden,\n      rest = _objectWithoutProperties(_ref2, _excluded);\n    return /*#__PURE__*/React.createElement(StyledItemWrapper, {\n      key: id,\n      className: cx(isHidden ? classes.notificationItemHidden : classes.notificationItemOpened),\n      isHidden: isHidden || false\n    }, /*#__PURE__*/React.createElement(Notification, _extends({\n      key: id,\n      id: id,\n      onCloseButtonClick: function onCloseButtonClick() {\n        return closeNotification(id);\n      }\n    }, rest)));\n  }))));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
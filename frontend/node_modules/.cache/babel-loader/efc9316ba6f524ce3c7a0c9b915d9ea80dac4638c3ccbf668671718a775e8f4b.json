{"ast":null,"code":"import { _ as __assign, a as __rest, b as __awaiter, c as __generator, d as createNanoEvents, e as __spreadArray } from './common-ba25e019.js';\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nfunction getDefaultExportFromCjs(x) {\n  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n}\nfunction commonjsRequire(path) {\n  throw new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar proto = {\n  exports: {}\n};\nvar indexMinimal = {};\nvar minimal$1 = {};\nvar aspromise;\nvar hasRequiredAspromise;\nfunction requireAspromise() {\n  if (hasRequiredAspromise) return aspromise;\n  hasRequiredAspromise = 1;\n  aspromise = asPromise;\n\n  /**\r\n   * Callback as used by {@link util.asPromise}.\r\n   * @typedef asPromiseCallback\r\n   * @type {function}\r\n   * @param {Error|null} error Error, if any\r\n   * @param {...*} params Additional arguments\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Returns a promise from a node-style callback function.\r\n   * @memberof util\r\n   * @param {asPromiseCallback} fn Function to call\r\n   * @param {*} ctx Function context\r\n   * @param {...*} params Function arguments\r\n   * @returns {Promise<*>} Promisified function\r\n   */\n  function asPromise(fn, ctx /*, varargs */) {\n    var params = new Array(arguments.length - 1),\n      offset = 0,\n      index = 2,\n      pending = true;\n    while (index < arguments.length) params[offset++] = arguments[index++];\n    return new Promise(function executor(resolve, reject) {\n      params[offset] = function callback(err /*, varargs */) {\n        if (pending) {\n          pending = false;\n          if (err) reject(err);else {\n            var params = new Array(arguments.length - 1),\n              offset = 0;\n            while (offset < params.length) params[offset++] = arguments[offset];\n            resolve.apply(null, params);\n          }\n        }\n      };\n      try {\n        fn.apply(ctx || null, params);\n      } catch (err) {\n        if (pending) {\n          pending = false;\n          reject(err);\n        }\n      }\n    });\n  }\n  return aspromise;\n}\nvar base64 = {};\nvar hasRequiredBase64;\nfunction requireBase64() {\n  if (hasRequiredBase64) return base64;\n  hasRequiredBase64 = 1;\n  (function (exports) {\n    /**\r\n     * A minimal base64 implementation for number arrays.\r\n     * @memberof util\r\n     * @namespace\r\n     */\n    var base64 = exports;\n\n    /**\r\n     * Calculates the byte length of a base64 encoded string.\r\n     * @param {string} string Base64 encoded string\r\n     * @returns {number} Byte length\r\n     */\n    base64.length = function length(string) {\n      var p = string.length;\n      if (!p) return 0;\n      var n = 0;\n      while (--p % 4 > 1 && string.charAt(p) === \"=\") ++n;\n      return Math.ceil(string.length * 3) / 4 - n;\n    };\n\n    // Base64 encoding table\n    var b64 = new Array(64);\n\n    // Base64 decoding table\n    var s64 = new Array(123);\n\n    // 65..90, 97..122, 48..57, 43, 47\n    for (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\n\n    /**\r\n     * Encodes a buffer to a base64 encoded string.\r\n     * @param {Uint8Array} buffer Source buffer\r\n     * @param {number} start Source start\r\n     * @param {number} end Source end\r\n     * @returns {string} Base64 encoded string\r\n     */\n    base64.encode = function encode(buffer, start, end) {\n      var parts = null,\n        chunk = [];\n      var i = 0,\n        // output index\n        j = 0,\n        // goto index\n        t; // temporary\n      while (start < end) {\n        var b = buffer[start++];\n        switch (j) {\n          case 0:\n            chunk[i++] = b64[b >> 2];\n            t = (b & 3) << 4;\n            j = 1;\n            break;\n          case 1:\n            chunk[i++] = b64[t | b >> 4];\n            t = (b & 15) << 2;\n            j = 2;\n            break;\n          case 2:\n            chunk[i++] = b64[t | b >> 6];\n            chunk[i++] = b64[b & 63];\n            j = 0;\n            break;\n        }\n        if (i > 8191) {\n          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n          i = 0;\n        }\n      }\n      if (j) {\n        chunk[i++] = b64[t];\n        chunk[i++] = 61;\n        if (j === 1) chunk[i++] = 61;\n      }\n      if (parts) {\n        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n      }\n      return String.fromCharCode.apply(String, chunk.slice(0, i));\n    };\n    var invalidEncoding = \"invalid encoding\";\n\n    /**\r\n     * Decodes a base64 encoded string to a buffer.\r\n     * @param {string} string Source string\r\n     * @param {Uint8Array} buffer Destination buffer\r\n     * @param {number} offset Destination offset\r\n     * @returns {number} Number of bytes written\r\n     * @throws {Error} If encoding is invalid\r\n     */\n    base64.decode = function decode(string, buffer, offset) {\n      var start = offset;\n      var j = 0,\n        // goto index\n        t; // temporary\n      for (var i = 0; i < string.length;) {\n        var c = string.charCodeAt(i++);\n        if (c === 61 && j > 1) break;\n        if ((c = s64[c]) === undefined) throw Error(invalidEncoding);\n        switch (j) {\n          case 0:\n            t = c;\n            j = 1;\n            break;\n          case 1:\n            buffer[offset++] = t << 2 | (c & 48) >> 4;\n            t = c;\n            j = 2;\n            break;\n          case 2:\n            buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n            t = c;\n            j = 3;\n            break;\n          case 3:\n            buffer[offset++] = (t & 3) << 6 | c;\n            j = 0;\n            break;\n        }\n      }\n      if (j === 1) throw Error(invalidEncoding);\n      return offset - start;\n    };\n\n    /**\r\n     * Tests if the specified string appears to be base64 encoded.\r\n     * @param {string} string String to test\r\n     * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n     */\n    base64.test = function test(string) {\n      return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\n    };\n  })(base64);\n  return base64;\n}\nvar eventemitter;\nvar hasRequiredEventemitter;\nfunction requireEventemitter() {\n  if (hasRequiredEventemitter) return eventemitter;\n  hasRequiredEventemitter = 1;\n  eventemitter = EventEmitter;\n\n  /**\r\n   * Constructs a new event emitter instance.\r\n   * @classdesc A minimal event emitter.\r\n   * @memberof util\r\n   * @constructor\r\n   */\n  function EventEmitter() {\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\n    this._listeners = {};\n  }\n\n  /**\r\n   * Registers an event listener.\r\n   * @param {string} evt Event name\r\n   * @param {function} fn Listener\r\n   * @param {*} [ctx] Listener context\r\n   * @returns {util.EventEmitter} `this`\r\n   */\n  EventEmitter.prototype.on = function on(evt, fn, ctx) {\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\n      fn: fn,\n      ctx: ctx || this\n    });\n    return this;\n  };\n\n  /**\r\n   * Removes an event listener or any matching listeners if arguments are omitted.\r\n   * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n   * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n   * @returns {util.EventEmitter} `this`\r\n   */\n  EventEmitter.prototype.off = function off(evt, fn) {\n    if (evt === undefined) this._listeners = {};else {\n      if (fn === undefined) this._listeners[evt] = [];else {\n        var listeners = this._listeners[evt];\n        for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n      }\n    }\n    return this;\n  };\n\n  /**\r\n   * Emits an event by calling its listeners with the specified arguments.\r\n   * @param {string} evt Event name\r\n   * @param {...*} args Arguments\r\n   * @returns {util.EventEmitter} `this`\r\n   */\n  EventEmitter.prototype.emit = function emit(evt) {\n    var listeners = this._listeners[evt];\n    if (listeners) {\n      var args = [],\n        i = 1;\n      for (; i < arguments.length;) args.push(arguments[i++]);\n      for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n    }\n    return this;\n  };\n  return eventemitter;\n}\nvar float;\nvar hasRequiredFloat;\nfunction requireFloat() {\n  if (hasRequiredFloat) return float;\n  hasRequiredFloat = 1;\n  float = factory(factory);\n\n  /**\r\n   * Reads / writes floats / doubles from / to buffers.\r\n   * @name util.float\r\n   * @namespace\r\n   */\n\n  /**\r\n   * Writes a 32 bit float to a buffer using little endian byte order.\r\n   * @name util.float.writeFloatLE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Writes a 32 bit float to a buffer using big endian byte order.\r\n   * @name util.float.writeFloatBE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Reads a 32 bit float from a buffer using little endian byte order.\r\n   * @name util.float.readFloatLE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  /**\r\n   * Reads a 32 bit float from a buffer using big endian byte order.\r\n   * @name util.float.readFloatBE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  /**\r\n   * Writes a 64 bit double to a buffer using little endian byte order.\r\n   * @name util.float.writeDoubleLE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Writes a 64 bit double to a buffer using big endian byte order.\r\n   * @name util.float.writeDoubleBE\r\n   * @function\r\n   * @param {number} val Value to write\r\n   * @param {Uint8Array} buf Target buffer\r\n   * @param {number} pos Target buffer offset\r\n   * @returns {undefined}\r\n   */\n\n  /**\r\n   * Reads a 64 bit double from a buffer using little endian byte order.\r\n   * @name util.float.readDoubleLE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  /**\r\n   * Reads a 64 bit double from a buffer using big endian byte order.\r\n   * @name util.float.readDoubleBE\r\n   * @function\r\n   * @param {Uint8Array} buf Source buffer\r\n   * @param {number} pos Source buffer offset\r\n   * @returns {number} Value read\r\n   */\n\n  // Factory function for the purpose of node-based testing in modified global environments\n  function factory(exports) {\n    // float: typed array\n    if (typeof Float32Array !== \"undefined\") (function () {\n      var f32 = new Float32Array([-0]),\n        f8b = new Uint8Array(f32.buffer),\n        le = f8b[3] === 128;\n      function writeFloat_f32_cpy(val, buf, pos) {\n        f32[0] = val;\n        buf[pos] = f8b[0];\n        buf[pos + 1] = f8b[1];\n        buf[pos + 2] = f8b[2];\n        buf[pos + 3] = f8b[3];\n      }\n      function writeFloat_f32_rev(val, buf, pos) {\n        f32[0] = val;\n        buf[pos] = f8b[3];\n        buf[pos + 1] = f8b[2];\n        buf[pos + 2] = f8b[1];\n        buf[pos + 3] = f8b[0];\n      }\n\n      /* istanbul ignore next */\n      exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n      /* istanbul ignore next */\n      exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n      function readFloat_f32_cpy(buf, pos) {\n        f8b[0] = buf[pos];\n        f8b[1] = buf[pos + 1];\n        f8b[2] = buf[pos + 2];\n        f8b[3] = buf[pos + 3];\n        return f32[0];\n      }\n      function readFloat_f32_rev(buf, pos) {\n        f8b[3] = buf[pos];\n        f8b[2] = buf[pos + 1];\n        f8b[1] = buf[pos + 2];\n        f8b[0] = buf[pos + 3];\n        return f32[0];\n      }\n\n      /* istanbul ignore next */\n      exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n      /* istanbul ignore next */\n      exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n      // float: ieee754\n    })();else (function () {\n      function writeFloat_ieee754(writeUint, val, buf, pos) {\n        var sign = val < 0 ? 1 : 0;\n        if (sign) val = -val;\n        if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38)\n          // +-Infinity\n          writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38)\n          // denormal\n          writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2),\n            mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n          writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n        }\n      }\n      exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n      exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n      function readFloat_ieee754(readUint, buf, pos) {\n        var uint = readUint(buf, pos),\n          sign = (uint >> 31) * 2 + 1,\n          exponent = uint >>> 23 & 255,\n          mantissa = uint & 8388607;\n        return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n        ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n      }\n      exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n      exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n    })();\n\n    // double: typed array\n    if (typeof Float64Array !== \"undefined\") (function () {\n      var f64 = new Float64Array([-0]),\n        f8b = new Uint8Array(f64.buffer),\n        le = f8b[7] === 128;\n      function writeDouble_f64_cpy(val, buf, pos) {\n        f64[0] = val;\n        buf[pos] = f8b[0];\n        buf[pos + 1] = f8b[1];\n        buf[pos + 2] = f8b[2];\n        buf[pos + 3] = f8b[3];\n        buf[pos + 4] = f8b[4];\n        buf[pos + 5] = f8b[5];\n        buf[pos + 6] = f8b[6];\n        buf[pos + 7] = f8b[7];\n      }\n      function writeDouble_f64_rev(val, buf, pos) {\n        f64[0] = val;\n        buf[pos] = f8b[7];\n        buf[pos + 1] = f8b[6];\n        buf[pos + 2] = f8b[5];\n        buf[pos + 3] = f8b[4];\n        buf[pos + 4] = f8b[3];\n        buf[pos + 5] = f8b[2];\n        buf[pos + 6] = f8b[1];\n        buf[pos + 7] = f8b[0];\n      }\n\n      /* istanbul ignore next */\n      exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n      /* istanbul ignore next */\n      exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n      function readDouble_f64_cpy(buf, pos) {\n        f8b[0] = buf[pos];\n        f8b[1] = buf[pos + 1];\n        f8b[2] = buf[pos + 2];\n        f8b[3] = buf[pos + 3];\n        f8b[4] = buf[pos + 4];\n        f8b[5] = buf[pos + 5];\n        f8b[6] = buf[pos + 6];\n        f8b[7] = buf[pos + 7];\n        return f64[0];\n      }\n      function readDouble_f64_rev(buf, pos) {\n        f8b[7] = buf[pos];\n        f8b[6] = buf[pos + 1];\n        f8b[5] = buf[pos + 2];\n        f8b[4] = buf[pos + 3];\n        f8b[3] = buf[pos + 4];\n        f8b[2] = buf[pos + 5];\n        f8b[1] = buf[pos + 6];\n        f8b[0] = buf[pos + 7];\n        return f64[0];\n      }\n\n      /* istanbul ignore next */\n      exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n      /* istanbul ignore next */\n      exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n      // double: ieee754\n    })();else (function () {\n      function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n        var sign = val < 0 ? 1 : 0;\n        if (sign) val = -val;\n        if (val === 0) {\n          writeUint(0, buf, pos + off0);\n          writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n        } else if (isNaN(val)) {\n          writeUint(0, buf, pos + off0);\n          writeUint(2146959360, buf, pos + off1);\n        } else if (val > 1.7976931348623157e+308) {\n          // +-Infinity\n          writeUint(0, buf, pos + off0);\n          writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n        } else {\n          var mantissa;\n          if (val < 2.2250738585072014e-308) {\n            // denormal\n            mantissa = val / 5e-324;\n            writeUint(mantissa >>> 0, buf, pos + off0);\n            writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n          } else {\n            var exponent = Math.floor(Math.log(val) / Math.LN2);\n            if (exponent === 1024) exponent = 1023;\n            mantissa = val * Math.pow(2, -exponent);\n            writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n            writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n          }\n        }\n      }\n      exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n      exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n      function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n        var lo = readUint(buf, pos + off0),\n          hi = readUint(buf, pos + off1);\n        var sign = (hi >> 31) * 2 + 1,\n          exponent = hi >>> 20 & 2047,\n          mantissa = 4294967296 * (hi & 1048575) + lo;\n        return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n        ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n      }\n      exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n      exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n    })();\n    return exports;\n  }\n\n  // uint helpers\n\n  function writeUintLE(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n  }\n  function writeUintBE(val, buf, pos) {\n    buf[pos] = val >>> 24;\n    buf[pos + 1] = val >>> 16 & 255;\n    buf[pos + 2] = val >>> 8 & 255;\n    buf[pos + 3] = val & 255;\n  }\n  function readUintLE(buf, pos) {\n    return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n  }\n  function readUintBE(buf, pos) {\n    return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n  }\n  return float;\n}\nvar inquire_1;\nvar hasRequiredInquire;\nfunction requireInquire() {\n  if (hasRequiredInquire) return inquire_1;\n  hasRequiredInquire = 1;\n  inquire_1 = inquire;\n\n  /**\r\n   * Requires a module only if available.\r\n   * @memberof util\r\n   * @param {string} moduleName Module to require\r\n   * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n   */\n  function inquire(moduleName) {\n    try {\n      var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName); // eslint-disable-line no-eval\n      if (mod && (mod.length || Object.keys(mod).length)) return mod;\n    } catch (e) {} // eslint-disable-line no-empty\n    return null;\n  }\n  return inquire_1;\n}\nvar utf8 = {};\nvar hasRequiredUtf8;\nfunction requireUtf8() {\n  if (hasRequiredUtf8) return utf8;\n  hasRequiredUtf8 = 1;\n  (function (exports) {\n    /**\r\n     * A minimal UTF8 implementation for number arrays.\r\n     * @memberof util\r\n     * @namespace\r\n     */\n    var utf8 = exports;\n\n    /**\r\n     * Calculates the UTF8 byte length of a string.\r\n     * @param {string} string String\r\n     * @returns {number} Byte length\r\n     */\n    utf8.length = function utf8_length(string) {\n      var len = 0,\n        c = 0;\n      for (var i = 0; i < string.length; ++i) {\n        c = string.charCodeAt(i);\n        if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n          ++i;\n          len += 4;\n        } else len += 3;\n      }\n      return len;\n    };\n\n    /**\r\n     * Reads UTF8 bytes as a string.\r\n     * @param {Uint8Array} buffer Source buffer\r\n     * @param {number} start Source start\r\n     * @param {number} end Source end\r\n     * @returns {string} String read\r\n     */\n    utf8.read = function utf8_read(buffer, start, end) {\n      var len = end - start;\n      if (len < 1) return \"\";\n      var parts = null,\n        chunk = [],\n        i = 0,\n        // char offset\n        t; // temporary\n      while (start < end) {\n        t = buffer[start++];\n        if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {\n          t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n          chunk[i++] = 0xD800 + (t >> 10);\n          chunk[i++] = 0xDC00 + (t & 1023);\n        } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n        if (i > 8191) {\n          (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n          i = 0;\n        }\n      }\n      if (parts) {\n        if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n        return parts.join(\"\");\n      }\n      return String.fromCharCode.apply(String, chunk.slice(0, i));\n    };\n\n    /**\r\n     * Writes a string as UTF8 bytes.\r\n     * @param {string} string Source string\r\n     * @param {Uint8Array} buffer Destination buffer\r\n     * @param {number} offset Destination offset\r\n     * @returns {number} Bytes written\r\n     */\n    utf8.write = function utf8_write(string, buffer, offset) {\n      var start = offset,\n        c1,\n        // character 1\n        c2; // character 2\n      for (var i = 0; i < string.length; ++i) {\n        c1 = string.charCodeAt(i);\n        if (c1 < 128) {\n          buffer[offset++] = c1;\n        } else if (c1 < 2048) {\n          buffer[offset++] = c1 >> 6 | 192;\n          buffer[offset++] = c1 & 63 | 128;\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n          c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n          ++i;\n          buffer[offset++] = c1 >> 18 | 240;\n          buffer[offset++] = c1 >> 12 & 63 | 128;\n          buffer[offset++] = c1 >> 6 & 63 | 128;\n          buffer[offset++] = c1 & 63 | 128;\n        } else {\n          buffer[offset++] = c1 >> 12 | 224;\n          buffer[offset++] = c1 >> 6 & 63 | 128;\n          buffer[offset++] = c1 & 63 | 128;\n        }\n      }\n      return offset - start;\n    };\n  })(utf8);\n  return utf8;\n}\nvar pool_1;\nvar hasRequiredPool;\nfunction requirePool() {\n  if (hasRequiredPool) return pool_1;\n  hasRequiredPool = 1;\n  pool_1 = pool;\n\n  /**\r\n   * An allocator as used by {@link util.pool}.\r\n   * @typedef PoolAllocator\r\n   * @type {function}\r\n   * @param {number} size Buffer size\r\n   * @returns {Uint8Array} Buffer\r\n   */\n\n  /**\r\n   * A slicer as used by {@link util.pool}.\r\n   * @typedef PoolSlicer\r\n   * @type {function}\r\n   * @param {number} start Start offset\r\n   * @param {number} end End offset\r\n   * @returns {Uint8Array} Buffer slice\r\n   * @this {Uint8Array}\r\n   */\n\n  /**\r\n   * A general purpose buffer pool.\r\n   * @memberof util\r\n   * @function\r\n   * @param {PoolAllocator} alloc Allocator\r\n   * @param {PoolSlicer} slice Slicer\r\n   * @param {number} [size=8192] Slab size\r\n   * @returns {PoolAllocator} Pooled allocator\r\n   */\n  function pool(alloc, slice, size) {\n    var SIZE = size || 8192;\n    var MAX = SIZE >>> 1;\n    var slab = null;\n    var offset = SIZE;\n    return function pool_alloc(size) {\n      if (size < 1 || size > MAX) return alloc(size);\n      if (offset + size > SIZE) {\n        slab = alloc(SIZE);\n        offset = 0;\n      }\n      var buf = slice.call(slab, offset, offset += size);\n      if (offset & 7)\n        // align to 32 bit\n        offset = (offset | 7) + 1;\n      return buf;\n    };\n  }\n  return pool_1;\n}\nvar longbits;\nvar hasRequiredLongbits;\nfunction requireLongbits() {\n  if (hasRequiredLongbits) return longbits;\n  hasRequiredLongbits = 1;\n  longbits = LongBits;\n  var util = requireMinimal$1();\n\n  /**\n   * Constructs new long bits.\n   * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n   * @memberof util\n   * @constructor\n   * @param {number} lo Low 32 bits, unsigned\n   * @param {number} hi High 32 bits, unsigned\n   */\n  function LongBits(lo, hi) {\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n  }\n\n  /**\n   * Zero bits.\n   * @memberof util.LongBits\n   * @type {util.LongBits}\n   */\n  var zero = LongBits.zero = new LongBits(0, 0);\n  zero.toNumber = function () {\n    return 0;\n  };\n  zero.zzEncode = zero.zzDecode = function () {\n    return this;\n  };\n  zero.length = function () {\n    return 1;\n  };\n\n  /**\n   * Zero hash.\n   * @memberof util.LongBits\n   * @type {string}\n   */\n  var zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n  /**\n   * Constructs new long bits from the specified number.\n   * @param {number} value Value\n   * @returns {util.LongBits} Instance\n   */\n  LongBits.fromNumber = function fromNumber(value) {\n    if (value === 0) return zero;\n    var sign = value < 0;\n    if (sign) value = -value;\n    var lo = value >>> 0,\n      hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n      hi = ~hi >>> 0;\n      lo = ~lo >>> 0;\n      if (++lo > 4294967295) {\n        lo = 0;\n        if (++hi > 4294967295) hi = 0;\n      }\n    }\n    return new LongBits(lo, hi);\n  };\n\n  /**\n   * Constructs new long bits from a number, long or string.\n   * @param {Long|number|string} value Value\n   * @returns {util.LongBits} Instance\n   */\n  LongBits.from = function from(value) {\n    if (typeof value === \"number\") return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n      /* istanbul ignore else */\n      if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n  };\n\n  /**\n   * Converts this long bits to a possibly unsafe JavaScript number.\n   * @param {boolean} [unsigned=false] Whether unsigned or not\n   * @returns {number} Possibly unsafe number\n   */\n  LongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n      var lo = ~this.lo + 1 >>> 0,\n        hi = ~this.hi >>> 0;\n      if (!lo) hi = hi + 1 >>> 0;\n      return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n  };\n\n  /**\n   * Converts this long bits to a long.\n   * @param {boolean} [unsigned=false] Whether unsigned or not\n   * @returns {Long} Long\n   */\n  LongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n    /* istanbul ignore next */ : {\n      low: this.lo | 0,\n      high: this.hi | 0,\n      unsigned: Boolean(unsigned)\n    };\n  };\n  var charCodeAt = String.prototype.charCodeAt;\n\n  /**\n   * Constructs new long bits from the specified 8 characters long hash.\n   * @param {string} hash Hash\n   * @returns {util.LongBits} Bits\n   */\n  LongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash) return zero;\n    return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n  };\n\n  /**\n   * Converts this long bits to a 8 characters long hash.\n   * @returns {string} Hash\n   */\n  LongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n  };\n\n  /**\n   * Zig-zag encodes this long bits.\n   * @returns {util.LongBits} `this`\n   */\n  LongBits.prototype.zzEncode = function zzEncode() {\n    var mask = this.hi >> 31;\n    this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo = (this.lo << 1 ^ mask) >>> 0;\n    return this;\n  };\n\n  /**\n   * Zig-zag decodes this long bits.\n   * @returns {util.LongBits} `this`\n   */\n  LongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n    return this;\n  };\n\n  /**\n   * Calculates the length of this longbits when encoded as a varint.\n   * @returns {number} Length\n   */\n  LongBits.prototype.length = function length() {\n    var part0 = this.lo,\n      part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n      part2 = this.hi >>> 24;\n    return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n  };\n  return longbits;\n}\nvar hasRequiredMinimal$1;\nfunction requireMinimal$1() {\n  if (hasRequiredMinimal$1) return minimal$1;\n  hasRequiredMinimal$1 = 1;\n  (function (exports) {\n    var util = exports;\n\n    // used to return a Promise where callback is omitted\n    util.asPromise = requireAspromise();\n\n    // converts to / from base64 encoded strings\n    util.base64 = requireBase64();\n\n    // base class of rpc.Service\n    util.EventEmitter = requireEventemitter();\n\n    // float handling accross browsers\n    util.float = requireFloat();\n\n    // requires modules optionally and hides the call from bundlers\n    util.inquire = requireInquire();\n\n    // converts to / from utf8 encoded strings\n    util.utf8 = requireUtf8();\n\n    // provides a node-like buffer pool in the browser\n    util.pool = requirePool();\n\n    // utility to work with the low and high bits of a 64 bit value\n    util.LongBits = requireLongbits();\n\n    /**\n     * Whether running within node or not.\n     * @memberof util\n     * @type {boolean}\n     */\n    util.isNode = Boolean(typeof commonjsGlobal !== \"undefined\" && commonjsGlobal && commonjsGlobal.process && commonjsGlobal.process.versions && commonjsGlobal.process.versions.node);\n\n    /**\n     * Global object reference.\n     * @memberof util\n     * @type {Object}\n     */\n    util.global = util.isNode && commonjsGlobal || typeof window !== \"undefined\" && window || typeof self !== \"undefined\" && self || commonjsGlobal; // eslint-disable-line no-invalid-this\n\n    /**\n     * An immuable empty array.\n     * @memberof util\n     * @type {Array.<*>}\n     * @const\n     */\n    util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n    /**\n     * An immutable empty object.\n     * @type {Object}\n     * @const\n     */\n    util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n    /**\n     * Tests if the specified value is an integer.\n     * @function\n     * @param {*} value Value to test\n     * @returns {boolean} `true` if the value is an integer\n     */\n    util.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n      return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n    };\n\n    /**\n     * Tests if the specified value is a string.\n     * @param {*} value Value to test\n     * @returns {boolean} `true` if the value is a string\n     */\n    util.isString = function isString(value) {\n      return typeof value === \"string\" || value instanceof String;\n    };\n\n    /**\n     * Tests if the specified value is a non-null object.\n     * @param {*} value Value to test\n     * @returns {boolean} `true` if the value is a non-null object\n     */\n    util.isObject = function isObject(value) {\n      return value && typeof value === \"object\";\n    };\n\n    /**\n     * Checks if a property on a message is considered to be present.\n     * This is an alias of {@link util.isSet}.\n     * @function\n     * @param {Object} obj Plain object or message instance\n     * @param {string} prop Property name\n     * @returns {boolean} `true` if considered to be present, otherwise `false`\n     */\n    util.isset =\n    /**\n     * Checks if a property on a message is considered to be present.\n     * @param {Object} obj Plain object or message instance\n     * @param {string} prop Property name\n     * @returns {boolean} `true` if considered to be present, otherwise `false`\n     */\n    util.isSet = function isSet(obj, prop) {\n      var value = obj[prop];\n      if (value != null && obj.hasOwnProperty(prop))\n        // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n      return false;\n    };\n\n    /**\n     * Any compatible Buffer instance.\n     * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n     * @interface Buffer\n     * @extends Uint8Array\n     */\n\n    /**\n     * Node's Buffer class if available.\n     * @type {Constructor<Buffer>}\n     */\n    util.Buffer = function () {\n      try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n      } catch (e) {\n        /* istanbul ignore next */\n        return null;\n      }\n    }();\n\n    // Internal alias of or polyfull for Buffer.from.\n    util._Buffer_from = null;\n\n    // Internal alias of or polyfill for Buffer.allocUnsafe.\n    util._Buffer_allocUnsafe = null;\n\n    /**\n     * Creates a new buffer of whatever type supported by the environment.\n     * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n     * @returns {Uint8Array|Buffer} Buffer\n     */\n    util.newBuffer = function newBuffer(sizeOrArray) {\n      /* istanbul ignore next */\n      return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n    };\n\n    /**\n     * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n     * @type {Constructor<Uint8Array>}\n     */\n    util.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n    /**\n     * Any compatible Long instance.\n     * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n     * @interface Long\n     * @property {number} low Low bits\n     * @property {number} high High bits\n     * @property {boolean} unsigned Whether unsigned or not\n     */\n\n    /**\n     * Long.js's Long class if available.\n     * @type {Constructor<Long>}\n     */\n    util.Long = /* istanbul ignore next */util.global.dcodeIO && /* istanbul ignore next */util.global.dcodeIO.Long || /* istanbul ignore next */util.global.Long || util.inquire(\"long\");\n\n    /**\n     * Regular expression used to verify 2 bit (`bool`) map keys.\n     * @type {RegExp}\n     * @const\n     */\n    util.key2Re = /^true|false|0|1$/;\n\n    /**\n     * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n     * @type {RegExp}\n     * @const\n     */\n    util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n    /**\n     * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n     * @type {RegExp}\n     * @const\n     */\n    util.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n    /**\n     * Converts a number or long to an 8 characters long hash string.\n     * @param {Long|number} value Value to convert\n     * @returns {string} Hash\n     */\n    util.longToHash = function longToHash(value) {\n      return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n    };\n\n    /**\n     * Converts an 8 characters long hash string to a long or number.\n     * @param {string} hash Hash\n     * @param {boolean} [unsigned=false] Whether unsigned or not\n     * @returns {Long|number} Original value\n     */\n    util.longFromHash = function longFromHash(hash, unsigned) {\n      var bits = util.LongBits.fromHash(hash);\n      if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n      return bits.toNumber(Boolean(unsigned));\n    };\n\n    /**\n     * Merges the properties of the source object into the destination object.\n     * @memberof util\n     * @param {Object.<string,*>} dst Destination object\n     * @param {Object.<string,*>} src Source object\n     * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n     * @returns {Object.<string,*>} Destination object\n     */\n    function merge(dst, src, ifNotSet) {\n      // used by converters\n      for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n      return dst;\n    }\n    util.merge = merge;\n\n    /**\n     * Converts the first character of a string to lower case.\n     * @param {string} str String to convert\n     * @returns {string} Converted string\n     */\n    util.lcFirst = function lcFirst(str) {\n      return str.charAt(0).toLowerCase() + str.substring(1);\n    };\n\n    /**\n     * Creates a custom error constructor.\n     * @memberof util\n     * @param {string} name Error name\n     * @returns {Constructor<Error>} Custom error constructor\n     */\n    function newError(name) {\n      function CustomError(message, properties) {\n        if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", {\n          get: function () {\n            return message;\n          }\n        });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace)\n          // node\n          Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", {\n          value: new Error().stack || \"\"\n        });\n        if (properties) merge(this, properties);\n      }\n      CustomError.prototype = Object.create(Error.prototype, {\n        constructor: {\n          value: CustomError,\n          writable: true,\n          enumerable: false,\n          configurable: true\n        },\n        name: {\n          get: function get() {\n            return name;\n          },\n          set: undefined,\n          enumerable: false,\n          // configurable: false would accurately preserve the behavior of\n          // the original, but I'm guessing that was not intentional.\n          // For an actual error subclass, this property would\n          // be configurable.\n          configurable: true\n        },\n        toString: {\n          value: function value() {\n            return this.name + \": \" + this.message;\n          },\n          writable: true,\n          enumerable: false,\n          configurable: true\n        }\n      });\n      return CustomError;\n    }\n    util.newError = newError;\n\n    /**\n     * Constructs a new protocol error.\n     * @classdesc Error subclass indicating a protocol specifc error.\n     * @memberof util\n     * @extends Error\n     * @template T extends Message<T>\n     * @constructor\n     * @param {string} message Error message\n     * @param {Object.<string,*>} [properties] Additional properties\n     * @example\n     * try {\n     *     MyMessage.decode(someBuffer); // throws if required fields are missing\n     * } catch (e) {\n     *     if (e instanceof ProtocolError && e.instance)\n     *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n     * }\n     */\n    util.ProtocolError = newError(\"ProtocolError\");\n\n    /**\n     * So far decoded message instance.\n     * @name util.ProtocolError#instance\n     * @type {Message<T>}\n     */\n\n    /**\n     * A OneOf getter as returned by {@link util.oneOfGetter}.\n     * @typedef OneOfGetter\n     * @type {function}\n     * @returns {string|undefined} Set field name, if any\n     */\n\n    /**\n     * Builds a getter for a oneof's present field name.\n     * @param {string[]} fieldNames Field names\n     * @returns {OneOfGetter} Unbound getter\n     */\n    util.oneOfGetter = function getOneOf(fieldNames) {\n      var fieldMap = {};\n      for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n      /**\n       * @returns {string|undefined} Set field name, if any\n       * @this Object\n       * @ignore\n       */\n      return function () {\n        // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n      };\n    };\n\n    /**\n     * A OneOf setter as returned by {@link util.oneOfSetter}.\n     * @typedef OneOfSetter\n     * @type {function}\n     * @param {string|undefined} value Field name\n     * @returns {undefined}\n     */\n\n    /**\n     * Builds a setter for a oneof's present field name.\n     * @param {string[]} fieldNames Field names\n     * @returns {OneOfSetter} Unbound setter\n     */\n    util.oneOfSetter = function setOneOf(fieldNames) {\n      /**\n       * @param {string} name Field name\n       * @returns {undefined}\n       * @this Object\n       * @ignore\n       */\n      return function (name) {\n        for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n      };\n    };\n\n    /**\n     * Default conversion options used for {@link Message#toJSON} implementations.\n     *\n     * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n     *\n     * - Longs become strings\n     * - Enums become string keys\n     * - Bytes become base64 encoded strings\n     * - (Sub-)Messages become plain objects\n     * - Maps become plain objects with all string keys\n     * - Repeated fields become arrays\n     * - NaN and Infinity for float and double fields become strings\n     *\n     * @type {IConversionOptions}\n     * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n     */\n    util.toJSONOptions = {\n      longs: String,\n      enums: String,\n      bytes: String,\n      json: true\n    };\n\n    // Sets up buffer utility according to the environment (called in index-minimal)\n    util._configure = function () {\n      var Buffer = util.Buffer;\n      /* istanbul ignore if */\n      if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n      }\n      // because node 4.x buffers are incompatible & immutable\n      // see: https://github.com/dcodeIO/protobuf.js/pull/665\n      util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */\n      function Buffer_from(value, encoding) {\n        return new Buffer(value, encoding);\n      };\n      util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */\n      function Buffer_allocUnsafe(size) {\n        return new Buffer(size);\n      };\n    };\n  })(minimal$1);\n  return minimal$1;\n}\nvar writer;\nvar hasRequiredWriter;\nfunction requireWriter() {\n  if (hasRequiredWriter) return writer;\n  hasRequiredWriter = 1;\n  writer = Writer;\n  var util = requireMinimal$1();\n  var BufferWriter; // cyclic\n\n  var LongBits = util.LongBits,\n    base64 = util.base64,\n    utf8 = util.utf8;\n\n  /**\n   * Constructs a new writer operation instance.\n   * @classdesc Scheduled writer operation.\n   * @constructor\n   * @param {function(*, Uint8Array, number)} fn Function to call\n   * @param {number} len Value byte length\n   * @param {*} val Value to write\n   * @ignore\n   */\n  function Op(fn, len, val) {\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n  }\n\n  /* istanbul ignore next */\n  function noop() {} // eslint-disable-line no-empty-function\n\n  /**\n   * Constructs a new writer state instance.\n   * @classdesc Copied writer state.\n   * @memberof Writer\n   * @constructor\n   * @param {Writer} writer Writer to copy state from\n   * @ignore\n   */\n  function State(writer) {\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n  }\n\n  /**\n   * Constructs a new writer instance.\n   * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n   * @constructor\n   */\n  function Writer() {\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n  }\n  var create = function create() {\n    return util.Buffer ? function create_buffer_setup() {\n      return (Writer.create = function create_buffer() {\n        return new BufferWriter();\n      })();\n    }\n    /* istanbul ignore next */ : function create_array() {\n      return new Writer();\n    };\n  };\n\n  /**\n   * Creates a new writer.\n   * @function\n   * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n   */\n  Writer.create = create();\n\n  /**\n   * Allocates a buffer of the specified size.\n   * @param {number} size Buffer size\n   * @returns {Uint8Array} Buffer\n   */\n  Writer.alloc = function alloc(size) {\n    return new util.Array(size);\n  };\n\n  // Use Uint8Array buffer pool in the browser, just like node does with buffers\n  /* istanbul ignore else */\n  if (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n  /**\n   * Pushes a new operation to the queue.\n   * @param {function(Uint8Array, number, *)} fn Function to call\n   * @param {number} len Value byte length\n   * @param {number} val Value to write\n   * @returns {Writer} `this`\n   * @private\n   */\n  Writer.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n  };\n  function writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n  }\n  function writeVarint32(val, buf, pos) {\n    while (val > 127) {\n      buf[pos++] = val & 127 | 128;\n      val >>>= 7;\n    }\n    buf[pos] = val;\n  }\n\n  /**\n   * Constructs a new varint writer operation instance.\n   * @classdesc Scheduled varint writer operation.\n   * @extends Op\n   * @constructor\n   * @param {number} len Value byte length\n   * @param {number} val Value to write\n   * @ignore\n   */\n  function VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n  }\n  VarintOp.prototype = Object.create(Op.prototype);\n  VarintOp.prototype.fn = writeVarint32;\n\n  /**\n   * Writes an unsigned 32 bit value as a varint.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n    return this;\n  };\n\n  /**\n   * Writes a signed 32 bit value as a varint.\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.int32 = function write_int32(value) {\n    return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n    : this.uint32(value);\n  };\n\n  /**\n   * Writes a 32 bit value as a varint, zig-zag encoded.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n  };\n  function writeVarint64(val, buf, pos) {\n    while (val.hi) {\n      buf[pos++] = val.lo & 127 | 128;\n      val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n      val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n      buf[pos++] = val.lo & 127 | 128;\n      val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n  }\n\n  /**\n   * Writes an unsigned 64 bit value as a varint.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n  };\n\n  /**\n   * Writes a signed 64 bit value as a varint.\n   * @function\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.int64 = Writer.prototype.uint64;\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n  };\n\n  /**\n   * Writes a boolish value as a varint.\n   * @param {boolean} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n  };\n  function writeFixed32(val, buf, pos) {\n    buf[pos] = val & 255;\n    buf[pos + 1] = val >>> 8 & 255;\n    buf[pos + 2] = val >>> 16 & 255;\n    buf[pos + 3] = val >>> 24;\n  }\n\n  /**\n   * Writes an unsigned 32 bit value as fixed 32 bits.\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n  };\n\n  /**\n   * Writes a signed 32 bit value as fixed 32 bits.\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.sfixed32 = Writer.prototype.fixed32;\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits.\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n  };\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits.\n   * @function\n   * @param {Long|number|string} value Value to write\n   * @returns {Writer} `this`\n   * @throws {TypeError} If `value` is a string and no long library is present.\n   */\n  Writer.prototype.sfixed64 = Writer.prototype.fixed64;\n\n  /**\n   * Writes a float (32 bit).\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n  };\n\n  /**\n   * Writes a double (64 bit float).\n   * @function\n   * @param {number} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n  };\n  var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n    buf.set(val, pos); // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytes_for(val, buf, pos) {\n    for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n  };\n\n  /**\n   * Writes a sequence of bytes.\n   * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len) return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n      var buf = Writer.alloc(len = base64.length(value));\n      base64.decode(value, buf, 0);\n      value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n  };\n\n  /**\n   * Writes a string.\n   * @param {string} value Value to write\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n  };\n\n  /**\n   * Forks this writer's state by pushing it to a stack.\n   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n  };\n\n  /**\n   * Resets this instance to the last state.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.reset = function reset() {\n    if (this.states) {\n      this.head = this.states.head;\n      this.tail = this.states.tail;\n      this.len = this.states.len;\n      this.states = this.states.next;\n    } else {\n      this.head = this.tail = new Op(noop, 0, 0);\n      this.len = 0;\n    }\n    return this;\n  };\n\n  /**\n   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n   * @returns {Writer} `this`\n   */\n  Writer.prototype.ldelim = function ldelim() {\n    var head = this.head,\n      tail = this.tail,\n      len = this.len;\n    this.reset().uint32(len);\n    if (len) {\n      this.tail.next = head.next; // skip noop\n      this.tail = tail;\n      this.len += len;\n    }\n    return this;\n  };\n\n  /**\n   * Finishes the write operation.\n   * @returns {Uint8Array} Finished buffer\n   */\n  Writer.prototype.finish = function finish() {\n    var head = this.head.next,\n      // skip noop\n      buf = this.constructor.alloc(this.len),\n      pos = 0;\n    while (head) {\n      head.fn(head.val, buf, pos);\n      pos += head.len;\n      head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n  };\n  Writer._configure = function (BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n  };\n  return writer;\n}\nvar writer_buffer;\nvar hasRequiredWriter_buffer;\nfunction requireWriter_buffer() {\n  if (hasRequiredWriter_buffer) return writer_buffer;\n  hasRequiredWriter_buffer = 1;\n  writer_buffer = BufferWriter;\n\n  // extends Writer\n  var Writer = requireWriter();\n  (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n  var util = requireMinimal$1();\n\n  /**\n   * Constructs a new buffer writer instance.\n   * @classdesc Wire format writer using node buffers.\n   * @extends Writer\n   * @constructor\n   */\n  function BufferWriter() {\n    Writer.call(this);\n  }\n  BufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n      buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n      // also works for plain array values\n    }\n    /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n      if (val.copy)\n        // Buffer values\n        val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n      // plain array values\n      buf[pos++] = val[i++];\n    };\n  };\n\n  /**\n   * @override\n   */\n  BufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n  };\n  function writeStringBuffer(val, buf, pos) {\n    if (val.length < 40)\n      // plain js is faster for short strings (probably due to redundant assertions)\n      util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);\n  }\n\n  /**\n   * @override\n   */\n  BufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len) this._push(writeStringBuffer, len, value);\n    return this;\n  };\n\n  /**\n   * Finishes the write operation.\n   * @name BufferWriter#finish\n   * @function\n   * @returns {Buffer} Finished buffer\n   */\n\n  BufferWriter._configure();\n  return writer_buffer;\n}\nvar reader;\nvar hasRequiredReader;\nfunction requireReader() {\n  if (hasRequiredReader) return reader;\n  hasRequiredReader = 1;\n  reader = Reader;\n  var util = requireMinimal$1();\n  var BufferReader; // cyclic\n\n  var LongBits = util.LongBits,\n    utf8 = util.utf8;\n\n  /* istanbul ignore next */\n  function indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n  }\n\n  /**\n   * Constructs a new reader instance using the specified buffer.\n   * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n   * @constructor\n   * @param {Uint8Array} buffer Buffer to read from\n   */\n  function Reader(buffer) {\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n  }\n  var create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n    if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n  }\n  /* istanbul ignore next */ : function create_array(buffer) {\n    if (Array.isArray(buffer)) return new Reader(buffer);\n    throw Error(\"illegal buffer\");\n  };\n  var create = function create() {\n    return util.Buffer ? function create_buffer_setup(buffer) {\n      return (Reader.create = function create_buffer(buffer) {\n        return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n        /* istanbul ignore next */ : create_array(buffer);\n      })(buffer);\n    }\n    /* istanbul ignore next */ : create_array;\n  };\n\n  /**\n   * Creates a new reader using the specified buffer.\n   * @function\n   * @param {Uint8Array|Buffer} buffer Buffer to read from\n   * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n   * @throws {Error} If `buffer` is not a valid buffer\n   */\n  Reader.create = create();\n  Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;\n\n  /**\n   * Reads a varint as an unsigned 32 bit value.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.uint32 = function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n      value = (this.buf[this.pos] & 127) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n      value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n      if (this.buf[this.pos++] < 128) return value;\n\n      /* istanbul ignore if */\n      if ((this.pos += 5) > this.len) {\n        this.pos = this.len;\n        throw indexOutOfRange(this, 10);\n      }\n      return value;\n    };\n  }();\n\n  /**\n   * Reads a varint as a signed 32 bit value.\n   * @returns {number} Value read\n   */\n  Reader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n  };\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 32 bit value.\n   * @returns {number} Value read\n   */\n  Reader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n  };\n\n  /* eslint-disable no-invalid-this */\n\n  function readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) {\n      // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n      // 5th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n      i = 0;\n    } else {\n      for (; i < 3; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n        // 1st..3th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n      // 4th\n      bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n      return bits;\n    }\n    if (this.len - this.pos > 4) {\n      // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n    } else {\n      for (; i < 5; ++i) {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n        // 6th..10th\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n        if (this.buf[this.pos++] < 128) return bits;\n      }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n  }\n\n  /* eslint-enable no-invalid-this */\n\n  /**\n   * Reads a varint as a signed 64 bit value.\n   * @name Reader#int64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a varint as an unsigned 64 bit value.\n   * @name Reader#uint64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value.\n   * @name Reader#sint64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a varint as a boolean.\n   * @returns {boolean} Value read\n   */\n  Reader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n  };\n  function readFixed32_end(buf, end) {\n    // note that this uses `end`, not `pos`\n    return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n  }\n\n  /**\n   * Reads fixed 32 bits as an unsigned 32 bit integer.\n   * @returns {number} Value read\n   */\n  Reader.prototype.fixed32 = function read_fixed32() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4);\n  };\n\n  /**\n   * Reads fixed 32 bits as a signed 32 bit integer.\n   * @returns {number} Value read\n   */\n  Reader.prototype.sfixed32 = function read_sfixed32() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n  };\n\n  /* eslint-disable no-invalid-this */\n\n  function readFixed64( /* this: Reader */\n  ) {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n  }\n\n  /* eslint-enable no-invalid-this */\n\n  /**\n   * Reads fixed 64 bits.\n   * @name Reader#fixed64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits.\n   * @name Reader#sfixed64\n   * @function\n   * @returns {Long} Value read\n   */\n\n  /**\n   * Reads a float (32 bit) as a number.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.float = function read_float() {\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n  };\n\n  /**\n   * Reads a double (64 bit float) as a number.\n   * @function\n   * @returns {number} Value read\n   */\n  Reader.prototype.double = function read_double() {\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n  };\n\n  /**\n   * Reads a sequence of bytes preceeded by its length as a varint.\n   * @returns {Uint8Array} Value read\n   */\n  Reader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n      start = this.pos,\n      end = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n    if (Array.isArray(this.buf))\n      // plain array\n      return this.buf.slice(start, end);\n    if (start === end) {\n      // fix for IE 10/Win8 and others' subarray returning array of size 1\n      var nativeBuffer = util.Buffer;\n      return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);\n    }\n    return this._slice.call(this.buf, start, end);\n  };\n\n  /**\n   * Reads a string preceeded by its byte length as a varint.\n   * @returns {string} Value read\n   */\n  Reader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n  };\n\n  /**\n   * Skips the specified number of bytes if specified, otherwise skips a varint.\n   * @param {number} [length] Length if known, otherwise a varint is assumed\n   * @returns {Reader} `this`\n   */\n  Reader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n      /* istanbul ignore if */\n      if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n      this.pos += length;\n    } else {\n      do {\n        /* istanbul ignore if */\n        if (this.pos >= this.len) throw indexOutOfRange(this);\n      } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n  };\n\n  /**\n   * Skips the next element of the specified wire type.\n   * @param {number} wireType Wire type received\n   * @returns {Reader} `this`\n   */\n  Reader.prototype.skipType = function (wireType) {\n    switch (wireType) {\n      case 0:\n        this.skip();\n        break;\n      case 1:\n        this.skip(8);\n        break;\n      case 2:\n        this.skip(this.uint32());\n        break;\n      case 3:\n        while ((wireType = this.uint32() & 7) !== 4) {\n          this.skipType(wireType);\n        }\n        break;\n      case 5:\n        this.skip(4);\n        break;\n\n      /* istanbul ignore next */\n      default:\n        throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n  };\n  Reader._configure = function (BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n    util.merge(Reader.prototype, {\n      int64: function read_int64() {\n        return readLongVarint.call(this)[fn](false);\n      },\n      uint64: function read_uint64() {\n        return readLongVarint.call(this)[fn](true);\n      },\n      sint64: function read_sint64() {\n        return readLongVarint.call(this).zzDecode()[fn](false);\n      },\n      fixed64: function read_fixed64() {\n        return readFixed64.call(this)[fn](true);\n      },\n      sfixed64: function read_sfixed64() {\n        return readFixed64.call(this)[fn](false);\n      }\n    });\n  };\n  return reader;\n}\nvar reader_buffer;\nvar hasRequiredReader_buffer;\nfunction requireReader_buffer() {\n  if (hasRequiredReader_buffer) return reader_buffer;\n  hasRequiredReader_buffer = 1;\n  reader_buffer = BufferReader;\n\n  // extends Reader\n  var Reader = requireReader();\n  (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n  var util = requireMinimal$1();\n\n  /**\n   * Constructs a new buffer reader instance.\n   * @classdesc Wire format reader using node buffers.\n   * @extends Reader\n   * @constructor\n   * @param {Buffer} buffer Buffer to read from\n   */\n  function BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n  }\n  BufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n  };\n\n  /**\n   * @override\n   */\n  BufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n  };\n\n  /**\n   * Reads a sequence of bytes preceeded by its length as a varint.\n   * @name BufferReader#bytes\n   * @function\n   * @returns {Buffer} Value read\n   */\n\n  BufferReader._configure();\n  return reader_buffer;\n}\nvar rpc = {};\nvar service;\nvar hasRequiredService;\nfunction requireService() {\n  if (hasRequiredService) return service;\n  hasRequiredService = 1;\n  service = Service;\n  var util = requireMinimal$1();\n\n  // Extends EventEmitter\n  (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n  /**\n   * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n   *\n   * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n   * @typedef rpc.ServiceMethodCallback\n   * @template TRes extends Message<TRes>\n   * @type {function}\n   * @param {Error|null} error Error, if any\n   * @param {TRes} [response] Response message\n   * @returns {undefined}\n   */\n\n  /**\n   * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n   * @typedef rpc.ServiceMethod\n   * @template TReq extends Message<TReq>\n   * @template TRes extends Message<TRes>\n   * @type {function}\n   * @param {TReq|Properties<TReq>} request Request message or plain object\n   * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n   * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n   */\n\n  /**\n   * Constructs a new RPC service instance.\n   * @classdesc An RPC service as returned by {@link Service#create}.\n   * @exports rpc.Service\n   * @extends util.EventEmitter\n   * @constructor\n   * @param {RPCImpl} rpcImpl RPC implementation\n   * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n   * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n   */\n  function Service(rpcImpl, requestDelimited, responseDelimited) {\n    if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n  }\n\n  /**\n   * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n   * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n   * @param {Constructor<TReq>} requestCtor Request constructor\n   * @param {Constructor<TRes>} responseCtor Response constructor\n   * @param {TReq|Properties<TReq>} request Request message or plain object\n   * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n   * @returns {undefined}\n   * @template TReq extends Message<TReq>\n   * @template TRes extends Message<TRes>\n   */\n  Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n    if (!request) throw TypeError(\"request must be specified\");\n    var self = this;\n    if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n    if (!self.rpcImpl) {\n      setTimeout(function () {\n        callback(Error(\"already ended\"));\n      }, 0);\n      return undefined;\n    }\n    try {\n      return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n        if (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n        if (response === null) {\n          self.end( /* endedByRPC */true);\n          return undefined;\n        }\n        if (!(response instanceof responseCtor)) {\n          try {\n            response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n          } catch (err) {\n            self.emit(\"error\", err, method);\n            return callback(err);\n          }\n        }\n        self.emit(\"data\", response, method);\n        return callback(null, response);\n      });\n    } catch (err) {\n      self.emit(\"error\", err, method);\n      setTimeout(function () {\n        callback(err);\n      }, 0);\n      return undefined;\n    }\n  };\n\n  /**\n   * Ends this service and emits the `end` event.\n   * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n   * @returns {rpc.Service} `this`\n   */\n  Service.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n      if (!endedByRPC)\n        // signal end to rpcImpl\n        this.rpcImpl(null, null, null);\n      this.rpcImpl = null;\n      this.emit(\"end\").off();\n    }\n    return this;\n  };\n  return service;\n}\nvar hasRequiredRpc;\nfunction requireRpc() {\n  if (hasRequiredRpc) return rpc;\n  hasRequiredRpc = 1;\n  (function (exports) {\n    /**\n     * Streaming RPC helpers.\n     * @namespace\n     */\n    var rpc = exports;\n\n    /**\n     * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n     * @typedef RPCImpl\n     * @type {function}\n     * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n     * @param {Uint8Array} requestData Request data\n     * @param {RPCImplCallback} callback Callback function\n     * @returns {undefined}\n     * @example\n     * function rpcImpl(method, requestData, callback) {\n     *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n     *         throw Error(\"no such method\");\n     *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n     *         callback(err, responseData);\n     *     });\n     * }\n     */\n\n    /**\n     * Node-style callback as used by {@link RPCImpl}.\n     * @typedef RPCImplCallback\n     * @type {function}\n     * @param {Error|null} error Error, if any, otherwise `null`\n     * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n     * @returns {undefined}\n     */\n\n    rpc.Service = requireService();\n  })(rpc);\n  return rpc;\n}\nvar roots;\nvar hasRequiredRoots;\nfunction requireRoots() {\n  if (hasRequiredRoots) return roots;\n  hasRequiredRoots = 1;\n  roots = {};\n\n  /**\n   * Named roots.\n   * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n   * Can also be used manually to make roots available across modules.\n   * @name roots\n   * @type {Object.<string,Root>}\n   * @example\n   * // pbjs -r myroot -o compiled.js ...\n   *\n   * // in another module:\n   * require(\"./compiled.js\");\n   *\n   * // in any subsequent module:\n   * var root = protobuf.roots[\"myroot\"];\n   */\n  return roots;\n}\nvar hasRequiredIndexMinimal;\nfunction requireIndexMinimal() {\n  if (hasRequiredIndexMinimal) return indexMinimal;\n  hasRequiredIndexMinimal = 1;\n  (function (exports) {\n    var protobuf = exports;\n\n    /**\n     * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n     * @name build\n     * @type {string}\n     * @const\n     */\n    protobuf.build = \"minimal\";\n\n    // Serialization\n    protobuf.Writer = requireWriter();\n    protobuf.BufferWriter = requireWriter_buffer();\n    protobuf.Reader = requireReader();\n    protobuf.BufferReader = requireReader_buffer();\n\n    // Utility\n    protobuf.util = requireMinimal$1();\n    protobuf.rpc = requireRpc();\n    protobuf.roots = requireRoots();\n    protobuf.configure = configure;\n\n    /* istanbul ignore next */\n    /**\n     * Reconfigures the library according to the environment.\n     * @returns {undefined}\n     */\n    function configure() {\n      protobuf.util._configure();\n      protobuf.Writer._configure(protobuf.BufferWriter);\n      protobuf.Reader._configure(protobuf.BufferReader);\n    }\n\n    // Set up buffer utility according to the environment\n    configure();\n  })(indexMinimal);\n  return indexMinimal;\n}\nvar minimal;\nvar hasRequiredMinimal;\nfunction requireMinimal() {\n  if (hasRequiredMinimal) return minimal;\n  hasRequiredMinimal = 1;\n  minimal = requireIndexMinimal();\n  return minimal;\n}\n\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n(function (module) {\n  (function (global, factory) {\n    /* global define, require, module */\n\n    /* AMD */if (typeof commonjsRequire === 'function' && 'object' === 'object' && module && module.exports) module.exports = factory(requireMinimal());\n  })(commonjsGlobal, function ($protobuf) {\n    // Common aliases\n    var $Reader = $protobuf.Reader,\n      $Writer = $protobuf.Writer,\n      $util = $protobuf.util;\n\n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    $root.Message = function () {\n      /**\n       * Properties of a Message.\n       * @exports IMessage\n       * @interface IMessage\n       * @property {string|null} [userId] Message userId\n       * @property {number|Long|null} [messageId] Message messageId\n       * @property {number|null} [last] Message last\n       * @property {string|null} [token] Message token\n       * @property {string|null} [userChannel] Message userChannel\n       * @property {string|null} [vpsToken] Message vpsToken\n       * @property {Array.<IDevContext>|null} [devContext] Устарело с версии 3.\n       * @property {string|null} [messageName] Message messageName\n       * @property {number|null} [version] Message version\n       * @property {IVoice|null} [voice] Message voice\n       * @property {IText|null} [text] Message text\n       * @property {ISystemMessage|null} [systemMessage] Message systemMessage\n       * @property {ILegacyDevice|null} [legacyDevice] Message legacyDevice\n       * @property {ISettings|null} [settings] Message settings\n       * @property {IStatus|null} [status] Message status\n       * @property {IDevice|null} [device] Message device\n       * @property {IBytes|null} [bytes] Message bytes\n       * @property {IInitialSettings|null} [initialSettings] Message initialSettings\n       * @property {ICancel|null} [cancel] Message cancel\n       * @property {IGetHistoryRequest|null} [getHistoryRequest] Message getHistoryRequest\n       * @property {IMute|null} [mute] Message mute\n       * @property {number|Long|null} [timestamp] Message timestamp\n       * @property {Object.<string,string>|null} [meta] Message meta\n       */\n\n      /**\n       * Constructs a new Message.\n       * @exports Message\n       * @classdesc Represents a Message.\n       * @implements IMessage\n       * @constructor\n       * @param {IMessage=} [properties] Properties to set\n       */\n      function Message(properties) {\n        this.devContext = [];\n        this.meta = {};\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Message userId.\n       * @member {string} userId\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.userId = \"\";\n\n      /**\n       * Message messageId.\n       * @member {number|Long} messageId\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.messageId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Message last.\n       * @member {number} last\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.last = 0;\n\n      /**\n       * Message token.\n       * @member {string} token\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.token = \"\";\n\n      /**\n       * Message userChannel.\n       * @member {string} userChannel\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.userChannel = \"\";\n\n      /**\n       * Message vpsToken.\n       * @member {string} vpsToken\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.vpsToken = \"\";\n\n      /**\n       * Устарело с версии 3.\n       * @member {Array.<IDevContext>} devContext\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.devContext = $util.emptyArray;\n\n      /**\n       * Message messageName.\n       * @member {string} messageName\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.messageName = \"\";\n\n      /**\n       * Message version.\n       * @member {number} version\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.version = 0;\n\n      /**\n       * Message voice.\n       * @member {IVoice|null|undefined} voice\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.voice = null;\n\n      /**\n       * Message text.\n       * @member {IText|null|undefined} text\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.text = null;\n\n      /**\n       * Message systemMessage.\n       * @member {ISystemMessage|null|undefined} systemMessage\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.systemMessage = null;\n\n      /**\n       * Message legacyDevice.\n       * @member {ILegacyDevice|null|undefined} legacyDevice\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.legacyDevice = null;\n\n      /**\n       * Message settings.\n       * @member {ISettings|null|undefined} settings\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.settings = null;\n\n      /**\n       * Message status.\n       * @member {IStatus|null|undefined} status\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.status = null;\n\n      /**\n       * Message device.\n       * @member {IDevice|null|undefined} device\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.device = null;\n\n      /**\n       * Message bytes.\n       * @member {IBytes|null|undefined} bytes\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.bytes = null;\n\n      /**\n       * Message initialSettings.\n       * @member {IInitialSettings|null|undefined} initialSettings\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.initialSettings = null;\n\n      /**\n       * Message cancel.\n       * @member {ICancel|null|undefined} cancel\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.cancel = null;\n\n      /**\n       * Message getHistoryRequest.\n       * @member {IGetHistoryRequest|null|undefined} getHistoryRequest\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.getHistoryRequest = null;\n\n      /**\n       * Message mute.\n       * @member {IMute|null|undefined} mute\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.mute = null;\n\n      /**\n       * Message timestamp.\n       * @member {number|Long} timestamp\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.timestamp = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * Message meta.\n       * @member {Object.<string,string>} meta\n       * @memberof Message\n       * @instance\n       */\n      Message.prototype.meta = $util.emptyObject;\n\n      // OneOf field names bound to virtual getters and setters\n      var $oneOfFields;\n\n      /**\n       * Message content.\n       * @member {\"voice\"|\"text\"|\"systemMessage\"|\"legacyDevice\"|\"settings\"|\"status\"|\"device\"|\"bytes\"|\"initialSettings\"|\"cancel\"|\"getHistoryRequest\"|\"mute\"|undefined} content\n       * @memberof Message\n       * @instance\n       */\n      Object.defineProperty(Message.prototype, \"content\", {\n        get: $util.oneOfGetter($oneOfFields = [\"voice\", \"text\", \"systemMessage\", \"legacyDevice\", \"settings\", \"status\", \"device\", \"bytes\", \"initialSettings\", \"cancel\", \"getHistoryRequest\", \"mute\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n\n      /**\n       * Creates a new Message instance using the specified properties.\n       * @function create\n       * @memberof Message\n       * @static\n       * @param {IMessage=} [properties] Properties to set\n       * @returns {Message} Message instance\n       */\n      Message.create = function create(properties) {\n        return new Message(properties);\n      };\n\n      /**\n       * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n       * @function encode\n       * @memberof Message\n       * @static\n       * @param {IMessage} message Message message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Message.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.messageId != null && Object.hasOwnProperty.call(message, \"messageId\")) writer.uint32( /* id 2, wireType 0 =*/16).int64(message.messageId);\n        if (message.last != null && Object.hasOwnProperty.call(message, \"last\")) writer.uint32( /* id 3, wireType 0 =*/24).int32(message.last);\n        if (message.token != null && Object.hasOwnProperty.call(message, \"token\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.token);\n        if (message.voice != null && Object.hasOwnProperty.call(message, \"voice\")) $root.Voice.encode(message.voice, writer.uint32( /* id 5, wireType 2 =*/42).fork()).ldelim();\n        if (message.text != null && Object.hasOwnProperty.call(message, \"text\")) $root.Text.encode(message.text, writer.uint32( /* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.systemMessage != null && Object.hasOwnProperty.call(message, \"systemMessage\")) $root.SystemMessage.encode(message.systemMessage, writer.uint32( /* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.legacyDevice != null && Object.hasOwnProperty.call(message, \"legacyDevice\")) $root.LegacyDevice.encode(message.legacyDevice, writer.uint32( /* id 8, wireType 2 =*/66).fork()).ldelim();\n        if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\")) $root.Settings.encode(message.settings, writer.uint32( /* id 9, wireType 2 =*/74).fork()).ldelim();\n        if (message.status != null && Object.hasOwnProperty.call(message, \"status\")) $root.Status.encode(message.status, writer.uint32( /* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.userChannel);\n        if (message.vpsToken != null && Object.hasOwnProperty.call(message, \"vpsToken\")) writer.uint32( /* id 12, wireType 2 =*/98).string(message.vpsToken);\n        if (message.devContext != null && message.devContext.length) for (var i = 0; i < message.devContext.length; ++i) $root.DevContext.encode(message.devContext[i], writer.uint32( /* id 13, wireType 2 =*/106).fork()).ldelim();\n        if (message.messageName != null && Object.hasOwnProperty.call(message, \"messageName\")) writer.uint32( /* id 14, wireType 2 =*/114).string(message.messageName);\n        if (message.version != null && Object.hasOwnProperty.call(message, \"version\")) writer.uint32( /* id 15, wireType 0 =*/120).int32(message.version);\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 16, wireType 2 =*/130).fork()).ldelim();\n        if (message.bytes != null && Object.hasOwnProperty.call(message, \"bytes\")) $root.Bytes.encode(message.bytes, writer.uint32( /* id 17, wireType 2 =*/138).fork()).ldelim();\n        if (message.initialSettings != null && Object.hasOwnProperty.call(message, \"initialSettings\")) $root.InitialSettings.encode(message.initialSettings, writer.uint32( /* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.timestamp != null && Object.hasOwnProperty.call(message, \"timestamp\")) writer.uint32( /* id 19, wireType 0 =*/152).int64(message.timestamp);\n        if (message.meta != null && Object.hasOwnProperty.call(message, \"meta\")) for (var keys = Object.keys(message.meta), i = 0; i < keys.length; ++i) writer.uint32( /* id 20, wireType 2 =*/162).fork().uint32( /* id 1, wireType 2 =*/10).string(keys[i]).uint32( /* id 2, wireType 2 =*/18).string(message.meta[keys[i]]).ldelim();\n        if (message.cancel != null && Object.hasOwnProperty.call(message, \"cancel\")) $root.Cancel.encode(message.cancel, writer.uint32( /* id 21, wireType 2 =*/170).fork()).ldelim();\n        if (message.getHistoryRequest != null && Object.hasOwnProperty.call(message, \"getHistoryRequest\")) $root.GetHistoryRequest.encode(message.getHistoryRequest, writer.uint32( /* id 22, wireType 2 =*/178).fork()).ldelim();\n        if (message.mute != null && Object.hasOwnProperty.call(message, \"mute\")) $root.Mute.encode(message.mute, writer.uint32( /* id 23, wireType 2 =*/186).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a Message message from the specified reader or buffer.\n       * @function decode\n       * @memberof Message\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Message} Message\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Message.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Message(),\n          key,\n          value;\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.userId = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.messageId = reader.int64();\n                break;\n              }\n            case 3:\n              {\n                message.last = reader.int32();\n                break;\n              }\n            case 4:\n              {\n                message.token = reader.string();\n                break;\n              }\n            case 11:\n              {\n                message.userChannel = reader.string();\n                break;\n              }\n            case 12:\n              {\n                message.vpsToken = reader.string();\n                break;\n              }\n            case 13:\n              {\n                if (!(message.devContext && message.devContext.length)) message.devContext = [];\n                message.devContext.push($root.DevContext.decode(reader, reader.uint32()));\n                break;\n              }\n            case 14:\n              {\n                message.messageName = reader.string();\n                break;\n              }\n            case 15:\n              {\n                message.version = reader.int32();\n                break;\n              }\n            case 5:\n              {\n                message.voice = $root.Voice.decode(reader, reader.uint32());\n                break;\n              }\n            case 6:\n              {\n                message.text = $root.Text.decode(reader, reader.uint32());\n                break;\n              }\n            case 7:\n              {\n                message.systemMessage = $root.SystemMessage.decode(reader, reader.uint32());\n                break;\n              }\n            case 8:\n              {\n                message.legacyDevice = $root.LegacyDevice.decode(reader, reader.uint32());\n                break;\n              }\n            case 9:\n              {\n                message.settings = $root.Settings.decode(reader, reader.uint32());\n                break;\n              }\n            case 10:\n              {\n                message.status = $root.Status.decode(reader, reader.uint32());\n                break;\n              }\n            case 16:\n              {\n                message.device = $root.Device.decode(reader, reader.uint32());\n                break;\n              }\n            case 17:\n              {\n                message.bytes = $root.Bytes.decode(reader, reader.uint32());\n                break;\n              }\n            case 18:\n              {\n                message.initialSettings = $root.InitialSettings.decode(reader, reader.uint32());\n                break;\n              }\n            case 21:\n              {\n                message.cancel = $root.Cancel.decode(reader, reader.uint32());\n                break;\n              }\n            case 22:\n              {\n                message.getHistoryRequest = $root.GetHistoryRequest.decode(reader, reader.uint32());\n                break;\n              }\n            case 23:\n              {\n                message.mute = $root.Mute.decode(reader, reader.uint32());\n                break;\n              }\n            case 19:\n              {\n                message.timestamp = reader.int64();\n                break;\n              }\n            case 20:\n              {\n                if (message.meta === $util.emptyObject) message.meta = {};\n                var end2 = reader.uint32() + reader.pos;\n                key = \"\";\n                value = \"\";\n                while (reader.pos < end2) {\n                  var tag2 = reader.uint32();\n                  switch (tag2 >>> 3) {\n                    case 1:\n                      key = reader.string();\n                      break;\n                    case 2:\n                      value = reader.string();\n                      break;\n                    default:\n                      reader.skipType(tag2 & 7);\n                      break;\n                  }\n                }\n                message.meta[key] = value;\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Message;\n    }();\n    $root.InitialSettings = function () {\n      /**\n       * Properties of an InitialSettings.\n       * @exports IInitialSettings\n       * @interface IInitialSettings\n       * @property {string|null} [userId] InitialSettings userId\n       * @property {string|null} [userChannel] InitialSettings userChannel\n       * @property {IDevice|null} [device] InitialSettings device\n       * @property {ISettings|null} [settings] InitialSettings settings\n       * @property {string|null} [locale] InitialSettings locale\n       */\n\n      /**\n       * Constructs a new InitialSettings.\n       * @exports InitialSettings\n       * @classdesc Represents an InitialSettings.\n       * @implements IInitialSettings\n       * @constructor\n       * @param {IInitialSettings=} [properties] Properties to set\n       */\n      function InitialSettings(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * InitialSettings userId.\n       * @member {string} userId\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.userId = \"\";\n\n      /**\n       * InitialSettings userChannel.\n       * @member {string} userChannel\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.userChannel = \"\";\n\n      /**\n       * InitialSettings device.\n       * @member {IDevice|null|undefined} device\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.device = null;\n\n      /**\n       * InitialSettings settings.\n       * @member {ISettings|null|undefined} settings\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.settings = null;\n\n      /**\n       * InitialSettings locale.\n       * @member {string} locale\n       * @memberof InitialSettings\n       * @instance\n       */\n      InitialSettings.prototype.locale = \"\";\n\n      /**\n       * Creates a new InitialSettings instance using the specified properties.\n       * @function create\n       * @memberof InitialSettings\n       * @static\n       * @param {IInitialSettings=} [properties] Properties to set\n       * @returns {InitialSettings} InitialSettings instance\n       */\n      InitialSettings.create = function create(properties) {\n        return new InitialSettings(properties);\n      };\n\n      /**\n       * Encodes the specified InitialSettings message. Does not implicitly {@link InitialSettings.verify|verify} messages.\n       * @function encode\n       * @memberof InitialSettings\n       * @static\n       * @param {IInitialSettings} message InitialSettings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      InitialSettings.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.userChannel);\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.settings != null && Object.hasOwnProperty.call(message, \"settings\")) $root.Settings.encode(message.settings, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.locale != null && Object.hasOwnProperty.call(message, \"locale\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.locale);\n        return writer;\n      };\n\n      /**\n       * Decodes an InitialSettings message from the specified reader or buffer.\n       * @function decode\n       * @memberof InitialSettings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {InitialSettings} InitialSettings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      InitialSettings.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.InitialSettings();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.userId = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.userChannel = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.device = $root.Device.decode(reader, reader.uint32());\n                break;\n              }\n            case 4:\n              {\n                message.settings = $root.Settings.decode(reader, reader.uint32());\n                break;\n              }\n            case 5:\n              {\n                message.locale = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return InitialSettings;\n    }();\n    $root.Device = function () {\n      /**\n       * Properties of a Device.\n       * @exports IDevice\n       * @interface IDevice\n       * @property {string|null} [platformType] Device platformType\n       * @property {string|null} [platformVersion] Device platformVersion\n       * @property {string|null} [surface] Обязательно. Пример, SBERBOX\n       * @property {string|null} [surfaceVersion] Device surfaceVersion\n       * @property {string|null} [features] Device features\n       * @property {string|null} [capabilities] Device capabilities\n       * @property {string|null} [deviceId] Device deviceId\n       * @property {string|null} [deviceManufacturer] Device deviceManufacturer\n       * @property {string|null} [deviceModel] Device deviceModel\n       * @property {string|null} [additionalInfo] Device additionalInfo\n       * @property {string|null} [tenant] Device tenant\n       */\n\n      /**\n       * Constructs a new Device.\n       * @exports Device\n       * @classdesc Represents a Device.\n       * @implements IDevice\n       * @constructor\n       * @param {IDevice=} [properties] Properties to set\n       */\n      function Device(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Device platformType.\n       * @member {string} platformType\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.platformType = \"\";\n\n      /**\n       * Device platformVersion.\n       * @member {string} platformVersion\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.platformVersion = \"\";\n\n      /**\n       * Обязательно. Пример, SBERBOX\n       * @member {string} surface\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.surface = \"\";\n\n      /**\n       * Device surfaceVersion.\n       * @member {string} surfaceVersion\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.surfaceVersion = \"\";\n\n      /**\n       * Device features.\n       * @member {string} features\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.features = \"\";\n\n      /**\n       * Device capabilities.\n       * @member {string} capabilities\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.capabilities = \"\";\n\n      /**\n       * Device deviceId.\n       * @member {string} deviceId\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceId = \"\";\n\n      /**\n       * Device deviceManufacturer.\n       * @member {string} deviceManufacturer\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceManufacturer = \"\";\n\n      /**\n       * Device deviceModel.\n       * @member {string} deviceModel\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.deviceModel = \"\";\n\n      /**\n       * Device additionalInfo.\n       * @member {string} additionalInfo\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.additionalInfo = \"\";\n\n      /**\n       * Device tenant.\n       * @member {string} tenant\n       * @memberof Device\n       * @instance\n       */\n      Device.prototype.tenant = \"\";\n\n      /**\n       * Creates a new Device instance using the specified properties.\n       * @function create\n       * @memberof Device\n       * @static\n       * @param {IDevice=} [properties] Properties to set\n       * @returns {Device} Device instance\n       */\n      Device.create = function create(properties) {\n        return new Device(properties);\n      };\n\n      /**\n       * Encodes the specified Device message. Does not implicitly {@link Device.verify|verify} messages.\n       * @function encode\n       * @memberof Device\n       * @static\n       * @param {IDevice} message Device message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Device.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.platformType != null && Object.hasOwnProperty.call(message, \"platformType\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.platformType);\n        if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.platformVersion);\n        if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.surface);\n        if (message.surfaceVersion != null && Object.hasOwnProperty.call(message, \"surfaceVersion\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.surfaceVersion);\n        if (message.features != null && Object.hasOwnProperty.call(message, \"features\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.features);\n        if (message.capabilities != null && Object.hasOwnProperty.call(message, \"capabilities\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.capabilities);\n        if (message.deviceId != null && Object.hasOwnProperty.call(message, \"deviceId\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.deviceId);\n        if (message.deviceManufacturer != null && Object.hasOwnProperty.call(message, \"deviceManufacturer\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.deviceManufacturer);\n        if (message.deviceModel != null && Object.hasOwnProperty.call(message, \"deviceModel\")) writer.uint32( /* id 9, wireType 2 =*/74).string(message.deviceModel);\n        if (message.additionalInfo != null && Object.hasOwnProperty.call(message, \"additionalInfo\")) writer.uint32( /* id 10, wireType 2 =*/82).string(message.additionalInfo);\n        if (message.tenant != null && Object.hasOwnProperty.call(message, \"tenant\")) writer.uint32( /* id 11, wireType 2 =*/90).string(message.tenant);\n        return writer;\n      };\n\n      /**\n       * Decodes a Device message from the specified reader or buffer.\n       * @function decode\n       * @memberof Device\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Device} Device\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Device.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Device();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.platformType = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.platformVersion = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.surface = reader.string();\n                break;\n              }\n            case 4:\n              {\n                message.surfaceVersion = reader.string();\n                break;\n              }\n            case 5:\n              {\n                message.features = reader.string();\n                break;\n              }\n            case 6:\n              {\n                message.capabilities = reader.string();\n                break;\n              }\n            case 7:\n              {\n                message.deviceId = reader.string();\n                break;\n              }\n            case 8:\n              {\n                message.deviceManufacturer = reader.string();\n                break;\n              }\n            case 9:\n              {\n                message.deviceModel = reader.string();\n                break;\n              }\n            case 10:\n              {\n                message.additionalInfo = reader.string();\n                break;\n              }\n            case 11:\n              {\n                message.tenant = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Device;\n    }();\n    $root.Settings = function () {\n      /**\n       * Properties of a Settings.\n       * @exports ISettings\n       * @interface ISettings\n       * @property {number|null} [dubbing] Settings dubbing\n       * @property {number|null} [echo] Settings echo\n       * @property {string|null} [ttsEngine] Settings ttsEngine\n       * @property {string|null} [asrEngine] Settings asrEngine\n       * @property {number|null} [asrAutoStop] Settings asrAutoStop\n       * @property {number|null} [devMode] Settings devMode\n       * @property {string|null} [authConnector] Settings authConnector\n       * @property {string|null} [surface] Settings surface\n       */\n\n      /**\n       * Constructs a new Settings.\n       * @exports Settings\n       * @classdesc Represents a Settings.\n       * @implements ISettings\n       * @constructor\n       * @param {ISettings=} [properties] Properties to set\n       */\n      function Settings(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Settings dubbing.\n       * @member {number} dubbing\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.dubbing = 0;\n\n      /**\n       * Settings echo.\n       * @member {number} echo\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.echo = 0;\n\n      /**\n       * Settings ttsEngine.\n       * @member {string} ttsEngine\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.ttsEngine = \"\";\n\n      /**\n       * Settings asrEngine.\n       * @member {string} asrEngine\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.asrEngine = \"\";\n\n      /**\n       * Settings asrAutoStop.\n       * @member {number} asrAutoStop\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.asrAutoStop = 0;\n\n      /**\n       * Settings devMode.\n       * @member {number} devMode\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.devMode = 0;\n\n      /**\n       * Settings authConnector.\n       * @member {string} authConnector\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.authConnector = \"\";\n\n      /**\n       * Settings surface.\n       * @member {string} surface\n       * @memberof Settings\n       * @instance\n       */\n      Settings.prototype.surface = \"\";\n\n      /**\n       * Creates a new Settings instance using the specified properties.\n       * @function create\n       * @memberof Settings\n       * @static\n       * @param {ISettings=} [properties] Properties to set\n       * @returns {Settings} Settings instance\n       */\n      Settings.create = function create(properties) {\n        return new Settings(properties);\n      };\n\n      /**\n       * Encodes the specified Settings message. Does not implicitly {@link Settings.verify|verify} messages.\n       * @function encode\n       * @memberof Settings\n       * @static\n       * @param {ISettings} message Settings message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Settings.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.dubbing != null && Object.hasOwnProperty.call(message, \"dubbing\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.dubbing);\n        if (message.echo != null && Object.hasOwnProperty.call(message, \"echo\")) writer.uint32( /* id 2, wireType 0 =*/16).int32(message.echo);\n        if (message.ttsEngine != null && Object.hasOwnProperty.call(message, \"ttsEngine\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.ttsEngine);\n        if (message.asrEngine != null && Object.hasOwnProperty.call(message, \"asrEngine\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.asrEngine);\n        if (message.asrAutoStop != null && Object.hasOwnProperty.call(message, \"asrAutoStop\")) writer.uint32( /* id 5, wireType 0 =*/40).int32(message.asrAutoStop);\n        if (message.devMode != null && Object.hasOwnProperty.call(message, \"devMode\")) writer.uint32( /* id 6, wireType 0 =*/48).int32(message.devMode);\n        if (message.authConnector != null && Object.hasOwnProperty.call(message, \"authConnector\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.authConnector);\n        if (message.surface != null && Object.hasOwnProperty.call(message, \"surface\")) writer.uint32( /* id 8, wireType 2 =*/66).string(message.surface);\n        return writer;\n      };\n\n      /**\n       * Decodes a Settings message from the specified reader or buffer.\n       * @function decode\n       * @memberof Settings\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Settings} Settings\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Settings.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Settings();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.dubbing = reader.int32();\n                break;\n              }\n            case 2:\n              {\n                message.echo = reader.int32();\n                break;\n              }\n            case 3:\n              {\n                message.ttsEngine = reader.string();\n                break;\n              }\n            case 4:\n              {\n                message.asrEngine = reader.string();\n                break;\n              }\n            case 5:\n              {\n                message.asrAutoStop = reader.int32();\n                break;\n              }\n            case 6:\n              {\n                message.devMode = reader.int32();\n                break;\n              }\n            case 7:\n              {\n                message.authConnector = reader.string();\n                break;\n              }\n            case 8:\n              {\n                message.surface = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Settings;\n    }();\n    $root.LegacyDevice = function () {\n      /**\n       * Properties of a LegacyDevice.\n       * @exports ILegacyDevice\n       * @interface ILegacyDevice\n       * @property {string|null} [clientType] LegacyDevice clientType\n       * @property {string|null} [channel] LegacyDevice channel\n       * @property {string|null} [channelVersion] LegacyDevice channelVersion\n       * @property {string|null} [platformName] LegacyDevice platformName\n       * @property {string|null} [platformVersion] LegacyDevice platformVersion\n       * @property {string|null} [sdkVersion] LegacyDevice sdkVersion\n       * @property {string|null} [protocolVersion] LegacyDevice protocolVersion\n       */\n\n      /**\n       * Constructs a new LegacyDevice.\n       * @exports LegacyDevice\n       * @classdesc Represents a LegacyDevice.\n       * @implements ILegacyDevice\n       * @constructor\n       * @param {ILegacyDevice=} [properties] Properties to set\n       */\n      function LegacyDevice(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * LegacyDevice clientType.\n       * @member {string} clientType\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.clientType = \"\";\n\n      /**\n       * LegacyDevice channel.\n       * @member {string} channel\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.channel = \"\";\n\n      /**\n       * LegacyDevice channelVersion.\n       * @member {string} channelVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.channelVersion = \"\";\n\n      /**\n       * LegacyDevice platformName.\n       * @member {string} platformName\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.platformName = \"\";\n\n      /**\n       * LegacyDevice platformVersion.\n       * @member {string} platformVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.platformVersion = \"\";\n\n      /**\n       * LegacyDevice sdkVersion.\n       * @member {string} sdkVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.sdkVersion = \"\";\n\n      /**\n       * LegacyDevice protocolVersion.\n       * @member {string} protocolVersion\n       * @memberof LegacyDevice\n       * @instance\n       */\n      LegacyDevice.prototype.protocolVersion = \"\";\n\n      /**\n       * Creates a new LegacyDevice instance using the specified properties.\n       * @function create\n       * @memberof LegacyDevice\n       * @static\n       * @param {ILegacyDevice=} [properties] Properties to set\n       * @returns {LegacyDevice} LegacyDevice instance\n       */\n      LegacyDevice.create = function create(properties) {\n        return new LegacyDevice(properties);\n      };\n\n      /**\n       * Encodes the specified LegacyDevice message. Does not implicitly {@link LegacyDevice.verify|verify} messages.\n       * @function encode\n       * @memberof LegacyDevice\n       * @static\n       * @param {ILegacyDevice} message LegacyDevice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      LegacyDevice.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.clientType != null && Object.hasOwnProperty.call(message, \"clientType\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.clientType);\n        if (message.channel != null && Object.hasOwnProperty.call(message, \"channel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.channel);\n        if (message.channelVersion != null && Object.hasOwnProperty.call(message, \"channelVersion\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.channelVersion);\n        if (message.platformName != null && Object.hasOwnProperty.call(message, \"platformName\")) writer.uint32( /* id 4, wireType 2 =*/34).string(message.platformName);\n        if (message.platformVersion != null && Object.hasOwnProperty.call(message, \"platformVersion\")) writer.uint32( /* id 5, wireType 2 =*/42).string(message.platformVersion);\n        if (message.sdkVersion != null && Object.hasOwnProperty.call(message, \"sdkVersion\")) writer.uint32( /* id 6, wireType 2 =*/50).string(message.sdkVersion);\n        if (message.protocolVersion != null && Object.hasOwnProperty.call(message, \"protocolVersion\")) writer.uint32( /* id 7, wireType 2 =*/58).string(message.protocolVersion);\n        return writer;\n      };\n\n      /**\n       * Decodes a LegacyDevice message from the specified reader or buffer.\n       * @function decode\n       * @memberof LegacyDevice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {LegacyDevice} LegacyDevice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      LegacyDevice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.LegacyDevice();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.clientType = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.channel = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.channelVersion = reader.string();\n                break;\n              }\n            case 4:\n              {\n                message.platformName = reader.string();\n                break;\n              }\n            case 5:\n              {\n                message.platformVersion = reader.string();\n                break;\n              }\n            case 6:\n              {\n                message.sdkVersion = reader.string();\n                break;\n              }\n            case 7:\n              {\n                message.protocolVersion = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return LegacyDevice;\n    }();\n    $root.Voice = function () {\n      /**\n       * Properties of a Voice.\n       * @exports IVoice\n       * @interface IVoice\n       * @property {Uint8Array|null} [data] Voice data\n       */\n\n      /**\n       * Constructs a new Voice.\n       * @exports Voice\n       * @classdesc Represents a Voice.\n       * @implements IVoice\n       * @constructor\n       * @param {IVoice=} [properties] Properties to set\n       */\n      function Voice(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Voice data.\n       * @member {Uint8Array} data\n       * @memberof Voice\n       * @instance\n       */\n      Voice.prototype.data = $util.newBuffer([]);\n\n      /**\n       * Creates a new Voice instance using the specified properties.\n       * @function create\n       * @memberof Voice\n       * @static\n       * @param {IVoice=} [properties] Properties to set\n       * @returns {Voice} Voice instance\n       */\n      Voice.create = function create(properties) {\n        return new Voice(properties);\n      };\n\n      /**\n       * Encodes the specified Voice message. Does not implicitly {@link Voice.verify|verify} messages.\n       * @function encode\n       * @memberof Voice\n       * @static\n       * @param {IVoice} message Voice message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Voice.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.data);\n        return writer;\n      };\n\n      /**\n       * Decodes a Voice message from the specified reader or buffer.\n       * @function decode\n       * @memberof Voice\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Voice} Voice\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Voice.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Voice();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.bytes();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Voice;\n    }();\n    $root.Text = function () {\n      /**\n       * Properties of a Text.\n       * @exports IText\n       * @interface IText\n       * @property {string|null} [data] Text data\n       * @property {string|null} [type] Text type\n       */\n\n      /**\n       * Constructs a new Text.\n       * @exports Text\n       * @classdesc Represents a Text.\n       * @implements IText\n       * @constructor\n       * @param {IText=} [properties] Properties to set\n       */\n      function Text(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Text data.\n       * @member {string} data\n       * @memberof Text\n       * @instance\n       */\n      Text.prototype.data = \"\";\n\n      /**\n       * Text type.\n       * @member {string} type\n       * @memberof Text\n       * @instance\n       */\n      Text.prototype.type = \"\";\n\n      /**\n       * Creates a new Text instance using the specified properties.\n       * @function create\n       * @memberof Text\n       * @static\n       * @param {IText=} [properties] Properties to set\n       * @returns {Text} Text instance\n       */\n      Text.create = function create(properties) {\n        return new Text(properties);\n      };\n\n      /**\n       * Encodes the specified Text message. Does not implicitly {@link Text.verify|verify} messages.\n       * @function encode\n       * @memberof Text\n       * @static\n       * @param {IText} message Text message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Text.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.data);\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.type);\n        return writer;\n      };\n\n      /**\n       * Decodes a Text message from the specified reader or buffer.\n       * @function decode\n       * @memberof Text\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Text} Text\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Text.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Text();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.type = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Text;\n    }();\n    $root.SystemMessage = function () {\n      /**\n       * Properties of a SystemMessage.\n       * @exports ISystemMessage\n       * @interface ISystemMessage\n       * @property {string|null} [data] SystemMessage data\n       */\n\n      /**\n       * Constructs a new SystemMessage.\n       * @exports SystemMessage\n       * @classdesc Represents a SystemMessage.\n       * @implements ISystemMessage\n       * @constructor\n       * @param {ISystemMessage=} [properties] Properties to set\n       */\n      function SystemMessage(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * SystemMessage data.\n       * @member {string} data\n       * @memberof SystemMessage\n       * @instance\n       */\n      SystemMessage.prototype.data = \"\";\n\n      /**\n       * Creates a new SystemMessage instance using the specified properties.\n       * @function create\n       * @memberof SystemMessage\n       * @static\n       * @param {ISystemMessage=} [properties] Properties to set\n       * @returns {SystemMessage} SystemMessage instance\n       */\n      SystemMessage.create = function create(properties) {\n        return new SystemMessage(properties);\n      };\n\n      /**\n       * Encodes the specified SystemMessage message. Does not implicitly {@link SystemMessage.verify|verify} messages.\n       * @function encode\n       * @memberof SystemMessage\n       * @static\n       * @param {ISystemMessage} message SystemMessage message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      SystemMessage.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.data);\n        return writer;\n      };\n\n      /**\n       * Decodes a SystemMessage message from the specified reader or buffer.\n       * @function decode\n       * @memberof SystemMessage\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {SystemMessage} SystemMessage\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      SystemMessage.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.SystemMessage();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return SystemMessage;\n    }();\n    $root.Status = function () {\n      /**\n       * Properties of a Status.\n       * @exports IStatus\n       * @interface IStatus\n       * @property {number|null} [code] Status code\n       * @property {string|null} [description] Status description\n       * @property {string|null} [technicalDescription] Status technicalDescription\n       */\n\n      /**\n       * Constructs a new Status.\n       * @exports Status\n       * @classdesc Represents a Status.\n       * @implements IStatus\n       * @constructor\n       * @param {IStatus=} [properties] Properties to set\n       */\n      function Status(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Status code.\n       * @member {number} code\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.code = 0;\n\n      /**\n       * Status description.\n       * @member {string} description\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.description = \"\";\n\n      /**\n       * Status technicalDescription.\n       * @member {string} technicalDescription\n       * @memberof Status\n       * @instance\n       */\n      Status.prototype.technicalDescription = \"\";\n\n      /**\n       * Creates a new Status instance using the specified properties.\n       * @function create\n       * @memberof Status\n       * @static\n       * @param {IStatus=} [properties] Properties to set\n       * @returns {Status} Status instance\n       */\n      Status.create = function create(properties) {\n        return new Status(properties);\n      };\n\n      /**\n       * Encodes the specified Status message. Does not implicitly {@link Status.verify|verify} messages.\n       * @function encode\n       * @memberof Status\n       * @static\n       * @param {IStatus} message Status message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Status.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.code != null && Object.hasOwnProperty.call(message, \"code\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.code);\n        if (message.description != null && Object.hasOwnProperty.call(message, \"description\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.description);\n        if (message.technicalDescription != null && Object.hasOwnProperty.call(message, \"technicalDescription\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.technicalDescription);\n        return writer;\n      };\n\n      /**\n       * Decodes a Status message from the specified reader or buffer.\n       * @function decode\n       * @memberof Status\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Status} Status\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Status.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Status();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.code = reader.int32();\n                break;\n              }\n            case 2:\n              {\n                message.description = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.technicalDescription = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Status;\n    }();\n    $root.Bytes = function () {\n      /**\n       * Properties of a Bytes.\n       * @exports IBytes\n       * @interface IBytes\n       * @property {Uint8Array|null} [data] Bytes data\n       * @property {string|null} [desc] Bytes desc\n       */\n\n      /**\n       * Constructs a new Bytes.\n       * @exports Bytes\n       * @classdesc Represents a Bytes.\n       * @implements IBytes\n       * @constructor\n       * @param {IBytes=} [properties] Properties to set\n       */\n      function Bytes(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Bytes data.\n       * @member {Uint8Array} data\n       * @memberof Bytes\n       * @instance\n       */\n      Bytes.prototype.data = $util.newBuffer([]);\n\n      /**\n       * Bytes desc.\n       * @member {string} desc\n       * @memberof Bytes\n       * @instance\n       */\n      Bytes.prototype.desc = \"\";\n\n      /**\n       * Creates a new Bytes instance using the specified properties.\n       * @function create\n       * @memberof Bytes\n       * @static\n       * @param {IBytes=} [properties] Properties to set\n       * @returns {Bytes} Bytes instance\n       */\n      Bytes.create = function create(properties) {\n        return new Bytes(properties);\n      };\n\n      /**\n       * Encodes the specified Bytes message. Does not implicitly {@link Bytes.verify|verify} messages.\n       * @function encode\n       * @memberof Bytes\n       * @static\n       * @param {IBytes} message Bytes message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Bytes.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.data);\n        if (message.desc != null && Object.hasOwnProperty.call(message, \"desc\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.desc);\n        return writer;\n      };\n\n      /**\n       * Decodes a Bytes message from the specified reader or buffer.\n       * @function decode\n       * @memberof Bytes\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Bytes} Bytes\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Bytes.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Bytes();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.data = reader.bytes();\n                break;\n              }\n            case 2:\n              {\n                message.desc = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Bytes;\n    }();\n    $root.DevContext = function () {\n      /**\n       * Properties of a DevContext.\n       * @exports IDevContext\n       * @interface IDevContext\n       * @property {string|null} [name] DevContext name\n       * @property {number|Long|null} [timestampMs] DevContext timestampMs\n       * @property {string|null} [data] DevContext data\n       */\n\n      /**\n       * Constructs a new DevContext.\n       * @exports DevContext\n       * @classdesc Represents a DevContext.\n       * @implements IDevContext\n       * @constructor\n       * @param {IDevContext=} [properties] Properties to set\n       */\n      function DevContext(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * DevContext name.\n       * @member {string} name\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.name = \"\";\n\n      /**\n       * DevContext timestampMs.\n       * @member {number|Long} timestampMs\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.timestampMs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n      /**\n       * DevContext data.\n       * @member {string} data\n       * @memberof DevContext\n       * @instance\n       */\n      DevContext.prototype.data = \"\";\n\n      /**\n       * Creates a new DevContext instance using the specified properties.\n       * @function create\n       * @memberof DevContext\n       * @static\n       * @param {IDevContext=} [properties] Properties to set\n       * @returns {DevContext} DevContext instance\n       */\n      DevContext.create = function create(properties) {\n        return new DevContext(properties);\n      };\n\n      /**\n       * Encodes the specified DevContext message. Does not implicitly {@link DevContext.verify|verify} messages.\n       * @function encode\n       * @memberof DevContext\n       * @static\n       * @param {IDevContext} message DevContext message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      DevContext.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.name);\n        if (message.timestampMs != null && Object.hasOwnProperty.call(message, \"timestampMs\")) writer.uint32( /* id 2, wireType 0 =*/16).int64(message.timestampMs);\n        if (message.data != null && Object.hasOwnProperty.call(message, \"data\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.data);\n        return writer;\n      };\n\n      /**\n       * Decodes a DevContext message from the specified reader or buffer.\n       * @function decode\n       * @memberof DevContext\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {DevContext} DevContext\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      DevContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.DevContext();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.name = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.timestampMs = reader.int64();\n                break;\n              }\n            case 3:\n              {\n                message.data = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return DevContext;\n    }();\n    $root.Cancel = function () {\n      /**\n       * Properties of a Cancel.\n       * @exports ICancel\n       * @interface ICancel\n       */\n\n      /**\n       * Constructs a new Cancel.\n       * @exports Cancel\n       * @classdesc Represents a Cancel.\n       * @implements ICancel\n       * @constructor\n       * @param {ICancel=} [properties] Properties to set\n       */\n      function Cancel(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Creates a new Cancel instance using the specified properties.\n       * @function create\n       * @memberof Cancel\n       * @static\n       * @param {ICancel=} [properties] Properties to set\n       * @returns {Cancel} Cancel instance\n       */\n      Cancel.create = function create(properties) {\n        return new Cancel(properties);\n      };\n\n      /**\n       * Encodes the specified Cancel message. Does not implicitly {@link Cancel.verify|verify} messages.\n       * @function encode\n       * @memberof Cancel\n       * @static\n       * @param {ICancel} message Cancel message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Cancel.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n\n      /**\n       * Decodes a Cancel message from the specified reader or buffer.\n       * @function decode\n       * @memberof Cancel\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Cancel} Cancel\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Cancel.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Cancel();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Cancel;\n    }();\n    $root.Mute = function () {\n      /**\n       * Properties of a Mute.\n       * @exports IMute\n       * @interface IMute\n       */\n\n      /**\n       * Constructs a new Mute.\n       * @exports Mute\n       * @classdesc Represents a Mute.\n       * @implements IMute\n       * @constructor\n       * @param {IMute=} [properties] Properties to set\n       */\n      function Mute(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Creates a new Mute instance using the specified properties.\n       * @function create\n       * @memberof Mute\n       * @static\n       * @param {IMute=} [properties] Properties to set\n       * @returns {Mute} Mute instance\n       */\n      Mute.create = function create(properties) {\n        return new Mute(properties);\n      };\n\n      /**\n       * Encodes the specified Mute message. Does not implicitly {@link Mute.verify|verify} messages.\n       * @function encode\n       * @memberof Mute\n       * @static\n       * @param {IMute} message Mute message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Mute.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        return writer;\n      };\n\n      /**\n       * Decodes a Mute message from the specified reader or buffer.\n       * @function decode\n       * @memberof Mute\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Mute} Mute\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Mute.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Mute();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Mute;\n    }();\n    $root.GetHistoryRequest = function () {\n      /**\n       * Properties of a GetHistoryRequest.\n       * @exports IGetHistoryRequest\n       * @interface IGetHistoryRequest\n       * @property {Array.<string>|null} [messageTypes] GetHistoryRequest messageTypes\n       * @property {IApp|null} [app] GetHistoryRequest app\n       * @property {IOffset|null} [offset] GetHistoryRequest offset\n       */\n\n      /**\n       * Constructs a new GetHistoryRequest.\n       * @exports GetHistoryRequest\n       * @classdesc Represents a GetHistoryRequest.\n       * @implements IGetHistoryRequest\n       * @constructor\n       * @param {IGetHistoryRequest=} [properties] Properties to set\n       */\n      function GetHistoryRequest(properties) {\n        this.messageTypes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * GetHistoryRequest messageTypes.\n       * @member {Array.<string>} messageTypes\n       * @memberof GetHistoryRequest\n       * @instance\n       */\n      GetHistoryRequest.prototype.messageTypes = $util.emptyArray;\n\n      /**\n       * GetHistoryRequest app.\n       * @member {IApp|null|undefined} app\n       * @memberof GetHistoryRequest\n       * @instance\n       */\n      GetHistoryRequest.prototype.app = null;\n\n      /**\n       * GetHistoryRequest offset.\n       * @member {IOffset|null|undefined} offset\n       * @memberof GetHistoryRequest\n       * @instance\n       */\n      GetHistoryRequest.prototype.offset = null;\n\n      /**\n       * Creates a new GetHistoryRequest instance using the specified properties.\n       * @function create\n       * @memberof GetHistoryRequest\n       * @static\n       * @param {IGetHistoryRequest=} [properties] Properties to set\n       * @returns {GetHistoryRequest} GetHistoryRequest instance\n       */\n      GetHistoryRequest.create = function create(properties) {\n        return new GetHistoryRequest(properties);\n      };\n\n      /**\n       * Encodes the specified GetHistoryRequest message. Does not implicitly {@link GetHistoryRequest.verify|verify} messages.\n       * @function encode\n       * @memberof GetHistoryRequest\n       * @static\n       * @param {IGetHistoryRequest} message GetHistoryRequest message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      GetHistoryRequest.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.messageTypes != null && message.messageTypes.length) for (var i = 0; i < message.messageTypes.length; ++i) writer.uint32( /* id 1, wireType 2 =*/10).string(message.messageTypes[i]);\n        if (message.app != null && Object.hasOwnProperty.call(message, \"app\")) $root.App.encode(message.app, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.offset != null && Object.hasOwnProperty.call(message, \"offset\")) $root.Offset.encode(message.offset, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a GetHistoryRequest message from the specified reader or buffer.\n       * @function decode\n       * @memberof GetHistoryRequest\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {GetHistoryRequest} GetHistoryRequest\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      GetHistoryRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.GetHistoryRequest();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                if (!(message.messageTypes && message.messageTypes.length)) message.messageTypes = [];\n                message.messageTypes.push(reader.string());\n                break;\n              }\n            case 2:\n              {\n                message.app = $root.App.decode(reader, reader.uint32());\n                break;\n              }\n            case 3:\n              {\n                message.offset = $root.Offset.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return GetHistoryRequest;\n    }();\n    $root.App = function () {\n      /**\n       * Properties of an App.\n       * @exports IApp\n       * @interface IApp\n       * @property {google.protobuf.IStringValue|null} [type] App type\n       * @property {google.protobuf.IStringValue|null} [projectId] App projectId\n       * @property {google.protobuf.IStringValue|null} [systemName] App systemName\n       */\n\n      /**\n       * Constructs a new App.\n       * @exports App\n       * @classdesc Represents an App.\n       * @implements IApp\n       * @constructor\n       * @param {IApp=} [properties] Properties to set\n       */\n      function App(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * App type.\n       * @member {google.protobuf.IStringValue|null|undefined} type\n       * @memberof App\n       * @instance\n       */\n      App.prototype.type = null;\n\n      /**\n       * App projectId.\n       * @member {google.protobuf.IStringValue|null|undefined} projectId\n       * @memberof App\n       * @instance\n       */\n      App.prototype.projectId = null;\n\n      /**\n       * App systemName.\n       * @member {google.protobuf.IStringValue|null|undefined} systemName\n       * @memberof App\n       * @instance\n       */\n      App.prototype.systemName = null;\n\n      /**\n       * Creates a new App instance using the specified properties.\n       * @function create\n       * @memberof App\n       * @static\n       * @param {IApp=} [properties] Properties to set\n       * @returns {App} App instance\n       */\n      App.create = function create(properties) {\n        return new App(properties);\n      };\n\n      /**\n       * Encodes the specified App message. Does not implicitly {@link App.verify|verify} messages.\n       * @function encode\n       * @memberof App\n       * @static\n       * @param {IApp} message App message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      App.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) $root.google.protobuf.StringValue.encode(message.type, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.projectId != null && Object.hasOwnProperty.call(message, \"projectId\")) $root.google.protobuf.StringValue.encode(message.projectId, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.systemName != null && Object.hasOwnProperty.call(message, \"systemName\")) $root.google.protobuf.StringValue.encode(message.systemName, writer.uint32( /* id 3, wireType 2 =*/26).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes an App message from the specified reader or buffer.\n       * @function decode\n       * @memberof App\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {App} App\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      App.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.App();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.type = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            case 2:\n              {\n                message.projectId = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            case 3:\n              {\n                message.systemName = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return App;\n    }();\n    $root.Offset = function () {\n      /**\n       * Properties of an Offset.\n       * @exports IOffset\n       * @interface IOffset\n       * @property {google.protobuf.IStringValue|null} [limit] Offset limit\n       * @property {google.protobuf.IStringValue|null} [contentId] Offset contentId\n       */\n\n      /**\n       * Constructs a new Offset.\n       * @exports Offset\n       * @classdesc Represents an Offset.\n       * @implements IOffset\n       * @constructor\n       * @param {IOffset=} [properties] Properties to set\n       */\n      function Offset(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Offset limit.\n       * @member {google.protobuf.IStringValue|null|undefined} limit\n       * @memberof Offset\n       * @instance\n       */\n      Offset.prototype.limit = null;\n\n      /**\n       * Offset contentId.\n       * @member {google.protobuf.IStringValue|null|undefined} contentId\n       * @memberof Offset\n       * @instance\n       */\n      Offset.prototype.contentId = null;\n\n      /**\n       * Creates a new Offset instance using the specified properties.\n       * @function create\n       * @memberof Offset\n       * @static\n       * @param {IOffset=} [properties] Properties to set\n       * @returns {Offset} Offset instance\n       */\n      Offset.create = function create(properties) {\n        return new Offset(properties);\n      };\n\n      /**\n       * Encodes the specified Offset message. Does not implicitly {@link Offset.verify|verify} messages.\n       * @function encode\n       * @memberof Offset\n       * @static\n       * @param {IOffset} message Offset message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Offset.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.limit != null && Object.hasOwnProperty.call(message, \"limit\")) $root.google.protobuf.StringValue.encode(message.limit, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.contentId != null && Object.hasOwnProperty.call(message, \"contentId\")) $root.google.protobuf.StringValue.encode(message.contentId, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes an Offset message from the specified reader or buffer.\n       * @function decode\n       * @memberof Offset\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Offset} Offset\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Offset.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Offset();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.limit = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            case 2:\n              {\n                message.contentId = $root.google.protobuf.StringValue.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Offset;\n    }();\n    $root.ChatHistoryRequest = function () {\n      /**\n       * Properties of a ChatHistoryRequest.\n       * @exports IChatHistoryRequest\n       * @interface IChatHistoryRequest\n       * @property {IUuid|null} [uuid] ChatHistoryRequest uuid\n       * @property {IDevice|null} [device] ChatHistoryRequest device\n       * @property {IGetHistoryRequest|null} [getHistoryRequest] ChatHistoryRequest getHistoryRequest\n       */\n\n      /**\n       * Constructs a new ChatHistoryRequest.\n       * @exports ChatHistoryRequest\n       * @classdesc Represents a ChatHistoryRequest.\n       * @implements IChatHistoryRequest\n       * @constructor\n       * @param {IChatHistoryRequest=} [properties] Properties to set\n       */\n      function ChatHistoryRequest(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * ChatHistoryRequest uuid.\n       * @member {IUuid|null|undefined} uuid\n       * @memberof ChatHistoryRequest\n       * @instance\n       */\n      ChatHistoryRequest.prototype.uuid = null;\n\n      /**\n       * ChatHistoryRequest device.\n       * @member {IDevice|null|undefined} device\n       * @memberof ChatHistoryRequest\n       * @instance\n       */\n      ChatHistoryRequest.prototype.device = null;\n\n      /**\n       * ChatHistoryRequest getHistoryRequest.\n       * @member {IGetHistoryRequest|null|undefined} getHistoryRequest\n       * @memberof ChatHistoryRequest\n       * @instance\n       */\n      ChatHistoryRequest.prototype.getHistoryRequest = null;\n\n      /**\n       * Creates a new ChatHistoryRequest instance using the specified properties.\n       * @function create\n       * @memberof ChatHistoryRequest\n       * @static\n       * @param {IChatHistoryRequest=} [properties] Properties to set\n       * @returns {ChatHistoryRequest} ChatHistoryRequest instance\n       */\n      ChatHistoryRequest.create = function create(properties) {\n        return new ChatHistoryRequest(properties);\n      };\n\n      /**\n       * Encodes the specified ChatHistoryRequest message. Does not implicitly {@link ChatHistoryRequest.verify|verify} messages.\n       * @function encode\n       * @memberof ChatHistoryRequest\n       * @static\n       * @param {IChatHistoryRequest} message ChatHistoryRequest message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      ChatHistoryRequest.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.uuid != null && Object.hasOwnProperty.call(message, \"uuid\")) $root.Uuid.encode(message.uuid, writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.device != null && Object.hasOwnProperty.call(message, \"device\")) $root.Device.encode(message.device, writer.uint32( /* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.getHistoryRequest != null && Object.hasOwnProperty.call(message, \"getHistoryRequest\")) $root.GetHistoryRequest.encode(message.getHistoryRequest, writer.uint32( /* id 4, wireType 2 =*/34).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a ChatHistoryRequest message from the specified reader or buffer.\n       * @function decode\n       * @memberof ChatHistoryRequest\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {ChatHistoryRequest} ChatHistoryRequest\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      ChatHistoryRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.ChatHistoryRequest();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.uuid = $root.Uuid.decode(reader, reader.uint32());\n                break;\n              }\n            case 2:\n              {\n                message.device = $root.Device.decode(reader, reader.uint32());\n                break;\n              }\n            case 4:\n              {\n                message.getHistoryRequest = $root.GetHistoryRequest.decode(reader, reader.uint32());\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return ChatHistoryRequest;\n    }();\n    $root.Uuid = function () {\n      /**\n       * Properties of an Uuid.\n       * @exports IUuid\n       * @interface IUuid\n       * @property {string|null} [userId] Uuid userId\n       * @property {string|null} [userChannel] Uuid userChannel\n       * @property {string|null} [sub] Uuid sub\n       */\n\n      /**\n       * Constructs a new Uuid.\n       * @exports Uuid\n       * @classdesc Represents an Uuid.\n       * @implements IUuid\n       * @constructor\n       * @param {IUuid=} [properties] Properties to set\n       */\n      function Uuid(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * Uuid userId.\n       * @member {string} userId\n       * @memberof Uuid\n       * @instance\n       */\n      Uuid.prototype.userId = \"\";\n\n      /**\n       * Uuid userChannel.\n       * @member {string} userChannel\n       * @memberof Uuid\n       * @instance\n       */\n      Uuid.prototype.userChannel = \"\";\n\n      /**\n       * Uuid sub.\n       * @member {string} sub\n       * @memberof Uuid\n       * @instance\n       */\n      Uuid.prototype.sub = \"\";\n\n      /**\n       * Creates a new Uuid instance using the specified properties.\n       * @function create\n       * @memberof Uuid\n       * @static\n       * @param {IUuid=} [properties] Properties to set\n       * @returns {Uuid} Uuid instance\n       */\n      Uuid.create = function create(properties) {\n        return new Uuid(properties);\n      };\n\n      /**\n       * Encodes the specified Uuid message. Does not implicitly {@link Uuid.verify|verify} messages.\n       * @function encode\n       * @memberof Uuid\n       * @static\n       * @param {IUuid} message Uuid message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Uuid.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.userId);\n        if (message.userChannel != null && Object.hasOwnProperty.call(message, \"userChannel\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.userChannel);\n        if (message.sub != null && Object.hasOwnProperty.call(message, \"sub\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.sub);\n        return writer;\n      };\n\n      /**\n       * Decodes an Uuid message from the specified reader or buffer.\n       * @function decode\n       * @memberof Uuid\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Uuid} Uuid\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Uuid.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Uuid();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.userId = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.userChannel = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.sub = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return Uuid;\n    }();\n    $root.GetHistoryResponse = function () {\n      /**\n       * Properties of a GetHistoryResponse.\n       * @exports IGetHistoryResponse\n       * @interface IGetHistoryResponse\n       * @property {Array.<IHistoryMessages>|null} [historyMessages] GetHistoryResponse historyMessages\n       */\n\n      /**\n       * Constructs a new GetHistoryResponse.\n       * @exports GetHistoryResponse\n       * @classdesc Represents a GetHistoryResponse.\n       * @implements IGetHistoryResponse\n       * @constructor\n       * @param {IGetHistoryResponse=} [properties] Properties to set\n       */\n      function GetHistoryResponse(properties) {\n        this.historyMessages = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * GetHistoryResponse historyMessages.\n       * @member {Array.<IHistoryMessages>} historyMessages\n       * @memberof GetHistoryResponse\n       * @instance\n       */\n      GetHistoryResponse.prototype.historyMessages = $util.emptyArray;\n\n      /**\n       * Creates a new GetHistoryResponse instance using the specified properties.\n       * @function create\n       * @memberof GetHistoryResponse\n       * @static\n       * @param {IGetHistoryResponse=} [properties] Properties to set\n       * @returns {GetHistoryResponse} GetHistoryResponse instance\n       */\n      GetHistoryResponse.create = function create(properties) {\n        return new GetHistoryResponse(properties);\n      };\n\n      /**\n       * Encodes the specified GetHistoryResponse message. Does not implicitly {@link GetHistoryResponse.verify|verify} messages.\n       * @function encode\n       * @memberof GetHistoryResponse\n       * @static\n       * @param {IGetHistoryResponse} message GetHistoryResponse message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      GetHistoryResponse.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.historyMessages != null && message.historyMessages.length) for (var i = 0; i < message.historyMessages.length; ++i) $root.HistoryMessages.encode(message.historyMessages[i], writer.uint32( /* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n      };\n\n      /**\n       * Decodes a GetHistoryResponse message from the specified reader or buffer.\n       * @function decode\n       * @memberof GetHistoryResponse\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {GetHistoryResponse} GetHistoryResponse\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      GetHistoryResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.GetHistoryResponse();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                if (!(message.historyMessages && message.historyMessages.length)) message.historyMessages = [];\n                message.historyMessages.push($root.HistoryMessages.decode(reader, reader.uint32()));\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return GetHistoryResponse;\n    }();\n    $root.HistoryMessages = function () {\n      /**\n       * Properties of a HistoryMessages.\n       * @exports IHistoryMessages\n       * @interface IHistoryMessages\n       * @property {string|null} [content] HistoryMessages content\n       * @property {string|null} [contentId] HistoryMessages contentId\n       * @property {string|null} [timeCreated] HistoryMessages timeCreated\n       */\n\n      /**\n       * Constructs a new HistoryMessages.\n       * @exports HistoryMessages\n       * @classdesc Represents a HistoryMessages.\n       * @implements IHistoryMessages\n       * @constructor\n       * @param {IHistoryMessages=} [properties] Properties to set\n       */\n      function HistoryMessages(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n\n      /**\n       * HistoryMessages content.\n       * @member {string} content\n       * @memberof HistoryMessages\n       * @instance\n       */\n      HistoryMessages.prototype.content = \"\";\n\n      /**\n       * HistoryMessages contentId.\n       * @member {string} contentId\n       * @memberof HistoryMessages\n       * @instance\n       */\n      HistoryMessages.prototype.contentId = \"\";\n\n      /**\n       * HistoryMessages timeCreated.\n       * @member {string} timeCreated\n       * @memberof HistoryMessages\n       * @instance\n       */\n      HistoryMessages.prototype.timeCreated = \"\";\n\n      /**\n       * Creates a new HistoryMessages instance using the specified properties.\n       * @function create\n       * @memberof HistoryMessages\n       * @static\n       * @param {IHistoryMessages=} [properties] Properties to set\n       * @returns {HistoryMessages} HistoryMessages instance\n       */\n      HistoryMessages.create = function create(properties) {\n        return new HistoryMessages(properties);\n      };\n\n      /**\n       * Encodes the specified HistoryMessages message. Does not implicitly {@link HistoryMessages.verify|verify} messages.\n       * @function encode\n       * @memberof HistoryMessages\n       * @static\n       * @param {IHistoryMessages} message HistoryMessages message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      HistoryMessages.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.content != null && Object.hasOwnProperty.call(message, \"content\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.content);\n        if (message.contentId != null && Object.hasOwnProperty.call(message, \"contentId\")) writer.uint32( /* id 2, wireType 2 =*/18).string(message.contentId);\n        if (message.timeCreated != null && Object.hasOwnProperty.call(message, \"timeCreated\")) writer.uint32( /* id 3, wireType 2 =*/26).string(message.timeCreated);\n        return writer;\n      };\n\n      /**\n       * Decodes a HistoryMessages message from the specified reader or buffer.\n       * @function decode\n       * @memberof HistoryMessages\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {HistoryMessages} HistoryMessages\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      HistoryMessages.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.HistoryMessages();\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              {\n                message.content = reader.string();\n                break;\n              }\n            case 2:\n              {\n                message.contentId = reader.string();\n                break;\n              }\n            case 3:\n              {\n                message.timeCreated = reader.string();\n                break;\n              }\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return message;\n      };\n      return HistoryMessages;\n    }();\n    $root.google = function () {\n      /**\n       * Namespace google.\n       * @exports google\n       * @namespace\n       */\n      var google = {};\n      google.protobuf = function () {\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n        protobuf.DoubleValue = function () {\n          /**\n           * Properties of a DoubleValue.\n           * @memberof google.protobuf\n           * @interface IDoubleValue\n           * @property {number|null} [value] DoubleValue value\n           */\n\n          /**\n           * Constructs a new DoubleValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a DoubleValue.\n           * @implements IDoubleValue\n           * @constructor\n           * @param {google.protobuf.IDoubleValue=} [properties] Properties to set\n           */\n          function DoubleValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * DoubleValue value.\n           * @member {number} value\n           * @memberof google.protobuf.DoubleValue\n           * @instance\n           */\n          DoubleValue.prototype.value = 0;\n\n          /**\n           * Creates a new DoubleValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.DoubleValue\n           * @static\n           * @param {google.protobuf.IDoubleValue=} [properties] Properties to set\n           * @returns {google.protobuf.DoubleValue} DoubleValue instance\n           */\n          DoubleValue.create = function create(properties) {\n            return new DoubleValue(properties);\n          };\n\n          /**\n           * Encodes the specified DoubleValue message. Does not implicitly {@link google.protobuf.DoubleValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.DoubleValue\n           * @static\n           * @param {google.protobuf.IDoubleValue} message DoubleValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          DoubleValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 1 =*/9).double(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a DoubleValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.DoubleValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.DoubleValue} DoubleValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          DoubleValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.DoubleValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.double();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return DoubleValue;\n        }();\n        protobuf.FloatValue = function () {\n          /**\n           * Properties of a FloatValue.\n           * @memberof google.protobuf\n           * @interface IFloatValue\n           * @property {number|null} [value] FloatValue value\n           */\n\n          /**\n           * Constructs a new FloatValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a FloatValue.\n           * @implements IFloatValue\n           * @constructor\n           * @param {google.protobuf.IFloatValue=} [properties] Properties to set\n           */\n          function FloatValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * FloatValue value.\n           * @member {number} value\n           * @memberof google.protobuf.FloatValue\n           * @instance\n           */\n          FloatValue.prototype.value = 0;\n\n          /**\n           * Creates a new FloatValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.FloatValue\n           * @static\n           * @param {google.protobuf.IFloatValue=} [properties] Properties to set\n           * @returns {google.protobuf.FloatValue} FloatValue instance\n           */\n          FloatValue.create = function create(properties) {\n            return new FloatValue(properties);\n          };\n\n          /**\n           * Encodes the specified FloatValue message. Does not implicitly {@link google.protobuf.FloatValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.FloatValue\n           * @static\n           * @param {google.protobuf.IFloatValue} message FloatValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          FloatValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 5 =*/13).float(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a FloatValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.FloatValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.FloatValue} FloatValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          FloatValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.FloatValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.float();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return FloatValue;\n        }();\n        protobuf.Int64Value = function () {\n          /**\n           * Properties of an Int64Value.\n           * @memberof google.protobuf\n           * @interface IInt64Value\n           * @property {number|Long|null} [value] Int64Value value\n           */\n\n          /**\n           * Constructs a new Int64Value.\n           * @memberof google.protobuf\n           * @classdesc Represents an Int64Value.\n           * @implements IInt64Value\n           * @constructor\n           * @param {google.protobuf.IInt64Value=} [properties] Properties to set\n           */\n          function Int64Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * Int64Value value.\n           * @member {number|Long} value\n           * @memberof google.protobuf.Int64Value\n           * @instance\n           */\n          Int64Value.prototype.value = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n          /**\n           * Creates a new Int64Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.Int64Value\n           * @static\n           * @param {google.protobuf.IInt64Value=} [properties] Properties to set\n           * @returns {google.protobuf.Int64Value} Int64Value instance\n           */\n          Int64Value.create = function create(properties) {\n            return new Int64Value(properties);\n          };\n\n          /**\n           * Encodes the specified Int64Value message. Does not implicitly {@link google.protobuf.Int64Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.Int64Value\n           * @static\n           * @param {google.protobuf.IInt64Value} message Int64Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          Int64Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).int64(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes an Int64Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.Int64Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.Int64Value} Int64Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          Int64Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.Int64Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.int64();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return Int64Value;\n        }();\n        protobuf.UInt64Value = function () {\n          /**\n           * Properties of a UInt64Value.\n           * @memberof google.protobuf\n           * @interface IUInt64Value\n           * @property {number|Long|null} [value] UInt64Value value\n           */\n\n          /**\n           * Constructs a new UInt64Value.\n           * @memberof google.protobuf\n           * @classdesc Represents a UInt64Value.\n           * @implements IUInt64Value\n           * @constructor\n           * @param {google.protobuf.IUInt64Value=} [properties] Properties to set\n           */\n          function UInt64Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * UInt64Value value.\n           * @member {number|Long} value\n           * @memberof google.protobuf.UInt64Value\n           * @instance\n           */\n          UInt64Value.prototype.value = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n          /**\n           * Creates a new UInt64Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.UInt64Value\n           * @static\n           * @param {google.protobuf.IUInt64Value=} [properties] Properties to set\n           * @returns {google.protobuf.UInt64Value} UInt64Value instance\n           */\n          UInt64Value.create = function create(properties) {\n            return new UInt64Value(properties);\n          };\n\n          /**\n           * Encodes the specified UInt64Value message. Does not implicitly {@link google.protobuf.UInt64Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.UInt64Value\n           * @static\n           * @param {google.protobuf.IUInt64Value} message UInt64Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          UInt64Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).uint64(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a UInt64Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.UInt64Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.UInt64Value} UInt64Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          UInt64Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.UInt64Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.uint64();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return UInt64Value;\n        }();\n        protobuf.Int32Value = function () {\n          /**\n           * Properties of an Int32Value.\n           * @memberof google.protobuf\n           * @interface IInt32Value\n           * @property {number|null} [value] Int32Value value\n           */\n\n          /**\n           * Constructs a new Int32Value.\n           * @memberof google.protobuf\n           * @classdesc Represents an Int32Value.\n           * @implements IInt32Value\n           * @constructor\n           * @param {google.protobuf.IInt32Value=} [properties] Properties to set\n           */\n          function Int32Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * Int32Value value.\n           * @member {number} value\n           * @memberof google.protobuf.Int32Value\n           * @instance\n           */\n          Int32Value.prototype.value = 0;\n\n          /**\n           * Creates a new Int32Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.Int32Value\n           * @static\n           * @param {google.protobuf.IInt32Value=} [properties] Properties to set\n           * @returns {google.protobuf.Int32Value} Int32Value instance\n           */\n          Int32Value.create = function create(properties) {\n            return new Int32Value(properties);\n          };\n\n          /**\n           * Encodes the specified Int32Value message. Does not implicitly {@link google.protobuf.Int32Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.Int32Value\n           * @static\n           * @param {google.protobuf.IInt32Value} message Int32Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          Int32Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).int32(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes an Int32Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.Int32Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.Int32Value} Int32Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          Int32Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.Int32Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.int32();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return Int32Value;\n        }();\n        protobuf.UInt32Value = function () {\n          /**\n           * Properties of a UInt32Value.\n           * @memberof google.protobuf\n           * @interface IUInt32Value\n           * @property {number|null} [value] UInt32Value value\n           */\n\n          /**\n           * Constructs a new UInt32Value.\n           * @memberof google.protobuf\n           * @classdesc Represents a UInt32Value.\n           * @implements IUInt32Value\n           * @constructor\n           * @param {google.protobuf.IUInt32Value=} [properties] Properties to set\n           */\n          function UInt32Value(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * UInt32Value value.\n           * @member {number} value\n           * @memberof google.protobuf.UInt32Value\n           * @instance\n           */\n          UInt32Value.prototype.value = 0;\n\n          /**\n           * Creates a new UInt32Value instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.UInt32Value\n           * @static\n           * @param {google.protobuf.IUInt32Value=} [properties] Properties to set\n           * @returns {google.protobuf.UInt32Value} UInt32Value instance\n           */\n          UInt32Value.create = function create(properties) {\n            return new UInt32Value(properties);\n          };\n\n          /**\n           * Encodes the specified UInt32Value message. Does not implicitly {@link google.protobuf.UInt32Value.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.UInt32Value\n           * @static\n           * @param {google.protobuf.IUInt32Value} message UInt32Value message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          UInt32Value.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).uint32(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a UInt32Value message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.UInt32Value\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.UInt32Value} UInt32Value\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          UInt32Value.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.UInt32Value();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.uint32();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return UInt32Value;\n        }();\n        protobuf.BoolValue = function () {\n          /**\n           * Properties of a BoolValue.\n           * @memberof google.protobuf\n           * @interface IBoolValue\n           * @property {boolean|null} [value] BoolValue value\n           */\n\n          /**\n           * Constructs a new BoolValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a BoolValue.\n           * @implements IBoolValue\n           * @constructor\n           * @param {google.protobuf.IBoolValue=} [properties] Properties to set\n           */\n          function BoolValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * BoolValue value.\n           * @member {boolean} value\n           * @memberof google.protobuf.BoolValue\n           * @instance\n           */\n          BoolValue.prototype.value = false;\n\n          /**\n           * Creates a new BoolValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.BoolValue\n           * @static\n           * @param {google.protobuf.IBoolValue=} [properties] Properties to set\n           * @returns {google.protobuf.BoolValue} BoolValue instance\n           */\n          BoolValue.create = function create(properties) {\n            return new BoolValue(properties);\n          };\n\n          /**\n           * Encodes the specified BoolValue message. Does not implicitly {@link google.protobuf.BoolValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.BoolValue\n           * @static\n           * @param {google.protobuf.IBoolValue} message BoolValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          BoolValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 0 =*/8).bool(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a BoolValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.BoolValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.BoolValue} BoolValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          BoolValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.BoolValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.bool();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return BoolValue;\n        }();\n        protobuf.StringValue = function () {\n          /**\n           * Properties of a StringValue.\n           * @memberof google.protobuf\n           * @interface IStringValue\n           * @property {string|null} [value] StringValue value\n           */\n\n          /**\n           * Constructs a new StringValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a StringValue.\n           * @implements IStringValue\n           * @constructor\n           * @param {google.protobuf.IStringValue=} [properties] Properties to set\n           */\n          function StringValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * StringValue value.\n           * @member {string} value\n           * @memberof google.protobuf.StringValue\n           * @instance\n           */\n          StringValue.prototype.value = \"\";\n\n          /**\n           * Creates a new StringValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.StringValue\n           * @static\n           * @param {google.protobuf.IStringValue=} [properties] Properties to set\n           * @returns {google.protobuf.StringValue} StringValue instance\n           */\n          StringValue.create = function create(properties) {\n            return new StringValue(properties);\n          };\n\n          /**\n           * Encodes the specified StringValue message. Does not implicitly {@link google.protobuf.StringValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.StringValue\n           * @static\n           * @param {google.protobuf.IStringValue} message StringValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          StringValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 2 =*/10).string(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a StringValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.StringValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.StringValue} StringValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          StringValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.StringValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.string();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return StringValue;\n        }();\n        protobuf.BytesValue = function () {\n          /**\n           * Properties of a BytesValue.\n           * @memberof google.protobuf\n           * @interface IBytesValue\n           * @property {Uint8Array|null} [value] BytesValue value\n           */\n\n          /**\n           * Constructs a new BytesValue.\n           * @memberof google.protobuf\n           * @classdesc Represents a BytesValue.\n           * @implements IBytesValue\n           * @constructor\n           * @param {google.protobuf.IBytesValue=} [properties] Properties to set\n           */\n          function BytesValue(properties) {\n            if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n          }\n\n          /**\n           * BytesValue value.\n           * @member {Uint8Array} value\n           * @memberof google.protobuf.BytesValue\n           * @instance\n           */\n          BytesValue.prototype.value = $util.newBuffer([]);\n\n          /**\n           * Creates a new BytesValue instance using the specified properties.\n           * @function create\n           * @memberof google.protobuf.BytesValue\n           * @static\n           * @param {google.protobuf.IBytesValue=} [properties] Properties to set\n           * @returns {google.protobuf.BytesValue} BytesValue instance\n           */\n          BytesValue.create = function create(properties) {\n            return new BytesValue(properties);\n          };\n\n          /**\n           * Encodes the specified BytesValue message. Does not implicitly {@link google.protobuf.BytesValue.verify|verify} messages.\n           * @function encode\n           * @memberof google.protobuf.BytesValue\n           * @static\n           * @param {google.protobuf.IBytesValue} message BytesValue message or plain object to encode\n           * @param {$protobuf.Writer} [writer] Writer to encode to\n           * @returns {$protobuf.Writer} Writer\n           */\n          BytesValue.encode = function encode(message, writer) {\n            if (!writer) writer = $Writer.create();\n            if (message.value != null && Object.hasOwnProperty.call(message, \"value\")) writer.uint32( /* id 1, wireType 2 =*/10).bytes(message.value);\n            return writer;\n          };\n\n          /**\n           * Decodes a BytesValue message from the specified reader or buffer.\n           * @function decode\n           * @memberof google.protobuf.BytesValue\n           * @static\n           * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n           * @param {number} [length] Message length if known beforehand\n           * @returns {google.protobuf.BytesValue} BytesValue\n           * @throws {Error} If the payload is not a reader or valid buffer\n           * @throws {$protobuf.util.ProtocolError} If required fields are missing\n           */\n          BytesValue.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length,\n              message = new $root.google.protobuf.BytesValue();\n            while (reader.pos < end) {\n              var tag = reader.uint32();\n              switch (tag >>> 3) {\n                case 1:\n                  {\n                    message.value = reader.bytes();\n                    break;\n                  }\n                default:\n                  reader.skipType(tag & 7);\n                  break;\n              }\n            }\n            return message;\n          };\n          return BytesValue;\n        }();\n        return protobuf;\n      }();\n      return google;\n    }();\n    return $root;\n  });\n})(proto);\nvar protoExports = proto.exports;\n\n// eslint-disable-next-line no-shadow\nvar VpsVersion;\n(function (VpsVersion) {\n  VpsVersion[VpsVersion[\"1.0\"] = 1] = \"1.0\";\n  VpsVersion[VpsVersion[\"2.0\"] = 2] = \"2.0\";\n  VpsVersion[VpsVersion[\"3.0\"] = 3] = \"3.0\";\n  VpsVersion[VpsVersion[\"4.0\"] = 4] = \"4.0\";\n  VpsVersion[VpsVersion[\"5.0\"] = 5] = \"5.0\";\n})(VpsVersion || (VpsVersion = {}));\nvar MessageNames = {\n  ANSWER_TO_USER: 'ANSWER_TO_USER',\n  STT: 'STT',\n  MTT: 'MUSIC_RECOGNITION',\n  DO_NOTHING: 'DO_NOTHING'\n};\nvar createClientMethods = function (_a) {\n  var getMessageId = _a.getMessageId,\n    sendMessage = _a.sendMessage;\n  var send = function (_a) {\n    var payload = _a.payload,\n      messageId = _a.messageId,\n      other = __rest(_a, [\"payload\", \"messageId\"]);\n    sendMessage(__assign(__assign(__assign({\n      messageName: ''\n    }, payload), {\n      messageId: messageId\n    }), other));\n  };\n  var sendDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        device: protoExports.Device.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendInitialSettings = function (data, last, messageId, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        initialSettings: protoExports.InitialSettings.create(data),\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var getHistoryRequest = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    var uuid = data.uuid,\n      device = data.device,\n      historyClient = data.history;\n    var historyProto = {\n      messageTypes: historyClient === null || historyClient === void 0 ? void 0 : historyClient.messageTypes\n    };\n    // Мапим объект настроек от пользователя в формат объекта протобафа\n    if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.app) {\n      historyProto.app = Object.entries(historyClient.app).reduce(function (acc, _a) {\n        var _b;\n        var key = _a[0],\n          value = _a[1];\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = {\n          value: value\n        }, _b));\n      }, {});\n    }\n    if (historyClient === null || historyClient === void 0 ? void 0 : historyClient.offset) {\n      historyProto.offset = Object.entries(historyClient.offset).reduce(function (acc, _a) {\n        var _b;\n        var key = _a[0],\n          value = _a[1];\n        return __assign(__assign({}, acc), (_b = {}, _b[key] = {\n          value: value.toString()\n        }, _b));\n      }, {});\n    }\n    return send({\n      payload: __assign(__assign({}, protoExports.ChatHistoryRequest.create({\n        uuid: uuid,\n        device: device,\n        getHistoryRequest: historyProto\n      })), {\n        messageName: 'GET_HISTORY',\n        last: last ? 1 : -1\n      }),\n      messageId: messageId\n    });\n  };\n  var sendCancel = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        cancel: protoExports.Cancel.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendLegacyDevice = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        legacyDevice: protoExports.LegacyDevice.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendMute = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        mute: protoExports.Mute.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendSettings = function (data, last, messageId) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    return send({\n      payload: {\n        settings: protoExports.Settings.create(data),\n        last: last ? 1 : -1\n      },\n      messageId: messageId\n    });\n  };\n  var sendText = function (data, params, type, messageId) {\n    var _a;\n    if (params === void 0) {\n      params = {};\n    }\n    if (type === void 0) {\n      type = '';\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    var text = type ? {\n      data: data,\n      type: type\n    } : {\n      data: data\n    };\n    send(__assign({\n      payload: {\n        text: protoExports.Text.create(text),\n        last: (_a = params.last) !== null && _a !== void 0 ? _a : 1\n      },\n      messageId: messageId\n    }, params));\n  };\n  var sendSystemMessage = function (_a, last, messageId, params) {\n    var data = _a.data,\n      _b = _a.messageName,\n      mesName = _b === void 0 ? '' : _b;\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    send({\n      payload: __assign({\n        systemMessage: protoExports.SystemMessage.create({\n          data: JSON.stringify(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var sendVoice = function (data, last, messageId, mesName, params) {\n    if (last === void 0) {\n      last = true;\n    }\n    if (messageId === void 0) {\n      messageId = getMessageId();\n    }\n    if (params === void 0) {\n      params = {};\n    }\n    return send({\n      payload: __assign({\n        voice: protoExports.Voice.create({\n          data: new Uint8Array(data)\n        }),\n        messageName: mesName,\n        last: last ? 1 : -1\n      }, params),\n      messageId: messageId\n    });\n  };\n  var batch = function (cb) {\n    var batchingMessageId = getMessageId();\n    var lastMessageSent = false;\n    var checkLastMessageStatus = function (last) {\n      if (lastMessageSent) {\n        if (last) {\n          throw new Error(\"Can't send two last items in batch\");\n        } else {\n          throw new Error(\"Can't send messages in batch after last message have been sent\");\n        }\n      } else if (last) {\n        lastMessageSent = true;\n      }\n    };\n    var upgradedSendText = function () {\n      var _a = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        _a[_i] = arguments[_i];\n      }\n      var data = _a[0],\n        params = _a[1],\n        type = _a[2];\n      checkLastMessageStatus((params === null || params === void 0 ? void 0 : params.last) === 1);\n      return sendText(data, params, type, batchingMessageId);\n    };\n    var upgradedSendSystemMessage = function (data, last, params) {\n      checkLastMessageStatus(last);\n      return sendSystemMessage(data, last, batchingMessageId, params);\n    };\n    var upgradedSendVoice = function (data, last, mesName, params) {\n      checkLastMessageStatus(last);\n      return sendVoice(data, last, batchingMessageId, mesName, params);\n    };\n    var upgradedSendSettings = function (data, last, messageId) {\n      checkLastMessageStatus(last);\n      return sendSettings(data, last, messageId);\n    };\n    return cb({\n      sendText: upgradedSendText,\n      sendSystemMessage: upgradedSendSystemMessage,\n      sendVoice: upgradedSendVoice,\n      sendSettings: upgradedSendSettings,\n      messageId: batchingMessageId\n    });\n  };\n  return {\n    sendDevice: sendDevice,\n    sendInitialSettings: sendInitialSettings,\n    getHistoryRequest: getHistoryRequest,\n    sendCancel: sendCancel,\n    sendLegacyDevice: sendLegacyDevice,\n    sendMute: sendMute,\n    sendSettings: sendSettings,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    batch: batch\n  };\n};\nvar safeJSONParse = function (str, defaultValue) {\n  try {\n    return JSON.parse(str);\n  } catch (err) {\n    return defaultValue;\n  }\n};\nvar compileBasePayload = function (_a) {\n  var userId = _a.userId,\n    token = _a.token,\n    userChannel = _a.userChannel,\n    version = _a.version,\n    messageName = _a.messageName,\n    vpsToken = _a.vpsToken;\n  if (version < 3) {\n    return {\n      userId: userId,\n      token: token,\n      userChannel: userChannel,\n      messageName: messageName,\n      vpsToken: vpsToken,\n      version: version\n    };\n  }\n  return {\n    token: token,\n    messageName: messageName,\n    version: version\n  };\n};\nvar appendHeader = function (uint8Array) {\n  // Добавляем 4 байта в начало с длинной сообщения\n  var arrayBuffer = new ArrayBuffer(4);\n  var dataView = new DataView(arrayBuffer, 0);\n  dataView.setInt32(0, uint8Array.length, true);\n  var newUint8Array = new Uint8Array(4 + uint8Array.length);\n  newUint8Array.set(new Uint8Array(arrayBuffer));\n  newUint8Array.set(uint8Array, 4);\n  return newUint8Array;\n};\nvar removeHeader = function (uint8Array) {\n  // Убираем 4 байта в начале с длинной сообщения\n  var newUint8Array = new Uint8Array(uint8Array).slice(4);\n  return newUint8Array;\n};\nvar createProtocol = function (transport, _a) {\n  var logger = _a.logger,\n    getToken = _a.getToken,\n    getInitialMeta = _a.getInitialMeta,\n    params = __rest(_a, [\"logger\", \"getToken\", \"getInitialMeta\"]);\n  var configuration = __assign(__assign({}, params), {\n    token: ''\n  });\n  var url = configuration.url,\n    userId = configuration.userId,\n    userChannel = configuration.userChannel,\n    locale = configuration.locale,\n    device = configuration.device,\n    settings = configuration.settings,\n    legacyDevice = configuration.legacyDevice,\n    version = configuration.version,\n    messageName = configuration.messageName,\n    vpsToken = configuration.vpsToken;\n  var basePayload = compileBasePayload({\n    userId: userId,\n    token: '',\n    messageName: messageName,\n    vpsToken: vpsToken,\n    userChannel: userChannel,\n    version: version\n  });\n  var _b = createNanoEvents(),\n    on = _b.on,\n    emit = _b.emit;\n  var subscriptions = [];\n  var messageQueue = [];\n  var initMessageId; // ид инициализационного сообщения, отправим мессаджи в неинициализированный протокол\n  var currentSettings = {\n    device: device,\n    legacyDevice: legacyDevice,\n    settings: settings,\n    locale: locale\n  };\n  var currentMessageId = Date.now();\n  var status = 'closed';\n  var destroyed = false;\n  var clearReadyTimer; // ид таймера установки состояния ready\n  var cancelUpdatingSettingsWhenSocketReady = function () {}; // отменяет обновление настроек VPS при готовности сокета\n  var getMessageId = function () {\n    return currentMessageId++;\n  };\n  var send = function (message) {\n    var createdMessage = protoExports.Message.create(__assign(__assign({}, basePayload), message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'outcoming',\n      message: createdMessage\n    });\n    var encodedMessage = protoExports.Message.encode(createdMessage).finish();\n    var encodedMessageWithHeader = appendHeader(encodedMessage);\n    transport.send(encodedMessageWithHeader);\n    emit('outcoming', createdMessage);\n  };\n  var sendMessage = function (message) {\n    // отправляем инициализационные сообщения или все, когда сессия = ready\n    if (status === 'ready' || typeof initMessageId !== undefined && message.messageId === initMessageId) {\n      try {\n        send(message);\n        return;\n      } catch (_a) {\n        /* игнорируем ошибку, ожидаем что ниже сообщение упадет в очередь */\n      }\n    }\n    // накапливаем сообщения, отправим после успешного коннекта\n    messageQueue.push(message);\n    if (status === 'closed' && !destroyed) {\n      transport.open(url);\n    }\n  };\n  var _c = createClientMethods({\n      getMessageId: getMessageId,\n      sendMessage: sendMessage\n    }),\n    sendDeviceOriginal = _c.sendDevice,\n    sendInitialSettingsOriginal = _c.sendInitialSettings,\n    getHistoryRequestOriginal = _c.getHistoryRequest,\n    sendCancel = _c.sendCancel,\n    sendLegacyDeviceOriginal = _c.sendLegacyDevice,\n    sendMute = _c.sendMute,\n    sendSettingsOriginal = _c.sendSettings,\n    sendText = _c.sendText,\n    sendSystemMessage = _c.sendSystemMessage,\n    sendVoice = _c.sendVoice,\n    batch = _c.batch;\n  var sendDevice = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      device: data\n    });\n    return sendDeviceOriginal.apply(void 0, __spreadArray([data], args));\n  };\n  var sendInitialSettings = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    if (data.device && data.settings) {\n      currentSettings = __assign(__assign({}, currentSettings), {\n        device: data.device,\n        settings: data.settings,\n        locale: data.locale || undefined\n      });\n    }\n    return sendInitialSettingsOriginal.apply(void 0, __spreadArray([data], args));\n  };\n  var getHistoryRequest = function (data) {\n    var _a, _b;\n    if (data === void 0) {\n      data = {};\n    }\n    return getHistoryRequestOriginal({\n      device: currentSettings.device || null,\n      uuid: {\n        userId: ((_a = data.uuid) === null || _a === void 0 ? void 0 : _a.userId) || userId,\n        userChannel: ((_b = data.uuid) === null || _b === void 0 ? void 0 : _b.userChannel) || userChannel\n      },\n      history: __assign({}, data.history || {})\n    });\n  };\n  var sendLegacyDevice = function (data) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n    currentSettings = __assign(__assign({}, currentSettings), {\n      legacyDevice: data\n    });\n    return sendLegacyDeviceOriginal.apply(void 0, __spreadArray([data], args));\n  };\n  var updateDefaults = function (obj) {\n    Object.assign(basePayload, obj);\n    Object.assign(configuration, obj);\n  };\n  var updateDevice = function (obj) {\n    var _a, _b;\n    if (obj) {\n      var additionalInfo = obj.additionalInfo,\n        deviceOptions = __rest(obj, [\"additionalInfo\"]);\n      var oldInfo = ((_a = currentSettings.device) === null || _a === void 0 ? void 0 : _a.additionalInfo) ? safeJSONParse((_b = currentSettings.device) === null || _b === void 0 ? void 0 : _b.additionalInfo, {}) : {};\n      var newInfo = additionalInfo ? safeJSONParse(additionalInfo, {}) : {};\n      currentSettings.device = __assign(__assign(__assign({}, currentSettings.device), deviceOptions), {\n        additionalInfo: JSON.stringify(__assign(__assign({}, oldInfo), newInfo))\n      });\n    }\n  };\n  var updateSettings = function (obj) {\n    var isSocketReady = status === 'connected' || status === 'ready';\n    cancelUpdatingSettingsWhenSocketReady();\n    Object.assign(currentSettings.settings, obj);\n    if (!isSocketReady) {\n      cancelUpdatingSettingsWhenSocketReady = on('ready', function () {\n        return updateSettings(obj);\n      });\n      return;\n    }\n    sendSettingsOriginal(obj);\n  };\n  subscriptions.push(transport.on('connecting', function () {\n    status = 'connecting';\n  }));\n  subscriptions.push(transport.on('close', function () {\n    status = 'closed';\n  }));\n  subscriptions.push(transport.on('open', function () {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var _a, _b, _c, _d, e_1, meta, _e;\n      var _f;\n      var _g;\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 3,, 4]);\n            _a = getToken;\n            if (!_a) return [3 /*break*/, 2];\n            _c = (_b = Object).assign;\n            _d = [basePayload];\n            _f = {};\n            return [4 /*yield*/, getToken()];\n          case 1:\n            _a = _c.apply(_b, _d.concat([(_f.token = _h.sent(), _f)]));\n            _h.label = 2;\n          case 2:\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _h.sent();\n            emit('error', {\n              type: 'GET_TOKEN_ERROR',\n              message: (_g = e_1) === null || _g === void 0 ? void 0 : _g.message\n            });\n            return [2 /*return*/];\n          case 4:\n            Object.assign(configuration, {\n              token: basePayload.token\n            });\n            initMessageId = getMessageId();\n            if (!(version < 3)) return [3 /*break*/, 5];\n            if (version === 1 && currentSettings.legacyDevice) {\n              sendLegacyDevice(currentSettings.legacyDevice, false, initMessageId);\n            } else if (version === 2 && currentSettings.device) {\n              sendDevice(currentSettings.device, false, initMessageId);\n            }\n            sendSettingsOriginal(currentSettings.settings, true, initMessageId);\n            return [3 /*break*/, 9];\n          case 5:\n            if (!getInitialMeta) return [3 /*break*/, 7];\n            return [4 /*yield*/, getInitialMeta()];\n          case 6:\n            _e = _h.sent();\n            return [3 /*break*/, 8];\n          case 7:\n            _e = undefined;\n            _h.label = 8;\n          case 8:\n            meta = _e;\n            sendInitialSettings({\n              userId: userId,\n              userChannel: userChannel,\n              device: currentSettings.device,\n              settings: currentSettings.settings,\n              locale: version > 3 ? currentSettings.locale : undefined\n            }, true, initMessageId, {\n              meta: meta\n            });\n            _h.label = 9;\n          case 9:\n            status = 'connected';\n            window.clearTimeout(clearReadyTimer);\n            /// считаем коннект = ready, если по истечении таймаута сокет не был разорван\n            /// т.к бек может разрывать сокет, если с settings что-то не так\n            clearReadyTimer = window.setTimeout(function () {\n              if (status !== 'connected') {\n                return;\n              }\n              while (messageQueue.length > 0) {\n                var message = messageQueue.shift();\n                if (message) {\n                  send(message);\n                }\n              }\n              status = 'ready';\n              emit('ready');\n            }, 250);\n            logger === null || logger === void 0 ? void 0 : logger({\n              type: 'init',\n              params: __assign(__assign({}, configuration), currentSettings)\n            });\n            return [2 /*return*/];\n        }\n      });\n    });\n  }));\n  subscriptions.push(transport.on('message', function (message) {\n    var decodedMessage = protoExports.Message.decode(removeHeader(message));\n    logger === null || logger === void 0 ? void 0 : logger({\n      type: 'incoming',\n      message: decodedMessage\n    });\n    emit('incoming', decodedMessage);\n    if (decodedMessage.status) {\n      transport.close();\n    }\n  }));\n  return {\n    clearQueue: function () {\n      messageQueue.splice(0, messageQueue.length);\n    },\n    destroy: function () {\n      destroyed = true;\n      transport.close();\n      subscriptions.splice(0, subscriptions.length).map(function (unsubscribe) {\n        return unsubscribe();\n      });\n    },\n    on: on,\n    getHistoryRequest: getHistoryRequest,\n    getMessageId: getMessageId,\n    sendCancel: sendCancel,\n    sendMute: sendMute,\n    sendText: sendText,\n    sendSystemMessage: sendSystemMessage,\n    sendVoice: sendVoice,\n    send: sendMessage,\n    batch: batch,\n    changeConfiguration: updateDefaults,\n    changeDevice: updateDevice,\n    changeSettings: updateSettings,\n    reconnect: function () {\n      if (status !== 'closed') {\n        transport.reconnect(url); // даем время случиться close\n      } else {\n        transport.open(url);\n      }\n    },\n    init: function () {\n      // в отличии от reconnect не обрывает коннект если он в порядке\n      if (status === 'ready' && window.navigator.onLine) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        var subs = [];\n        subs.push(on('ready', function () {\n          subs.map(function (sub) {\n            return sub();\n          });\n          resolve();\n        }));\n        subs.push(transport.on('error', function () {\n          subs.map(function (sub) {\n            return sub();\n          });\n          reject(new Error('Network error'));\n        }));\n        transport.reconnect(url);\n      });\n    },\n    get currentMessageId() {\n      return currentMessageId;\n    },\n    get configuration() {\n      return configuration;\n    },\n    get status() {\n      return status;\n    }\n  };\n};\nexport { MessageNames as M, VpsVersion as V, appendHeader as a, commonjsRequire as b, commonjsGlobal as c, createProtocol as d, getDefaultExportFromCjs as g, protoExports as p, requireMinimal as r };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
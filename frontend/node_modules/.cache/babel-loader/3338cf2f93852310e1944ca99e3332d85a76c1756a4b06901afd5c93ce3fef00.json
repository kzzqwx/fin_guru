{"ast":null,"code":"var _CompatibleTypo;\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport React from 'react';\nimport { createGlobalStyle, ThemeProvider } from 'styled-components';\nimport { sberPortal, sberBox, mobile, sberPortalScale } from '@salutejs/plasma-tokens';\nimport { transformStyles } from '@salutejs/plasma-core';\nimport { standard, compatible } from '@salutejs/plasma-typo';\nimport { detectDevice, deviceScales } from '../../utils';\n\n/* stylelint-disable */\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Device/DeviceDetection');\nvar transformWithRoot = function transformWithRoot(typo) {\n  return \"\\n:root {\\n    \".concat(transformStyles(typo[':root']), \"\\n}\");\n};\nvar typoSizes = {\n  sberBox: /*#__PURE__*/createGlobalStyle([\"\", \"\"], /*#__PURE__*/transformWithRoot(sberBox)),\n  sberPortal: /*#__PURE__*/createGlobalStyle([\"\", \"\"], /*#__PURE__*/transformWithRoot(sberPortal)),\n  mobile: /*#__PURE__*/createGlobalStyle([\"\", \"\"], /*#__PURE__*/transformWithRoot(mobile))\n};\n/* stylelint-enable */\n\nvar StandardTypo = /*#__PURE__*/createGlobalStyle(standard);\nvar CompatibleTypo = /*#__PURE__*/createGlobalStyle(compatible);\n/**\n * Провайдер обязателен для использования, необходимо обернуть в него все приложение.\n *\n * Назначение - определяет, на какой *поверхности* (**устройстве**) запущено приложение.\n *\n * В зависимости от поверхности, применяет глобальные стили типографики,\n * подходящие данной платформе, ко всему приложению.\n *\n * Функцией определения по умолчанию тип поверхности определяется на основании `userAgent`,\n * при отсутствии `navigator` или `userAgent`, поверхность будет определен как `sberBox`.\n *\n * Имеется возможность передать провайдеру собственную логику определения девайса\n * с помощью пропса `detectDeviceCallback`.\n * При этом стоит помнить, что разрешены только 3 стандартных значения.\n */\nexport var DeviceThemeProvider = function DeviceThemeProvider(_ref) {\n  var theme = _ref.theme,\n    children = _ref.children,\n    _ref$detectDeviceCall = _ref.detectDeviceCallback,\n    detectDeviceCallback = _ref$detectDeviceCall === void 0 ? detectDevice : _ref$detectDeviceCall,\n    _ref$responsiveTypo = _ref.responsiveTypo,\n    responsiveTypo = _ref$responsiveTypo === void 0 ? false : _ref$responsiveTypo,\n    _ref$lowPerformance = _ref.lowPerformance,\n    lowPerformance = _ref$lowPerformance === void 0 ? false : _ref$lowPerformance,\n    _ref$breakWord = _ref.breakWord,\n    breakWord = _ref$breakWord === void 0 ? true : _ref$breakWord;\n  var deviceKind = detectDeviceCallback();\n  var deviceScale = deviceScales[deviceKind] || sberPortalScale;\n  var Typo = React.useMemo(function () {\n    return typoSizes[deviceKind];\n  }, [deviceKind]);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: _objectSpread(_objectSpread({}, theme), {}, {\n      deviceScale: deviceScale,\n      lowPerformance: lowPerformance,\n      breakWord: breakWord,\n      deviceKind: deviceKind\n    })\n  }, responsiveTypo ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StandardTypo, {\n    deviceScale: deviceScale,\n    breakWord: breakWord\n  }), _CompatibleTypo || (_CompatibleTypo = /*#__PURE__*/React.createElement(CompatibleTypo, null))) : /*#__PURE__*/React.createElement(Typo, null), children);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _excluded = [\"items\", \"children\", \"placement\", \"offset\", \"closeOnOverlayClick\", \"onToggle\", \"size\", \"view\", \"itemRole\", \"className\", \"listWidth\", \"listHeight\", \"listOverflow\", \"closeOnSelect\", \"onHover\", \"onItemSelect\", \"onItemClick\", \"trigger\", \"variant\", \"hasArrow\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useReducer } from 'react';\nimport { cx } from '../../utils';\nimport { pathReducer } from './reducers/pathReducer';\nimport { focusedPathReducer } from './reducers/focusedPathReducer';\nimport { DropdownInner } from './ui';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { Ul, StyledPopover, base } from './Dropdown.styles';\nimport { getPlacements, childrenWithProps } from './utils';\nimport { classes } from './Dropdown.tokens';\nimport { useKeyNavigation } from './hooks/useKeyboardNavigation';\nimport { useHashMaps } from './hooks/useHashMaps';\n\n/**\n * Выпадающий список.\n */\nexport var dropdownRoot = function dropdownRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (_ref, ref) {\n    var items = _ref.items,\n      children = _ref.children,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? [0, 0] : _ref$offset,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? true : _ref$closeOnOverlayCl,\n      onToggle = _ref.onToggle,\n      size = _ref.size,\n      view = _ref.view,\n      _ref$itemRole = _ref.itemRole,\n      itemRole = _ref$itemRole === void 0 ? 'treeitem' : _ref$itemRole,\n      className = _ref.className,\n      listWidth = _ref.listWidth,\n      listHeight = _ref.listHeight,\n      listOverflow = _ref.listOverflow,\n      _ref$closeOnSelect = _ref.closeOnSelect,\n      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,\n      onHover = _ref.onHover,\n      onItemSelect = _ref.onItemSelect,\n      onItemClick = _ref.onItemClick,\n      _ref$trigger = _ref.trigger,\n      trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'normal' : _ref$variant,\n      _ref$hasArrow = _ref.hasArrow,\n      hasArrow = _ref$hasArrow === void 0 ? true : _ref$hasArrow,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var _useReducer = useReducer(pathReducer, []),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      path = _useReducer2[0],\n      dispatchPath = _useReducer2[1];\n    var _useReducer3 = useReducer(focusedPathReducer, []),\n      _useReducer4 = _slicedToArray(_useReducer3, 2),\n      focusedPath = _useReducer4[0],\n      dispatchFocusedPath = _useReducer4[1];\n    var _useHashMaps = useHashMaps(items),\n      _useHashMaps2 = _slicedToArray(_useHashMaps, 2),\n      pathMap = _useHashMaps2[0],\n      focusedToValueMap = _useHashMaps2[1];\n    var handleGlobalToggle = function handleGlobalToggle(opened, event) {\n      if (opened) {\n        dispatchPath({\n          type: 'opened_first_level'\n        });\n      } else {\n        dispatchFocusedPath({\n          type: 'reset'\n        });\n        dispatchPath({\n          type: 'reset'\n        });\n      }\n      if (onToggle) {\n        onToggle(opened, event);\n      }\n    };\n    var _useKeyNavigation = useKeyNavigation({\n        focusedPath: focusedPath,\n        dispatchFocusedPath: dispatchFocusedPath,\n        path: path,\n        dispatchPath: dispatchPath,\n        pathMap: pathMap,\n        focusedToValueMap: focusedToValueMap,\n        handleGlobalToggle: handleGlobalToggle,\n        closeOnSelect: closeOnSelect,\n        onItemSelect: onItemSelect,\n        onItemClick: onItemClick\n      }),\n      onKeyDown = _useKeyNavigation.onKeyDown;\n    var isCurrentListOpen = Boolean(path[0]);\n    var getActiveDescendant = function getActiveDescendant() {\n      var _focusedToValueMap$ge;\n      var focusedPathAsString = focusedPath.reduce(function (acc, n) {\n        return \"\".concat(acc, \"/\").concat(n);\n      }, '').replace(/^(\\/)/, '');\n      return focusedToValueMap === null || focusedToValueMap === void 0 || (_focusedToValueMap$ge = focusedToValueMap.get(focusedPathAsString)) === null || _focusedToValueMap$ge === void 0 ? void 0 : _focusedToValueMap$ge.value.toString();\n    };\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      className: cx(className, classes.dropdownRoot),\n      ref: ref,\n      view: view,\n      size: size,\n      items: items\n    }, rest), /*#__PURE__*/React.createElement(StyledPopover, {\n      isOpen: isCurrentListOpen,\n      usePortal: false,\n      onToggle: handleGlobalToggle,\n      offset: offset,\n      placement: getPlacements(placement),\n      trigger: trigger,\n      closeOnOverlayClick: closeOnOverlayClick,\n      isFocusTrapped: false,\n      target: childrenWithProps(children, {\n        role: 'combobox',\n        'aria-controls': 'tree_level_1',\n        'aria-expanded': isCurrentListOpen,\n        'aria-activedescendant': getActiveDescendant(),\n        onKeyDown: onKeyDown\n      }),\n      preventOverflow: false\n    }, /*#__PURE__*/React.createElement(Ul, {\n      listHeight: listHeight,\n      listOverflow: listOverflow,\n      role: \"tree\",\n      id: \"tree_level_1\",\n      listWidth: listWidth\n    }, items.map(function (item, index) {\n      return /*#__PURE__*/React.createElement(DropdownInner, {\n        key: \"\".concat(index, \"/0\"),\n        item: item,\n        currentLevel: 0,\n        focusedPath: focusedPath,\n        trigger: trigger,\n        path: path,\n        dispatchPath: dispatchPath,\n        index: index,\n        itemRole: itemRole,\n        listHeight: listHeight,\n        listOverflow: listOverflow,\n        handleGlobalToggle: handleGlobalToggle,\n        closeOnSelect: closeOnSelect,\n        onHover: onHover,\n        onItemSelect: onItemSelect,\n        onItemClick: onItemClick,\n        listWidth: listWidth,\n        variant: variant,\n        hasArrow: hasArrow\n      });\n    }))));\n  });\n};\nexport var dropdownConfig = {\n  name: 'Dropdown',\n  tag: 'div',\n  layout: dropdownRoot,\n  base: base,\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    }\n  },\n  defaults: {\n    view: 'default',\n    size: 'm'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
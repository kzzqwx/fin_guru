{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useMemo } from 'react';\nimport { getDateFromValue, getDaysInMonth, getMatrix, getNextDate, getOffsetDayInWeek, getPrevDate, IsCurrentDay, isDayInRange, isSelectedDay } from '../utils';\n/**\n * Метод возвращающий массив дней в предыдущем месяце.\n */\nvar getDaysInPrevMonth = function getDaysInPrevMonth(date, offsetDayInWeek, value) {\n  var _getPrevDate = getPrevDate(date.year, date.monthIndex),\n    _getPrevDate2 = _slicedToArray(_getPrevDate, 2),\n    prevYear = _getPrevDate2[0],\n    prevMonth = _getPrevDate2[1];\n  var daysInPrevMonth = getDaysInMonth(prevMonth, prevYear);\n  return Array.from(Array(offsetDayInWeek), function (_, i) {\n    return {\n      isCurrent: false,\n      isSelected: false,\n      isDayInCurrentMonth: false,\n      inRange: Array.isArray(value) ? isDayInRange(prevYear, prevMonth, daysInPrevMonth - (offsetDayInWeek - i) + 1, value) : false,\n      date: {\n        day: daysInPrevMonth - (offsetDayInWeek - i) + 1,\n        monthIndex: prevMonth,\n        year: prevYear\n      }\n    };\n  });\n};\n\n/**\n * Метод возвращающий массив дней в текущем месяце.\n */\nvar getDaysInCurrentMonth = function getDaysInCurrentMonth(date, daysInMonth, value) {\n  return Array.from(Array(daysInMonth), function (_, i) {\n    return {\n      isCurrent: IsCurrentDay(date, i + 1),\n      isSelected: Array.isArray(value) ? Boolean(value.find(function (v) {\n        return isSelectedDay(date, i + 1, v);\n      })) : isSelectedDay(date, i + 1, value),\n      isDayInCurrentMonth: true,\n      inRange: Array.isArray(value) ? isDayInRange(date.year, date.monthIndex, i + 1, value) : false,\n      date: {\n        day: i + 1,\n        monthIndex: date.monthIndex,\n        year: date.year\n      }\n    };\n  });\n};\n\n/**\n * Метод возвращающий массив дней в следующем месяце.\n */\nvar getDaysInNextMonth = function getDaysInNextMonth(date, daysInMonth, offsetDayInWeek, value) {\n  var _getNextDate = getNextDate(date.year, date.monthIndex),\n    _getNextDate2 = _slicedToArray(_getNextDate, 2),\n    nextYear = _getNextDate2[0],\n    nextMonthIndex = _getNextDate2[1];\n  var visibleDayCount = 42;\n  var restDaysInCalendar = visibleDayCount - (daysInMonth + offsetDayInWeek);\n  return Array.from(Array(restDaysInCalendar), function (_, i) {\n    return {\n      isCurrent: false,\n      isSelected: false,\n      isDayInCurrentMonth: false,\n      inRange: Array.isArray(value) ? isDayInRange(nextYear, nextMonthIndex, i + 1, value) : false,\n      date: {\n        day: i + 1,\n        monthIndex: nextMonthIndex,\n        year: nextYear\n      }\n    };\n  });\n};\nvar isDisabledArrowLeft = function isDisabledArrowLeft(date, min) {\n  var currentDate = new Date(date);\n  currentDate.setDate(currentDate.getDate() - 1);\n  return min && min >= currentDate || min && min >= date;\n};\nvar isDisabledArrowRight = function isDisabledArrowRight(date, max) {\n  var currentDate = new Date(date);\n  currentDate.setDate(currentDate.getDate() + 1);\n  return max && max <= currentDate || max && max <= date;\n};\nvar isDisabledArrowUp = function isDisabledArrowUp(date, min) {\n  var currentDate = new Date(date);\n  currentDate.setDate(date.getDate() - 7);\n  return min && min >= currentDate;\n};\nvar isDisabledArrowDown = function isDisabledArrowDown(date, max) {\n  var currentDate = new Date(date);\n  currentDate.setDate(date.getDate() + 7);\n  return max && max <= currentDate;\n};\nvar isDisabledNextMonth = function isDisabledNextMonth(_ref, max) {\n  var year = _ref.year,\n    monthIndex = _ref.monthIndex,\n    day = _ref.day;\n  if (!max) {\n    return false;\n  }\n  var currentDate = new Date(year, monthIndex, day);\n  currentDate.setDate(currentDate.getDate() + 1);\n  var isOut = true;\n  while (isOut && currentDate <= max) {\n    isOut = max <= currentDate;\n    currentDate.setDate(currentDate.getDate() + 1);\n  }\n  return isOut;\n};\nvar isDisabledPreviousMonth = function isDisabledPreviousMonth(_ref2, min) {\n  var year = _ref2.year,\n    monthIndex = _ref2.monthIndex,\n    day = _ref2.day;\n  if (!min) {\n    return false;\n  }\n  var currentDate = new Date(year, monthIndex, day);\n  currentDate.setDate(currentDate.getDate() - 1);\n  var isOut = true;\n  while (isOut && currentDate >= min) {\n    isOut = min >= currentDate;\n    currentDate.setDate(currentDate.getDate() - 1);\n  }\n  return isOut;\n};\nvar getDisabledArrowKey = function getDisabledArrowKey(currentDate, min, max) {\n  var disabledArrowKey = [];\n  if (isDisabledArrowLeft(currentDate, min)) {\n    disabledArrowKey.push('left');\n  }\n  if (isDisabledArrowRight(currentDate, max)) {\n    disabledArrowKey.push('right');\n  }\n  if (isDisabledArrowDown(currentDate, max)) {\n    disabledArrowKey.push('down');\n  }\n  if (isDisabledArrowUp(currentDate, min)) {\n    disabledArrowKey.push('up');\n  }\n  return disabledArrowKey.join(',');\n};\nvar getDisabledMonths = function getDisabledMonths(list, min, max) {\n  var disabledMonth = [];\n  if (isDisabledPreviousMonth(list[0], min)) {\n    disabledMonth.push('previous');\n  }\n  if (isDisabledNextMonth(list[list.length - 1], max)) {\n    disabledMonth.push('next');\n  }\n  return disabledMonth.join(',');\n};\n\n/**\n * Метод для получения набора неповторяющихся дат.\n */\nvar getPropsMap = function getPropsMap(props) {\n  return props.reduce(function (acc, prop) {\n    var _getDateFromValue = getDateFromValue(prop.date),\n      year = _getDateFromValue.year,\n      monthIndex = _getDateFromValue.monthIndex,\n      day = _getDateFromValue.day;\n    var key = \"\".concat(year, \"-\").concat(monthIndex, \"-\").concat(day);\n    var propList = acc.get(key) || [];\n    propList.push(prop);\n    return acc.set(key, propList);\n  }, new Map());\n};\n\n/**\n * Метод модифицирующий дни (добавляющий свойства events и disabled).\n */\nvar getDaysWithModifications = function getDaysWithModifications(days) {\n  var eventList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var disabledList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var min = arguments.length > 3 ? arguments[3] : undefined;\n  var max = arguments.length > 4 ? arguments[4] : undefined;\n  var includeEdgeDates = arguments.length > 5 ? arguments[5] : undefined;\n  var eventsMap = getPropsMap(eventList);\n  var disabledDaysMap = getPropsMap(disabledList);\n  var daysList = days.filter(function (_ref3) {\n    var isDayInCurrentMonth = _ref3.isDayInCurrentMonth;\n    return isDayInCurrentMonth;\n  }).map(function (_ref4) {\n    var date = _ref4.date;\n    return date;\n  });\n  var disabledMonths = getDisabledMonths(daysList, min, max);\n  return days.map(function (dayItem) {\n    var date = dayItem.date;\n    var year = date.year,\n      monthIndex = date.monthIndex,\n      day = date.day;\n    var keyDay = \"\".concat(year, \"-\").concat(monthIndex, \"-\").concat(day);\n    var currentDate = new Date(year, monthIndex, day);\n    var minValue = min && (includeEdgeDates ? min > currentDate : min >= currentDate);\n    var maxValue = max && (includeEdgeDates ? max < currentDate : max <= currentDate);\n    var isOutOfMinMaxRange = minValue || maxValue;\n    dayItem.events = eventsMap.get(keyDay);\n    dayItem.disabled = disabledDaysMap.has(keyDay) || isOutOfMinMaxRange;\n    dayItem.isOutOfMinMaxRange = isOutOfMinMaxRange;\n    dayItem.disabledArrowKey = getDisabledArrowKey(currentDate, min, max);\n    dayItem.disabledMonths = disabledMonths;\n    return dayItem;\n  });\n};\n\n/**\n * Хук для получения списка дней.\n */\nexport var useDays = function useDays(date, value, eventList, disabledList, min, max, includeEdgeDates) {\n  return useMemo(function () {\n    var monthIndex = date.monthIndex,\n      year = date.year;\n    var daysInMonth = getDaysInMonth(monthIndex, year);\n    var offsetDayInWeek = getOffsetDayInWeek(monthIndex, year);\n    var days = [].concat(_toConsumableArray(getDaysInPrevMonth(date, offsetDayInWeek, value)), _toConsumableArray(getDaysInCurrentMonth(date, daysInMonth, value)), _toConsumableArray(getDaysInNextMonth(date, daysInMonth, offsetDayInWeek, value)));\n    if (eventList !== null && eventList !== void 0 && eventList.length || disabledList !== null && disabledList !== void 0 && disabledList.length || max || min) {\n      var modifiedDays = getDaysWithModifications(days, eventList, disabledList, min, max, includeEdgeDates);\n      return getMatrix(modifiedDays);\n    }\n    return getMatrix(days);\n  }, [date, value, eventList, disabledList, max, min]);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
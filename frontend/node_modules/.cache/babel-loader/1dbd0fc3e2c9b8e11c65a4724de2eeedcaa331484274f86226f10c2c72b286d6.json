{"ast":null,"code":"var _IconDisclosureLeft, _IconDisclosureRight;\nimport React, { useCallback, useMemo } from 'react';\nimport { IconDisclosureLeft, IconDisclosureRight } from '../../../_Icon';\nimport { CalendarState } from '../../store/types';\nimport { getCalendarType, MONTH_NAMES, YEAR_RENDER_COUNT } from '../../utils';\nimport { StyledArrow, StyledArrows, StyledCalendarHeader, StyledHeader, StyledHeaderDouble, StyledNavigation } from './CalendarHeader.styles';\n\n/**\n * Компонент шапки календаря.\n */\nexport var CalendarHeader = function CalendarHeader(_ref) {\n  var _ref$type = _ref.type,\n    type = _ref$type === void 0 ? 'Days' : _ref$type,\n    _ref$startYear = _ref.startYear,\n    startYear = _ref$startYear === void 0 ? 0 : _ref$startYear,\n    firstDate = _ref.firstDate,\n    secondDate = _ref.secondDate,\n    isDouble = _ref.isDouble,\n    onPrev = _ref.onPrev,\n    onNext = _ref.onNext,\n    onUpdateCalendarState = _ref.onUpdateCalendarState;\n  var handleCalendarState = useCallback(function () {\n    if (type === CalendarState.Days) {\n      onUpdateCalendarState === null || onUpdateCalendarState === void 0 || onUpdateCalendarState(CalendarState.Months, [3, 2]);\n    }\n    if (type === CalendarState.Months) {\n      onUpdateCalendarState === null || onUpdateCalendarState === void 0 || onUpdateCalendarState(CalendarState.Years, [3, 2]);\n    }\n  }, [type, onUpdateCalendarState]);\n  var getHeaderContent = useCallback(function (date) {\n    if (!date) {\n      return '';\n    }\n    if (type === CalendarState.Days) {\n      return \"\".concat(MONTH_NAMES[date.monthIndex], \" \").concat(date.year);\n    }\n    if (type === CalendarState.Months) {\n      return \"\".concat(date.year);\n    }\n    if (type === CalendarState.Years) {\n      return \"\".concat(startYear, \"\\u2014\").concat(startYear + YEAR_RENDER_COUNT - 1);\n    }\n    return '';\n  }, [type, startYear]);\n  var currentCalendarType = getCalendarType(isDouble ? CalendarState.Days : type);\n  var PreviousButton = useMemo(function () {\n    return /*#__PURE__*/React.createElement(StyledArrow, {\n      type: \"button\",\n      \"aria-label\": \"\\u041F\\u0440\\u0435\\u0434\\u044B\\u0434\\u0443\\u0449\\u0438\\u0439 \".concat(currentCalendarType),\n      tabIndex: 0,\n      onClick: function onClick() {\n        return onPrev();\n      }\n    }, _IconDisclosureLeft || (_IconDisclosureLeft = /*#__PURE__*/React.createElement(IconDisclosureLeft, null)));\n  }, [currentCalendarType, onPrev]);\n  var NextButton = useMemo(function () {\n    return /*#__PURE__*/React.createElement(StyledArrow, {\n      type: \"button\",\n      \"aria-label\": \"\\u0421\\u043B\\u0435\\u0434\\u0443\\u044E\\u0449\\u0438\\u0439 \".concat(currentCalendarType),\n      tabIndex: 0,\n      onClick: function onClick() {\n        return onNext();\n      }\n    }, _IconDisclosureRight || (_IconDisclosureRight = /*#__PURE__*/React.createElement(IconDisclosureRight, null)));\n  }, [currentCalendarType, onNext]);\n  return /*#__PURE__*/React.createElement(StyledCalendarHeader, null, isDouble ? /*#__PURE__*/React.createElement(StyledNavigation, null, PreviousButton, /*#__PURE__*/React.createElement(StyledHeaderDouble, {\n    \"aria-live\": \"polite\"\n  }, getHeaderContent(firstDate)), /*#__PURE__*/React.createElement(StyledHeaderDouble, {\n    \"aria-live\": \"polite\"\n  }, getHeaderContent(secondDate)), NextButton) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledHeader, {\n    type: \"button\",\n    \"aria-live\": \"polite\",\n    id: \"id-grid-label\",\n    onClick: handleCalendarState,\n    tabIndex: 0\n  }, getHeaderContent(firstDate)), /*#__PURE__*/React.createElement(StyledArrows, null, PreviousButton, NextButton)));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
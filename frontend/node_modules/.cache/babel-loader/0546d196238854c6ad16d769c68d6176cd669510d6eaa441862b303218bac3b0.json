{"ast":null,"code":"var _excluded = [\"id\", \"disabled\", \"status\", \"label\", \"placeholder\", \"contentLeft\", \"contentRight\", \"caption\", \"helperText\", \"style\", \"className\", \"size\", \"view\", \"onChange\", \"onKeyUp\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { FieldHelper } from '@salutejs/plasma-core';\nimport { TextFieldView } from '../../types';\nimport { Placeholder } from './Placeholder';\nimport { Input } from './Input';\nimport { Field, FieldWrapper } from './Field';\nimport { Content } from './Content';\nimport { Caption } from './Caption';\nimport { textFieldProps } from './TextField.props';\n\n// eslint-disable-next-line prefer-arrow-callback\nexport var TextFieldB2C = /*#__PURE__*/forwardRef(function TextField(_ref, ref) {\n  var id = _ref.id,\n    disabled = _ref.disabled,\n    status = _ref.status,\n    label = _ref.label,\n    placeholderInput = _ref.placeholder,\n    contentLeft = _ref.contentLeft,\n    contentRight = _ref.contentRight,\n    caption = _ref.caption,\n    helperText = _ref.helperText,\n    style = _ref.style,\n    className = _ref.className,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 'm' : _ref$size,\n    view = _ref.view,\n    onChange = _ref.onChange,\n    onKeyUp = _ref.onKeyUp,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var placeholder = label || placeholderInput;\n  var hasTextFieldDefaultView = view === TextFieldView[\"default\"];\n  var withCaption = !view || hasTextFieldDefaultView;\n  var withoutCaption = !caption && !hasTextFieldDefaultView;\n  var captionOrPlaceholder = !withCaption ? caption : placeholder;\n  var currentId = id ? \"\".concat(id, \"-label\") : undefined;\n  var ariaDescribedBy = id ? \"\".concat(id, \"-helpertext\") : undefined;\n  return /*#__PURE__*/React.createElement(Field, {\n    $disabled: disabled,\n    $isContentLeft: Boolean(contentLeft),\n    $isContentRight: Boolean(contentRight),\n    $isHelper: Boolean(helperText),\n    withDefaultPadding: withCaption || withoutCaption,\n    properties: textFieldProps[size],\n    contentLeft: contentLeft,\n    status: status,\n    style: style,\n    className: className\n  }, /*#__PURE__*/React.createElement(Caption, {\n    visible: withCaption,\n    id: currentId,\n    caption: caption\n  }), /*#__PURE__*/React.createElement(FieldWrapper, {\n    status: status\n  }, contentLeft && /*#__PURE__*/React.createElement(Content, {\n    pos: \"left\"\n  }, contentLeft), /*#__PURE__*/React.createElement(Input, _extends({\n    ref: ref,\n    id: id,\n    placeholder: placeholder,\n    disabled: disabled,\n    status: status,\n    \"aria-labelledby\": currentId,\n    \"aria-describedby\": ariaDescribedBy,\n    onChange: onChange,\n    onKeyUp: onKeyUp\n  }, rest)), captionOrPlaceholder && /*#__PURE__*/React.createElement(Placeholder, {\n    withCaption: withCaption,\n    visible: size !== 'xs',\n    htmlFor: id\n  }, captionOrPlaceholder), contentRight && /*#__PURE__*/React.createElement(Content, {\n    pos: \"right\"\n  }, contentRight)), helperText && /*#__PURE__*/React.createElement(FieldHelper, {\n    id: ariaDescribedBy\n  }, helperText));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
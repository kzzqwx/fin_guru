{"ast":null,"code":"var _excluded = [\"size\", \"view\", \"isActive\", \"selected\", \"disabled\", \"pilled\", \"children\", \"contentLeft\", \"contentRight\", \"animated\", \"onIndexChange\", \"itemIndex\", \"tabIndex\", \"className\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useRef, useContext, useEffect, useCallback } from 'react';\nimport { useForkRef } from '@salutejs/plasma-core';\nimport { classes } from '../../tokens';\nimport { cx } from '../../../../utils';\nimport { TabsContext } from '../../TabsContext';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as pilledCSS } from './variations/_pilled/base';\nimport { base as disabledCSS } from './variations/_disabled/base';\nimport { LeftContent, RightContent, StyledContent, base } from './TabItem.styles';\nexport var tabItemRoot = function tabItemRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (props, outerRef) {\n    var size = props.size,\n      view = props.view,\n      isActive = props.isActive,\n      selected = props.selected,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$pilled = props.pilled,\n      pilled = _props$pilled === void 0 ? false : _props$pilled,\n      children = props.children,\n      contentLeft = props.contentLeft,\n      contentRight = props.contentRight,\n      _props$animated = props.animated,\n      animated = _props$animated === void 0 ? true : _props$animated,\n      onIndexChange = props.onIndexChange,\n      itemIndex = props.itemIndex,\n      tabIndex = props.tabIndex,\n      className = props.className,\n      rest = _objectWithoutProperties(props, _excluded);\n    var innerRef = useRef(null);\n    var ref = useForkRef(outerRef, innerRef);\n    var refs = useContext(TabsContext);\n    var role = 'tab';\n    var pilledAttr = view !== 'clear' && pilled;\n    var animatedClass = animated ? classes.tabItemAnimated : undefined;\n    var pilledClass = pilledAttr ? classes.tabsPilled : undefined;\n    var selectedClass = isActive || selected ? classes.selectedTabsItem : undefined;\n    var hasKeyNavigation = itemIndex !== undefined && onIndexChange !== undefined;\n    var navigationTabIndex = !disabled && (refs === null || refs === void 0 ? void 0 : refs.current) === itemIndex ? 0 : -1;\n    useEffect(function () {\n      if (!refs) {\n        return;\n      }\n      refs.register(innerRef);\n      return function () {\n        return refs.unregister(innerRef);\n      };\n    }, [refs]);\n    var onItemFocus = useCallback(function (event) {\n      if (!hasKeyNavigation && innerRef !== null && innerRef !== void 0 && innerRef.current) {\n        innerRef.current.scrollTo({\n          top: 0,\n          left: innerRef.current.offsetLeft,\n          behavior: 'smooth'\n        });\n        return;\n      }\n      if (disabled || !refs) {\n        return;\n      }\n      var focusIndex = refs.items.findIndex(function (itemRef) {\n        return itemRef.current === event.target;\n      });\n      if (focusIndex === refs.current) {\n        return;\n      }\n      onIndexChange === null || onIndexChange === void 0 || onIndexChange(focusIndex);\n      refs.setCurrent(focusIndex);\n    }, [refs, innerRef, onIndexChange, disabled]);\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      ref: ref,\n      disabled: disabled,\n      pilled: pilled,\n      role: role,\n      view: view,\n      size: size,\n      onFocus: onItemFocus,\n      tabIndex: hasKeyNavigation ? navigationTabIndex : tabIndex,\n      className: cx(pilledClass, selectedClass, animatedClass, className)\n    }, rest), /*#__PURE__*/React.createElement(React.Fragment, null, contentLeft && /*#__PURE__*/React.createElement(LeftContent, {\n      className: classes.tabLeftContent\n    }, contentLeft), /*#__PURE__*/React.createElement(StyledContent, {\n      className: classes.tabContent\n    }, children), contentRight && /*#__PURE__*/React.createElement(RightContent, {\n      className: classes.tabRightContent\n    }, contentRight)));\n  });\n};\nexport var tabItemConfig = {\n  name: 'TabItem',\n  tag: 'button',\n  layout: tabItemRoot,\n  base: base,\n  variations: {\n    size: {\n      css: sizeCSS\n    },\n    view: {\n      css: viewCSS\n    },\n    disabled: {\n      css: disabledCSS,\n      attrs: true\n    },\n    pilled: {\n      css: pilledCSS\n    }\n  },\n  defaults: {\n    view: 'default'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _excluded = [\"stepSize\", \"onChangeCommitted\", \"onChange\", \"xPosition\", \"min\", \"max\", \"bounds\", \"zIndex\", \"disabled\", \"side\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useRef, useCallback, forwardRef } from 'react';\nimport styled from 'styled-components';\nimport Draggable from 'react-draggable';\nimport { getSliderThumbValue, getOffsets } from './utils';\nimport { Thumb } from './ThumbBase';\n\n// TODO: PLASMA-1707\n\nvar HandleStyled = /*#__PURE__*/styled.div.withConfig({\n  componentId: \"plasma__sc-e25rt8-0\"\n})([\"cursor:pointer;position:absolute;z-index:1;top:0;left:0;\"]);\nexport var Handle = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var stepSize = _ref.stepSize,\n    onChangeCommitted = _ref.onChangeCommitted,\n    onChange = _ref.onChange,\n    xPosition = _ref.xPosition,\n    min = _ref.min,\n    max = _ref.max,\n    _ref$bounds = _ref.bounds,\n    bounds = _ref$bounds === void 0 ? [] : _ref$bounds,\n    zIndex = _ref.zIndex,\n    disabled = _ref.disabled,\n    side = _ref.side,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var lastOnChangeValue = useRef();\n  var currentSliderValue = (lastOnChangeValue === null || lastOnChangeValue === void 0 ? void 0 : lastOnChangeValue.current) || rest.value;\n  var onDrag = useCallback(function (_, data) {\n    if (onChange) {\n      var newValue = getSliderThumbValue(data.x, stepSize, min, max);\n      if (lastOnChangeValue.current !== newValue) {\n        onChange(newValue, data);\n        lastOnChangeValue.current = newValue;\n      }\n    }\n  }, [onChange, stepSize, min, max]);\n  var onStop = useCallback(function (_, data) {\n    var newValue = getSliderThumbValue(data.x, stepSize, min, max);\n    onChangeCommitted(newValue, data);\n  }, [onChangeCommitted, stepSize, min, max]);\n  var _getOffsets = getOffsets(ref, side),\n    _getOffsets2 = _slicedToArray(_getOffsets, 2),\n    offsetLeft = _getOffsets2[0],\n    offsetRight = _getOffsets2[1];\n  var _bounds = _slicedToArray(bounds, 2),\n    leftValueBound = _bounds[0],\n    rightValueBound = _bounds[1];\n  var leftPositionBound = leftValueBound ? (leftValueBound - min) * stepSize : null;\n  var rightPositionBound = rightValueBound ? (rightValueBound - min) * stepSize : null;\n  var position = typeof xPosition === 'number' ? {\n    x: xPosition,\n    y: 0\n  } : undefined;\n  var tabIndex = disabled ? -1 : 0;\n  var computedBounds = {\n    left: (leftPositionBound !== null && leftPositionBound !== void 0 ? leftPositionBound : 0) + offsetLeft,\n    right: (rightPositionBound !== null && rightPositionBound !== void 0 ? rightPositionBound : stepSize * (max - min)) - offsetRight\n  };\n  return /*#__PURE__*/React.createElement(Draggable, {\n    axis: \"x\",\n    bounds: computedBounds,\n    grid: [stepSize, 1],\n    onStop: onStop,\n    onDrag: onDrag,\n    position: position,\n    disabled: disabled\n  }, /*#__PURE__*/React.createElement(HandleStyled, {\n    ref: ref,\n    style: {\n      zIndex: zIndex\n    }\n  }, /*#__PURE__*/React.createElement(Thumb, _extends({\n    tabIndex: tabIndex,\n    min: min,\n    max: max,\n    value: currentSliderValue,\n    stepSize: stepSize,\n    onChangeCommitted: onChangeCommitted,\n    xPosition: xPosition,\n    disabled: disabled,\n    bounds: computedBounds\n  }, rest))));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _excluded = [\"id\", \"placement\", \"offset\", \"frame\", \"setVisible\", \"children\", \"role\", \"zIndex\", \"animationInfo\", \"className\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback, forwardRef, useRef } from 'react';\nimport { useForkRef } from '@salutejs/plasma-core';\nimport { usePopupContext } from './PopupContext';\nimport { PopupRootContainer, PopupView } from './Popup.styles';\nimport { classes } from './Popup.tokens';\n\n/**\n * Корень Popup.\n * Управляет показом/скрытием и анимацией всплывающего окна.\n */\nexport var PopupRoot = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n    placement = _ref.placement,\n    offset = _ref.offset,\n    frame = _ref.frame,\n    setVisible = _ref.setVisible,\n    children = _ref.children,\n    role = _ref.role,\n    zIndex = _ref.zIndex,\n    animationInfo = _ref.animationInfo,\n    className = _ref.className,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var contentRef = useRef(null);\n  var innerRef = useForkRef(contentRef, ref);\n  var popupController = usePopupContext();\n  var handleAnimationEnd = useCallback(function (e) {\n    if (!contentRef || e.target !== contentRef.current) {\n      return;\n    }\n    e.stopPropagation();\n    if (animationInfo !== null && animationInfo !== void 0 && animationInfo.endAnimation) {\n      popupController.unregister(id);\n      setVisible(false);\n      animationInfo.setEndAnimation(false);\n    }\n  }, [popupController.unregister, animationInfo === null || animationInfo === void 0 ? void 0 : animationInfo.endAnimation, setVisible]);\n  return /*#__PURE__*/React.createElement(PopupRootContainer, _extends({\n    className: classes.root,\n    ref: innerRef,\n    placement: placement,\n    frame: frame,\n    offset: offset,\n    zIndex: zIndex,\n    onAnimationEnd: handleAnimationEnd,\n    onTransitionEnd: handleAnimationEnd\n  }, rest), /*#__PURE__*/React.createElement(PopupView, {\n    role: role\n  }, children));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport React from 'react';\nimport throttle from 'lodash.throttle';\nimport { useRemoteListener } from '../../hooks';\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Carousel/Carousel.hooks');\nvar throttlingParamsDefault = {\n  leading: true,\n  trailing: false\n};\n\n/**\n * Хук для навигации. Слушает нажатие кнопок на пульте/клавиатуре.\n */\nexport function useRemoteHandlers(_ref) {\n  var _ref$initialIndex = _ref.initialIndex,\n    initialIndex = _ref$initialIndex === void 0 ? 0 : _ref$initialIndex,\n    axis = _ref.axis,\n    delay = _ref.delay,\n    longDelay = _ref.longDelay,\n    min = _ref.min,\n    max = _ref.max,\n    _ref$count = _ref.count,\n    count = _ref$count === void 0 ? 1 : _ref$count,\n    _ref$longCount = _ref.longCount,\n    longCount = _ref$longCount === void 0 ? 5 : _ref$longCount,\n    _ref$throttlingParams = _ref.throttlingParams,\n    throttlingParams = _ref$throttlingParams === void 0 ? throttlingParamsDefault : _ref$throttlingParams;\n  var indexState = React.useState(initialIndex);\n  var _indexState = _slicedToArray(indexState, 2),\n    setIndex = _indexState[1];\n  var step = React.useCallback(throttle(function (cmd) {\n    return setIndex(function (prevIndex) {\n      if (cmd === '+') {\n        return prevIndex + count <= max ? prevIndex + count : min;\n      }\n      return prevIndex - count >= min ? prevIndex - count : max;\n    });\n  }, delay, throttlingParams), [min, max]);\n  var jump = React.useCallback(throttle(function (cmd) {\n    return setIndex(function (prevIndex) {\n      if (cmd === '+') {\n        return prevIndex + longCount <= max ? prevIndex + longCount : min;\n      }\n      return prevIndex - longCount >= min ? prevIndex - longCount : max;\n    });\n  }, longDelay, throttlingParams), [min, max]);\n  useRemoteListener(function (key, ev) {\n    ev.preventDefault();\n    if (axis === 'x') {\n      switch (key) {\n        case 'LEFT':\n          step('-');\n          break;\n        case 'RIGHT':\n          step('+');\n          break;\n        case 'LONG_LEFT':\n          jump('-');\n          break;\n        case 'LONG_RIGHT':\n          jump('+');\n          break;\n        default:\n          break;\n      }\n    } else {\n      switch (key) {\n        case 'UP':\n          step('-');\n          break;\n        case 'DOWN':\n          step('+');\n          break;\n        case 'LONG_UP':\n          jump('-');\n          break;\n        case 'LONG_DOWN':\n          jump('+');\n          break;\n        default:\n          break;\n      }\n    }\n  });\n  return indexState;\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
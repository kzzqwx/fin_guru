{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nimport { FocusManager } from '../utils/focusManager';\nimport { focusSelector, isFocusable, isTabble } from '../utils/tabbable';\nimport { scopeTab } from '../utils/scopeTab';\n\n// Находим элемент для фокуса\nvar getFocusElement = function getFocusElement(node, firstFocusSelector) {\n  var focusElement = null;\n  if (firstFocusSelector) {\n    if (typeof firstFocusSelector === 'string') {\n      focusElement = node.querySelector(firstFocusSelector);\n    } else if (firstFocusSelector.current) {\n      focusElement = firstFocusSelector.current;\n    }\n  }\n  if (!focusElement) {\n    var children = Array.from(node.querySelectorAll(focusSelector));\n    focusElement = children.find(function (el) {\n      return isTabble(el);\n    }) || null;\n  }\n\n  // Если ничего не нашлось, то может ли сама нода быть под фокусом\n  if (!focusElement && isFocusable(node)) {\n    focusElement = node;\n  }\n  return focusElement;\n};\nvar processNode = function processNode(node, firstFocusSelector) {\n  var focusElement = getFocusElement(node, firstFocusSelector);\n  if (focusElement) {\n    focusElement.focus();\n  }\n};\nvar focusManager = /*#__PURE__*/new FocusManager();\n\n/**\n *  Захватывает фокус внутри DOM node.\n * */\nexport var useFocusTrap = function useFocusTrap() {\n  var active = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var firstFocusSelector = arguments.length > 1 ? arguments[1] : undefined;\n  var focusAfterNode = arguments.length > 2 ? arguments[2] : undefined;\n  var ref = useRef();\n  var setRef = useCallback(function (node) {\n    if (ref.current) {\n      focusManager.teardownScopedFocus();\n      focusManager.returnFocus();\n    }\n    if (active && node) {\n      focusManager.setupScopedFocus(node);\n      focusManager.markForFocusAfter(focusAfterNode);\n\n      // Delay processing the HTML node by a frame. This ensures focus is assigned correctly.\n      setTimeout(function () {\n        if (node.ownerDocument) {\n          processNode(node, firstFocusSelector);\n        }\n      });\n      ref.current = node;\n      return;\n    }\n    ref.current = null;\n  }, [active, firstFocusSelector]);\n  useEffect(function () {\n    if (!active) {\n      return;\n    }\n    var handleKeyDown = function handleKeyDown(event) {\n      if (event.key === 'Tab' && ref.current) {\n        scopeTab(ref.current, event);\n      }\n    };\n    document.addEventListener('keydown', handleKeyDown);\n    return function () {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [active]);\n  return setRef;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
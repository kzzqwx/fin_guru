{"ast":null,"code":"var _excluded = [\"width\", \"height\", \"lighter\", \"customGradientColor\", \"roundness\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { getRoundness, getSkeletonColor } from '../../../mixins';\nimport { StyledRectSkeleton } from './RectSkeleton.styles';\n/**\n * Компонент для создания прямоугольного плейсхолдера.\n */\nexport var RectSkeleton = /*#__PURE__*/forwardRef(function (_ref, outerRootRef) {\n  var width = _ref.width,\n    height = _ref.height,\n    lighter = _ref.lighter,\n    customGradientColor = _ref.customGradientColor,\n    _ref$roundness = _ref.roundness,\n    roundness = _ref$roundness === void 0 ? '16' : _ref$roundness,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var roundnessValue = getRoundness({\n    roundness: roundness\n  });\n  var skeletonGradientColor = getSkeletonColor({\n    lighter: lighter,\n    customGradientColor: customGradientColor\n  });\n  return /*#__PURE__*/React.createElement(StyledRectSkeleton, _extends({\n    ref: outerRootRef,\n    roundness: roundnessValue,\n    gradientColor: skeletonGradientColor,\n    width: Number.isNaN(Number(width)) ? String(width) : \"\".concat(width, \"px\"),\n    height: Number.isNaN(Number(height)) ? String(height) : \"\".concat(height, \"px\")\n  }, rest));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
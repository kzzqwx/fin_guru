{"ast":null,"code":"var _IconCross;\nvar _excluded = [\"role\", \"title\", \"children\", \"actions\", \"view\", \"size\", \"iconPlacement\", \"showCloseIcon\", \"layout\", \"icon\", \"onCloseButtonClick\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useMemo } from 'react';\nimport { cx } from '../../utils';\nimport { IconCross } from '../_Icon/Icons/IconCross';\nimport { classes } from './Notification.tokens';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as layoutCSS } from './variations/_layout/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { layouts } from './Notification.types';\nimport { ButtonsWrapper, CloseIconWrapper, ContentBox, IconWrapper, StyledContent, StyledNotification, StyledTitle, TextBox, Wrapper } from './Notification.styles';\nimport { getLayoutClass } from './utils';\n\n/**\n * Компонент для небольших уведомлений пользователя\n */\nexport var notificationRoot = function notificationRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    var _props$role = props.role,\n      role = _props$role === void 0 ? 'status' : _props$role,\n      title = props.title,\n      content = props.children,\n      actions = props.actions,\n      view = props.view,\n      size = props.size,\n      iconPlacement = props.iconPlacement,\n      _props$showCloseIcon = props.showCloseIcon,\n      showCloseIcon = _props$showCloseIcon === void 0 ? true : _props$showCloseIcon,\n      _props$layout = props.layout,\n      layout = _props$layout === void 0 ? layouts.vertical : _props$layout,\n      icon = props.icon,\n      onCloseButtonClick = props.onCloseButtonClick,\n      rest = _objectWithoutProperties(props, _excluded);\n    var ariaLive = 'polite';\n    var ariaAtomic = false;\n    if (role === 'alert') {\n      ariaLive = 'assertive';\n    } else if (role === 'status') {\n      ariaAtomic = true;\n    }\n    var isOneLine = !content || !title;\n    var oneLineClass = isOneLine ? classes.oneLine : undefined;\n    var withoutIconClass = icon ? undefined : classes.withoutIcon;\n    var withoutCloseIconClass = showCloseIcon ? undefined : classes.withoutCloseIcon;\n    var IconPlacementInternal = useMemo(function () {\n      return icon ? iconPlacement : undefined;\n    }, [icon, iconPlacement]);\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      view: view,\n      size: size,\n      layout: layout,\n      ref: ref,\n      role: role,\n      \"aria-live\": ariaLive,\n      \"aria-atomic\": ariaAtomic\n    }, rest), /*#__PURE__*/React.createElement(Wrapper, {\n      className: cx(classes.wrapper, getLayoutClass(layout), oneLineClass, withoutCloseIconClass)\n    }, /*#__PURE__*/React.createElement(ContentBox, {\n      iconPlacement: IconPlacementInternal,\n      className: cx(classes.contentBox, getLayoutClass(layout), withoutIconClass)\n    }, icon && /*#__PURE__*/React.createElement(IconWrapper, {\n      iconPlacement: IconPlacementInternal,\n      className: cx(classes.icon, getLayoutClass(layout))\n    }, icon), /*#__PURE__*/React.createElement(TextBox, {\n      iconPlacement: IconPlacementInternal,\n      showCloseIcon: showCloseIcon,\n      className: cx(classes.textbox, getLayoutClass(layout))\n    }, title && /*#__PURE__*/React.createElement(StyledTitle, {\n      className: classes.title\n    }, title), content && /*#__PURE__*/React.createElement(StyledContent, {\n      className: classes.text\n    }, content))), actions && /*#__PURE__*/React.createElement(ButtonsWrapper, {\n      iconPlacement: IconPlacementInternal,\n      className: cx(classes.buttonsWrapper, getLayoutClass(layout))\n    }, actions), showCloseIcon && /*#__PURE__*/React.createElement(CloseIconWrapper, {\n      view: \"clear\",\n      size: \"s\",\n      onClick: onCloseButtonClick,\n      className: cx(classes.closeIcon, getLayoutClass(layout))\n    }, _IconCross || (_IconCross = /*#__PURE__*/React.createElement(IconCross, {\n      size: \"s\",\n      color: \"inherit\"\n    })))));\n  });\n};\nexport var noticationConfig = {\n  name: 'Notification',\n  tag: 'div',\n  layout: notificationRoot,\n  base: StyledNotification,\n  variations: {\n    layout: {\n      css: layoutCSS\n    },\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    }\n  },\n  defaults: {\n    view: 'default',\n    layout: layouts.vertical,\n    size: 'xs'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
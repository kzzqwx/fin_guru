{"ast":null,"code":"var _excluded = [\"roundness\", \"children\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport styled, { css } from 'styled-components';\nimport { surfaceCard } from '../../tokens';\nimport { addFocus, applyDisabled, applyRoundness, radiuses, syntheticFocus } from '../../mixins';\nimport { Body1 } from '../Typography';\n\n// В этих константах задаем размеры в em, чтобы не зависеть напрямую от пикселей\n// В то же время в числителях - значения в пикселях, взятые из макета\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Card/Card');\nvar fontSize = 16;\nvar shadowOffset = 8 / fontSize;\nvar shadowSize = 24 / fontSize;\nvar outlineSize = 2 / fontSize;\nvar DEFAULT_ROUNDNESS = 20;\nexport var StyledCard = /*#__PURE__*/styled(Body1).withConfig({\n  componentId: \"plasma__sc-1bj6k4p-0\"\n})([\"\", \" \", \";position:relative;display:flex;box-sizing:border-box;flex-direction:column;flex-shrink:0;background:\", \";box-shadow:0 \", \"em \", \"em rgba(0,0,0,0.1);transition:\", \";\", \"\"], applyDisabled, applyRoundness, surfaceCard, shadowOffset, shadowSize, function (_ref) {\n  var theme = _ref.theme;\n  return theme.lowPerformance ? 'unset' : 'transform 0.4s ease-in-out';\n}, function (_ref2) {\n  var focused = _ref2.focused,\n    outlined = _ref2.outlined,\n    roundness = _ref2.roundness,\n    scaleOnFocus = _ref2.scaleOnFocus,\n    theme = _ref2.theme;\n  return css([\"\", \" \", \" &:focus{outline:none;}\"], addFocus({\n    lowPerformance: theme.lowPerformance,\n    focused: focused,\n    outlined: outlined,\n    outlineSize: \"\".concat(outlineSize, \"rem\"),\n    outlineRadius: \"\".concat(radiuses[roundness] + outlineSize, \"rem\")\n  }), scaleOnFocus && syntheticFocus(css([\"&{transform:scale(1.04);}\"]), focused));\n});\n/**\n * Контейнер со скругленными углами с возможностью фокусировки на нем.\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport var Card = /*#__PURE__*/React.forwardRef(function Card(_ref3, ref) {\n  var _ref3$roundness = _ref3.roundness,\n    roundness = _ref3$roundness === void 0 ? DEFAULT_ROUNDNESS : _ref3$roundness,\n    children = _ref3.children,\n    rest = _objectWithoutProperties(_ref3, _excluded);\n  return /*#__PURE__*/React.createElement(StyledCard, _extends({\n    ref: ref,\n    roundness: roundness\n  }, rest), children);\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
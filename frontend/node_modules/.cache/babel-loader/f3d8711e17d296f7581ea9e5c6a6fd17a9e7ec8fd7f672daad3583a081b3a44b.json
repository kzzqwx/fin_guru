{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useEffect, useState, useCallback } from 'react';\n\n/**\n * Метод для форматирования секунд в минуты в формате `SS:SS`\n * @param {number} seconds время в секундах\n * @returns {string} строка времени в минутах\n */\nexport var formatSecondsToMintues = function formatSecondsToMintues(seconds) {\n  return new Date(Math.round(seconds) * 1000).toISOString().substr(11, 8).replace(/^00:/, '');\n};\n\n/**\n * Хук для воспроизведения аудио, возвращает состояние возможности проиграть аудио\n * @param {string} url конечный адрес до файла\n * @param {boolean} isPlaying воспроизводится ли сейчас трек\n * @param {React.MutableRefObject<HTMLAudioElement | undefined>} refAudio ссылка на ref-объект\n * @returns {boolean} возможность воспроизвести трек\n */\nexport var useAudioPlayer = function useAudioPlayer(url, isPlaying, refAudio) {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    canPlaying = _useState2[0],\n    setCanPlaying = _useState2[1];\n  var canPlay = useCallback(function canPlay() {\n    refAudio.current = this;\n    setCanPlaying(true);\n  }, [refAudio]);\n  useEffect(function () {\n    if (refAudio.current) {\n      refAudio.current[isPlaying ? 'play' : 'pause']();\n      return;\n    }\n    var audio = new Audio(url);\n    audio.addEventListener('canplaythrough', canPlay);\n    return function () {\n      audio.addEventListener('canplaythrough', canPlay);\n    };\n  }, [canPlay, url, refAudio, isPlaying]);\n  return [canPlaying];\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
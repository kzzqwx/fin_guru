{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nimport { useState } from 'react';\nexport var Keys = {\n  Enter: 'Enter',\n  Tab: 'Tab',\n  Escape: 'Escape',\n  ArrowLeft: 'ArrowLeft',\n  ArrowRight: 'ArrowRight',\n  Backspace: 'Backspace'\n};\nexport var useKeyNavigation = function useKeyNavigation(_ref) {\n  var _ref$controlledRefs = _ref.controlledRefs,\n    chipsRefs = _ref$controlledRefs.chipsRefs,\n    contentRef = _ref$controlledRefs.contentRef,\n    inputRef = _ref$controlledRefs.inputRef,\n    disabled = _ref.disabled,\n    readOnly = _ref.readOnly,\n    chips = _ref.chips,\n    enumerationType = _ref.enumerationType,\n    updateChips = _ref.updateChips,\n    onChange = _ref.onChange,\n    onSearch = _ref.onSearch;\n  var _useState = useState(-1),\n    _useState2 = _slicedToArray(_useState, 2),\n    activeChipIndex = _useState2[0],\n    setActiveChipIndex = _useState2[1];\n  var handleInputKeydown = function handleInputKeydown(event) {\n    var _inputRef$current;\n    var _ref2 = event.target,\n      value = _ref2.value;\n    if (disabled || readOnly) {\n      return;\n    }\n    if (event.key === Keys.Enter && enumerationType === 'chip' && value) {\n      var nextIndex = (chips === null || chips === void 0 ? void 0 : chips.length) || 0;\n      var newChips = [].concat(_toConsumableArray(chips), [{\n        id: \"\".concat(nextIndex, \"_\").concat(value),\n        text: value\n      }]);\n      var newValues = newChips.map(function (_ref3) {\n        var text = _ref3.text;\n        return text;\n      });\n      updateChips(newChips, newValues);\n      event.target.value = '';\n      onChange === null || onChange === void 0 || onChange(event);\n    }\n    if (event.key === Keys.Enter && onSearch) {\n      onSearch(value, event);\n    }\n    if (event.key === Keys.Backspace && chips.length && (inputRef === null || inputRef === void 0 || (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.selectionStart) === 0) {\n      var _newChips = _toConsumableArray(chips);\n      _newChips === null || _newChips === void 0 || _newChips.pop();\n      chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.pop();\n      var _newValues = _newChips.map(function (_ref4) {\n        var text = _ref4.text;\n        return text;\n      });\n      updateChips(_newChips, _newValues);\n    }\n  };\n  var onChipClear = function onChipClear(clearId, index) {\n    if (!chips.length) {\n      return;\n    }\n    var newChips = (chips === null || chips === void 0 ? void 0 : chips.filter(function (_ref5) {\n      var chipId = _ref5.id;\n      return chipId !== clearId;\n    })) || [];\n    var newValues = newChips.map(function (_ref6) {\n      var text = _ref6.text;\n      return text;\n    });\n    chipsRefs === null || chipsRefs === void 0 || chipsRefs.current.splice(index, 1);\n    updateChips(newChips, newValues);\n  };\n  var handleChipKeyDown = function handleChipKeyDown(event, chipId, chipIndex) {\n    if (event.key === Keys.Tab) {\n      event.preventDefault();\n    }\n    if (event.key === Keys.Backspace) {\n      onChipClear(chipId, chipIndex);\n    }\n  };\n  var handleContentKeyDown = function handleContentKeyDown(event) {\n    var _inputRef$current2, _focusedItem, _focusedItem2;\n    var chipsRefsCount = chipsRefs.current.length;\n    var currentCaretPosition = (inputRef === null || inputRef === void 0 || (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.selectionStart) || 0;\n    var newActiveChipIndex = activeChipIndex;\n    var focusedItem = null;\n    if (event.key === Keys.ArrowLeft && enumerationType === 'chip' && currentCaretPosition <= 0) {\n      var _chipsRefs$current;\n      var index = activeChipIndex - 1 <= 0 ? 0 : activeChipIndex - 1;\n      newActiveChipIndex = document.activeElement === (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current) ? chipsRefsCount - 1 : index;\n      focusedItem = (_chipsRefs$current = chipsRefs.current) === null || _chipsRefs$current === void 0 ? void 0 : _chipsRefs$current[newActiveChipIndex];\n    }\n    if (event.key === Keys.ArrowRight && enumerationType === 'chip' && document.activeElement !== (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current)) {\n      var _chipsRefs$current2;\n      var _index = activeChipIndex + 1 >= chipsRefsCount ? activeChipIndex : activeChipIndex + 1;\n      newActiveChipIndex = document.activeElement === (contentRef === null || contentRef === void 0 ? void 0 : contentRef.current) ? 0 : _index;\n      focusedItem = _index === activeChipIndex ? inputRef === null || inputRef === void 0 ? void 0 : inputRef.current : (_chipsRefs$current2 = chipsRefs.current) === null || _chipsRefs$current2 === void 0 ? void 0 : _chipsRefs$current2[newActiveChipIndex];\n    }\n    if (event.key === Keys.Backspace && document.activeElement !== (inputRef === null || inputRef === void 0 ? void 0 : inputRef.current)) {\n      var _chipsRefs$current3;\n      var _index2 = activeChipIndex - 1 <= 0 ? 0 : activeChipIndex - 1;\n      newActiveChipIndex = chipsRefsCount === 0 ? -1 : _index2;\n      focusedItem = chipsRefsCount === 0 ? inputRef === null || inputRef === void 0 ? void 0 : inputRef.current : chipsRefs === null || chipsRefs === void 0 || (_chipsRefs$current3 = chipsRefs.current) === null || _chipsRefs$current3 === void 0 ? void 0 : _chipsRefs$current3[newActiveChipIndex];\n    }\n    (_focusedItem = focusedItem) === null || _focusedItem === void 0 || _focusedItem.focus();\n    (_focusedItem2 = focusedItem) === null || _focusedItem2 === void 0 || _focusedItem2.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n      inline: 'center'\n    });\n    setActiveChipIndex(newActiveChipIndex);\n  };\n  return {\n    handleInputKeydown: handleInputKeydown,\n    handleChipKeyDown: handleChipKeyDown,\n    onChipClear: onChipClear,\n    handleContentKeyDown: handleContentKeyDown\n  };\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
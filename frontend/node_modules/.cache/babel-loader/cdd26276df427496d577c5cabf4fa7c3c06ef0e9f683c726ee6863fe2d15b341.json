{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nimport { isValidElement, Children } from 'react';\nexport var extractTextFrom = function extractTextFrom(textSource) {\n  switch (_typeof(textSource)) {\n    case 'string':\n      return textSource;\n    case 'number':\n      return textSource.toString();\n    case 'object':\n      {\n        if (! /*#__PURE__*/isValidElement(textSource) || !textSource.props || !textSource.props.children) {\n          return '';\n        }\n        return Children.map(textSource.props.children, function (child) {\n          return extractTextFrom(child);\n        }).join('');\n      }\n    default:\n      return '';\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
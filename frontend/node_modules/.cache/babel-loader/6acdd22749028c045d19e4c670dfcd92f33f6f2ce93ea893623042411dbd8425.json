{"ast":null,"code":"var generateSection = function generateSection(length, add) {\n  return Array.from(Array(length).keys()).map(function (el) {\n    return el + add;\n  });\n};\nvar dType = 'default';\nvar dDlots = 9;\nvar sections = {\n  7: [1, 3, 1],\n  8: [1, 4, 1],\n  9: [2, 3, 2],\n  10: [2, 4, 2],\n  11: [3, 3, 3],\n  12: [3, 4, 3],\n  13: [3, 5, 3],\n  14: [3, 6, 3],\n  15: [4, 5, 4]\n};\nexport var defaultValues = {\n  value: 1,\n  perPage: 20,\n  slots: dDlots,\n  type: dType,\n  pilled: false,\n  square: false,\n  disabledPages: [],\n  hasQuickJump: true,\n  hasPerPage: true,\n  perPageList: [20, 50, 100, 200],\n  isCommonButtonStyles: true,\n  placeholderQuickJump: '#',\n  textQuickJump: 'Go to',\n  textPerPage: 'Show'\n};\nexport var getSections = function getSections(value, pages, slots) {\n  var _value, _pages, _slots;\n  value = (_value = value) !== null && _value !== void 0 ? _value : 1;\n  pages = (_pages = pages) !== null && _pages !== void 0 ? _pages : 1;\n  slots = (_slots = slots) !== null && _slots !== void 0 ? _slots : defaultValues.slots;\n  var pageArray = [generateSection(pages, 1)];\n  if (slots >= pages || slots < 5) {\n    return pageArray;\n  }\n  if (!sections[slots]) {\n    return pageArray;\n  }\n  var smallSection = Math.min(Math.floor((slots - 1) / 2), 6);\n  var bigSection = Math.min(Math.floor(slots / 2), 6);\n  var defaultSection = sections[slots][1];\n  var smallSectionLeft = sections[slots][0];\n  var smallSectionRight = sections[slots][2];\n  if (smallSection > value) {\n    return [generateSection(bigSection, 1), generateSection(smallSection, pages - smallSection + 1)];\n  }\n  if (smallSection === value) {\n    return [generateSection(bigSection + 1, 1), generateSection(smallSection - 1, pages - smallSection + 2)];\n  }\n  if (pages - smallSection + 1 < value) {\n    return [generateSection(smallSection, 1), generateSection(bigSection, pages - bigSection + 1)];\n  }\n  if (pages - smallSection + 1 === value) {\n    return [generateSection(smallSection - 1, 1), generateSection(bigSection + 1, pages - bigSection)];\n  }\n  return [generateSection(smallSectionLeft, 1), generateSection(defaultSection, value - Math.floor(defaultSection / 2)), generateSection(smallSectionRight, pages - smallSectionRight + 1)];\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
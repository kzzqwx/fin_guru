{"ast":null,"code":"var _excluded = [\"onSearch\", \"onChange\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useCallback } from 'react';\nimport { TextFieldWeb } from './views/web/TextFieldWeb';\nimport { TextFieldB2C } from './views/b2c/TextFieldB2C';\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('TextField/TextField');\nvar componentMap = {\n  web: TextFieldWeb,\n  b2c: TextFieldB2C\n};\nexport var TextField = function TextField(_ref) {\n  var design = _ref.design;\n  var TextFieldView = componentMap[design];\n  return /*#__PURE__*/forwardRef(function (_ref2, innerRef) {\n    var onSearch = _ref2.onSearch,\n      onChange = _ref2.onChange,\n      rest = _objectWithoutProperties(_ref2, _excluded);\n    var handleChange = useCallback(function (event) {\n      var _event$target = event.target,\n        maxLength = _event$target.maxLength,\n        value = _event$target.value;\n      if (!onChange || maxLength !== -1 && value.length > maxLength) {\n        return;\n      }\n      onChange(event);\n    }, [onChange]);\n    var handleKeyUp = useCallback(function (event) {\n      if (event.keyCode === 13 && onSearch) {\n        onSearch(event.target.value, event);\n      }\n    }, [onSearch]);\n    return /*#__PURE__*/React.createElement(TextFieldView, _extends({\n      ref: innerRef,\n      onChange: handleChange,\n      onKeyUp: handleKeyUp\n    }, rest));\n  });\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
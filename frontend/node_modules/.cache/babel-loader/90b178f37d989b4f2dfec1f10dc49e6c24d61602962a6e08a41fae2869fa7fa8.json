{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nvar _excluded = [\"min\", \"max\", \"value\", \"disabled\", \"onChangeCommitted\", \"onChange\", \"ariaLabel\", \"multipleStepSize\", \"thumb\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React from 'react';\nimport { SliderBase } from './SliderBase';\nimport { Handle } from './Handle';\nfunction getXCenterHandle(handle) {\n  var _handle$parentElement;\n  var containerX = ((_handle$parentElement = handle.parentElement) === null || _handle$parentElement === void 0 || (_handle$parentElement = _handle$parentElement.getBoundingClientRect()) === null || _handle$parentElement === void 0 ? void 0 : _handle$parentElement.x) || 0;\n  var handleRect = handle.getBoundingClientRect();\n  var handlePosition = handleRect.x;\n  return handlePosition - containerX;\n}\nexport var Slider = function Slider(_ref) {\n  var min = _ref.min,\n    max = _ref.max,\n    value = _ref.value,\n    disabled = _ref.disabled,\n    onChangeCommitted = _ref.onChangeCommitted,\n    onChange = _ref.onChange,\n    ariaLabel = _ref.ariaLabel,\n    _ref$multipleStepSize = _ref.multipleStepSize,\n    multipleStepSize = _ref$multipleStepSize === void 0 ? 10 : _ref$multipleStepSize,\n    thumb = _ref.thumb,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState({\n      stepSize: 0,\n      railFillWidth: 0,\n      railFillXPosition: 0,\n      xFirstHandle: 0,\n      xSecondHandle: 0,\n      firstHandleZIndex: 100,\n      secondHandleZIndex: 101,\n      firstValue: value[0],\n      secondValue: value[1]\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setState = _React$useState2[1];\n  var firstHandleRef = React.useRef(null);\n  var secondHandleRef = React.useRef(null);\n  var stepSize = state.stepSize;\n  React.useEffect(function () {\n    var firstLocalValue = Math.min(Math.max(value[0], min), max) - min;\n    var secondLocalValue = Math.min(Math.max(value[1], min), max) - min;\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        railFillXPosition: stepSize * firstLocalValue,\n        railFillWidth: stepSize * secondLocalValue - stepSize * firstLocalValue,\n        xFirstHandle: stepSize * firstLocalValue,\n        xSecondHandle: stepSize * secondLocalValue\n      });\n    });\n  }, [value, stepSize, min, max]);\n  var setStepSize = React.useCallback(function (newStepSize) {\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        stepSize: newStepSize\n      });\n    });\n  }, []);\n  var onFirstHandleChange = React.useCallback(function (handleValue, data) {\n    if (secondHandleRef !== null && secondHandleRef !== void 0 && secondHandleRef.current) {\n      var newHandleXPosition = data.x;\n      var secondHandleXPosition = getXCenterHandle(secondHandleRef.current);\n      var fillWidth = secondHandleXPosition - newHandleXPosition;\n      setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          firstHandleZIndex: 101,\n          secondHandleZIndex: 100,\n          railFillWidth: fillWidth < 0 ? 0 : fillWidth,\n          railFillXPosition: newHandleXPosition\n        });\n      });\n      if (onChange) {\n        onChange([handleValue, value[1]]);\n      }\n    }\n  }, [onChange, value]);\n  var onFirstHandleChangeCommitted = React.useCallback(function (handleValue, data) {\n    onChangeCommitted([handleValue, value[1]]);\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        firstValue: handleValue,\n        xFirstHandle: data.lastX\n      });\n    });\n  }, [onChangeCommitted, value]);\n  var onSecondHandleChange = React.useCallback(function (handleValue, data) {\n    if (firstHandleRef !== null && firstHandleRef !== void 0 && firstHandleRef.current) {\n      var firstXHandleXPosition = getXCenterHandle(firstHandleRef.current);\n      var newHandleXPosition = data.x;\n      var fillWidth = newHandleXPosition - firstXHandleXPosition;\n      setState(function (prevState) {\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          firstHandleZIndex: 100,\n          secondHandleZIndex: 101,\n          railFillWidth: fillWidth < 0 ? 0 : fillWidth,\n          railFillXPosition: firstXHandleXPosition\n        });\n      });\n      if (onChange) {\n        onChange([value[0], handleValue]);\n      }\n    }\n  }, [onChange, value]);\n  var onSecondHandleChangeCommitted = React.useCallback(function (handleValue, data) {\n    onChangeCommitted([value[0], handleValue]);\n    setState(function (prevState) {\n      return _objectSpread(_objectSpread({}, prevState), {}, {\n        secondValue: handleValue,\n        xSecondHandle: data.lastX\n      });\n    });\n  }, [onChangeCommitted, value]);\n  var _ref2 = ariaLabel || [],\n    _ref3 = _slicedToArray(_ref2, 2),\n    ariaLabelLeft = _ref3[0],\n    ariaLabelRight = _ref3[1];\n  var currentFirstSliderValue = Math.max(state.firstValue, min);\n  return /*#__PURE__*/React.createElement(SliderBase, _extends({\n    min: min,\n    max: max,\n    disabled: disabled,\n    setStepSize: setStepSize,\n    railFillWidth: state.railFillWidth,\n    railFillXPosition: state.railFillXPosition\n  }, rest), /*#__PURE__*/React.createElement(Handle, {\n    ref: firstHandleRef,\n    stepSize: state.stepSize,\n    multipleStepSize: multipleStepSize,\n    onChangeCommitted: onFirstHandleChangeCommitted,\n    onChange: onFirstHandleChange,\n    min: min,\n    max: state.secondValue,\n    disabled: disabled,\n    bounds: [min, state.secondValue],\n    side: \"left\",\n    xPosition: state.xFirstHandle,\n    zIndex: state.firstHandleZIndex,\n    value: currentFirstSliderValue,\n    ariaLabel: ariaLabelLeft,\n    thumb: thumb\n  }), /*#__PURE__*/React.createElement(Handle, {\n    ref: secondHandleRef,\n    stepSize: state.stepSize,\n    multipleStepSize: multipleStepSize,\n    onChangeCommitted: onSecondHandleChangeCommitted,\n    onChange: onSecondHandleChange,\n    min: min,\n    ariaValueMin: currentFirstSliderValue,\n    max: max,\n    disabled: disabled,\n    bounds: [state.firstValue, max],\n    side: \"right\",\n    xPosition: state.xSecondHandle,\n    zIndex: state.secondHandleZIndex,\n    value: Math.max(state.secondValue, min),\n    ariaLabel: ariaLabelRight,\n    thumb: thumb\n  }));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
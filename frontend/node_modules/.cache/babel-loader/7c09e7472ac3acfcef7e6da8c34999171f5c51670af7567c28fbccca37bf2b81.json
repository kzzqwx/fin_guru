{"ast":null,"code":"var _excluded = [\"size\", \"view\", \"id\", \"label\", \"value\", \"pilled\", \"customHandleSelect\", \"aria-label\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useCallback, useMemo } from 'react';\nimport { safeUseId } from '@salutejs/plasma-core';\nimport { cx, extractTextFrom } from '../../../../utils';\nimport { classes } from '../../tokens';\nimport { useSegmentInner } from '../../SegmentProvider/SegmentProvider';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as disabledCSS } from './variations/_disabled/base';\nimport { base as pilledCSS } from './variations/_pilled/base';\nimport { StyledContent, base } from './SegmentItem.styles';\nexport var segmentItemRoot = function segmentItemRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (props, outerRef) {\n    var size = props.size,\n      view = props.view,\n      id = props.id,\n      label = props.label,\n      value = props.value,\n      pilled = props.pilled,\n      customHandleSelect = props.customHandleSelect,\n      ariaLabelExternal = props['aria-label'],\n      rest = _objectWithoutProperties(props, _excluded);\n    var _useSegmentInner = useSegmentInner(),\n      selectionMode = _useSegmentInner.selectionMode,\n      disabledGroup = _useSegmentInner.disabledGroup,\n      handleSelect = _useSegmentInner.handleSelect,\n      selectedSegmentItems = _useSegmentInner.selectedSegmentItems;\n    var uniqId = safeUseId();\n    var segmentId = id || \"label-\".concat(uniqId);\n    var ariaLabelDefault = useMemo(function () {\n      return extractTextFrom(label);\n    }, [label]);\n    var pilledAttr = view !== 'clear' && pilled;\n    var pilledClass = pilledAttr ? classes.segmentPilled : undefined;\n    var isSelected = selectedSegmentItems === null || selectedSegmentItems === void 0 ? void 0 : selectedSegmentItems.includes(value || ariaLabelDefault);\n    var selectedClass = isSelected ? classes.selectedSegmentItem : undefined;\n    var handleSelectSegment = useCallback(function (event) {\n      if (disabledGroup) {\n        return;\n      }\n      customHandleSelect === null || customHandleSelect === void 0 || customHandleSelect(event);\n      handleSelect === null || handleSelect === void 0 || handleSelect(value || ariaLabelDefault);\n    }, [selectionMode]);\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      view: view,\n      size: size,\n      id: segmentId,\n      ref: outerRef,\n      \"aria-label\": ariaLabelExternal || ariaLabelDefault,\n      value: value,\n      pilled: pilledAttr,\n      className: cx(selectedClass, pilledClass),\n      onClick: handleSelectSegment,\n      tabIndex: disabledGroup ? -1 : 0,\n      disabled: disabledGroup\n    }, rest), /*#__PURE__*/React.createElement(StyledContent, null, label || value));\n  });\n};\nexport var segmentItemConfig = {\n  name: 'SegmentItem',\n  tag: 'button',\n  layout: segmentItemRoot,\n  base: base,\n  variations: {\n    size: {\n      css: sizeCSS\n    },\n    view: {\n      css: viewCSS\n    },\n    disabled: {\n      css: disabledCSS,\n      attrs: true\n    },\n    pilled: {\n      css: pilledCSS,\n      attrs: true\n    }\n  },\n  defaults: {\n    view: 'clear',\n    size: 'xs'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nvar _templateObject, _templateObject2;\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\nimport { css, gridTokens, getBaseGridView } from '@salutejs/plasma-new-hope/styled-components';\nexport var config = {\n  defaults: {\n    view: 'legacy'\n  },\n  variations: {\n    /* stylelint-disable */\n    view: {\n      \"default\": /*#__PURE__*/css(_templateObject || (_templateObject = /*#__PURE__*/_taggedTemplateLiteral([\"\\n                \", \";\\n\\n                \", \": 6;\\n                \", \": 0.5rem;\\n                \", \": 1rem;\\n                \", \": 0;\\n\\n                \", \": 12;\\n                \", \": 0.5rem;\\n                \", \": 1.25rem;\\n                \", \": 35rem;\\n\\n                \", \": 18;\\n                \", \": 0.5rem;\\n                \", \": 1.75rem;\\n                \", \": 49.125rem;\\n\\n                \", \": 24;\\n                \", \": 0.5rem;\\n                \", \": 2.5rem;\\n                \", \": 60rem;\\n\\n                \", \": 30;\\n                \", \": 0.5rem;\\n                \", \": 4rem;\\n                \", \": 75rem;\\n            \"])), /*#__PURE__*/getBaseGridView( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty({}, gridTokens.smallMMinWidth, 0), gridTokens.mediumSMinWidth, '35rem'), gridTokens.mediumMMinWidth, '49.125rem'), gridTokens.largeSMinWidth, '60rem'), gridTokens.largeMMinWidth, '75rem'), 'default'), gridTokens.smallMColsCount, gridTokens.smallMGap, gridTokens.smallMMargin, gridTokens.smallMMinWidth, gridTokens.mediumSColsCount, gridTokens.mediumSGap, gridTokens.mediumSMargin, gridTokens.mediumSMinWidth, gridTokens.mediumMColsCount, gridTokens.mediumMGap, gridTokens.mediumMMargin, gridTokens.mediumMMinWidth, gridTokens.largeSColsCount, gridTokens.largeSGap, gridTokens.largeSMargin, gridTokens.largeSMinWidth, gridTokens.largeMColsCount, gridTokens.largeMGap, gridTokens.largeMMargin, gridTokens.largeMMinWidth),\n      legacy: /*#__PURE__*/css(_templateObject2 || (_templateObject2 = /*#__PURE__*/_taggedTemplateLiteral([\"\\n                \", \";\\n\\n                \", \": 4;\\n                \", \": 0.5rem;\\n                \", \": 1rem;\\n                \", \": 0;\\n\\n                \", \": 6;\\n                \", \": 1rem;\\n                \", \": 3.5rem;\\n                \", \": 35rem;\\n\\n                \", \": 8;\\n                \", \": 1rem;\\n                \", \": 3.5rem;\\n                \", \": 48.0625rem;\\n\\n                \", \": 12;\\n                \", \": 1rem;\\n                \", \": 4rem;\\n                \", \": 60rem;\\n\\n                \", \": 16;\\n                \", \": 1rem;\\n                \", \": 4rem;\\n                \", \": 75rem;\\n            \"])), /*#__PURE__*/getBaseGridView( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty( /*#__PURE__*/_defineProperty({}, gridTokens.smallMMinWidth, 0), gridTokens.mediumSMinWidth, '35rem'), gridTokens.mediumMMinWidth, '48.0625rem'), gridTokens.largeSMinWidth, '60rem'), gridTokens.largeMMinWidth, '75rem'), 'legacy'), gridTokens.smallMColsCount, gridTokens.smallMGap, gridTokens.smallMMargin, gridTokens.smallMMinWidth, gridTokens.mediumSColsCount, gridTokens.mediumSGap, gridTokens.mediumSMargin, gridTokens.mediumSMinWidth, gridTokens.mediumMColsCount, gridTokens.mediumMGap, gridTokens.mediumMMargin, gridTokens.mediumMMinWidth, gridTokens.largeSColsCount, gridTokens.largeSGap, gridTokens.largeSMargin, gridTokens.largeSMinWidth, gridTokens.largeMColsCount, gridTokens.largeMGap, gridTokens.largeMMargin, gridTokens.largeMMinWidth)\n    }\n    /* stylelint-enable */\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _excluded = [\"id\", \"placeholder\", \"value\", \"helperText\", \"disabled\", \"status\", \"className\", \"style\", \"items\", \"multiselect\", \"onItemSelect\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { TextFieldRoot, TextFieldHelper } from '@salutejs/plasma-core';\nimport styled from 'styled-components';\nimport { withAssistiveDropdown } from '../../../Dropdown';\nimport { SelectDropdown as BaseDropdown } from '../../SelectDropdown';\nimport { SelectButton as BaseButton } from '../../SelectButton';\nvar SelectDropdown = /*#__PURE__*/styled(BaseDropdown).attrs({\n  design: 'web'\n}).withConfig({\n  componentId: \"plasma-web-core__sc-12lrtyo-0\"\n})([\"\"]);\nvar SelectButton = /*#__PURE__*/styled(BaseButton).attrs({\n  design: 'web'\n}).withConfig({\n  componentId: \"plasma-web-core__sc-12lrtyo-1\"\n})([\"\"]);\nvar DropdownButton = /*#__PURE__*/withAssistiveDropdown(SelectButton, SelectDropdown);\n\n/**\n * Поле с выпадающим списком.\n */\nexport var SelectView = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n    placeholder = _ref.placeholder,\n    value = _ref.value,\n    helperText = _ref.helperText,\n    disabled = _ref.disabled,\n    status = _ref.status,\n    className = _ref.className,\n    style = _ref.style,\n    items = _ref.items,\n    multiselect = _ref.multiselect,\n    onItemSelect = _ref.onItemSelect,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var hasItems = Array.isArray(items) && items.length > 0;\n  return /*#__PURE__*/React.createElement(TextFieldRoot, {\n    id: id,\n    $size: \"m\",\n    $disabled: disabled,\n    $isContentRight: hasItems,\n    $isHelper: Boolean(helperText),\n    status: status,\n    className: className,\n    style: style\n  }, /*#__PURE__*/React.createElement(DropdownButton, _extends({}, rest, {\n    ref: ref,\n    id: id ? \"\".concat(id, \"-dropdown\") : id,\n    role: \"combobox\",\n    menuRole: \"listbox\",\n    menuItemRole: \"option\",\n    value: value,\n    placeholder: placeholder,\n    hasItems: hasItems,\n    status: status,\n    items: items,\n    disabled: disabled,\n    closeOnSelect: !multiselect,\n    onItemSelect: onItemSelect\n  })), helperText && /*#__PURE__*/React.createElement(TextFieldHelper, null, helperText));\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
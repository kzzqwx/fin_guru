{"ast":null,"code":"var _excluded = [\"id\", \"isOpen\", \"items\", \"children\", \"offsetTop\", \"disabled\", \"style\", \"className\", \"hoverIndex\", \"placement\", \"trigger\", \"onBlur\", \"onKeyDown\", \"onToggle\", \"onItemSelect\", \"onHover\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback } from 'react';\nimport { DropdownMenu } from './DropdownMenu';\nimport { DropdownPopup } from './DropdownPopup';\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Dropdown/DropdownUncontrolled');\n/**\n * Выпадающий список с внешнего контроля видимости через props: `isOpen` и `onToggle`.\n */\nexport var DropdownUncontrolled = function DropdownUncontrolled(_ref) {\n  var id = _ref.id,\n    isOpen = _ref.isOpen,\n    items = _ref.items,\n    children = _ref.children,\n    offsetTop = _ref.offsetTop,\n    disabled = _ref.disabled,\n    style = _ref.style,\n    className = _ref.className,\n    hoverIndex = _ref.hoverIndex,\n    _ref$placement = _ref.placement,\n    placement = _ref$placement === void 0 ? 'bottom' : _ref$placement,\n    _ref$trigger = _ref.trigger,\n    trigger = _ref$trigger === void 0 ? 'click' : _ref$trigger,\n    onBlur = _ref.onBlur,\n    onKeyDown = _ref.onKeyDown,\n    onToggleExternal = _ref.onToggle,\n    onItemSelect = _ref.onItemSelect,\n    onHover = _ref.onHover,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var hasItems = Array.isArray(items) && items.length > 0;\n  var onToggle = useCallback(function (newIsOpen, event) {\n    if (newIsOpen && hasItems && !disabled) {\n      onToggleExternal === null || onToggleExternal === void 0 || onToggleExternal(true, event);\n    } else {\n      onToggleExternal === null || onToggleExternal === void 0 || onToggleExternal(false, event);\n    }\n  }, [onToggleExternal, disabled, hasItems]);\n  return /*#__PURE__*/React.createElement(DropdownPopup, {\n    isOpen: isOpen,\n    trigger: trigger,\n    placement: placement,\n    disclosure: children,\n    offsetTop: offsetTop,\n    style: style,\n    className: className,\n    onToggle: onToggle,\n    onKeyDown: onKeyDown,\n    onBlur: onBlur\n  }, /*#__PURE__*/React.createElement(DropdownMenu, _extends({}, rest, {\n    id: id,\n    items: items,\n    hoverIndex: hoverIndex,\n    onHover: onHover,\n    onItemSelect: onItemSelect\n  })));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
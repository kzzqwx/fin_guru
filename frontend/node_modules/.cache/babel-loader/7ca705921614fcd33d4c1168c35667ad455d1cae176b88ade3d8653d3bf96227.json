{"ast":null,"code":"import React, { useRef, useEffect } from 'react';\nimport { useIsomorphicLayoutEffect } from '../../../../hooks';\nimport { Fill, Rail, RailWrap, Slider } from './SliderBase.styles';\nexport var SliderBase = function SliderBase(_ref) {\n  var max = _ref.max,\n    min = _ref.min,\n    setStepSize = _ref.setStepSize,\n    railFillWidth = _ref.railFillWidth,\n    children = _ref.children,\n    _ref$railFillXPositio = _ref.railFillXPosition,\n    railFillXPosition = _ref$railFillXPositio === void 0 ? 0 : _ref$railFillXPositio,\n    disabled = _ref.disabled,\n    labelPlacement = _ref.labelPlacement,\n    rangeValuesPlacement = _ref.rangeValuesPlacement,\n    onChange = _ref.onChange,\n    _ref$settings = _ref.settings,\n    settings = _ref$settings === void 0 ? {} : _ref$settings;\n  var _settings$indent = settings.indent,\n    indent = _settings$indent === void 0 ? 0.75 : _settings$indent,\n    _settings$fontSizeMul = settings.fontSizeMultiplier,\n    fontSizeMultiplier = _settings$fontSizeMul === void 0 ? 16 : _settings$fontSizeMul;\n  var ref = useRef(null);\n  var gap = indent * fontSizeMultiplier * 2;\n  useEffect(function () {\n    var resizeHandler = function resizeHandler() {\n      if (ref.current) {\n        var railSize = ref.current.offsetWidth - gap;\n        var totalSteps = max - min;\n        setStepSize(railSize / totalSteps);\n      }\n    };\n    resizeHandler();\n  }, [labelPlacement, rangeValuesPlacement, ref.current]);\n  var onHandleChange = function onHandleChange(e) {\n    if (!onChange || disabled) {\n      return;\n    }\n    var _e$currentTarget$getB = e.currentTarget.getBoundingClientRect(),\n      x = _e$currentTarget$getB.x,\n      width = _e$currentTarget$getB.width;\n    var lastX = e.clientX - x;\n    var position = min + lastX / (width - gap) * (max - min);\n    var result = Math.max(min, Math.min(max, position));\n    onChange(result, {\n      lastX: lastX\n    });\n  };\n  useIsomorphicLayoutEffect(function () {\n    var resizeHandler = function resizeHandler() {\n      if (ref.current) {\n        var railSize = ref.current.offsetWidth - gap;\n        var totalSteps = max - min;\n        setStepSize(railSize / totalSteps);\n      }\n    };\n    resizeHandler();\n    window.addEventListener('resize', resizeHandler);\n    return function () {\n      return window.removeEventListener('resize', resizeHandler);\n    };\n  }, [min, max, setStepSize, ref.current, gap, labelPlacement, rangeValuesPlacement]);\n  var fillStyle = {\n    left: \"\".concat(railFillXPosition, \"px\"),\n    width: \"\".concat(railFillWidth, \"px\")\n  };\n  return /*#__PURE__*/React.createElement(Slider, {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(RailWrap, {\n    \"aria-hidden\": \"true\",\n    onMouseDown: onHandleChange\n  }, /*#__PURE__*/React.createElement(Rail, null, /*#__PURE__*/React.createElement(Fill, {\n    style: fillStyle\n  }))), children);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
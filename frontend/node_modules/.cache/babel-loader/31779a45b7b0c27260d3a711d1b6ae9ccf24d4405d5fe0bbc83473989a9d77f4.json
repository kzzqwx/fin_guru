{"ast":null,"code":"import React from 'react';\nimport { DropdownItem } from '..';\nimport { Ul, StyledPopover } from '../../Dropdown.styles';\nvar DropdownInner = function DropdownInner(_ref) {\n  var item = _ref.item,\n    currentLevel = _ref.currentLevel,\n    focusedPath = _ref.focusedPath,\n    path = _ref.path,\n    dispatchPath = _ref.dispatchPath,\n    index = _ref.index,\n    trigger = _ref.trigger,\n    itemRole = _ref.itemRole,\n    listHeight = _ref.listHeight,\n    listOverflow = _ref.listOverflow,\n    handleGlobalToggle = _ref.handleGlobalToggle,\n    closeOnSelect = _ref.closeOnSelect,\n    onHover = _ref.onHover,\n    onItemSelect = _ref.onItemSelect,\n    onItemClick = _ref.onItemClick,\n    listWidth = _ref.listWidth,\n    variant = _ref.variant,\n    hasArrow = _ref.hasArrow;\n  var handleToggle = function handleToggle(opened) {\n    if (opened) {\n      dispatchPath({\n        type: 'changed_on_level',\n        value: item.value.toString(),\n        level: currentLevel + 1\n      });\n    } else {\n      dispatchPath({\n        type: 'cut_by_level',\n        level: currentLevel + 1\n      });\n    }\n  };\n  var isCurrentListOpen = path[currentLevel + 1] === item.value.toString();\n  var listId = \"tree_level_\".concat(currentLevel + 2);\n  var nextLevel = currentLevel + 1;\n  if (item !== null && item !== void 0 && item.items) {\n    return /*#__PURE__*/React.createElement(StyledPopover, {\n      isOpen: isCurrentListOpen,\n      usePortal: false,\n      placement: \"right-start\",\n      trigger: trigger,\n      target: /*#__PURE__*/React.createElement(DropdownItem, {\n        item: item,\n        index: index,\n        path: path,\n        focusedPath: focusedPath,\n        currentLevel: currentLevel,\n        itemRole: itemRole,\n        onHover: onHover,\n        onItemSelect: onItemSelect,\n        onItemClick: onItemClick,\n        variant: variant,\n        hasArrow: hasArrow,\n        ariaControls: listId,\n        ariaExpanded: isCurrentListOpen,\n        ariaLevel: nextLevel,\n        ariaLabel: item.label\n      }),\n      onToggle: handleToggle,\n      isFocusTrapped: false,\n      preventOverflow: false\n    }, /*#__PURE__*/React.createElement(Ul, {\n      listHeight: listHeight,\n      listOverflow: listOverflow,\n      role: \"group\",\n      id: listId,\n      listWidth: listWidth,\n      isInnerUl: true\n    }, item.items.map(function (innerItem, innerIndex) {\n      return /*#__PURE__*/React.createElement(DropdownInner, {\n        key: \"\".concat(innerIndex, \"/\").concat(currentLevel),\n        item: innerItem,\n        currentLevel: nextLevel,\n        focusedPath: focusedPath,\n        path: path,\n        dispatchPath: dispatchPath,\n        index: innerIndex,\n        trigger: trigger,\n        itemRole: itemRole,\n        listHeight: listHeight,\n        listOverflow: listOverflow,\n        handleGlobalToggle: handleGlobalToggle,\n        closeOnSelect: closeOnSelect,\n        onHover: onHover,\n        onItemSelect: onItemSelect,\n        onItemClick: onItemClick,\n        listWidth: listWidth,\n        variant: variant,\n        hasArrow: hasArrow\n      });\n    })));\n  }\n  return /*#__PURE__*/React.createElement(DropdownItem, {\n    item: item,\n    index: index,\n    focusedPath: focusedPath,\n    currentLevel: currentLevel,\n    itemRole: itemRole,\n    handleGlobalToggle: handleGlobalToggle,\n    closeOnSelect: closeOnSelect,\n    onHover: onHover,\n    onItemSelect: onItemSelect,\n    onItemClick: onItemClick,\n    variant: variant\n  });\n};\nexport { DropdownInner };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _IconClose;\nvar _excluded = [\"children\", \"actions\", \"view\", \"className\", \"onClose\", \"hasClose\", \"closePlacement\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { cx } from '../../../../utils';\nimport { IconClose } from '../../../_Icon';\nimport { classes } from '../../Panel.tokens';\nimport { placements } from './PanelHeader.types';\nimport { StyledHeader, ButtonWrapper, CloseIconWrapper } from './PanelHeader.styles';\nimport { base as viewCSS } from './variations/_view/base';\nexport var panelHeaderRoot = function panelHeaderRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (_ref, outerRef) {\n    var children = _ref.children,\n      actions = _ref.actions,\n      view = _ref.view,\n      className = _ref.className,\n      onClose = _ref.onClose,\n      _ref$hasClose = _ref.hasClose,\n      hasClose = _ref$hasClose === void 0 ? 'true' : _ref$hasClose,\n      _ref$closePlacement = _ref.closePlacement,\n      closePlacement = _ref$closePlacement === void 0 ? 'right' : _ref$closePlacement,\n      rest = _objectWithoutProperties(_ref, _excluded);\n    var hasHeaderClass = children ? undefined : classes.hasHeader;\n    var isRightCloseClass = closePlacement === placements.right ? classes.isRightClose : undefined;\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      ref: outerRef,\n      view: view,\n      className: cx(className, hasHeaderClass, isRightCloseClass)\n    }, rest), children && /*#__PURE__*/React.createElement(StyledHeader, null, children), actions && /*#__PURE__*/React.createElement(ButtonWrapper, null, actions), hasClose && /*#__PURE__*/React.createElement(ButtonWrapper, {\n      placement: closePlacement\n    }, /*#__PURE__*/React.createElement(CloseIconWrapper, {\n      view: \"clear\",\n      size: \"s\",\n      onClick: onClose\n    }, _IconClose || (_IconClose = /*#__PURE__*/React.createElement(IconClose, {\n      size: \"s\",\n      color: \"inherit\"\n    })))));\n  });\n};\nexport var panelHeaderConfig = {\n  name: 'PanelHeader',\n  tag: 'div',\n  layout: panelHeaderRoot,\n  base: '',\n  variations: {\n    view: {\n      css: viewCSS\n    }\n  },\n  defaults: {\n    view: 'default'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { findTabbableDescendants } from './tabbable';\n\n/**\n *  Менеджер фокуса при открытии и закрытии нод при использовании focus-trap.\n *  Также необходим, чтобы фокус всегда должен находиться внутри необходимой ноды.\n * */\nexport var FocusManager = /*#__PURE__*/_createClass(function FocusManager() {\n  var _this = this;\n  _classCallCheck(this, FocusManager);\n  // массив с элементами, которые нужно зафокусить после анмаунта\n  _defineProperty(this, \"focusAfterElements\", []);\n  // массив с trap нодами\n  _defineProperty(this, \"focusNodes\", []);\n  _defineProperty(this, \"handleFocus\", function () {\n    // Фокус всегда должен находиться внутри необходимой ноды\n    var focusNode = _this.focusNodes[_this.focusNodes.length - 1];\n    if (!focusNode || focusNode.contains(document.activeElement)) {\n      return;\n    }\n\n    // Выделяем первый tabbable элемент\n    var el = findTabbableDescendants(focusNode)[0] || focusNode;\n    el.focus();\n  });\n  // добавление на фокус после анмаунта\n  _defineProperty(this, \"markForFocusAfter\", function (focusAfterNode) {\n    var node = focusAfterNode && focusAfterNode.current ? focusAfterNode.current : document.activeElement;\n    _this.focusAfterElements.push(node);\n  });\n  // фокус на необходимый элемент\n  _defineProperty(this, \"returnFocus\", function () {\n    var _this$focusAfterEleme;\n    var toFocus = (_this$focusAfterEleme = _this.focusAfterElements.pop()) !== null && _this$focusAfterEleme !== void 0 ? _this$focusAfterEleme : null;\n    if (toFocus) {\n      toFocus.focus();\n    }\n  });\n  // при маунте ноды\n  _defineProperty(this, \"setupScopedFocus\", function (element) {\n    _this.focusNodes.push(element);\n    document.addEventListener('focusin', _this.handleFocus, true);\n  });\n  // при анмаунте\n  _defineProperty(this, \"teardownScopedFocus\", function () {\n    _this.focusNodes.pop();\n    document.removeEventListener('focusin', _this.handleFocus);\n  });\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
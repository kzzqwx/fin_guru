{"ast":null,"code":"var _Indeterminate, _Done;\nvar _excluded = [\"size\", \"view\", \"focused\", \"disabled\", \"id\", \"label\", \"description\", \"indeterminate\", \"style\", \"className\", \"singleLine\", \"aria-label\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef, useEffect, useMemo, useRef } from 'react';\nimport { safeUseId, useForkRef, extractTextFrom } from '@salutejs/plasma-core';\nimport { cx } from '../../utils';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as disabledCSS } from './variations/_disabled/base';\nimport { base as focusedCSS } from './variations/_focused/base';\nimport { Done, Indeterminate } from './IconsSvg';\nimport { StyledContent, StyledContentWrapper, StyledDescription, StyledInput, StyledLabel, StyledTrigger, base } from './Checkbox.styles';\nimport { classes } from './Checkbox.tokens';\nexport var checkboxRoot = function checkboxRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    var size = props.size,\n      view = props.view,\n      focused = props.focused,\n      disabled = props.disabled,\n      id = props.id,\n      label = props.label,\n      description = props.description,\n      indeterminate = props.indeterminate,\n      style = props.style,\n      className = props.className,\n      _props$singleLine = props.singleLine,\n      singleLine = _props$singleLine === void 0 ? false : _props$singleLine,\n      ariaLabelExternal = props['aria-label'],\n      rest = _objectWithoutProperties(props, _excluded);\n    var inputRef = useRef(null);\n    var forkRef = useForkRef(inputRef, ref);\n    useEffect(function () {\n      if (inputRef.current) {\n        inputRef.current.indeterminate = Boolean(indeterminate);\n      }\n    }, [inputRef, indeterminate]);\n    var uniqId = safeUseId();\n    var uniqLabelId = \"label-\".concat(uniqId);\n    var uniqDescriptionId = \"description-\".concat(uniqId);\n    var checkboxId = id || \"input-\".concat(uniqId);\n    var ariaLabel = useMemo(function () {\n      return ariaLabelExternal || extractTextFrom(label);\n    }, [ariaLabelExternal, label]);\n    var isLabelAriaHidden = typeof label === 'string';\n    var canFocused = focused ? 0 : -1;\n    var hasContent = label || description;\n    var singleLineClass = singleLine ? classes.singleLine : undefined;\n    var onlyDescriptionClass = !label && description ? classes.onlyDescription : undefined;\n    return /*#__PURE__*/React.createElement(Root, {\n      view: view,\n      size: size,\n      disabled: disabled,\n      focused: focused,\n      style: style,\n      className: className,\n      tabIndex: -1\n    }, /*#__PURE__*/React.createElement(StyledInput, _extends({}, rest, {\n      id: checkboxId,\n      ref: forkRef,\n      type: \"checkbox\",\n      disabled: disabled,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": uniqDescriptionId,\n      tabIndex: canFocused\n    })), /*#__PURE__*/React.createElement(StyledContentWrapper, {\n      htmlFor: checkboxId\n    }, /*#__PURE__*/React.createElement(StyledTrigger, {\n      className: classes.checkboxTrigger\n    }, indeterminate ? _Indeterminate || (_Indeterminate = /*#__PURE__*/React.createElement(Indeterminate, null)) : _Done || (_Done = /*#__PURE__*/React.createElement(Done, null))), hasContent && /*#__PURE__*/React.createElement(StyledContent, {\n      className: singleLineClass\n    }, label && /*#__PURE__*/React.createElement(StyledLabel, {\n      className: singleLineClass,\n      id: uniqLabelId,\n      \"aria-hidden\": isLabelAriaHidden\n    }, label), description && /*#__PURE__*/React.createElement(StyledDescription, {\n      className: cx(singleLineClass, onlyDescriptionClass),\n      id: uniqDescriptionId\n    }, description))));\n  });\n};\nexport var checkboxConfig = {\n  name: 'Checkbox',\n  tag: 'div',\n  layout: checkboxRoot,\n  base: base,\n  variations: {\n    size: {\n      css: sizeCSS\n    },\n    view: {\n      css: viewCSS\n    },\n    disabled: {\n      css: disabledCSS\n    },\n    focused: {\n      css: focusedCSS\n    }\n  },\n  defaults: {\n    size: 'm',\n    view: 'accent'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
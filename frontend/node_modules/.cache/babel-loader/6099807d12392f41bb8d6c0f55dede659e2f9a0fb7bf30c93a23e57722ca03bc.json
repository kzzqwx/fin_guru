{"ast":null,"code":"var _excluded = [\"withBlur\", \"className\", \"backgroundColorProperty\", \"onOverlayClick\", \"zIndex\", \"transparent\", \"isClickable\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback } from 'react';\nimport { StyledOverlay } from './Overlay.styles';\n\n/**\n * Overlay - подложка для всплывающих компонент (Modal, Toast и т.д.).\n */\nexport var Overlay = function Overlay(_ref) {\n  var withBlur = _ref.withBlur,\n    className = _ref.className,\n    backgroundColorProperty = _ref.backgroundColorProperty,\n    onOverlayClick = _ref.onOverlayClick,\n    zIndex = _ref.zIndex,\n    transparent = _ref.transparent,\n    _ref$isClickable = _ref.isClickable,\n    isClickable = _ref$isClickable === void 0 ? true : _ref$isClickable,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var handleOverlayClick = useCallback(function (event) {\n    if (!isClickable) {\n      return;\n    }\n    onOverlayClick === null || onOverlayClick === void 0 || onOverlayClick(event);\n  }, [isClickable, onOverlayClick]);\n  return /*#__PURE__*/React.createElement(StyledOverlay, _extends({\n    className: className,\n    backgroundColorToken: backgroundColorProperty,\n    transparent: transparent,\n    clickable: isClickable,\n    onClick: handleOverlayClick,\n    zIndex: zIndex,\n    withBlur: withBlur\n  }, rest));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
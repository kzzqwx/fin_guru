{"ast":null,"code":"var _excluded = [\"children\", \"className\", \"text\", \"contentLeft\", \"contentRight\", \"size\", \"view\", \"pilled\", \"transparent\"];\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { forwardRef } from 'react';\nimport { cx } from '../../utils';\nimport { base as viewCSS } from './variations/_view/base';\nimport { base as sizeCSS } from './variations/_size/base';\nimport { base as pilledCSS } from './variations/_pilled/base';\nimport { base as transparentCSS } from './variations/_transparent/base';\nimport { StyledContentLeft, StyledContentMain, StyledContentRight, base } from './Badge.styles';\nimport { classes } from './Badge.tokens';\nexport var badgeRoot = function badgeRoot(Root) {\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    var children = props.children,\n      className = props.className,\n      text = props.text,\n      contentLeft = props.contentLeft,\n      contentRight = props.contentRight,\n      size = props.size,\n      view = props.view,\n      _props$pilled = props.pilled,\n      pilled = _props$pilled === void 0 ? false : _props$pilled,\n      _props$transparent = props.transparent,\n      transparent = _props$transparent === void 0 ? false : _props$transparent,\n      rest = _objectWithoutProperties(props, _excluded);\n    var pilledClass = pilled ? classes.badgePilled : undefined;\n    var transparentClass = transparent ? classes.badgeTransparent : undefined;\n    var txt = !text && typeof children === 'string' ? children : text;\n    return /*#__PURE__*/React.createElement(Root, _extends({\n      ref: ref,\n      className: cx(pilledClass, transparentClass, className),\n      view: view,\n      size: size,\n      pilled: pilled,\n      transparent: transparent\n    }, rest), contentLeft && /*#__PURE__*/React.createElement(StyledContentLeft, null, contentLeft), txt ? /*#__PURE__*/React.createElement(StyledContentMain, null, txt) : children, contentRight && /*#__PURE__*/React.createElement(StyledContentRight, null, contentRight));\n  });\n};\nexport var badgeConfig = {\n  name: 'Badge',\n  tag: 'div',\n  layout: badgeRoot,\n  base: base,\n  variations: {\n    view: {\n      css: viewCSS\n    },\n    size: {\n      css: sizeCSS\n    },\n    pilled: {\n      css: pilledCSS,\n      attrs: true\n    },\n    transparent: {\n      css: transparentCSS,\n      attrs: true\n    }\n  },\n  defaults: {\n    view: 'primary',\n    size: 'm'\n  }\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
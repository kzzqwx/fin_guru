{"ast":null,"code":"var _excluded = [\"textComponent\", \"value\", \"icon\", \"maxLength\", \"spellCheck\", \"onChange\", \"onBlur\", \"onPaste\", \"placeholder\"];\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\nimport { tertiary, text, background } from '@salutejs/plasma-core';\nimport { selectText, clearSelection } from '../../utils';\nimport { collectPackageInfo } from '../../collectPackageInfo';\ncollectPackageInfo('Editable/Editable');\nvar KeyCodes = /*#__PURE__*/function (KeyCodes) {\n  KeyCodes[KeyCodes[\"ENTER\"] = 13] = \"ENTER\";\n  KeyCodes[KeyCodes[\"ESCAPE\"] = 27] = \"ESCAPE\";\n  return KeyCodes;\n}(KeyCodes || {});\nvar EditButton = /*#__PURE__*/styled.span.withConfig({\n  componentId: \"plasma-web-core__sc-dgyiy9-0\"\n})([\"position:relative;background:var( --plasma-editable-icon-background,linear-gradient(270deg,\", \" 70%,rgba(0,0,0,0) 120%) );padding-left:1rem;color:\", \";align-self:stretch;\", \"\"], background, tertiary, function (_ref) {\n  var $isHidden = _ref.$isHidden;\n  return $isHidden ? 'display: none;' : '';\n});\nvar StyledContainer = /*#__PURE__*/styled.span.withConfig({\n  componentId: \"plasma-web-core__sc-dgyiy9-1\"\n})([\"display:flex;align-items:center;max-width:100%;cursor:pointer;&:hover > \", \"{color:\", \";}\"], EditButton, text);\nvar extraComponentStyles = {\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  marginRight: '-1rem',\n  paddingRight: '1rem',\n  outline: 'none',\n  caretColor: 'var(--plasma-colors-accent)'\n};\n/**\n * Компонент, добавляющий возможность редактирования к текстовому компоненту\n *\n * Для указания альтернативного фона у иконки справа от текста\n * можно указать css переменную --plasma-editable-icon-background в контейнере элемента\n *\n */\nexport var Editable = function Editable(_ref2) {\n  var textComponent = _ref2.textComponent,\n    value = _ref2.value,\n    icon = _ref2.icon,\n    maxLength = _ref2.maxLength,\n    _ref2$spellCheck = _ref2.spellCheck,\n    spellCheck = _ref2$spellCheck === void 0 ? 'false' : _ref2$spellCheck,\n    onChange = _ref2.onChange,\n    onBlur = _ref2.onBlur,\n    onPaste = _ref2.onPaste,\n    placeholder = _ref2.placeholder,\n    props = _objectWithoutProperties(_ref2, _excluded);\n  var Component = textComponent;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEditing = _useState2[0],\n    setIsEditing = _useState2[1];\n  var inputRef = useRef(null);\n  var prevValueRef = useRef(value || '');\n  var handlePaste = useCallback(function (e) {\n    if (!inputRef.current) {\n      return;\n    }\n    e.preventDefault();\n    var text = e.clipboardData.getData('text/plain').replace(/[\\n\\r]/gi, '');\n    if (document.queryCommandSupported('insertText')) {\n      document.execCommand('insertText', false, text);\n    } else {\n      try {\n        navigator.clipboard.writeText(text);\n      } catch (_unused) {\n        inputRef.current.textContent = text;\n      }\n    }\n    if (onPaste) {\n      onPaste(e);\n    }\n  }, [onPaste]);\n  var handleBlur = useCallback(function (e) {\n    setIsEditing(false);\n    clearSelection();\n    if (onBlur) {\n      onBlur(e);\n    }\n  }, [onBlur]);\n  var handleFocus = useCallback(function () {\n    setIsEditing(true);\n    inputRef.current && selectText(inputRef.current);\n  }, []);\n  var handleEditClick = useCallback(function () {\n    var _inputRef$current;\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();\n  }, []);\n  var handleKeyDown = useCallback(function (e) {\n    if ([KeyCodes.ENTER, KeyCodes.ESCAPE].includes(e.keyCode)) {\n      var _inputRef$current2;\n      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 || _inputRef$current2.blur();\n    }\n  }, []);\n  var handleChange = useCallback(function (e) {\n    var _inputRef$current$tex;\n    if (!inputRef.current) {\n      return;\n    }\n    var contentLength = ((_inputRef$current$tex = inputRef.current.textContent) === null || _inputRef$current$tex === void 0 ? void 0 : _inputRef$current$tex.length) || 0;\n    if (!maxLength || contentLength <= maxLength) {\n      prevValueRef.current = inputRef.current.textContent || '';\n      onChange && onChange(e);\n    } else {\n      inputRef.current.textContent = prevValueRef.current;\n    }\n  }, [maxLength, onChange]);\n  useEffect(function () {\n    if (!inputRef.current) {\n      return;\n    }\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if (value === inputRef.current.textContent) {\n      return;\n    }\n    inputRef.current.textContent = value;\n  }, [value, textComponent]);\n  return /*#__PURE__*/React.createElement(StyledContainer, props, /*#__PURE__*/React.createElement(Component, {\n    ref: inputRef,\n    style: extraComponentStyles,\n    role: \"textbox\",\n    spellCheck: spellCheck,\n    contentEditable: true,\n    onPaste: handlePaste,\n    onInput: handleChange,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    onKeyDown: handleKeyDown,\n    \"aria-label\": placeholder\n  }), /*#__PURE__*/React.createElement(EditButton, {\n    onClick: handleEditClick,\n    $isHidden: isEditing\n  }, icon));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}